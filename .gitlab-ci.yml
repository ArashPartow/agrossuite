variables:
  GIT_SUBMODULE_STRATEGY: recursive
  GIT_STRATEGY: fetch
  # GIT_CLEAN_FLAGS: -ffdx -e dealii/build
  GIT_CLEAN_FLAGS: none

build-linux:
  stage: build
  tags:
    - agros
    - linux
  
  # Use ccache transparently, and print stats before/after
  before_script:
    - export PATH="/usr/lib/ccache:$PATH"
    - export CCACHE_BASEDIR="$PWD"
    - export CCACHE_DIR="$PWD/ccache"
    - export CCACHE_COMPILERCHECK=content
    - ccache --zero-stats || true
    - ccache --show-stats || true
  after_script:
    - export CCACHE_DIR="$PWD/ccache"
    - ccache --show-stats  
  script: 
    - git submodule update --init 
    - cd dealii 
    - mkdir -p build 
    - cd build 
    - cmake -DCMAKE_BUILD_TYPE="Release" -DDEAL_II_WITH_ZLIB="ON" -DDEAL_II_WITH_UMFPACK="OFF" -DDEAL_II_FORCE_BUNDLED_BOOST="ON" -DDEAL_II_WITH_TBB="ON" -DDEAL_II_WITH_GMSH="OFF" -DDEAL_II_WITH_MUPARSER="OFF" -DDEAL_II_WITH_ARPACK="OFF" -DDEAL_II_COMPONENT_EXAMPLES="OFF" ..
    - make -j12
    - cd ../../
    # copy deal
    - cp -f dealii/build/lib/libdeal_II.so.9.5.2 libs/libdeal_II.so.9.5.2
    # - export CC=/usr/bin/clang
    # - export CXX=/usr/bin/clang++     
    - cmake . 
    - make -j12    
    # generator
    - ./agros_generator
    - cd plugins
    - cmake .
    - make -j12
    - cd ..
    # pip package
    # create python env
    - cd agros-python 
    - python3 -m venv env
    - source env/bin/activate
    - pip install cython
    - pip install scikit-build
    - pip install pytest
    - pip install numpy
    - pip install agrossuite/. 
    
test-linux:
  stage: test
  tags:
    - agros
    - linux

  script: 
    - cd agros-python
    - source env/bin/activate    
    - cd tests
    - pytest --junitxml=../../report.xml --disable-warnings --durations=0 -v
    - cd ../..
  artifacts:
    when: always
    reports:
      junit: report.xml
    
deploy-linux:
  stage: deploy
  tags:
    - agros
    - linux

  script: 
    # rm files
    - rm -rf appimage 

    # create dirs
    - mkdir appimage
    - mkdir appimage/usr
    - mkdir appimage/usr/bin
    - mkdir appimage/usr/lib
    - mkdir appimage/usr/share
    - mkdir appimage/usr/share/agrossuite

    # copy binary files
    - cp agros appimage/usr/bin/
    - cp -r resources appimage/usr/share/agrossuite/resources/
    - cp libs/libagros_plugin_*.so appimage/usr/lib/

    # copy resources
    - cp -r resources_source/appimage/* appimage

    # strip
    - strip appimage/usr/bin/*
    - strip appimage/usr/lib/*

    # qt 
    - export QMAKE=/usr/bin/qmake6 
    - linuxdeploy-x86_64.AppImage --appdir appimage/ --executable agros --plugin qt --desktop-file resources_source/appimage/usr/share/applications/agros.desktop

    # rm metainfo
    - rm -rf appimage/usr/share/metainfo

    # build appimage
    - appimagetool-x86_64.AppImage  appimage/
    
    # upload to agros2d
    - echo user
    - echo $export agros2d_ftp_user
    - echo password
    - echo $agros2d_ftp_password
    - curl -T Agros_Suite-x86_64.AppImage -u "$export agros2d_ftp_user:$agros2d_ftp_password" ftp://agros2d.org/linux/
      
# build-windows:
#   stage: build
#   tags:
#    - agros-windows
#
#  before_script:
#    - dir    
#  after_script:
#    - dir
#    script:
#    - dir   
