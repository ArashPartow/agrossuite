// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

#ifndef CXX_HOME_KARBAN_PROJECTS_AGROS2D_DEALII_RESOURCES_XSD_MODULE_XML_H
#define CXX_HOME_KARBAN_PROJECTS_AGROS2D_DEALII_RESOURCES_XSD_MODULE_XML_H

#ifndef XSD_CXX11
#define XSD_CXX11
#endif

#ifndef XSD_USE_CHAR
#define XSD_USE_CHAR
#endif

#ifndef XSD_CXX_TREE_USE_CHAR
#define XSD_CXX_TREE_USE_CHAR
#endif

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/config.hxx>

#if (XSD_INT_VERSION != 4000000L)
#error XSD runtime version mismatch
#endif

#include <xsd/cxx/pre.hxx>

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/types.hxx>

#include <xsd/cxx/xml/error-handler.hxx>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

#include <xsd/cxx/tree/parsing.hxx>
#include <xsd/cxx/tree/parsing/byte.hxx>
#include <xsd/cxx/tree/parsing/unsigned-byte.hxx>
#include <xsd/cxx/tree/parsing/short.hxx>
#include <xsd/cxx/tree/parsing/unsigned-short.hxx>
#include <xsd/cxx/tree/parsing/int.hxx>
#include <xsd/cxx/tree/parsing/unsigned-int.hxx>
#include <xsd/cxx/tree/parsing/long.hxx>
#include <xsd/cxx/tree/parsing/unsigned-long.hxx>
#include <xsd/cxx/tree/parsing/boolean.hxx>
#include <xsd/cxx/tree/parsing/float.hxx>
#include <xsd/cxx/tree/parsing/double.hxx>
#include <xsd/cxx/tree/parsing/decimal.hxx>

#include <xsd/cxx/xml/dom/serialization-header.hxx>
#include <xsd/cxx/tree/serialization.hxx>
#include <xsd/cxx/tree/serialization/byte.hxx>
#include <xsd/cxx/tree/serialization/unsigned-byte.hxx>
#include <xsd/cxx/tree/serialization/short.hxx>
#include <xsd/cxx/tree/serialization/unsigned-short.hxx>
#include <xsd/cxx/tree/serialization/int.hxx>
#include <xsd/cxx/tree/serialization/unsigned-int.hxx>
#include <xsd/cxx/tree/serialization/long.hxx>
#include <xsd/cxx/tree/serialization/unsigned-long.hxx>
#include <xsd/cxx/tree/serialization/boolean.hxx>
#include <xsd/cxx/tree/serialization/float.hxx>
#include <xsd/cxx/tree/serialization/double.hxx>
#include <xsd/cxx/tree/serialization/decimal.hxx>

#include <xsd/cxx/tree/std-ostream-operators.hxx>

namespace xml_schema
{
  // anyType and anySimpleType.
  //
  typedef ::xsd::cxx::tree::type type;
  typedef ::xsd::cxx::tree::simple_type< char, type > simple_type;
  typedef ::xsd::cxx::tree::type container;

  // 8-bit
  //
  typedef signed char byte;
  typedef unsigned char unsigned_byte;

  // 16-bit
  //
  typedef short short_;
  typedef unsigned short unsigned_short;

  // 32-bit
  //
  typedef int int_;
  typedef unsigned int unsigned_int;

  // 64-bit
  //
  typedef long long long_;
  typedef unsigned long long unsigned_long;

  // Supposed to be arbitrary-length integral types.
  //
  typedef long long integer;
  typedef long long non_positive_integer;
  typedef unsigned long long non_negative_integer;
  typedef unsigned long long positive_integer;
  typedef long long negative_integer;

  // Boolean.
  //
  typedef bool boolean;

  // Floating-point types.
  //
  typedef float float_;
  typedef double double_;
  typedef double decimal;

  // String types.
  //
  typedef ::xsd::cxx::tree::string< char, simple_type > string;
  typedef ::xsd::cxx::tree::normalized_string< char, string > normalized_string;
  typedef ::xsd::cxx::tree::token< char, normalized_string > token;
  typedef ::xsd::cxx::tree::name< char, token > name;
  typedef ::xsd::cxx::tree::nmtoken< char, token > nmtoken;
  typedef ::xsd::cxx::tree::nmtokens< char, simple_type, nmtoken > nmtokens;
  typedef ::xsd::cxx::tree::ncname< char, name > ncname;
  typedef ::xsd::cxx::tree::language< char, token > language;

  // ID/IDREF.
  //
  typedef ::xsd::cxx::tree::id< char, ncname > id;
  typedef ::xsd::cxx::tree::idref< char, ncname, type > idref;
  typedef ::xsd::cxx::tree::idrefs< char, simple_type, idref > idrefs;

  // URI.
  //
  typedef ::xsd::cxx::tree::uri< char, simple_type > uri;

  // Qualified name.
  //
  typedef ::xsd::cxx::tree::qname< char, simple_type, uri, ncname > qname;

  // Binary.
  //
  typedef ::xsd::cxx::tree::buffer< char > buffer;
  typedef ::xsd::cxx::tree::base64_binary< char, simple_type > base64_binary;
  typedef ::xsd::cxx::tree::hex_binary< char, simple_type > hex_binary;

  // Date/time.
  //
  typedef ::xsd::cxx::tree::time_zone time_zone;
  typedef ::xsd::cxx::tree::date< char, simple_type > date;
  typedef ::xsd::cxx::tree::date_time< char, simple_type > date_time;
  typedef ::xsd::cxx::tree::duration< char, simple_type > duration;
  typedef ::xsd::cxx::tree::gday< char, simple_type > gday;
  typedef ::xsd::cxx::tree::gmonth< char, simple_type > gmonth;
  typedef ::xsd::cxx::tree::gmonth_day< char, simple_type > gmonth_day;
  typedef ::xsd::cxx::tree::gyear< char, simple_type > gyear;
  typedef ::xsd::cxx::tree::gyear_month< char, simple_type > gyear_month;
  typedef ::xsd::cxx::tree::time< char, simple_type > time;

  // Entity.
  //
  typedef ::xsd::cxx::tree::entity< char, ncname > entity;
  typedef ::xsd::cxx::tree::entities< char, simple_type, entity > entities;

  typedef ::xsd::cxx::tree::content_order content_order;
  // Namespace information and list stream. Used in
  // serialization functions.
  //
  typedef ::xsd::cxx::xml::dom::namespace_info< char > namespace_info;
  typedef ::xsd::cxx::xml::dom::namespace_infomap< char > namespace_infomap;
  typedef ::xsd::cxx::tree::list_stream< char > list_stream;
  typedef ::xsd::cxx::tree::as_double< double_ > as_double;
  typedef ::xsd::cxx::tree::as_decimal< decimal > as_decimal;
  typedef ::xsd::cxx::tree::facet facet;

  // Flags and properties.
  //
  typedef ::xsd::cxx::tree::flags flags;
  typedef ::xsd::cxx::tree::properties< char > properties;

  // Parsing/serialization diagnostics.
  //
  typedef ::xsd::cxx::tree::severity severity;
  typedef ::xsd::cxx::tree::error< char > error;
  typedef ::xsd::cxx::tree::diagnostics< char > diagnostics;

  // Exceptions.
  //
  typedef ::xsd::cxx::tree::exception< char > exception;
  typedef ::xsd::cxx::tree::bounds< char > bounds;
  typedef ::xsd::cxx::tree::duplicate_id< char > duplicate_id;
  typedef ::xsd::cxx::tree::parsing< char > parsing;
  typedef ::xsd::cxx::tree::expected_element< char > expected_element;
  typedef ::xsd::cxx::tree::unexpected_element< char > unexpected_element;
  typedef ::xsd::cxx::tree::expected_attribute< char > expected_attribute;
  typedef ::xsd::cxx::tree::unexpected_enumerator< char > unexpected_enumerator;
  typedef ::xsd::cxx::tree::expected_text_content< char > expected_text_content;
  typedef ::xsd::cxx::tree::no_prefix_mapping< char > no_prefix_mapping;
  typedef ::xsd::cxx::tree::no_type_info< char > no_type_info;
  typedef ::xsd::cxx::tree::not_derived< char > not_derived;
  typedef ::xsd::cxx::tree::serialization< char > serialization;

  // Error handler callback interface.
  //
  typedef ::xsd::cxx::xml::error_handler< char > error_handler;

  // DOM interaction.
  //
  namespace dom
  {
    // Automatic pointer for DOMDocument.
    //
    using ::xsd::cxx::xml::dom::unique_ptr;

#ifndef XSD_CXX_TREE_TREE_NODE_KEY__XML_SCHEMA
#define XSD_CXX_TREE_TREE_NODE_KEY__XML_SCHEMA
    // DOM user data key for back pointers to tree nodes.
    //
    const XMLCh* const tree_node_key = ::xsd::cxx::tree::user_data_keys::node;
#endif
  }
}

// Forward declarations.
//
namespace XMLModule
{
  class module;
  class field;
  class general_field;
  class analyses;
  class analysis;
  class field_config;
  class coupling;
  class general_coupling;
  class modules;
  class source;
  class target;
  class constants;
  class constant;
  class macros;
  class macro;
  class spaces;
  class space;
  class space_config;
  class preprocessor;
  class gui;
  class group;
  class switch_combo;
  class switch_option;
  class postprocessor;
  class localvariables;
  class localvariable;
  class view;
  class scalar_view;
  class vector_view;
  class default_;
  class volumeintegrals;
  class volumeintegral;
  class surfaceintegrals;
  class surfaceintegral;
  class force;
  class volume;
  class surface;
  class boundary;
  class weakforms_surface;
  class weakform_surface;
  class weakforms_volume;
  class weakform_volume;
  class linearity_option;
  class matrix_form;
  class vector_form;
  class matrix_transient_form;
  class essential_form;
  class quantity;
  class function;
  class function_variant;
  class function_use;
  class error_calculator;
  class calculator;
  class expression;
  class field_item;
}


#include <memory>    // ::std::unique_ptr
#include <limits>    // std::numeric_limits
#include <algorithm> // std::binary_search
#include <utility>   // std::move

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/containers.hxx>
#include <xsd/cxx/tree/list.hxx>

#include <xsd/cxx/xml/dom/parsing-header.hxx>

namespace XMLModule
{
  class module: public ::xml_schema::type
  {
    public:
    // field
    //
    typedef ::XMLModule::field field_type;
    typedef ::xsd::cxx::tree::optional< field_type > field_optional;
    typedef ::xsd::cxx::tree::traits< field_type, char > field_traits;

    const field_optional&
    field () const;

    field_optional&
    field ();

    void
    field (const field_type& x);

    void
    field (const field_optional& x);

    void
    field (::std::unique_ptr< field_type > p);

    // coupling
    //
    typedef ::XMLModule::coupling coupling_type;
    typedef ::xsd::cxx::tree::optional< coupling_type > coupling_optional;
    typedef ::xsd::cxx::tree::traits< coupling_type, char > coupling_traits;

    const coupling_optional&
    coupling () const;

    coupling_optional&
    coupling ();

    void
    coupling (const coupling_type& x);

    void
    coupling (const coupling_optional& x);

    void
    coupling (::std::unique_ptr< coupling_type > p);

    // Constructors.
    //
    module ();

    module (const ::xercesc::DOMElement& e,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

    module (const module& x,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

    virtual module*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    module&
    operator= (const module& x);

    virtual 
    ~module ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    field_optional field_;
    coupling_optional coupling_;
  };

  class field: public ::xml_schema::type
  {
    public:
    // general_field
    //
    typedef ::XMLModule::general_field general_field_type;
    typedef ::xsd::cxx::tree::traits< general_field_type, char > general_field_traits;

    const general_field_type&
    general_field () const;

    general_field_type&
    general_field ();

    void
    general_field (const general_field_type& x);

    void
    general_field (::std::unique_ptr< general_field_type > p);

    // constants
    //
    typedef ::XMLModule::constants constants_type;
    typedef ::xsd::cxx::tree::traits< constants_type, char > constants_traits;

    const constants_type&
    constants () const;

    constants_type&
    constants ();

    void
    constants (const constants_type& x);

    void
    constants (::std::unique_ptr< constants_type > p);

    // macros
    //
    typedef ::XMLModule::macros macros_type;
    typedef ::xsd::cxx::tree::optional< macros_type > macros_optional;
    typedef ::xsd::cxx::tree::traits< macros_type, char > macros_traits;

    const macros_optional&
    macros () const;

    macros_optional&
    macros ();

    void
    macros (const macros_type& x);

    void
    macros (const macros_optional& x);

    void
    macros (::std::unique_ptr< macros_type > p);

    // spaces
    //
    typedef ::XMLModule::spaces spaces_type;
    typedef ::xsd::cxx::tree::traits< spaces_type, char > spaces_traits;

    const spaces_type&
    spaces () const;

    spaces_type&
    spaces ();

    void
    spaces (const spaces_type& x);

    void
    spaces (::std::unique_ptr< spaces_type > p);

    // volume
    //
    typedef ::XMLModule::volume volume_type;
    typedef ::xsd::cxx::tree::traits< volume_type, char > volume_traits;

    const volume_type&
    volume () const;

    volume_type&
    volume ();

    void
    volume (const volume_type& x);

    void
    volume (::std::unique_ptr< volume_type > p);

    // surface
    //
    typedef ::XMLModule::surface surface_type;
    typedef ::xsd::cxx::tree::traits< surface_type, char > surface_traits;

    const surface_type&
    surface () const;

    surface_type&
    surface ();

    void
    surface (const surface_type& x);

    void
    surface (::std::unique_ptr< surface_type > p);

    // error_calculator
    //
    typedef ::XMLModule::error_calculator error_calculator_type;
    typedef ::xsd::cxx::tree::traits< error_calculator_type, char > error_calculator_traits;

    const error_calculator_type&
    error_calculator () const;

    error_calculator_type&
    error_calculator ();

    void
    error_calculator (const error_calculator_type& x);

    void
    error_calculator (::std::unique_ptr< error_calculator_type > p);

    // preprocessor
    //
    typedef ::XMLModule::preprocessor preprocessor_type;
    typedef ::xsd::cxx::tree::traits< preprocessor_type, char > preprocessor_traits;

    const preprocessor_type&
    preprocessor () const;

    preprocessor_type&
    preprocessor ();

    void
    preprocessor (const preprocessor_type& x);

    void
    preprocessor (::std::unique_ptr< preprocessor_type > p);

    // postprocessor
    //
    typedef ::XMLModule::postprocessor postprocessor_type;
    typedef ::xsd::cxx::tree::traits< postprocessor_type, char > postprocessor_traits;

    const postprocessor_type&
    postprocessor () const;

    postprocessor_type&
    postprocessor ();

    void
    postprocessor (const postprocessor_type& x);

    void
    postprocessor (::std::unique_ptr< postprocessor_type > p);

    // Constructors.
    //
    field (const general_field_type&,
           const constants_type&,
           const spaces_type&,
           const volume_type&,
           const surface_type&,
           const error_calculator_type&,
           const preprocessor_type&,
           const postprocessor_type&);

    field (::std::unique_ptr< general_field_type >,
           ::std::unique_ptr< constants_type >,
           ::std::unique_ptr< spaces_type >,
           ::std::unique_ptr< volume_type >,
           ::std::unique_ptr< surface_type >,
           ::std::unique_ptr< error_calculator_type >,
           ::std::unique_ptr< preprocessor_type >,
           ::std::unique_ptr< postprocessor_type >);

    field (const ::xercesc::DOMElement& e,
           ::xml_schema::flags f = 0,
           ::xml_schema::container* c = 0);

    field (const field& x,
           ::xml_schema::flags f = 0,
           ::xml_schema::container* c = 0);

    virtual field*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    field&
    operator= (const field& x);

    virtual 
    ~field ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xsd::cxx::tree::one< general_field_type > general_field_;
    ::xsd::cxx::tree::one< constants_type > constants_;
    macros_optional macros_;
    ::xsd::cxx::tree::one< spaces_type > spaces_;
    ::xsd::cxx::tree::one< volume_type > volume_;
    ::xsd::cxx::tree::one< surface_type > surface_;
    ::xsd::cxx::tree::one< error_calculator_type > error_calculator_;
    ::xsd::cxx::tree::one< preprocessor_type > preprocessor_;
    ::xsd::cxx::tree::one< postprocessor_type > postprocessor_;
  };

  class general_field: public ::xml_schema::type
  {
    public:
    // description
    //
    typedef ::xml_schema::string description_type;
    typedef ::xsd::cxx::tree::traits< description_type, char > description_traits;

    const description_type&
    description () const;

    description_type&
    description ();

    void
    description (const description_type& x);

    void
    description (::std::unique_ptr< description_type > p);

    // analyses
    //
    typedef ::XMLModule::analyses analyses_type;
    typedef ::xsd::cxx::tree::traits< analyses_type, char > analyses_traits;

    const analyses_type&
    analyses () const;

    analyses_type&
    analyses ();

    void
    analyses (const analyses_type& x);

    void
    analyses (::std::unique_ptr< analyses_type > p);

    // deformed_shape
    //
    typedef ::xml_schema::integer deformed_shape_type;
    typedef ::xsd::cxx::tree::optional< deformed_shape_type > deformed_shape_optional;
    typedef ::xsd::cxx::tree::traits< deformed_shape_type, char > deformed_shape_traits;

    const deformed_shape_optional&
    deformed_shape () const;

    deformed_shape_optional&
    deformed_shape ();

    void
    deformed_shape (const deformed_shape_type& x);

    void
    deformed_shape (const deformed_shape_optional& x);

    // id
    //
    typedef ::xml_schema::string id_type;
    typedef ::xsd::cxx::tree::traits< id_type, char > id_traits;

    const id_type&
    id () const;

    id_type&
    id ();

    void
    id (const id_type& x);

    void
    id (::std::unique_ptr< id_type > p);

    // name
    //
    typedef ::xml_schema::string name_type;
    typedef ::xsd::cxx::tree::traits< name_type, char > name_traits;

    const name_type&
    name () const;

    name_type&
    name ();

    void
    name (const name_type& x);

    void
    name (::std::unique_ptr< name_type > p);

    // Constructors.
    //
    general_field (const description_type&,
                   const analyses_type&,
                   const id_type&,
                   const name_type&);

    general_field (const description_type&,
                   ::std::unique_ptr< analyses_type >,
                   const id_type&,
                   const name_type&);

    general_field (const ::xercesc::DOMElement& e,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

    general_field (const general_field& x,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

    virtual general_field*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    general_field&
    operator= (const general_field& x);

    virtual 
    ~general_field ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xsd::cxx::tree::one< description_type > description_;
    ::xsd::cxx::tree::one< analyses_type > analyses_;
    deformed_shape_optional deformed_shape_;
    ::xsd::cxx::tree::one< id_type > id_;
    ::xsd::cxx::tree::one< name_type > name_;
  };

  class analyses: public ::xml_schema::type
  {
    public:
    // analysis
    //
    typedef ::XMLModule::analysis analysis_type;
    typedef ::xsd::cxx::tree::sequence< analysis_type > analysis_sequence;
    typedef analysis_sequence::iterator analysis_iterator;
    typedef analysis_sequence::const_iterator analysis_const_iterator;
    typedef ::xsd::cxx::tree::traits< analysis_type, char > analysis_traits;

    const analysis_sequence&
    analysis () const;

    analysis_sequence&
    analysis ();

    void
    analysis (const analysis_sequence& s);

    // Constructors.
    //
    analyses ();

    analyses (const ::xercesc::DOMElement& e,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

    analyses (const analyses& x,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

    virtual analyses*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    analyses&
    operator= (const analyses& x);

    virtual 
    ~analyses ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    analysis_sequence analysis_;
  };

  class analysis: public ::xml_schema::type
  {
    public:
    // field_config
    //
    typedef ::XMLModule::field_config field_config_type;
    typedef ::xsd::cxx::tree::optional< field_config_type > field_config_optional;
    typedef ::xsd::cxx::tree::traits< field_config_type, char > field_config_traits;

    const field_config_optional&
    field_config () const;

    field_config_optional&
    field_config ();

    void
    field_config (const field_config_type& x);

    void
    field_config (const field_config_optional& x);

    void
    field_config (::std::unique_ptr< field_config_type > p);

    // id
    //
    typedef ::xml_schema::string id_type;
    typedef ::xsd::cxx::tree::traits< id_type, char > id_traits;

    const id_type&
    id () const;

    id_type&
    id ();

    void
    id (const id_type& x);

    void
    id (::std::unique_ptr< id_type > p);

    // name
    //
    typedef ::xml_schema::string name_type;
    typedef ::xsd::cxx::tree::traits< name_type, char > name_traits;

    const name_type&
    name () const;

    name_type&
    name ();

    void
    name (const name_type& x);

    void
    name (::std::unique_ptr< name_type > p);

    // solutions
    //
    typedef ::xml_schema::integer solutions_type;
    typedef ::xsd::cxx::tree::traits< solutions_type, char > solutions_traits;

    const solutions_type&
    solutions () const;

    solutions_type&
    solutions ();

    void
    solutions (const solutions_type& x);

    // type
    //
    typedef ::xml_schema::string type_type;
    typedef ::xsd::cxx::tree::traits< type_type, char > type_traits;

    const type_type&
    type () const;

    type_type&
    type ();

    void
    type (const type_type& x);

    void
    type (::std::unique_ptr< type_type > p);

    // Constructors.
    //
    analysis (const id_type&,
              const name_type&,
              const solutions_type&,
              const type_type&);

    analysis (const ::xercesc::DOMElement& e,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

    analysis (const analysis& x,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

    virtual analysis*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    analysis&
    operator= (const analysis& x);

    virtual 
    ~analysis ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    field_config_optional field_config_;
    ::xsd::cxx::tree::one< id_type > id_;
    ::xsd::cxx::tree::one< name_type > name_;
    ::xsd::cxx::tree::one< solutions_type > solutions_;
    ::xsd::cxx::tree::one< type_type > type_;
  };

  class field_config: public ::xml_schema::type
  {
    public:
    // field_item
    //
    typedef ::XMLModule::field_item field_item_type;
    typedef ::xsd::cxx::tree::sequence< field_item_type > field_item_sequence;
    typedef field_item_sequence::iterator field_item_iterator;
    typedef field_item_sequence::const_iterator field_item_const_iterator;
    typedef ::xsd::cxx::tree::traits< field_item_type, char > field_item_traits;

    const field_item_sequence&
    field_item () const;

    field_item_sequence&
    field_item ();

    void
    field_item (const field_item_sequence& s);

    // Constructors.
    //
    field_config ();

    field_config (const ::xercesc::DOMElement& e,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

    field_config (const field_config& x,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

    virtual field_config*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    field_config&
    operator= (const field_config& x);

    virtual 
    ~field_config ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    field_item_sequence field_item_;
  };

  class coupling: public ::xml_schema::type
  {
    public:
    // general_coupling
    //
    typedef ::XMLModule::general_coupling general_coupling_type;
    typedef ::xsd::cxx::tree::traits< general_coupling_type, char > general_coupling_traits;

    const general_coupling_type&
    general_coupling () const;

    general_coupling_type&
    general_coupling ();

    void
    general_coupling (const general_coupling_type& x);

    void
    general_coupling (::std::unique_ptr< general_coupling_type > p);

    // constants
    //
    typedef ::XMLModule::constants constants_type;
    typedef ::xsd::cxx::tree::traits< constants_type, char > constants_traits;

    const constants_type&
    constants () const;

    constants_type&
    constants ();

    void
    constants (const constants_type& x);

    void
    constants (::std::unique_ptr< constants_type > p);

    // volume
    //
    typedef ::XMLModule::volume volume_type;
    typedef ::xsd::cxx::tree::traits< volume_type, char > volume_traits;

    const volume_type&
    volume () const;

    volume_type&
    volume ();

    void
    volume (const volume_type& x);

    void
    volume (::std::unique_ptr< volume_type > p);

    // Constructors.
    //
    coupling (const general_coupling_type&,
              const constants_type&,
              const volume_type&);

    coupling (::std::unique_ptr< general_coupling_type >,
              ::std::unique_ptr< constants_type >,
              ::std::unique_ptr< volume_type >);

    coupling (const ::xercesc::DOMElement& e,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

    coupling (const coupling& x,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

    virtual coupling*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    coupling&
    operator= (const coupling& x);

    virtual 
    ~coupling ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xsd::cxx::tree::one< general_coupling_type > general_coupling_;
    ::xsd::cxx::tree::one< constants_type > constants_;
    ::xsd::cxx::tree::one< volume_type > volume_;
  };

  class general_coupling: public ::xml_schema::type
  {
    public:
    // description
    //
    typedef ::xml_schema::string description_type;
    typedef ::xsd::cxx::tree::traits< description_type, char > description_traits;

    const description_type&
    description () const;

    description_type&
    description ();

    void
    description (const description_type& x);

    void
    description (::std::unique_ptr< description_type > p);

    // modules
    //
    typedef ::XMLModule::modules modules_type;
    typedef ::xsd::cxx::tree::traits< modules_type, char > modules_traits;

    const modules_type&
    modules () const;

    modules_type&
    modules ();

    void
    modules (const modules_type& x);

    void
    modules (::std::unique_ptr< modules_type > p);

    // id
    //
    typedef ::xml_schema::string id_type;
    typedef ::xsd::cxx::tree::traits< id_type, char > id_traits;

    const id_type&
    id () const;

    id_type&
    id ();

    void
    id (const id_type& x);

    void
    id (::std::unique_ptr< id_type > p);

    // name
    //
    typedef ::xml_schema::string name_type;
    typedef ::xsd::cxx::tree::traits< name_type, char > name_traits;

    const name_type&
    name () const;

    name_type&
    name ();

    void
    name (const name_type& x);

    void
    name (::std::unique_ptr< name_type > p);

    // Constructors.
    //
    general_coupling (const description_type&,
                      const modules_type&,
                      const id_type&,
                      const name_type&);

    general_coupling (const description_type&,
                      ::std::unique_ptr< modules_type >,
                      const id_type&,
                      const name_type&);

    general_coupling (const ::xercesc::DOMElement& e,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

    general_coupling (const general_coupling& x,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

    virtual general_coupling*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    general_coupling&
    operator= (const general_coupling& x);

    virtual 
    ~general_coupling ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xsd::cxx::tree::one< description_type > description_;
    ::xsd::cxx::tree::one< modules_type > modules_;
    ::xsd::cxx::tree::one< id_type > id_;
    ::xsd::cxx::tree::one< name_type > name_;
  };

  class modules: public ::xml_schema::type
  {
    public:
    // source
    //
    typedef ::XMLModule::source source_type;
    typedef ::xsd::cxx::tree::traits< source_type, char > source_traits;

    const source_type&
    source () const;

    source_type&
    source ();

    void
    source (const source_type& x);

    void
    source (::std::unique_ptr< source_type > p);

    // target
    //
    typedef ::XMLModule::target target_type;
    typedef ::xsd::cxx::tree::traits< target_type, char > target_traits;

    const target_type&
    target () const;

    target_type&
    target ();

    void
    target (const target_type& x);

    void
    target (::std::unique_ptr< target_type > p);

    // Constructors.
    //
    modules (const source_type&,
             const target_type&);

    modules (::std::unique_ptr< source_type >,
             ::std::unique_ptr< target_type >);

    modules (const ::xercesc::DOMElement& e,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

    modules (const modules& x,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

    virtual modules*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    modules&
    operator= (const modules& x);

    virtual 
    ~modules ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xsd::cxx::tree::one< source_type > source_;
    ::xsd::cxx::tree::one< target_type > target_;
  };

  class source: public ::xml_schema::type
  {
    public:
    // id
    //
    typedef ::xml_schema::string id_type;
    typedef ::xsd::cxx::tree::traits< id_type, char > id_traits;

    const id_type&
    id () const;

    id_type&
    id ();

    void
    id (const id_type& x);

    void
    id (::std::unique_ptr< id_type > p);

    // Constructors.
    //
    source (const id_type&);

    source (const ::xercesc::DOMElement& e,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

    source (const source& x,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

    virtual source*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    source&
    operator= (const source& x);

    virtual 
    ~source ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xsd::cxx::tree::one< id_type > id_;
  };

  class target: public ::xml_schema::type
  {
    public:
    // id
    //
    typedef ::xml_schema::string id_type;
    typedef ::xsd::cxx::tree::traits< id_type, char > id_traits;

    const id_type&
    id () const;

    id_type&
    id ();

    void
    id (const id_type& x);

    void
    id (::std::unique_ptr< id_type > p);

    // Constructors.
    //
    target (const id_type&);

    target (const ::xercesc::DOMElement& e,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

    target (const target& x,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

    virtual target*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    target&
    operator= (const target& x);

    virtual 
    ~target ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xsd::cxx::tree::one< id_type > id_;
  };

  class constants: public ::xml_schema::type
  {
    public:
    // constant
    //
    typedef ::XMLModule::constant constant_type;
    typedef ::xsd::cxx::tree::sequence< constant_type > constant_sequence;
    typedef constant_sequence::iterator constant_iterator;
    typedef constant_sequence::const_iterator constant_const_iterator;
    typedef ::xsd::cxx::tree::traits< constant_type, char > constant_traits;

    const constant_sequence&
    constant () const;

    constant_sequence&
    constant ();

    void
    constant (const constant_sequence& s);

    // Constructors.
    //
    constants ();

    constants (const ::xercesc::DOMElement& e,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

    constants (const constants& x,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

    virtual constants*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    constants&
    operator= (const constants& x);

    virtual 
    ~constants ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    constant_sequence constant_;
  };

  class constant: public ::xml_schema::type
  {
    public:
    // id
    //
    typedef ::xml_schema::string id_type;
    typedef ::xsd::cxx::tree::traits< id_type, char > id_traits;

    const id_type&
    id () const;

    id_type&
    id ();

    void
    id (const id_type& x);

    void
    id (::std::unique_ptr< id_type > p);

    // value
    //
    typedef ::xml_schema::double_ value_type;
    typedef ::xsd::cxx::tree::traits< value_type, char, ::xsd::cxx::tree::schema_type::double_ > value_traits;

    const value_type&
    value () const;

    value_type&
    value ();

    void
    value (const value_type& x);

    // Constructors.
    //
    constant (const id_type&,
              const value_type&);

    constant (const ::xercesc::DOMElement& e,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

    constant (const constant& x,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

    virtual constant*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    constant&
    operator= (const constant& x);

    virtual 
    ~constant ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xsd::cxx::tree::one< id_type > id_;
    ::xsd::cxx::tree::one< value_type > value_;
  };

  class macros: public ::xml_schema::type
  {
    public:
    // macro
    //
    typedef ::XMLModule::macro macro_type;
    typedef ::xsd::cxx::tree::sequence< macro_type > macro_sequence;
    typedef macro_sequence::iterator macro_iterator;
    typedef macro_sequence::const_iterator macro_const_iterator;
    typedef ::xsd::cxx::tree::traits< macro_type, char > macro_traits;

    const macro_sequence&
    macro () const;

    macro_sequence&
    macro ();

    void
    macro (const macro_sequence& s);

    // Constructors.
    //
    macros ();

    macros (const ::xercesc::DOMElement& e,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

    macros (const macros& x,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

    virtual macros*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    macros&
    operator= (const macros& x);

    virtual 
    ~macros ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    macro_sequence macro_;
  };

  class macro: public ::xml_schema::type
  {
    public:
    // expression
    //
    typedef ::xml_schema::string expression_type;
    typedef ::xsd::cxx::tree::traits< expression_type, char > expression_traits;

    const expression_type&
    expression () const;

    expression_type&
    expression ();

    void
    expression (const expression_type& x);

    void
    expression (::std::unique_ptr< expression_type > p);

    // id
    //
    typedef ::xml_schema::string id_type;
    typedef ::xsd::cxx::tree::traits< id_type, char > id_traits;

    const id_type&
    id () const;

    id_type&
    id ();

    void
    id (const id_type& x);

    void
    id (::std::unique_ptr< id_type > p);

    // Constructors.
    //
    macro (const expression_type&,
           const id_type&);

    macro (const ::xercesc::DOMElement& e,
           ::xml_schema::flags f = 0,
           ::xml_schema::container* c = 0);

    macro (const macro& x,
           ::xml_schema::flags f = 0,
           ::xml_schema::container* c = 0);

    virtual macro*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    macro&
    operator= (const macro& x);

    virtual 
    ~macro ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xsd::cxx::tree::one< expression_type > expression_;
    ::xsd::cxx::tree::one< id_type > id_;
  };

  class spaces: public ::xml_schema::type
  {
    public:
    // space
    //
    typedef ::XMLModule::space space_type;
    typedef ::xsd::cxx::tree::sequence< space_type > space_sequence;
    typedef space_sequence::iterator space_iterator;
    typedef space_sequence::const_iterator space_const_iterator;
    typedef ::xsd::cxx::tree::traits< space_type, char > space_traits;

    const space_sequence&
    space () const;

    space_sequence&
    space ();

    void
    space (const space_sequence& s);

    // Constructors.
    //
    spaces ();

    spaces (const ::xercesc::DOMElement& e,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

    spaces (const spaces& x,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

    virtual spaces*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    spaces&
    operator= (const spaces& x);

    virtual 
    ~spaces ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    space_sequence space_;
  };

  class space: public ::xml_schema::type
  {
    public:
    // space_config
    //
    typedef ::XMLModule::space_config space_config_type;
    typedef ::xsd::cxx::tree::sequence< space_config_type > space_config_sequence;
    typedef space_config_sequence::iterator space_config_iterator;
    typedef space_config_sequence::const_iterator space_config_const_iterator;
    typedef ::xsd::cxx::tree::traits< space_config_type, char > space_config_traits;

    const space_config_sequence&
    space_config () const;

    space_config_sequence&
    space_config ();

    void
    space_config (const space_config_sequence& s);

    // analysistype
    //
    typedef ::xml_schema::string analysistype_type;
    typedef ::xsd::cxx::tree::traits< analysistype_type, char > analysistype_traits;

    const analysistype_type&
    analysistype () const;

    analysistype_type&
    analysistype ();

    void
    analysistype (const analysistype_type& x);

    void
    analysistype (::std::unique_ptr< analysistype_type > p);

    // Constructors.
    //
    space (const analysistype_type&);

    space (const ::xercesc::DOMElement& e,
           ::xml_schema::flags f = 0,
           ::xml_schema::container* c = 0);

    space (const space& x,
           ::xml_schema::flags f = 0,
           ::xml_schema::container* c = 0);

    virtual space*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    space&
    operator= (const space& x);

    virtual 
    ~space ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    space_config_sequence space_config_;
    ::xsd::cxx::tree::one< analysistype_type > analysistype_;
  };

  class space_config: public ::xml_schema::type
  {
    public:
    // i
    //
    typedef ::xml_schema::int_ i_type;
    typedef ::xsd::cxx::tree::traits< i_type, char > i_traits;

    const i_type&
    i () const;

    i_type&
    i ();

    void
    i (const i_type& x);

    // type
    //
    typedef ::xml_schema::string type_type;
    typedef ::xsd::cxx::tree::traits< type_type, char > type_traits;

    const type_type&
    type () const;

    type_type&
    type ();

    void
    type (const type_type& x);

    void
    type (::std::unique_ptr< type_type > p);

    // orderadjust
    //
    typedef ::xml_schema::int_ orderadjust_type;
    typedef ::xsd::cxx::tree::traits< orderadjust_type, char > orderadjust_traits;

    const orderadjust_type&
    orderadjust () const;

    orderadjust_type&
    orderadjust ();

    void
    orderadjust (const orderadjust_type& x);

    // Constructors.
    //
    space_config (const i_type&,
                  const type_type&,
                  const orderadjust_type&);

    space_config (const ::xercesc::DOMElement& e,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

    space_config (const space_config& x,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

    virtual space_config*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    space_config&
    operator= (const space_config& x);

    virtual 
    ~space_config ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xsd::cxx::tree::one< i_type > i_;
    ::xsd::cxx::tree::one< type_type > type_;
    ::xsd::cxx::tree::one< orderadjust_type > orderadjust_;
  };

  class preprocessor: public ::xml_schema::type
  {
    public:
    // gui
    //
    typedef ::XMLModule::gui gui_type;
    typedef ::xsd::cxx::tree::sequence< gui_type > gui_sequence;
    typedef gui_sequence::iterator gui_iterator;
    typedef gui_sequence::const_iterator gui_const_iterator;
    typedef ::xsd::cxx::tree::traits< gui_type, char > gui_traits;

    const gui_sequence&
    gui () const;

    gui_sequence&
    gui ();

    void
    gui (const gui_sequence& s);

    // Constructors.
    //
    preprocessor ();

    preprocessor (const ::xercesc::DOMElement& e,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

    preprocessor (const preprocessor& x,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

    virtual preprocessor*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    preprocessor&
    operator= (const preprocessor& x);

    virtual 
    ~preprocessor ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    gui_sequence gui_;
  };

  class gui: public ::xml_schema::type
  {
    public:
    // group
    //
    typedef ::XMLModule::group group_type;
    typedef ::xsd::cxx::tree::sequence< group_type > group_sequence;
    typedef group_sequence::iterator group_iterator;
    typedef group_sequence::const_iterator group_const_iterator;
    typedef ::xsd::cxx::tree::traits< group_type, char > group_traits;

    const group_sequence&
    group () const;

    group_sequence&
    group ();

    void
    group (const group_sequence& s);

    // type
    //
    typedef ::xml_schema::string type_type;
    typedef ::xsd::cxx::tree::traits< type_type, char > type_traits;

    const type_type&
    type () const;

    type_type&
    type ();

    void
    type (const type_type& x);

    void
    type (::std::unique_ptr< type_type > p);

    // Constructors.
    //
    gui (const type_type&);

    gui (const ::xercesc::DOMElement& e,
         ::xml_schema::flags f = 0,
         ::xml_schema::container* c = 0);

    gui (const gui& x,
         ::xml_schema::flags f = 0,
         ::xml_schema::container* c = 0);

    virtual gui*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    gui&
    operator= (const gui& x);

    virtual 
    ~gui ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    group_sequence group_;
    ::xsd::cxx::tree::one< type_type > type_;
  };

  class group: public ::xml_schema::type
  {
    public:
    // quantity
    //
    typedef ::XMLModule::quantity quantity_type;
    typedef ::xsd::cxx::tree::sequence< quantity_type > quantity_sequence;
    typedef quantity_sequence::iterator quantity_iterator;
    typedef quantity_sequence::const_iterator quantity_const_iterator;
    typedef ::xsd::cxx::tree::traits< quantity_type, char > quantity_traits;

    const quantity_sequence&
    quantity () const;

    quantity_sequence&
    quantity ();

    void
    quantity (const quantity_sequence& s);

    // switch_combo
    //
    typedef ::XMLModule::switch_combo switch_combo_type;
    typedef ::xsd::cxx::tree::sequence< switch_combo_type > switch_combo_sequence;
    typedef switch_combo_sequence::iterator switch_combo_iterator;
    typedef switch_combo_sequence::const_iterator switch_combo_const_iterator;
    typedef ::xsd::cxx::tree::traits< switch_combo_type, char > switch_combo_traits;

    const switch_combo_sequence&
    switch_combo () const;

    switch_combo_sequence&
    switch_combo ();

    void
    switch_combo (const switch_combo_sequence& s);

    // name
    //
    typedef ::xml_schema::string name_type;
    typedef ::xsd::cxx::tree::optional< name_type > name_optional;
    typedef ::xsd::cxx::tree::traits< name_type, char > name_traits;

    const name_optional&
    name () const;

    name_optional&
    name ();

    void
    name (const name_type& x);

    void
    name (const name_optional& x);

    void
    name (::std::unique_ptr< name_type > p);

    // Constructors.
    //
    group ();

    group (const ::xercesc::DOMElement& e,
           ::xml_schema::flags f = 0,
           ::xml_schema::container* c = 0);

    group (const group& x,
           ::xml_schema::flags f = 0,
           ::xml_schema::container* c = 0);

    virtual group*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    group&
    operator= (const group& x);

    virtual 
    ~group ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    quantity_sequence quantity_;
    switch_combo_sequence switch_combo_;
    name_optional name_;
  };

  class switch_combo: public ::xml_schema::type
  {
    public:
    // switch_option
    //
    typedef ::XMLModule::switch_option switch_option_type;
    typedef ::xsd::cxx::tree::traits< switch_option_type, char > switch_option_traits;

    const switch_option_type&
    switch_option () const;

    switch_option_type&
    switch_option ();

    void
    switch_option (const switch_option_type& x);

    void
    switch_option (::std::unique_ptr< switch_option_type > p);

    // id
    //
    typedef ::xml_schema::string id_type;
    typedef ::xsd::cxx::tree::traits< id_type, char > id_traits;

    const id_type&
    id () const;

    id_type&
    id ();

    void
    id (const id_type& x);

    void
    id (::std::unique_ptr< id_type > p);

    // name
    //
    typedef ::xml_schema::string name_type;
    typedef ::xsd::cxx::tree::traits< name_type, char > name_traits;

    const name_type&
    name () const;

    name_type&
    name ();

    void
    name (const name_type& x);

    void
    name (::std::unique_ptr< name_type > p);

    // implicit_option
    //
    typedef ::xml_schema::string implicit_option_type;
    typedef ::xsd::cxx::tree::traits< implicit_option_type, char > implicit_option_traits;

    const implicit_option_type&
    implicit_option () const;

    implicit_option_type&
    implicit_option ();

    void
    implicit_option (const implicit_option_type& x);

    void
    implicit_option (::std::unique_ptr< implicit_option_type > p);

    // Constructors.
    //
    switch_combo (const switch_option_type&,
                  const id_type&,
                  const name_type&,
                  const implicit_option_type&);

    switch_combo (::std::unique_ptr< switch_option_type >,
                  const id_type&,
                  const name_type&,
                  const implicit_option_type&);

    switch_combo (const ::xercesc::DOMElement& e,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

    switch_combo (const switch_combo& x,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

    virtual switch_combo*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    switch_combo&
    operator= (const switch_combo& x);

    virtual 
    ~switch_combo ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xsd::cxx::tree::one< switch_option_type > switch_option_;
    ::xsd::cxx::tree::one< id_type > id_;
    ::xsd::cxx::tree::one< name_type > name_;
    ::xsd::cxx::tree::one< implicit_option_type > implicit_option_;
  };

  class switch_option: public ::xml_schema::type
  {
    public:
    // id
    //
    typedef ::xml_schema::string id_type;
    typedef ::xsd::cxx::tree::traits< id_type, char > id_traits;

    const id_type&
    id () const;

    id_type&
    id ();

    void
    id (const id_type& x);

    void
    id (::std::unique_ptr< id_type > p);

    // name
    //
    typedef ::xml_schema::string name_type;
    typedef ::xsd::cxx::tree::traits< name_type, char > name_traits;

    const name_type&
    name () const;

    name_type&
    name ();

    void
    name (const name_type& x);

    void
    name (::std::unique_ptr< name_type > p);

    // Constructors.
    //
    switch_option (const id_type&,
                   const name_type&);

    switch_option (const ::xercesc::DOMElement& e,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

    switch_option (const switch_option& x,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

    virtual switch_option*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    switch_option&
    operator= (const switch_option& x);

    virtual 
    ~switch_option ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xsd::cxx::tree::one< id_type > id_;
    ::xsd::cxx::tree::one< name_type > name_;
  };

  class postprocessor: public ::xml_schema::type
  {
    public:
    // localvariables
    //
    typedef ::XMLModule::localvariables localvariables_type;
    typedef ::xsd::cxx::tree::traits< localvariables_type, char > localvariables_traits;

    const localvariables_type&
    localvariables () const;

    localvariables_type&
    localvariables ();

    void
    localvariables (const localvariables_type& x);

    void
    localvariables (::std::unique_ptr< localvariables_type > p);

    // view
    //
    typedef ::XMLModule::view view_type;
    typedef ::xsd::cxx::tree::traits< view_type, char > view_traits;

    const view_type&
    view () const;

    view_type&
    view ();

    void
    view (const view_type& x);

    void
    view (::std::unique_ptr< view_type > p);

    // volumeintegrals
    //
    typedef ::XMLModule::volumeintegrals volumeintegrals_type;
    typedef ::xsd::cxx::tree::traits< volumeintegrals_type, char > volumeintegrals_traits;

    const volumeintegrals_type&
    volumeintegrals () const;

    volumeintegrals_type&
    volumeintegrals ();

    void
    volumeintegrals (const volumeintegrals_type& x);

    void
    volumeintegrals (::std::unique_ptr< volumeintegrals_type > p);

    // surfaceintegrals
    //
    typedef ::XMLModule::surfaceintegrals surfaceintegrals_type;
    typedef ::xsd::cxx::tree::traits< surfaceintegrals_type, char > surfaceintegrals_traits;

    const surfaceintegrals_type&
    surfaceintegrals () const;

    surfaceintegrals_type&
    surfaceintegrals ();

    void
    surfaceintegrals (const surfaceintegrals_type& x);

    void
    surfaceintegrals (::std::unique_ptr< surfaceintegrals_type > p);

    // force
    //
    typedef ::XMLModule::force force_type;
    typedef ::xsd::cxx::tree::traits< force_type, char > force_traits;

    const force_type&
    force () const;

    force_type&
    force ();

    void
    force (const force_type& x);

    void
    force (::std::unique_ptr< force_type > p);

    // Constructors.
    //
    postprocessor (const localvariables_type&,
                   const view_type&,
                   const volumeintegrals_type&,
                   const surfaceintegrals_type&,
                   const force_type&);

    postprocessor (::std::unique_ptr< localvariables_type >,
                   ::std::unique_ptr< view_type >,
                   ::std::unique_ptr< volumeintegrals_type >,
                   ::std::unique_ptr< surfaceintegrals_type >,
                   ::std::unique_ptr< force_type >);

    postprocessor (const ::xercesc::DOMElement& e,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

    postprocessor (const postprocessor& x,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

    virtual postprocessor*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    postprocessor&
    operator= (const postprocessor& x);

    virtual 
    ~postprocessor ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xsd::cxx::tree::one< localvariables_type > localvariables_;
    ::xsd::cxx::tree::one< view_type > view_;
    ::xsd::cxx::tree::one< volumeintegrals_type > volumeintegrals_;
    ::xsd::cxx::tree::one< surfaceintegrals_type > surfaceintegrals_;
    ::xsd::cxx::tree::one< force_type > force_;
  };

  class localvariables: public ::xml_schema::type
  {
    public:
    // localvariable
    //
    typedef ::XMLModule::localvariable localvariable_type;
    typedef ::xsd::cxx::tree::sequence< localvariable_type > localvariable_sequence;
    typedef localvariable_sequence::iterator localvariable_iterator;
    typedef localvariable_sequence::const_iterator localvariable_const_iterator;
    typedef ::xsd::cxx::tree::traits< localvariable_type, char > localvariable_traits;

    const localvariable_sequence&
    localvariable () const;

    localvariable_sequence&
    localvariable ();

    void
    localvariable (const localvariable_sequence& s);

    // Constructors.
    //
    localvariables ();

    localvariables (const ::xercesc::DOMElement& e,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

    localvariables (const localvariables& x,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

    virtual localvariables*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    localvariables&
    operator= (const localvariables& x);

    virtual 
    ~localvariables ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    localvariable_sequence localvariable_;
  };

  class localvariable: public ::xml_schema::type
  {
    public:
    // expression
    //
    typedef ::XMLModule::expression expression_type;
    typedef ::xsd::cxx::tree::sequence< expression_type > expression_sequence;
    typedef expression_sequence::iterator expression_iterator;
    typedef expression_sequence::const_iterator expression_const_iterator;
    typedef ::xsd::cxx::tree::traits< expression_type, char > expression_traits;

    const expression_sequence&
    expression () const;

    expression_sequence&
    expression ();

    void
    expression (const expression_sequence& s);

    // format
    //
    typedef ::xml_schema::string format_type;
    typedef ::xsd::cxx::tree::optional< format_type > format_optional;
    typedef ::xsd::cxx::tree::traits< format_type, char > format_traits;

    const format_optional&
    format () const;

    format_optional&
    format ();

    void
    format (const format_type& x);

    void
    format (const format_optional& x);

    void
    format (::std::unique_ptr< format_type > p);

    // id
    //
    typedef ::xml_schema::string id_type;
    typedef ::xsd::cxx::tree::traits< id_type, char > id_traits;

    const id_type&
    id () const;

    id_type&
    id ();

    void
    id (const id_type& x);

    void
    id (::std::unique_ptr< id_type > p);

    // name
    //
    typedef ::xml_schema::string name_type;
    typedef ::xsd::cxx::tree::traits< name_type, char > name_traits;

    const name_type&
    name () const;

    name_type&
    name ();

    void
    name (const name_type& x);

    void
    name (::std::unique_ptr< name_type > p);

    // shortname
    //
    typedef ::xml_schema::string shortname_type;
    typedef ::xsd::cxx::tree::traits< shortname_type, char > shortname_traits;

    const shortname_type&
    shortname () const;

    shortname_type&
    shortname ();

    void
    shortname (const shortname_type& x);

    void
    shortname (::std::unique_ptr< shortname_type > p);

    // shortname_html
    //
    typedef ::xml_schema::string shortname_html_type;
    typedef ::xsd::cxx::tree::optional< shortname_html_type > shortname_html_optional;
    typedef ::xsd::cxx::tree::traits< shortname_html_type, char > shortname_html_traits;

    const shortname_html_optional&
    shortname_html () const;

    shortname_html_optional&
    shortname_html ();

    void
    shortname_html (const shortname_html_type& x);

    void
    shortname_html (const shortname_html_optional& x);

    void
    shortname_html (::std::unique_ptr< shortname_html_type > p);

    // shortname_latex
    //
    typedef ::xml_schema::string shortname_latex_type;
    typedef ::xsd::cxx::tree::optional< shortname_latex_type > shortname_latex_optional;
    typedef ::xsd::cxx::tree::traits< shortname_latex_type, char > shortname_latex_traits;

    const shortname_latex_optional&
    shortname_latex () const;

    shortname_latex_optional&
    shortname_latex ();

    void
    shortname_latex (const shortname_latex_type& x);

    void
    shortname_latex (const shortname_latex_optional& x);

    void
    shortname_latex (::std::unique_ptr< shortname_latex_type > p);

    // type
    //
    typedef ::xml_schema::string type_type;
    typedef ::xsd::cxx::tree::traits< type_type, char > type_traits;

    const type_type&
    type () const;

    type_type&
    type ();

    void
    type (const type_type& x);

    void
    type (::std::unique_ptr< type_type > p);

    // unit
    //
    typedef ::xml_schema::string unit_type;
    typedef ::xsd::cxx::tree::traits< unit_type, char > unit_traits;

    const unit_type&
    unit () const;

    unit_type&
    unit ();

    void
    unit (const unit_type& x);

    void
    unit (::std::unique_ptr< unit_type > p);

    // unit_html
    //
    typedef ::xml_schema::string unit_html_type;
    typedef ::xsd::cxx::tree::optional< unit_html_type > unit_html_optional;
    typedef ::xsd::cxx::tree::traits< unit_html_type, char > unit_html_traits;

    const unit_html_optional&
    unit_html () const;

    unit_html_optional&
    unit_html ();

    void
    unit_html (const unit_html_type& x);

    void
    unit_html (const unit_html_optional& x);

    void
    unit_html (::std::unique_ptr< unit_html_type > p);

    // unit_latex
    //
    typedef ::xml_schema::string unit_latex_type;
    typedef ::xsd::cxx::tree::optional< unit_latex_type > unit_latex_optional;
    typedef ::xsd::cxx::tree::traits< unit_latex_type, char > unit_latex_traits;

    const unit_latex_optional&
    unit_latex () const;

    unit_latex_optional&
    unit_latex ();

    void
    unit_latex (const unit_latex_type& x);

    void
    unit_latex (const unit_latex_optional& x);

    void
    unit_latex (::std::unique_ptr< unit_latex_type > p);

    // Constructors.
    //
    localvariable (const id_type&,
                   const name_type&,
                   const shortname_type&,
                   const type_type&,
                   const unit_type&);

    localvariable (const ::xercesc::DOMElement& e,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

    localvariable (const localvariable& x,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

    virtual localvariable*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    localvariable&
    operator= (const localvariable& x);

    virtual 
    ~localvariable ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    expression_sequence expression_;
    format_optional format_;
    ::xsd::cxx::tree::one< id_type > id_;
    ::xsd::cxx::tree::one< name_type > name_;
    ::xsd::cxx::tree::one< shortname_type > shortname_;
    shortname_html_optional shortname_html_;
    shortname_latex_optional shortname_latex_;
    ::xsd::cxx::tree::one< type_type > type_;
    ::xsd::cxx::tree::one< unit_type > unit_;
    unit_html_optional unit_html_;
    unit_latex_optional unit_latex_;
  };

  class view: public ::xml_schema::type
  {
    public:
    // scalar_view
    //
    typedef ::XMLModule::scalar_view scalar_view_type;
    typedef ::xsd::cxx::tree::traits< scalar_view_type, char > scalar_view_traits;

    const scalar_view_type&
    scalar_view () const;

    scalar_view_type&
    scalar_view ();

    void
    scalar_view (const scalar_view_type& x);

    void
    scalar_view (::std::unique_ptr< scalar_view_type > p);

    // vector_view
    //
    typedef ::XMLModule::vector_view vector_view_type;
    typedef ::xsd::cxx::tree::traits< vector_view_type, char > vector_view_traits;

    const vector_view_type&
    vector_view () const;

    vector_view_type&
    vector_view ();

    void
    vector_view (const vector_view_type& x);

    void
    vector_view (::std::unique_ptr< vector_view_type > p);

    // Constructors.
    //
    view (const scalar_view_type&,
          const vector_view_type&);

    view (::std::unique_ptr< scalar_view_type >,
          ::std::unique_ptr< vector_view_type >);

    view (const ::xercesc::DOMElement& e,
          ::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0);

    view (const view& x,
          ::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0);

    virtual view*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    view&
    operator= (const view& x);

    virtual 
    ~view ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xsd::cxx::tree::one< scalar_view_type > scalar_view_;
    ::xsd::cxx::tree::one< vector_view_type > vector_view_;
  };

  class scalar_view: public ::xml_schema::type
  {
    public:
    // default
    //
    typedef ::XMLModule::default_ default_type;
    typedef ::xsd::cxx::tree::sequence< default_type > default_sequence;
    typedef default_sequence::iterator default_iterator;
    typedef default_sequence::const_iterator default_const_iterator;
    typedef ::xsd::cxx::tree::traits< default_type, char > default_traits;

    const default_sequence&
    default_ () const;

    default_sequence&
    default_ ();

    void
    default_ (const default_sequence& s);

    // Constructors.
    //
    scalar_view ();

    scalar_view (const ::xercesc::DOMElement& e,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

    scalar_view (const scalar_view& x,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

    virtual scalar_view*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    scalar_view&
    operator= (const scalar_view& x);

    virtual 
    ~scalar_view ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    default_sequence default__;
  };

  class vector_view: public ::xml_schema::type
  {
    public:
    // default
    //
    typedef ::XMLModule::default_ default_type;
    typedef ::xsd::cxx::tree::sequence< default_type > default_sequence;
    typedef default_sequence::iterator default_iterator;
    typedef default_sequence::const_iterator default_const_iterator;
    typedef ::xsd::cxx::tree::traits< default_type, char > default_traits;

    const default_sequence&
    default_ () const;

    default_sequence&
    default_ ();

    void
    default_ (const default_sequence& s);

    // Constructors.
    //
    vector_view ();

    vector_view (const ::xercesc::DOMElement& e,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

    vector_view (const vector_view& x,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

    virtual vector_view*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    vector_view&
    operator= (const vector_view& x);

    virtual 
    ~vector_view ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    default_sequence default__;
  };

  class default_: public ::xml_schema::type
  {
    public:
    // analysistype
    //
    typedef ::xml_schema::string analysistype_type;
    typedef ::xsd::cxx::tree::traits< analysistype_type, char > analysistype_traits;

    const analysistype_type&
    analysistype () const;

    analysistype_type&
    analysistype ();

    void
    analysistype (const analysistype_type& x);

    void
    analysistype (::std::unique_ptr< analysistype_type > p);

    // id
    //
    typedef ::xml_schema::string id_type;
    typedef ::xsd::cxx::tree::traits< id_type, char > id_traits;

    const id_type&
    id () const;

    id_type&
    id ();

    void
    id (const id_type& x);

    void
    id (::std::unique_ptr< id_type > p);

    // Constructors.
    //
    default_ (const analysistype_type&,
              const id_type&);

    default_ (const ::xercesc::DOMElement& e,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

    default_ (const default_& x,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

    virtual default_*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    default_&
    operator= (const default_& x);

    virtual 
    ~default_ ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xsd::cxx::tree::one< analysistype_type > analysistype_;
    ::xsd::cxx::tree::one< id_type > id_;
  };

  class volumeintegrals: public ::xml_schema::type
  {
    public:
    // volumeintegral
    //
    typedef ::XMLModule::volumeintegral volumeintegral_type;
    typedef ::xsd::cxx::tree::sequence< volumeintegral_type > volumeintegral_sequence;
    typedef volumeintegral_sequence::iterator volumeintegral_iterator;
    typedef volumeintegral_sequence::const_iterator volumeintegral_const_iterator;
    typedef ::xsd::cxx::tree::traits< volumeintegral_type, char > volumeintegral_traits;

    const volumeintegral_sequence&
    volumeintegral () const;

    volumeintegral_sequence&
    volumeintegral ();

    void
    volumeintegral (const volumeintegral_sequence& s);

    // Constructors.
    //
    volumeintegrals ();

    volumeintegrals (const ::xercesc::DOMElement& e,
                     ::xml_schema::flags f = 0,
                     ::xml_schema::container* c = 0);

    volumeintegrals (const volumeintegrals& x,
                     ::xml_schema::flags f = 0,
                     ::xml_schema::container* c = 0);

    virtual volumeintegrals*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    volumeintegrals&
    operator= (const volumeintegrals& x);

    virtual 
    ~volumeintegrals ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    volumeintegral_sequence volumeintegral_;
  };

  class volumeintegral: public ::xml_schema::type
  {
    public:
    // expression
    //
    typedef ::XMLModule::expression expression_type;
    typedef ::xsd::cxx::tree::sequence< expression_type > expression_sequence;
    typedef expression_sequence::iterator expression_iterator;
    typedef expression_sequence::const_iterator expression_const_iterator;
    typedef ::xsd::cxx::tree::traits< expression_type, char > expression_traits;

    const expression_sequence&
    expression () const;

    expression_sequence&
    expression ();

    void
    expression (const expression_sequence& s);

    // id
    //
    typedef ::xml_schema::string id_type;
    typedef ::xsd::cxx::tree::traits< id_type, char > id_traits;

    const id_type&
    id () const;

    id_type&
    id ();

    void
    id (const id_type& x);

    void
    id (::std::unique_ptr< id_type > p);

    // name
    //
    typedef ::xml_schema::string name_type;
    typedef ::xsd::cxx::tree::traits< name_type, char > name_traits;

    const name_type&
    name () const;

    name_type&
    name ();

    void
    name (const name_type& x);

    void
    name (::std::unique_ptr< name_type > p);

    // shortname
    //
    typedef ::xml_schema::string shortname_type;
    typedef ::xsd::cxx::tree::traits< shortname_type, char > shortname_traits;

    const shortname_type&
    shortname () const;

    shortname_type&
    shortname ();

    void
    shortname (const shortname_type& x);

    void
    shortname (::std::unique_ptr< shortname_type > p);

    // shortname_html
    //
    typedef ::xml_schema::string shortname_html_type;
    typedef ::xsd::cxx::tree::optional< shortname_html_type > shortname_html_optional;
    typedef ::xsd::cxx::tree::traits< shortname_html_type, char > shortname_html_traits;

    const shortname_html_optional&
    shortname_html () const;

    shortname_html_optional&
    shortname_html ();

    void
    shortname_html (const shortname_html_type& x);

    void
    shortname_html (const shortname_html_optional& x);

    void
    shortname_html (::std::unique_ptr< shortname_html_type > p);

    // shortname_latex
    //
    typedef ::xml_schema::string shortname_latex_type;
    typedef ::xsd::cxx::tree::optional< shortname_latex_type > shortname_latex_optional;
    typedef ::xsd::cxx::tree::traits< shortname_latex_type, char > shortname_latex_traits;

    const shortname_latex_optional&
    shortname_latex () const;

    shortname_latex_optional&
    shortname_latex ();

    void
    shortname_latex (const shortname_latex_type& x);

    void
    shortname_latex (const shortname_latex_optional& x);

    void
    shortname_latex (::std::unique_ptr< shortname_latex_type > p);

    // unit
    //
    typedef ::xml_schema::string unit_type;
    typedef ::xsd::cxx::tree::traits< unit_type, char > unit_traits;

    const unit_type&
    unit () const;

    unit_type&
    unit ();

    void
    unit (const unit_type& x);

    void
    unit (::std::unique_ptr< unit_type > p);

    // unit_html
    //
    typedef ::xml_schema::string unit_html_type;
    typedef ::xsd::cxx::tree::optional< unit_html_type > unit_html_optional;
    typedef ::xsd::cxx::tree::traits< unit_html_type, char > unit_html_traits;

    const unit_html_optional&
    unit_html () const;

    unit_html_optional&
    unit_html ();

    void
    unit_html (const unit_html_type& x);

    void
    unit_html (const unit_html_optional& x);

    void
    unit_html (::std::unique_ptr< unit_html_type > p);

    // unit_latex
    //
    typedef ::xml_schema::string unit_latex_type;
    typedef ::xsd::cxx::tree::optional< unit_latex_type > unit_latex_optional;
    typedef ::xsd::cxx::tree::traits< unit_latex_type, char > unit_latex_traits;

    const unit_latex_optional&
    unit_latex () const;

    unit_latex_optional&
    unit_latex ();

    void
    unit_latex (const unit_latex_type& x);

    void
    unit_latex (const unit_latex_optional& x);

    void
    unit_latex (::std::unique_ptr< unit_latex_type > p);

    // eggshell
    //
    typedef ::xml_schema::int_ eggshell_type;
    typedef ::xsd::cxx::tree::optional< eggshell_type > eggshell_optional;
    typedef ::xsd::cxx::tree::traits< eggshell_type, char > eggshell_traits;

    const eggshell_optional&
    eggshell () const;

    eggshell_optional&
    eggshell ();

    void
    eggshell (const eggshell_type& x);

    void
    eggshell (const eggshell_optional& x);

    // Constructors.
    //
    volumeintegral (const id_type&,
                    const name_type&,
                    const shortname_type&,
                    const unit_type&);

    volumeintegral (const ::xercesc::DOMElement& e,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

    volumeintegral (const volumeintegral& x,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

    virtual volumeintegral*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    volumeintegral&
    operator= (const volumeintegral& x);

    virtual 
    ~volumeintegral ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    expression_sequence expression_;
    ::xsd::cxx::tree::one< id_type > id_;
    ::xsd::cxx::tree::one< name_type > name_;
    ::xsd::cxx::tree::one< shortname_type > shortname_;
    shortname_html_optional shortname_html_;
    shortname_latex_optional shortname_latex_;
    ::xsd::cxx::tree::one< unit_type > unit_;
    unit_html_optional unit_html_;
    unit_latex_optional unit_latex_;
    eggshell_optional eggshell_;
  };

  class surfaceintegrals: public ::xml_schema::type
  {
    public:
    // surfaceintegral
    //
    typedef ::XMLModule::surfaceintegral surfaceintegral_type;
    typedef ::xsd::cxx::tree::sequence< surfaceintegral_type > surfaceintegral_sequence;
    typedef surfaceintegral_sequence::iterator surfaceintegral_iterator;
    typedef surfaceintegral_sequence::const_iterator surfaceintegral_const_iterator;
    typedef ::xsd::cxx::tree::traits< surfaceintegral_type, char > surfaceintegral_traits;

    const surfaceintegral_sequence&
    surfaceintegral () const;

    surfaceintegral_sequence&
    surfaceintegral ();

    void
    surfaceintegral (const surfaceintegral_sequence& s);

    // Constructors.
    //
    surfaceintegrals ();

    surfaceintegrals (const ::xercesc::DOMElement& e,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

    surfaceintegrals (const surfaceintegrals& x,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

    virtual surfaceintegrals*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    surfaceintegrals&
    operator= (const surfaceintegrals& x);

    virtual 
    ~surfaceintegrals ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    surfaceintegral_sequence surfaceintegral_;
  };

  class surfaceintegral: public ::xml_schema::type
  {
    public:
    // expression
    //
    typedef ::XMLModule::expression expression_type;
    typedef ::xsd::cxx::tree::sequence< expression_type > expression_sequence;
    typedef expression_sequence::iterator expression_iterator;
    typedef expression_sequence::const_iterator expression_const_iterator;
    typedef ::xsd::cxx::tree::traits< expression_type, char > expression_traits;

    const expression_sequence&
    expression () const;

    expression_sequence&
    expression ();

    void
    expression (const expression_sequence& s);

    // id
    //
    typedef ::xml_schema::string id_type;
    typedef ::xsd::cxx::tree::traits< id_type, char > id_traits;

    const id_type&
    id () const;

    id_type&
    id ();

    void
    id (const id_type& x);

    void
    id (::std::unique_ptr< id_type > p);

    // name
    //
    typedef ::xml_schema::string name_type;
    typedef ::xsd::cxx::tree::traits< name_type, char > name_traits;

    const name_type&
    name () const;

    name_type&
    name ();

    void
    name (const name_type& x);

    void
    name (::std::unique_ptr< name_type > p);

    // shortname
    //
    typedef ::xml_schema::string shortname_type;
    typedef ::xsd::cxx::tree::traits< shortname_type, char > shortname_traits;

    const shortname_type&
    shortname () const;

    shortname_type&
    shortname ();

    void
    shortname (const shortname_type& x);

    void
    shortname (::std::unique_ptr< shortname_type > p);

    // shortname_html
    //
    typedef ::xml_schema::string shortname_html_type;
    typedef ::xsd::cxx::tree::optional< shortname_html_type > shortname_html_optional;
    typedef ::xsd::cxx::tree::traits< shortname_html_type, char > shortname_html_traits;

    const shortname_html_optional&
    shortname_html () const;

    shortname_html_optional&
    shortname_html ();

    void
    shortname_html (const shortname_html_type& x);

    void
    shortname_html (const shortname_html_optional& x);

    void
    shortname_html (::std::unique_ptr< shortname_html_type > p);

    // shortname_latex
    //
    typedef ::xml_schema::string shortname_latex_type;
    typedef ::xsd::cxx::tree::optional< shortname_latex_type > shortname_latex_optional;
    typedef ::xsd::cxx::tree::traits< shortname_latex_type, char > shortname_latex_traits;

    const shortname_latex_optional&
    shortname_latex () const;

    shortname_latex_optional&
    shortname_latex ();

    void
    shortname_latex (const shortname_latex_type& x);

    void
    shortname_latex (const shortname_latex_optional& x);

    void
    shortname_latex (::std::unique_ptr< shortname_latex_type > p);

    // unit
    //
    typedef ::xml_schema::string unit_type;
    typedef ::xsd::cxx::tree::traits< unit_type, char > unit_traits;

    const unit_type&
    unit () const;

    unit_type&
    unit ();

    void
    unit (const unit_type& x);

    void
    unit (::std::unique_ptr< unit_type > p);

    // unit_html
    //
    typedef ::xml_schema::string unit_html_type;
    typedef ::xsd::cxx::tree::optional< unit_html_type > unit_html_optional;
    typedef ::xsd::cxx::tree::traits< unit_html_type, char > unit_html_traits;

    const unit_html_optional&
    unit_html () const;

    unit_html_optional&
    unit_html ();

    void
    unit_html (const unit_html_type& x);

    void
    unit_html (const unit_html_optional& x);

    void
    unit_html (::std::unique_ptr< unit_html_type > p);

    // unit_latex
    //
    typedef ::xml_schema::string unit_latex_type;
    typedef ::xsd::cxx::tree::optional< unit_latex_type > unit_latex_optional;
    typedef ::xsd::cxx::tree::traits< unit_latex_type, char > unit_latex_traits;

    const unit_latex_optional&
    unit_latex () const;

    unit_latex_optional&
    unit_latex ();

    void
    unit_latex (const unit_latex_type& x);

    void
    unit_latex (const unit_latex_optional& x);

    void
    unit_latex (::std::unique_ptr< unit_latex_type > p);

    // Constructors.
    //
    surfaceintegral (const id_type&,
                     const name_type&,
                     const shortname_type&,
                     const unit_type&);

    surfaceintegral (const ::xercesc::DOMElement& e,
                     ::xml_schema::flags f = 0,
                     ::xml_schema::container* c = 0);

    surfaceintegral (const surfaceintegral& x,
                     ::xml_schema::flags f = 0,
                     ::xml_schema::container* c = 0);

    virtual surfaceintegral*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    surfaceintegral&
    operator= (const surfaceintegral& x);

    virtual 
    ~surfaceintegral ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    expression_sequence expression_;
    ::xsd::cxx::tree::one< id_type > id_;
    ::xsd::cxx::tree::one< name_type > name_;
    ::xsd::cxx::tree::one< shortname_type > shortname_;
    shortname_html_optional shortname_html_;
    shortname_latex_optional shortname_latex_;
    ::xsd::cxx::tree::one< unit_type > unit_;
    unit_html_optional unit_html_;
    unit_latex_optional unit_latex_;
  };

  class force: public ::xml_schema::type
  {
    public:
    // expression
    //
    typedef ::XMLModule::expression expression_type;
    typedef ::xsd::cxx::tree::sequence< expression_type > expression_sequence;
    typedef expression_sequence::iterator expression_iterator;
    typedef expression_sequence::const_iterator expression_const_iterator;
    typedef ::xsd::cxx::tree::traits< expression_type, char > expression_traits;

    const expression_sequence&
    expression () const;

    expression_sequence&
    expression ();

    void
    expression (const expression_sequence& s);

    // Constructors.
    //
    force ();

    force (const ::xercesc::DOMElement& e,
           ::xml_schema::flags f = 0,
           ::xml_schema::container* c = 0);

    force (const force& x,
           ::xml_schema::flags f = 0,
           ::xml_schema::container* c = 0);

    virtual force*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    force&
    operator= (const force& x);

    virtual 
    ~force ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    expression_sequence expression_;
  };

  class volume: public ::xml_schema::type
  {
    public:
    // quantity
    //
    typedef ::XMLModule::quantity quantity_type;
    typedef ::xsd::cxx::tree::sequence< quantity_type > quantity_sequence;
    typedef quantity_sequence::iterator quantity_iterator;
    typedef quantity_sequence::const_iterator quantity_const_iterator;
    typedef ::xsd::cxx::tree::traits< quantity_type, char > quantity_traits;

    const quantity_sequence&
    quantity () const;

    quantity_sequence&
    quantity ();

    void
    quantity (const quantity_sequence& s);

    // function
    //
    typedef ::XMLModule::function function_type;
    typedef ::xsd::cxx::tree::sequence< function_type > function_sequence;
    typedef function_sequence::iterator function_iterator;
    typedef function_sequence::const_iterator function_const_iterator;
    typedef ::xsd::cxx::tree::traits< function_type, char > function_traits;

    const function_sequence&
    function () const;

    function_sequence&
    function ();

    void
    function (const function_sequence& s);

    // matrix_form
    //
    typedef ::XMLModule::matrix_form matrix_form_type;
    typedef ::xsd::cxx::tree::sequence< matrix_form_type > matrix_form_sequence;
    typedef matrix_form_sequence::iterator matrix_form_iterator;
    typedef matrix_form_sequence::const_iterator matrix_form_const_iterator;
    typedef ::xsd::cxx::tree::traits< matrix_form_type, char > matrix_form_traits;

    const matrix_form_sequence&
    matrix_form () const;

    matrix_form_sequence&
    matrix_form ();

    void
    matrix_form (const matrix_form_sequence& s);

    // vector_form
    //
    typedef ::XMLModule::vector_form vector_form_type;
    typedef ::xsd::cxx::tree::sequence< vector_form_type > vector_form_sequence;
    typedef vector_form_sequence::iterator vector_form_iterator;
    typedef vector_form_sequence::const_iterator vector_form_const_iterator;
    typedef ::xsd::cxx::tree::traits< vector_form_type, char > vector_form_traits;

    const vector_form_sequence&
    vector_form () const;

    vector_form_sequence&
    vector_form ();

    void
    vector_form (const vector_form_sequence& s);

    // weakforms_volume
    //
    typedef ::XMLModule::weakforms_volume weakforms_volume_type;
    typedef ::xsd::cxx::tree::traits< weakforms_volume_type, char > weakforms_volume_traits;

    const weakforms_volume_type&
    weakforms_volume () const;

    weakforms_volume_type&
    weakforms_volume ();

    void
    weakforms_volume (const weakforms_volume_type& x);

    void
    weakforms_volume (::std::unique_ptr< weakforms_volume_type > p);

    // Constructors.
    //
    volume (const weakforms_volume_type&);

    volume (::std::unique_ptr< weakforms_volume_type >);

    volume (const ::xercesc::DOMElement& e,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

    volume (const volume& x,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

    virtual volume*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    volume&
    operator= (const volume& x);

    virtual 
    ~volume ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    quantity_sequence quantity_;
    function_sequence function_;
    matrix_form_sequence matrix_form_;
    vector_form_sequence vector_form_;
    ::xsd::cxx::tree::one< weakforms_volume_type > weakforms_volume_;
  };

  class surface: public ::xml_schema::type
  {
    public:
    // quantity
    //
    typedef ::XMLModule::quantity quantity_type;
    typedef ::xsd::cxx::tree::sequence< quantity_type > quantity_sequence;
    typedef quantity_sequence::iterator quantity_iterator;
    typedef quantity_sequence::const_iterator quantity_const_iterator;
    typedef ::xsd::cxx::tree::traits< quantity_type, char > quantity_traits;

    const quantity_sequence&
    quantity () const;

    quantity_sequence&
    quantity ();

    void
    quantity (const quantity_sequence& s);

    // matrix_form
    //
    typedef ::XMLModule::matrix_form matrix_form_type;
    typedef ::xsd::cxx::tree::sequence< matrix_form_type > matrix_form_sequence;
    typedef matrix_form_sequence::iterator matrix_form_iterator;
    typedef matrix_form_sequence::const_iterator matrix_form_const_iterator;
    typedef ::xsd::cxx::tree::traits< matrix_form_type, char > matrix_form_traits;

    const matrix_form_sequence&
    matrix_form () const;

    matrix_form_sequence&
    matrix_form ();

    void
    matrix_form (const matrix_form_sequence& s);

    // vector_form
    //
    typedef ::XMLModule::vector_form vector_form_type;
    typedef ::xsd::cxx::tree::sequence< vector_form_type > vector_form_sequence;
    typedef vector_form_sequence::iterator vector_form_iterator;
    typedef vector_form_sequence::const_iterator vector_form_const_iterator;
    typedef ::xsd::cxx::tree::traits< vector_form_type, char > vector_form_traits;

    const vector_form_sequence&
    vector_form () const;

    vector_form_sequence&
    vector_form ();

    void
    vector_form (const vector_form_sequence& s);

    // essential_form
    //
    typedef ::XMLModule::essential_form essential_form_type;
    typedef ::xsd::cxx::tree::sequence< essential_form_type > essential_form_sequence;
    typedef essential_form_sequence::iterator essential_form_iterator;
    typedef essential_form_sequence::const_iterator essential_form_const_iterator;
    typedef ::xsd::cxx::tree::traits< essential_form_type, char > essential_form_traits;

    const essential_form_sequence&
    essential_form () const;

    essential_form_sequence&
    essential_form ();

    void
    essential_form (const essential_form_sequence& s);

    // weakforms_surface
    //
    typedef ::XMLModule::weakforms_surface weakforms_surface_type;
    typedef ::xsd::cxx::tree::traits< weakforms_surface_type, char > weakforms_surface_traits;

    const weakforms_surface_type&
    weakforms_surface () const;

    weakforms_surface_type&
    weakforms_surface ();

    void
    weakforms_surface (const weakforms_surface_type& x);

    void
    weakforms_surface (::std::unique_ptr< weakforms_surface_type > p);

    // Constructors.
    //
    surface (const weakforms_surface_type&);

    surface (::std::unique_ptr< weakforms_surface_type >);

    surface (const ::xercesc::DOMElement& e,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

    surface (const surface& x,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

    virtual surface*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    surface&
    operator= (const surface& x);

    virtual 
    ~surface ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    quantity_sequence quantity_;
    matrix_form_sequence matrix_form_;
    vector_form_sequence vector_form_;
    essential_form_sequence essential_form_;
    ::xsd::cxx::tree::one< weakforms_surface_type > weakforms_surface_;
  };

  class boundary: public ::xml_schema::type
  {
    public:
    // quantity
    //
    typedef ::XMLModule::quantity quantity_type;
    typedef ::xsd::cxx::tree::sequence< quantity_type > quantity_sequence;
    typedef quantity_sequence::iterator quantity_iterator;
    typedef quantity_sequence::const_iterator quantity_const_iterator;
    typedef ::xsd::cxx::tree::traits< quantity_type, char > quantity_traits;

    const quantity_sequence&
    quantity () const;

    quantity_sequence&
    quantity ();

    void
    quantity (const quantity_sequence& s);

    // linearity_option
    //
    typedef ::XMLModule::linearity_option linearity_option_type;
    typedef ::xsd::cxx::tree::sequence< linearity_option_type > linearity_option_sequence;
    typedef linearity_option_sequence::iterator linearity_option_iterator;
    typedef linearity_option_sequence::const_iterator linearity_option_const_iterator;
    typedef ::xsd::cxx::tree::traits< linearity_option_type, char > linearity_option_traits;

    const linearity_option_sequence&
    linearity_option () const;

    linearity_option_sequence&
    linearity_option ();

    void
    linearity_option (const linearity_option_sequence& s);

    // id
    //
    typedef ::xml_schema::string id_type;
    typedef ::xsd::cxx::tree::traits< id_type, char > id_traits;

    const id_type&
    id () const;

    id_type&
    id ();

    void
    id (const id_type& x);

    void
    id (::std::unique_ptr< id_type > p);

    // name
    //
    typedef ::xml_schema::string name_type;
    typedef ::xsd::cxx::tree::traits< name_type, char > name_traits;

    const name_type&
    name () const;

    name_type&
    name ();

    void
    name (const name_type& x);

    void
    name (::std::unique_ptr< name_type > p);

    // equation
    //
    typedef ::xml_schema::string equation_type;
    typedef ::xsd::cxx::tree::traits< equation_type, char > equation_traits;

    const equation_type&
    equation () const;

    equation_type&
    equation ();

    void
    equation (const equation_type& x);

    void
    equation (::std::unique_ptr< equation_type > p);

    // Constructors.
    //
    boundary (const id_type&,
              const name_type&,
              const equation_type&);

    boundary (const ::xercesc::DOMElement& e,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

    boundary (const boundary& x,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

    virtual boundary*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    boundary&
    operator= (const boundary& x);

    virtual 
    ~boundary ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    quantity_sequence quantity_;
    linearity_option_sequence linearity_option_;
    ::xsd::cxx::tree::one< id_type > id_;
    ::xsd::cxx::tree::one< name_type > name_;
    ::xsd::cxx::tree::one< equation_type > equation_;
  };

  class weakforms_surface: public ::xml_schema::type
  {
    public:
    // group
    //
    typedef ::XMLModule::group group_type;
    typedef ::xsd::cxx::tree::optional< group_type > group_optional;
    typedef ::xsd::cxx::tree::traits< group_type, char > group_traits;

    const group_optional&
    group () const;

    group_optional&
    group ();

    void
    group (const group_type& x);

    void
    group (const group_optional& x);

    void
    group (::std::unique_ptr< group_type > p);

    // weakform_surface
    //
    typedef ::XMLModule::weakform_surface weakform_surface_type;
    typedef ::xsd::cxx::tree::sequence< weakform_surface_type > weakform_surface_sequence;
    typedef weakform_surface_sequence::iterator weakform_surface_iterator;
    typedef weakform_surface_sequence::const_iterator weakform_surface_const_iterator;
    typedef ::xsd::cxx::tree::traits< weakform_surface_type, char > weakform_surface_traits;

    const weakform_surface_sequence&
    weakform_surface () const;

    weakform_surface_sequence&
    weakform_surface ();

    void
    weakform_surface (const weakform_surface_sequence& s);

    // Constructors.
    //
    weakforms_surface ();

    weakforms_surface (const ::xercesc::DOMElement& e,
                       ::xml_schema::flags f = 0,
                       ::xml_schema::container* c = 0);

    weakforms_surface (const weakforms_surface& x,
                       ::xml_schema::flags f = 0,
                       ::xml_schema::container* c = 0);

    virtual weakforms_surface*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    weakforms_surface&
    operator= (const weakforms_surface& x);

    virtual 
    ~weakforms_surface ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    group_optional group_;
    weakform_surface_sequence weakform_surface_;
  };

  class weakform_surface: public ::xml_schema::type
  {
    public:
    // boundary
    //
    typedef ::XMLModule::boundary boundary_type;
    typedef ::xsd::cxx::tree::sequence< boundary_type > boundary_sequence;
    typedef boundary_sequence::iterator boundary_iterator;
    typedef boundary_sequence::const_iterator boundary_const_iterator;
    typedef ::xsd::cxx::tree::traits< boundary_type, char > boundary_traits;

    const boundary_sequence&
    boundary () const;

    boundary_sequence&
    boundary ();

    void
    boundary (const boundary_sequence& s);

    // quantity
    //
    typedef ::XMLModule::quantity quantity_type;
    typedef ::xsd::cxx::tree::sequence< quantity_type > quantity_sequence;
    typedef quantity_sequence::iterator quantity_iterator;
    typedef quantity_sequence::const_iterator quantity_const_iterator;
    typedef ::xsd::cxx::tree::traits< quantity_type, char > quantity_traits;

    const quantity_sequence&
    quantity () const;

    quantity_sequence&
    quantity ();

    void
    quantity (const quantity_sequence& s);

    // function_use
    //
    typedef ::XMLModule::function_use function_use_type;
    typedef ::xsd::cxx::tree::sequence< function_use_type > function_use_sequence;
    typedef function_use_sequence::iterator function_use_iterator;
    typedef function_use_sequence::const_iterator function_use_const_iterator;
    typedef ::xsd::cxx::tree::traits< function_use_type, char > function_use_traits;

    const function_use_sequence&
    function_use () const;

    function_use_sequence&
    function_use ();

    void
    function_use (const function_use_sequence& s);

    // matrix_form
    //
    typedef ::XMLModule::matrix_form matrix_form_type;
    typedef ::xsd::cxx::tree::sequence< matrix_form_type > matrix_form_sequence;
    typedef matrix_form_sequence::iterator matrix_form_iterator;
    typedef matrix_form_sequence::const_iterator matrix_form_const_iterator;
    typedef ::xsd::cxx::tree::traits< matrix_form_type, char > matrix_form_traits;

    const matrix_form_sequence&
    matrix_form () const;

    matrix_form_sequence&
    matrix_form ();

    void
    matrix_form (const matrix_form_sequence& s);

    // vector_form
    //
    typedef ::XMLModule::vector_form vector_form_type;
    typedef ::xsd::cxx::tree::sequence< vector_form_type > vector_form_sequence;
    typedef vector_form_sequence::iterator vector_form_iterator;
    typedef vector_form_sequence::const_iterator vector_form_const_iterator;
    typedef ::xsd::cxx::tree::traits< vector_form_type, char > vector_form_traits;

    const vector_form_sequence&
    vector_form () const;

    vector_form_sequence&
    vector_form ();

    void
    vector_form (const vector_form_sequence& s);

    // analysistype
    //
    typedef ::xml_schema::string analysistype_type;
    typedef ::xsd::cxx::tree::traits< analysistype_type, char > analysistype_traits;

    const analysistype_type&
    analysistype () const;

    analysistype_type&
    analysistype ();

    void
    analysistype (const analysistype_type& x);

    void
    analysistype (::std::unique_ptr< analysistype_type > p);

    // default
    //
    typedef ::xml_schema::string default_type;
    typedef ::xsd::cxx::tree::optional< default_type > default_optional;
    typedef ::xsd::cxx::tree::traits< default_type, char > default_traits;

    const default_optional&
    default_ () const;

    default_optional&
    default_ ();

    void
    default_ (const default_type& x);

    void
    default_ (const default_optional& x);

    void
    default_ (::std::unique_ptr< default_type > p);

    // Constructors.
    //
    weakform_surface (const analysistype_type&);

    weakform_surface (const ::xercesc::DOMElement& e,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

    weakform_surface (const weakform_surface& x,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

    virtual weakform_surface*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    weakform_surface&
    operator= (const weakform_surface& x);

    virtual 
    ~weakform_surface ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    boundary_sequence boundary_;
    quantity_sequence quantity_;
    function_use_sequence function_use_;
    matrix_form_sequence matrix_form_;
    vector_form_sequence vector_form_;
    ::xsd::cxx::tree::one< analysistype_type > analysistype_;
    default_optional default__;
  };

  class weakforms_volume: public ::xml_schema::type
  {
    public:
    // weakform_volume
    //
    typedef ::XMLModule::weakform_volume weakform_volume_type;
    typedef ::xsd::cxx::tree::sequence< weakform_volume_type > weakform_volume_sequence;
    typedef weakform_volume_sequence::iterator weakform_volume_iterator;
    typedef weakform_volume_sequence::const_iterator weakform_volume_const_iterator;
    typedef ::xsd::cxx::tree::traits< weakform_volume_type, char > weakform_volume_traits;

    const weakform_volume_sequence&
    weakform_volume () const;

    weakform_volume_sequence&
    weakform_volume ();

    void
    weakform_volume (const weakform_volume_sequence& s);

    // Constructors.
    //
    weakforms_volume ();

    weakforms_volume (const ::xercesc::DOMElement& e,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

    weakforms_volume (const weakforms_volume& x,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

    virtual weakforms_volume*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    weakforms_volume&
    operator= (const weakforms_volume& x);

    virtual 
    ~weakforms_volume ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    weakform_volume_sequence weakform_volume_;
  };

  class weakform_volume: public ::xml_schema::type
  {
    public:
    // quantity
    //
    typedef ::XMLModule::quantity quantity_type;
    typedef ::xsd::cxx::tree::sequence< quantity_type > quantity_sequence;
    typedef quantity_sequence::iterator quantity_iterator;
    typedef quantity_sequence::const_iterator quantity_const_iterator;
    typedef ::xsd::cxx::tree::traits< quantity_type, char > quantity_traits;

    const quantity_sequence&
    quantity () const;

    quantity_sequence&
    quantity ();

    void
    quantity (const quantity_sequence& s);

    // function_use
    //
    typedef ::XMLModule::function_use function_use_type;
    typedef ::xsd::cxx::tree::sequence< function_use_type > function_use_sequence;
    typedef function_use_sequence::iterator function_use_iterator;
    typedef function_use_sequence::const_iterator function_use_const_iterator;
    typedef ::xsd::cxx::tree::traits< function_use_type, char > function_use_traits;

    const function_use_sequence&
    function_use () const;

    function_use_sequence&
    function_use ();

    void
    function_use (const function_use_sequence& s);

    // linearity_option
    //
    typedef ::XMLModule::linearity_option linearity_option_type;
    typedef ::xsd::cxx::tree::sequence< linearity_option_type > linearity_option_sequence;
    typedef linearity_option_sequence::iterator linearity_option_iterator;
    typedef linearity_option_sequence::const_iterator linearity_option_const_iterator;
    typedef ::xsd::cxx::tree::traits< linearity_option_type, char > linearity_option_traits;

    const linearity_option_sequence&
    linearity_option () const;

    linearity_option_sequence&
    linearity_option ();

    void
    linearity_option (const linearity_option_sequence& s);

    // analysistype
    //
    typedef ::xml_schema::string analysistype_type;
    typedef ::xsd::cxx::tree::traits< analysistype_type, char > analysistype_traits;

    const analysistype_type&
    analysistype () const;

    analysistype_type&
    analysistype ();

    void
    analysistype (const analysistype_type& x);

    void
    analysistype (::std::unique_ptr< analysistype_type > p);

    // couplingtype
    //
    typedef ::xml_schema::string couplingtype_type;
    typedef ::xsd::cxx::tree::optional< couplingtype_type > couplingtype_optional;
    typedef ::xsd::cxx::tree::traits< couplingtype_type, char > couplingtype_traits;

    const couplingtype_optional&
    couplingtype () const;

    couplingtype_optional&
    couplingtype ();

    void
    couplingtype (const couplingtype_type& x);

    void
    couplingtype (const couplingtype_optional& x);

    void
    couplingtype (::std::unique_ptr< couplingtype_type > p);

    // sourceanalysis
    //
    typedef ::xml_schema::string sourceanalysis_type;
    typedef ::xsd::cxx::tree::optional< sourceanalysis_type > sourceanalysis_optional;
    typedef ::xsd::cxx::tree::traits< sourceanalysis_type, char > sourceanalysis_traits;

    const sourceanalysis_optional&
    sourceanalysis () const;

    sourceanalysis_optional&
    sourceanalysis ();

    void
    sourceanalysis (const sourceanalysis_type& x);

    void
    sourceanalysis (const sourceanalysis_optional& x);

    void
    sourceanalysis (::std::unique_ptr< sourceanalysis_type > p);

    // equation
    //
    typedef ::xml_schema::string equation_type;
    typedef ::xsd::cxx::tree::traits< equation_type, char > equation_traits;

    const equation_type&
    equation () const;

    equation_type&
    equation ();

    void
    equation (const equation_type& x);

    void
    equation (::std::unique_ptr< equation_type > p);

    // Constructors.
    //
    weakform_volume (const analysistype_type&,
                     const equation_type&);

    weakform_volume (const ::xercesc::DOMElement& e,
                     ::xml_schema::flags f = 0,
                     ::xml_schema::container* c = 0);

    weakform_volume (const weakform_volume& x,
                     ::xml_schema::flags f = 0,
                     ::xml_schema::container* c = 0);

    virtual weakform_volume*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    weakform_volume&
    operator= (const weakform_volume& x);

    virtual 
    ~weakform_volume ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    quantity_sequence quantity_;
    function_use_sequence function_use_;
    linearity_option_sequence linearity_option_;
    ::xsd::cxx::tree::one< analysistype_type > analysistype_;
    couplingtype_optional couplingtype_;
    sourceanalysis_optional sourceanalysis_;
    ::xsd::cxx::tree::one< equation_type > equation_;
  };

  class linearity_option: public ::xml_schema::type
  {
    public:
    // matrix_form
    //
    typedef ::XMLModule::matrix_form matrix_form_type;
    typedef ::xsd::cxx::tree::sequence< matrix_form_type > matrix_form_sequence;
    typedef matrix_form_sequence::iterator matrix_form_iterator;
    typedef matrix_form_sequence::const_iterator matrix_form_const_iterator;
    typedef ::xsd::cxx::tree::traits< matrix_form_type, char > matrix_form_traits;

    const matrix_form_sequence&
    matrix_form () const;

    matrix_form_sequence&
    matrix_form ();

    void
    matrix_form (const matrix_form_sequence& s);

    // vector_form
    //
    typedef ::XMLModule::vector_form vector_form_type;
    typedef ::xsd::cxx::tree::sequence< vector_form_type > vector_form_sequence;
    typedef vector_form_sequence::iterator vector_form_iterator;
    typedef vector_form_sequence::const_iterator vector_form_const_iterator;
    typedef ::xsd::cxx::tree::traits< vector_form_type, char > vector_form_traits;

    const vector_form_sequence&
    vector_form () const;

    vector_form_sequence&
    vector_form ();

    void
    vector_form (const vector_form_sequence& s);

    // matrix_transient_form
    //
    typedef ::XMLModule::matrix_transient_form matrix_transient_form_type;
    typedef ::xsd::cxx::tree::sequence< matrix_transient_form_type > matrix_transient_form_sequence;
    typedef matrix_transient_form_sequence::iterator matrix_transient_form_iterator;
    typedef matrix_transient_form_sequence::const_iterator matrix_transient_form_const_iterator;
    typedef ::xsd::cxx::tree::traits< matrix_transient_form_type, char > matrix_transient_form_traits;

    const matrix_transient_form_sequence&
    matrix_transient_form () const;

    matrix_transient_form_sequence&
    matrix_transient_form ();

    void
    matrix_transient_form (const matrix_transient_form_sequence& s);

    // essential_form
    //
    typedef ::XMLModule::essential_form essential_form_type;
    typedef ::xsd::cxx::tree::sequence< essential_form_type > essential_form_sequence;
    typedef essential_form_sequence::iterator essential_form_iterator;
    typedef essential_form_sequence::const_iterator essential_form_const_iterator;
    typedef ::xsd::cxx::tree::traits< essential_form_type, char > essential_form_traits;

    const essential_form_sequence&
    essential_form () const;

    essential_form_sequence&
    essential_form ();

    void
    essential_form (const essential_form_sequence& s);

    // type
    //
    typedef ::xml_schema::string type_type;
    typedef ::xsd::cxx::tree::traits< type_type, char > type_traits;

    const type_type&
    type () const;

    type_type&
    type ();

    void
    type (const type_type& x);

    void
    type (::std::unique_ptr< type_type > p);

    // Constructors.
    //
    linearity_option (const type_type&);

    linearity_option (const ::xercesc::DOMElement& e,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

    linearity_option (const linearity_option& x,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

    virtual linearity_option*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    linearity_option&
    operator= (const linearity_option& x);

    virtual 
    ~linearity_option ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    matrix_form_sequence matrix_form_;
    vector_form_sequence vector_form_;
    matrix_transient_form_sequence matrix_transient_form_;
    essential_form_sequence essential_form_;
    ::xsd::cxx::tree::one< type_type > type_;
  };

  class matrix_form: public ::xml_schema::type
  {
    public:
    // id
    //
    typedef ::xml_schema::string id_type;
    typedef ::xsd::cxx::tree::traits< id_type, char > id_traits;

    const id_type&
    id () const;

    id_type&
    id ();

    void
    id (const id_type& x);

    void
    id (::std::unique_ptr< id_type > p);

    // i
    //
    typedef ::xml_schema::integer i_type;
    typedef ::xsd::cxx::tree::optional< i_type > i_optional;
    typedef ::xsd::cxx::tree::traits< i_type, char > i_traits;

    const i_optional&
    i () const;

    i_optional&
    i ();

    void
    i (const i_type& x);

    void
    i (const i_optional& x);

    // j
    //
    typedef ::xml_schema::integer j_type;
    typedef ::xsd::cxx::tree::optional< j_type > j_optional;
    typedef ::xsd::cxx::tree::traits< j_type, char > j_traits;

    const j_optional&
    j () const;

    j_optional&
    j ();

    void
    j (const j_type& x);

    void
    j (const j_optional& x);

    // planar
    //
    typedef ::xml_schema::string planar_type;
    typedef ::xsd::cxx::tree::optional< planar_type > planar_optional;
    typedef ::xsd::cxx::tree::traits< planar_type, char > planar_traits;

    const planar_optional&
    planar () const;

    planar_optional&
    planar ();

    void
    planar (const planar_type& x);

    void
    planar (const planar_optional& x);

    void
    planar (::std::unique_ptr< planar_type > p);

    // axi
    //
    typedef ::xml_schema::string axi_type;
    typedef ::xsd::cxx::tree::optional< axi_type > axi_optional;
    typedef ::xsd::cxx::tree::traits< axi_type, char > axi_traits;

    const axi_optional&
    axi () const;

    axi_optional&
    axi ();

    void
    axi (const axi_type& x);

    void
    axi (const axi_optional& x);

    void
    axi (::std::unique_ptr< axi_type > p);

    // symmetric
    //
    typedef ::xml_schema::integer symmetric_type;
    typedef ::xsd::cxx::tree::optional< symmetric_type > symmetric_optional;
    typedef ::xsd::cxx::tree::traits< symmetric_type, char > symmetric_traits;

    const symmetric_optional&
    symmetric () const;

    symmetric_optional&
    symmetric ();

    void
    symmetric (const symmetric_type& x);

    void
    symmetric (const symmetric_optional& x);

    // symmetric_planar
    //
    typedef ::xml_schema::integer symmetric_planar_type;
    typedef ::xsd::cxx::tree::optional< symmetric_planar_type > symmetric_planar_optional;
    typedef ::xsd::cxx::tree::traits< symmetric_planar_type, char > symmetric_planar_traits;

    const symmetric_planar_optional&
    symmetric_planar () const;

    symmetric_planar_optional&
    symmetric_planar ();

    void
    symmetric_planar (const symmetric_planar_type& x);

    void
    symmetric_planar (const symmetric_planar_optional& x);

    // symmetric_axi
    //
    typedef ::xml_schema::integer symmetric_axi_type;
    typedef ::xsd::cxx::tree::optional< symmetric_axi_type > symmetric_axi_optional;
    typedef ::xsd::cxx::tree::traits< symmetric_axi_type, char > symmetric_axi_traits;

    const symmetric_axi_optional&
    symmetric_axi () const;

    symmetric_axi_optional&
    symmetric_axi ();

    void
    symmetric_axi (const symmetric_axi_type& x);

    void
    symmetric_axi (const symmetric_axi_optional& x);

    // condition
    //
    typedef ::xml_schema::string condition_type;
    typedef ::xsd::cxx::tree::optional< condition_type > condition_optional;
    typedef ::xsd::cxx::tree::traits< condition_type, char > condition_traits;

    const condition_optional&
    condition () const;

    condition_optional&
    condition ();

    void
    condition (const condition_type& x);

    void
    condition (const condition_optional& x);

    void
    condition (::std::unique_ptr< condition_type > p);

    // Constructors.
    //
    matrix_form (const id_type&);

    matrix_form (const ::xercesc::DOMElement& e,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

    matrix_form (const matrix_form& x,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

    virtual matrix_form*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    matrix_form&
    operator= (const matrix_form& x);

    virtual 
    ~matrix_form ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xsd::cxx::tree::one< id_type > id_;
    i_optional i_;
    j_optional j_;
    planar_optional planar_;
    axi_optional axi_;
    symmetric_optional symmetric_;
    symmetric_planar_optional symmetric_planar_;
    symmetric_axi_optional symmetric_axi_;
    condition_optional condition_;
  };

  class vector_form: public ::xml_schema::type
  {
    public:
    // id
    //
    typedef ::xml_schema::string id_type;
    typedef ::xsd::cxx::tree::traits< id_type, char > id_traits;

    const id_type&
    id () const;

    id_type&
    id ();

    void
    id (const id_type& x);

    void
    id (::std::unique_ptr< id_type > p);

    // i
    //
    typedef ::xml_schema::integer i_type;
    typedef ::xsd::cxx::tree::optional< i_type > i_optional;
    typedef ::xsd::cxx::tree::traits< i_type, char > i_traits;

    const i_optional&
    i () const;

    i_optional&
    i ();

    void
    i (const i_type& x);

    void
    i (const i_optional& x);

    // j
    //
    typedef ::xml_schema::integer j_type;
    typedef ::xsd::cxx::tree::optional< j_type > j_optional;
    typedef ::xsd::cxx::tree::traits< j_type, char > j_traits;

    const j_optional&
    j () const;

    j_optional&
    j ();

    void
    j (const j_type& x);

    void
    j (const j_optional& x);

    // planar
    //
    typedef ::xml_schema::string planar_type;
    typedef ::xsd::cxx::tree::optional< planar_type > planar_optional;
    typedef ::xsd::cxx::tree::traits< planar_type, char > planar_traits;

    const planar_optional&
    planar () const;

    planar_optional&
    planar ();

    void
    planar (const planar_type& x);

    void
    planar (const planar_optional& x);

    void
    planar (::std::unique_ptr< planar_type > p);

    // axi
    //
    typedef ::xml_schema::string axi_type;
    typedef ::xsd::cxx::tree::optional< axi_type > axi_optional;
    typedef ::xsd::cxx::tree::traits< axi_type, char > axi_traits;

    const axi_optional&
    axi () const;

    axi_optional&
    axi ();

    void
    axi (const axi_type& x);

    void
    axi (const axi_optional& x);

    void
    axi (::std::unique_ptr< axi_type > p);

    // variant
    //
    typedef ::xml_schema::string variant_type;
    typedef ::xsd::cxx::tree::optional< variant_type > variant_optional;
    typedef ::xsd::cxx::tree::traits< variant_type, char > variant_traits;

    const variant_optional&
    variant () const;

    variant_optional&
    variant ();

    void
    variant (const variant_type& x);

    void
    variant (const variant_optional& x);

    void
    variant (::std::unique_ptr< variant_type > p);

    // coefficient
    //
    typedef ::xml_schema::string coefficient_type;
    typedef ::xsd::cxx::tree::optional< coefficient_type > coefficient_optional;
    typedef ::xsd::cxx::tree::traits< coefficient_type, char > coefficient_traits;

    const coefficient_optional&
    coefficient () const;

    coefficient_optional&
    coefficient ();

    void
    coefficient (const coefficient_type& x);

    void
    coefficient (const coefficient_optional& x);

    void
    coefficient (::std::unique_ptr< coefficient_type > p);

    // condition
    //
    typedef ::xml_schema::string condition_type;
    typedef ::xsd::cxx::tree::optional< condition_type > condition_optional;
    typedef ::xsd::cxx::tree::traits< condition_type, char > condition_traits;

    const condition_optional&
    condition () const;

    condition_optional&
    condition ();

    void
    condition (const condition_type& x);

    void
    condition (const condition_optional& x);

    void
    condition (::std::unique_ptr< condition_type > p);

    // Constructors.
    //
    vector_form (const id_type&);

    vector_form (const ::xercesc::DOMElement& e,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

    vector_form (const vector_form& x,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

    virtual vector_form*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    vector_form&
    operator= (const vector_form& x);

    virtual 
    ~vector_form ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xsd::cxx::tree::one< id_type > id_;
    i_optional i_;
    j_optional j_;
    planar_optional planar_;
    axi_optional axi_;
    variant_optional variant_;
    coefficient_optional coefficient_;
    condition_optional condition_;
  };

  class matrix_transient_form: public ::xml_schema::type
  {
    public:
    // id
    //
    typedef ::xml_schema::string id_type;
    typedef ::xsd::cxx::tree::traits< id_type, char > id_traits;

    const id_type&
    id () const;

    id_type&
    id ();

    void
    id (const id_type& x);

    void
    id (::std::unique_ptr< id_type > p);

    // i
    //
    typedef ::xml_schema::integer i_type;
    typedef ::xsd::cxx::tree::optional< i_type > i_optional;
    typedef ::xsd::cxx::tree::traits< i_type, char > i_traits;

    const i_optional&
    i () const;

    i_optional&
    i ();

    void
    i (const i_type& x);

    void
    i (const i_optional& x);

    // j
    //
    typedef ::xml_schema::integer j_type;
    typedef ::xsd::cxx::tree::optional< j_type > j_optional;
    typedef ::xsd::cxx::tree::traits< j_type, char > j_traits;

    const j_optional&
    j () const;

    j_optional&
    j ();

    void
    j (const j_type& x);

    void
    j (const j_optional& x);

    // planar
    //
    typedef ::xml_schema::string planar_type;
    typedef ::xsd::cxx::tree::optional< planar_type > planar_optional;
    typedef ::xsd::cxx::tree::traits< planar_type, char > planar_traits;

    const planar_optional&
    planar () const;

    planar_optional&
    planar ();

    void
    planar (const planar_type& x);

    void
    planar (const planar_optional& x);

    void
    planar (::std::unique_ptr< planar_type > p);

    // axi
    //
    typedef ::xml_schema::string axi_type;
    typedef ::xsd::cxx::tree::optional< axi_type > axi_optional;
    typedef ::xsd::cxx::tree::traits< axi_type, char > axi_traits;

    const axi_optional&
    axi () const;

    axi_optional&
    axi ();

    void
    axi (const axi_type& x);

    void
    axi (const axi_optional& x);

    void
    axi (::std::unique_ptr< axi_type > p);

    // symmetric
    //
    typedef ::xml_schema::integer symmetric_type;
    typedef ::xsd::cxx::tree::optional< symmetric_type > symmetric_optional;
    typedef ::xsd::cxx::tree::traits< symmetric_type, char > symmetric_traits;

    const symmetric_optional&
    symmetric () const;

    symmetric_optional&
    symmetric ();

    void
    symmetric (const symmetric_type& x);

    void
    symmetric (const symmetric_optional& x);

    // symmetric_planar
    //
    typedef ::xml_schema::integer symmetric_planar_type;
    typedef ::xsd::cxx::tree::optional< symmetric_planar_type > symmetric_planar_optional;
    typedef ::xsd::cxx::tree::traits< symmetric_planar_type, char > symmetric_planar_traits;

    const symmetric_planar_optional&
    symmetric_planar () const;

    symmetric_planar_optional&
    symmetric_planar ();

    void
    symmetric_planar (const symmetric_planar_type& x);

    void
    symmetric_planar (const symmetric_planar_optional& x);

    // symmetric_axi
    //
    typedef ::xml_schema::integer symmetric_axi_type;
    typedef ::xsd::cxx::tree::optional< symmetric_axi_type > symmetric_axi_optional;
    typedef ::xsd::cxx::tree::traits< symmetric_axi_type, char > symmetric_axi_traits;

    const symmetric_axi_optional&
    symmetric_axi () const;

    symmetric_axi_optional&
    symmetric_axi ();

    void
    symmetric_axi (const symmetric_axi_type& x);

    void
    symmetric_axi (const symmetric_axi_optional& x);

    // condition
    //
    typedef ::xml_schema::string condition_type;
    typedef ::xsd::cxx::tree::optional< condition_type > condition_optional;
    typedef ::xsd::cxx::tree::traits< condition_type, char > condition_traits;

    const condition_optional&
    condition () const;

    condition_optional&
    condition ();

    void
    condition (const condition_type& x);

    void
    condition (const condition_optional& x);

    void
    condition (::std::unique_ptr< condition_type > p);

    // Constructors.
    //
    matrix_transient_form (const id_type&);

    matrix_transient_form (const ::xercesc::DOMElement& e,
                           ::xml_schema::flags f = 0,
                           ::xml_schema::container* c = 0);

    matrix_transient_form (const matrix_transient_form& x,
                           ::xml_schema::flags f = 0,
                           ::xml_schema::container* c = 0);

    virtual matrix_transient_form*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    matrix_transient_form&
    operator= (const matrix_transient_form& x);

    virtual 
    ~matrix_transient_form ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xsd::cxx::tree::one< id_type > id_;
    i_optional i_;
    j_optional j_;
    planar_optional planar_;
    axi_optional axi_;
    symmetric_optional symmetric_;
    symmetric_planar_optional symmetric_planar_;
    symmetric_axi_optional symmetric_axi_;
    condition_optional condition_;
  };

  class essential_form: public ::xml_schema::type
  {
    public:
    // id
    //
    typedef ::xml_schema::string id_type;
    typedef ::xsd::cxx::tree::traits< id_type, char > id_traits;

    const id_type&
    id () const;

    id_type&
    id ();

    void
    id (const id_type& x);

    void
    id (::std::unique_ptr< id_type > p);

    // i
    //
    typedef ::xml_schema::integer i_type;
    typedef ::xsd::cxx::tree::optional< i_type > i_optional;
    typedef ::xsd::cxx::tree::traits< i_type, char > i_traits;

    const i_optional&
    i () const;

    i_optional&
    i ();

    void
    i (const i_type& x);

    void
    i (const i_optional& x);

    // planar
    //
    typedef ::xml_schema::string planar_type;
    typedef ::xsd::cxx::tree::optional< planar_type > planar_optional;
    typedef ::xsd::cxx::tree::traits< planar_type, char > planar_traits;

    const planar_optional&
    planar () const;

    planar_optional&
    planar ();

    void
    planar (const planar_type& x);

    void
    planar (const planar_optional& x);

    void
    planar (::std::unique_ptr< planar_type > p);

    // axi
    //
    typedef ::xml_schema::string axi_type;
    typedef ::xsd::cxx::tree::optional< axi_type > axi_optional;
    typedef ::xsd::cxx::tree::traits< axi_type, char > axi_traits;

    const axi_optional&
    axi () const;

    axi_optional&
    axi ();

    void
    axi (const axi_type& x);

    void
    axi (const axi_optional& x);

    void
    axi (::std::unique_ptr< axi_type > p);

    // condition
    //
    typedef ::xml_schema::string condition_type;
    typedef ::xsd::cxx::tree::optional< condition_type > condition_optional;
    typedef ::xsd::cxx::tree::traits< condition_type, char > condition_traits;

    const condition_optional&
    condition () const;

    condition_optional&
    condition ();

    void
    condition (const condition_type& x);

    void
    condition (const condition_optional& x);

    void
    condition (::std::unique_ptr< condition_type > p);

    // Constructors.
    //
    essential_form (const id_type&);

    essential_form (const ::xercesc::DOMElement& e,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

    essential_form (const essential_form& x,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

    virtual essential_form*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    essential_form&
    operator= (const essential_form& x);

    virtual 
    ~essential_form ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xsd::cxx::tree::one< id_type > id_;
    i_optional i_;
    planar_optional planar_;
    axi_optional axi_;
    condition_optional condition_;
  };

  class quantity: public ::xml_schema::type
  {
    public:
    // id
    //
    typedef ::xml_schema::string id_type;
    typedef ::xsd::cxx::tree::traits< id_type, char > id_traits;

    const id_type&
    id () const;

    id_type&
    id ();

    void
    id (const id_type& x);

    void
    id (::std::unique_ptr< id_type > p);

    // condition
    //
    typedef ::xml_schema::string condition_type;
    typedef ::xsd::cxx::tree::optional< condition_type > condition_optional;
    typedef ::xsd::cxx::tree::traits< condition_type, char > condition_traits;

    const condition_optional&
    condition () const;

    condition_optional&
    condition ();

    void
    condition (const condition_type& x);

    void
    condition (const condition_optional& x);

    void
    condition (::std::unique_ptr< condition_type > p);

    // default
    //
    typedef ::xml_schema::decimal default_type;
    typedef ::xsd::cxx::tree::optional< default_type > default_optional;
    typedef ::xsd::cxx::tree::traits< default_type, char, ::xsd::cxx::tree::schema_type::decimal > default_traits;

    const default_optional&
    default_ () const;

    default_optional&
    default_ ();

    void
    default_ (const default_type& x);

    void
    default_ (const default_optional& x);

    // nonlinearity_planar
    //
    typedef ::xml_schema::string nonlinearity_planar_type;
    typedef ::xsd::cxx::tree::optional< nonlinearity_planar_type > nonlinearity_planar_optional;
    typedef ::xsd::cxx::tree::traits< nonlinearity_planar_type, char > nonlinearity_planar_traits;

    const nonlinearity_planar_optional&
    nonlinearity_planar () const;

    nonlinearity_planar_optional&
    nonlinearity_planar ();

    void
    nonlinearity_planar (const nonlinearity_planar_type& x);

    void
    nonlinearity_planar (const nonlinearity_planar_optional& x);

    void
    nonlinearity_planar (::std::unique_ptr< nonlinearity_planar_type > p);

    // nonlinearity_axi
    //
    typedef ::xml_schema::string nonlinearity_axi_type;
    typedef ::xsd::cxx::tree::optional< nonlinearity_axi_type > nonlinearity_axi_optional;
    typedef ::xsd::cxx::tree::traits< nonlinearity_axi_type, char > nonlinearity_axi_traits;

    const nonlinearity_axi_optional&
    nonlinearity_axi () const;

    nonlinearity_axi_optional&
    nonlinearity_axi ();

    void
    nonlinearity_axi (const nonlinearity_axi_type& x);

    void
    nonlinearity_axi (const nonlinearity_axi_optional& x);

    void
    nonlinearity_axi (::std::unique_ptr< nonlinearity_axi_type > p);

    // dependence
    //
    typedef ::xml_schema::string dependence_type;
    typedef ::xsd::cxx::tree::optional< dependence_type > dependence_optional;
    typedef ::xsd::cxx::tree::traits< dependence_type, char > dependence_traits;

    const dependence_optional&
    dependence () const;

    dependence_optional&
    dependence ();

    void
    dependence (const dependence_type& x);

    void
    dependence (const dependence_optional& x);

    void
    dependence (::std::unique_ptr< dependence_type > p);

    // name
    //
    typedef ::xml_schema::string name_type;
    typedef ::xsd::cxx::tree::optional< name_type > name_optional;
    typedef ::xsd::cxx::tree::traits< name_type, char > name_traits;

    const name_optional&
    name () const;

    name_optional&
    name ();

    void
    name (const name_type& x);

    void
    name (const name_optional& x);

    void
    name (::std::unique_ptr< name_type > p);

    // shortname
    //
    typedef ::xml_schema::string shortname_type;
    typedef ::xsd::cxx::tree::optional< shortname_type > shortname_optional;
    typedef ::xsd::cxx::tree::traits< shortname_type, char > shortname_traits;

    const shortname_optional&
    shortname () const;

    shortname_optional&
    shortname ();

    void
    shortname (const shortname_type& x);

    void
    shortname (const shortname_optional& x);

    void
    shortname (::std::unique_ptr< shortname_type > p);

    // shortname_html
    //
    typedef ::xml_schema::string shortname_html_type;
    typedef ::xsd::cxx::tree::optional< shortname_html_type > shortname_html_optional;
    typedef ::xsd::cxx::tree::traits< shortname_html_type, char > shortname_html_traits;

    const shortname_html_optional&
    shortname_html () const;

    shortname_html_optional&
    shortname_html ();

    void
    shortname_html (const shortname_html_type& x);

    void
    shortname_html (const shortname_html_optional& x);

    void
    shortname_html (::std::unique_ptr< shortname_html_type > p);

    // shortname_latex
    //
    typedef ::xml_schema::string shortname_latex_type;
    typedef ::xsd::cxx::tree::optional< shortname_latex_type > shortname_latex_optional;
    typedef ::xsd::cxx::tree::traits< shortname_latex_type, char > shortname_latex_traits;

    const shortname_latex_optional&
    shortname_latex () const;

    shortname_latex_optional&
    shortname_latex ();

    void
    shortname_latex (const shortname_latex_type& x);

    void
    shortname_latex (const shortname_latex_optional& x);

    void
    shortname_latex (::std::unique_ptr< shortname_latex_type > p);

    // shortname_dependence
    //
    typedef ::xml_schema::string shortname_dependence_type;
    typedef ::xsd::cxx::tree::optional< shortname_dependence_type > shortname_dependence_optional;
    typedef ::xsd::cxx::tree::traits< shortname_dependence_type, char > shortname_dependence_traits;

    const shortname_dependence_optional&
    shortname_dependence () const;

    shortname_dependence_optional&
    shortname_dependence ();

    void
    shortname_dependence (const shortname_dependence_type& x);

    void
    shortname_dependence (const shortname_dependence_optional& x);

    void
    shortname_dependence (::std::unique_ptr< shortname_dependence_type > p);

    // shortname_dependence_html
    //
    typedef ::xml_schema::string shortname_dependence_html_type;
    typedef ::xsd::cxx::tree::optional< shortname_dependence_html_type > shortname_dependence_html_optional;
    typedef ::xsd::cxx::tree::traits< shortname_dependence_html_type, char > shortname_dependence_html_traits;

    const shortname_dependence_html_optional&
    shortname_dependence_html () const;

    shortname_dependence_html_optional&
    shortname_dependence_html ();

    void
    shortname_dependence_html (const shortname_dependence_html_type& x);

    void
    shortname_dependence_html (const shortname_dependence_html_optional& x);

    void
    shortname_dependence_html (::std::unique_ptr< shortname_dependence_html_type > p);

    // unit
    //
    typedef ::xml_schema::string unit_type;
    typedef ::xsd::cxx::tree::optional< unit_type > unit_optional;
    typedef ::xsd::cxx::tree::traits< unit_type, char > unit_traits;

    const unit_optional&
    unit () const;

    unit_optional&
    unit ();

    void
    unit (const unit_type& x);

    void
    unit (const unit_optional& x);

    void
    unit (::std::unique_ptr< unit_type > p);

    // unit_html
    //
    typedef ::xml_schema::string unit_html_type;
    typedef ::xsd::cxx::tree::optional< unit_html_type > unit_html_optional;
    typedef ::xsd::cxx::tree::traits< unit_html_type, char > unit_html_traits;

    const unit_html_optional&
    unit_html () const;

    unit_html_optional&
    unit_html ();

    void
    unit_html (const unit_html_type& x);

    void
    unit_html (const unit_html_optional& x);

    void
    unit_html (::std::unique_ptr< unit_html_type > p);

    // unit_latex
    //
    typedef ::xml_schema::string unit_latex_type;
    typedef ::xsd::cxx::tree::optional< unit_latex_type > unit_latex_optional;
    typedef ::xsd::cxx::tree::traits< unit_latex_type, char > unit_latex_traits;

    const unit_latex_optional&
    unit_latex () const;

    unit_latex_optional&
    unit_latex ();

    void
    unit_latex (const unit_latex_type& x);

    void
    unit_latex (const unit_latex_optional& x);

    void
    unit_latex (::std::unique_ptr< unit_latex_type > p);

    // is_source
    //
    typedef ::xml_schema::int_ is_source_type;
    typedef ::xsd::cxx::tree::optional< is_source_type > is_source_optional;
    typedef ::xsd::cxx::tree::traits< is_source_type, char > is_source_traits;

    const is_source_optional&
    is_source () const;

    is_source_optional&
    is_source ();

    void
    is_source (const is_source_type& x);

    void
    is_source (const is_source_optional& x);

    // is_bool
    //
    typedef ::xml_schema::int_ is_bool_type;
    typedef ::xsd::cxx::tree::optional< is_bool_type > is_bool_optional;
    typedef ::xsd::cxx::tree::traits< is_bool_type, char > is_bool_traits;

    const is_bool_optional&
    is_bool () const;

    is_bool_optional&
    is_bool ();

    void
    is_bool (const is_bool_type& x);

    void
    is_bool (const is_bool_optional& x);

    // only_if
    //
    typedef ::xml_schema::string only_if_type;
    typedef ::xsd::cxx::tree::optional< only_if_type > only_if_optional;
    typedef ::xsd::cxx::tree::traits< only_if_type, char > only_if_traits;

    const only_if_optional&
    only_if () const;

    only_if_optional&
    only_if ();

    void
    only_if (const only_if_type& x);

    void
    only_if (const only_if_optional& x);

    void
    only_if (::std::unique_ptr< only_if_type > p);

    // only_if_not
    //
    typedef ::xml_schema::string only_if_not_type;
    typedef ::xsd::cxx::tree::optional< only_if_not_type > only_if_not_optional;
    typedef ::xsd::cxx::tree::traits< only_if_not_type, char > only_if_not_traits;

    const only_if_not_optional&
    only_if_not () const;

    only_if_not_optional&
    only_if_not ();

    void
    only_if_not (const only_if_not_type& x);

    void
    only_if_not (const only_if_not_optional& x);

    void
    only_if_not (::std::unique_ptr< only_if_not_type > p);

    // Constructors.
    //
    quantity (const id_type&);

    quantity (const ::xercesc::DOMElement& e,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

    quantity (const quantity& x,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

    virtual quantity*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    quantity&
    operator= (const quantity& x);

    virtual 
    ~quantity ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xsd::cxx::tree::one< id_type > id_;
    condition_optional condition_;
    default_optional default__;
    nonlinearity_planar_optional nonlinearity_planar_;
    nonlinearity_axi_optional nonlinearity_axi_;
    dependence_optional dependence_;
    name_optional name_;
    shortname_optional shortname_;
    shortname_html_optional shortname_html_;
    shortname_latex_optional shortname_latex_;
    shortname_dependence_optional shortname_dependence_;
    shortname_dependence_html_optional shortname_dependence_html_;
    unit_optional unit_;
    unit_html_optional unit_html_;
    unit_latex_optional unit_latex_;
    is_source_optional is_source_;
    is_bool_optional is_bool_;
    only_if_optional only_if_;
    only_if_not_optional only_if_not_;
  };

  class function: public ::xml_schema::type
  {
    public:
    // quantity
    //
    typedef ::XMLModule::quantity quantity_type;
    typedef ::xsd::cxx::tree::sequence< quantity_type > quantity_sequence;
    typedef quantity_sequence::iterator quantity_iterator;
    typedef quantity_sequence::const_iterator quantity_const_iterator;
    typedef ::xsd::cxx::tree::traits< quantity_type, char > quantity_traits;

    const quantity_sequence&
    quantity () const;

    quantity_sequence&
    quantity ();

    void
    quantity (const quantity_sequence& s);

    // function_variant
    //
    typedef ::XMLModule::function_variant function_variant_type;
    typedef ::xsd::cxx::tree::sequence< function_variant_type > function_variant_sequence;
    typedef function_variant_sequence::iterator function_variant_iterator;
    typedef function_variant_sequence::const_iterator function_variant_const_iterator;
    typedef ::xsd::cxx::tree::traits< function_variant_type, char > function_variant_traits;

    const function_variant_sequence&
    function_variant () const;

    function_variant_sequence&
    function_variant ();

    void
    function_variant (const function_variant_sequence& s);

    // id
    //
    typedef ::xml_schema::string id_type;
    typedef ::xsd::cxx::tree::traits< id_type, char > id_traits;

    const id_type&
    id () const;

    id_type&
    id ();

    void
    id (const id_type& x);

    void
    id (::std::unique_ptr< id_type > p);

    // shortname
    //
    typedef ::xml_schema::string shortname_type;
    typedef ::xsd::cxx::tree::traits< shortname_type, char > shortname_traits;

    const shortname_type&
    shortname () const;

    shortname_type&
    shortname ();

    void
    shortname (const shortname_type& x);

    void
    shortname (::std::unique_ptr< shortname_type > p);

    // type
    //
    typedef ::xml_schema::string type_type;
    typedef ::xsd::cxx::tree::traits< type_type, char > type_traits;

    const type_type&
    type () const;

    type_type&
    type ();

    void
    type (const type_type& x);

    void
    type (::std::unique_ptr< type_type > p);

    // postprocessor_analysis
    //
    typedef ::xml_schema::string postprocessor_analysis_type;
    typedef ::xsd::cxx::tree::optional< postprocessor_analysis_type > postprocessor_analysis_optional;
    typedef ::xsd::cxx::tree::traits< postprocessor_analysis_type, char > postprocessor_analysis_traits;

    const postprocessor_analysis_optional&
    postprocessor_analysis () const;

    postprocessor_analysis_optional&
    postprocessor_analysis ();

    void
    postprocessor_analysis (const postprocessor_analysis_type& x);

    void
    postprocessor_analysis (const postprocessor_analysis_optional& x);

    void
    postprocessor_analysis (::std::unique_ptr< postprocessor_analysis_type > p);

    // postprocessor_linearity
    //
    typedef ::xml_schema::string postprocessor_linearity_type;
    typedef ::xsd::cxx::tree::optional< postprocessor_linearity_type > postprocessor_linearity_optional;
    typedef ::xsd::cxx::tree::traits< postprocessor_linearity_type, char > postprocessor_linearity_traits;

    const postprocessor_linearity_optional&
    postprocessor_linearity () const;

    postprocessor_linearity_optional&
    postprocessor_linearity ();

    void
    postprocessor_linearity (const postprocessor_linearity_type& x);

    void
    postprocessor_linearity (const postprocessor_linearity_optional& x);

    void
    postprocessor_linearity (::std::unique_ptr< postprocessor_linearity_type > p);

    // Constructors.
    //
    function (const id_type&,
              const shortname_type&,
              const type_type&);

    function (const ::xercesc::DOMElement& e,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

    function (const function& x,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

    virtual function*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    function&
    operator= (const function& x);

    virtual 
    ~function ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    quantity_sequence quantity_;
    function_variant_sequence function_variant_;
    ::xsd::cxx::tree::one< id_type > id_;
    ::xsd::cxx::tree::one< shortname_type > shortname_;
    ::xsd::cxx::tree::one< type_type > type_;
    postprocessor_analysis_optional postprocessor_analysis_;
    postprocessor_linearity_optional postprocessor_linearity_;
  };

  class function_variant: public ::xml_schema::type
  {
    public:
    // switch_value
    //
    typedef ::xml_schema::string switch_value_type;
    typedef ::xsd::cxx::tree::optional< switch_value_type > switch_value_optional;
    typedef ::xsd::cxx::tree::traits< switch_value_type, char > switch_value_traits;

    const switch_value_optional&
    switch_value () const;

    switch_value_optional&
    switch_value ();

    void
    switch_value (const switch_value_type& x);

    void
    switch_value (const switch_value_optional& x);

    void
    switch_value (::std::unique_ptr< switch_value_type > p);

    // expr
    //
    typedef ::xml_schema::string expr_type;
    typedef ::xsd::cxx::tree::traits< expr_type, char > expr_traits;

    const expr_type&
    expr () const;

    expr_type&
    expr ();

    void
    expr (const expr_type& x);

    void
    expr (::std::unique_ptr< expr_type > p);

    // expr_axi
    //
    typedef ::xml_schema::string expr_axi_type;
    typedef ::xsd::cxx::tree::optional< expr_axi_type > expr_axi_optional;
    typedef ::xsd::cxx::tree::traits< expr_axi_type, char > expr_axi_traits;

    const expr_axi_optional&
    expr_axi () const;

    expr_axi_optional&
    expr_axi ();

    void
    expr_axi (const expr_axi_type& x);

    void
    expr_axi (const expr_axi_optional& x);

    void
    expr_axi (::std::unique_ptr< expr_axi_type > p);

    // Constructors.
    //
    function_variant (const expr_type&);

    function_variant (const ::xercesc::DOMElement& e,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

    function_variant (const function_variant& x,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

    virtual function_variant*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    function_variant&
    operator= (const function_variant& x);

    virtual 
    ~function_variant ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    switch_value_optional switch_value_;
    ::xsd::cxx::tree::one< expr_type > expr_;
    expr_axi_optional expr_axi_;
  };

  class function_use: public ::xml_schema::type
  {
    public:
    // id
    //
    typedef ::xml_schema::string id_type;
    typedef ::xsd::cxx::tree::traits< id_type, char > id_traits;

    const id_type&
    id () const;

    id_type&
    id ();

    void
    id (const id_type& x);

    void
    id (::std::unique_ptr< id_type > p);

    // Constructors.
    //
    function_use (const id_type&);

    function_use (const ::xercesc::DOMElement& e,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

    function_use (const function_use& x,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

    virtual function_use*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    function_use&
    operator= (const function_use& x);

    virtual 
    ~function_use ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xsd::cxx::tree::one< id_type > id_;
  };

  class error_calculator: public ::xml_schema::type
  {
    public:
    // calculator
    //
    typedef ::XMLModule::calculator calculator_type;
    typedef ::xsd::cxx::tree::sequence< calculator_type > calculator_sequence;
    typedef calculator_sequence::iterator calculator_iterator;
    typedef calculator_sequence::const_iterator calculator_const_iterator;
    typedef ::xsd::cxx::tree::traits< calculator_type, char > calculator_traits;

    const calculator_sequence&
    calculator () const;

    calculator_sequence&
    calculator ();

    void
    calculator (const calculator_sequence& s);

    // Constructors.
    //
    error_calculator ();

    error_calculator (const ::xercesc::DOMElement& e,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

    error_calculator (const error_calculator& x,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

    virtual error_calculator*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    error_calculator&
    operator= (const error_calculator& x);

    virtual 
    ~error_calculator ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    calculator_sequence calculator_;
  };

  class calculator: public ::xml_schema::type
  {
    public:
    // expression
    //
    typedef ::XMLModule::expression expression_type;
    typedef ::xsd::cxx::tree::sequence< expression_type > expression_sequence;
    typedef expression_sequence::iterator expression_iterator;
    typedef expression_sequence::const_iterator expression_const_iterator;
    typedef ::xsd::cxx::tree::traits< expression_type, char > expression_traits;

    const expression_sequence&
    expression () const;

    expression_sequence&
    expression ();

    void
    expression (const expression_sequence& s);

    // id
    //
    typedef ::xml_schema::string id_type;
    typedef ::xsd::cxx::tree::traits< id_type, char > id_traits;

    const id_type&
    id () const;

    id_type&
    id ();

    void
    id (const id_type& x);

    void
    id (::std::unique_ptr< id_type > p);

    // name
    //
    typedef ::xml_schema::string name_type;
    typedef ::xsd::cxx::tree::traits< name_type, char > name_traits;

    const name_type&
    name () const;

    name_type&
    name ();

    void
    name (const name_type& x);

    void
    name (::std::unique_ptr< name_type > p);

    // Constructors.
    //
    calculator (const id_type&,
                const name_type&);

    calculator (const ::xercesc::DOMElement& e,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

    calculator (const calculator& x,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

    virtual calculator*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    calculator&
    operator= (const calculator& x);

    virtual 
    ~calculator ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    expression_sequence expression_;
    ::xsd::cxx::tree::one< id_type > id_;
    ::xsd::cxx::tree::one< name_type > name_;
  };

  class expression: public ::xml_schema::type
  {
    public:
    // analysistype
    //
    typedef ::xml_schema::string analysistype_type;
    typedef ::xsd::cxx::tree::traits< analysistype_type, char > analysistype_traits;

    const analysistype_type&
    analysistype () const;

    analysistype_type&
    analysistype ();

    void
    analysistype (const analysistype_type& x);

    void
    analysistype (::std::unique_ptr< analysistype_type > p);

    // axi
    //
    typedef ::xml_schema::string axi_type;
    typedef ::xsd::cxx::tree::optional< axi_type > axi_optional;
    typedef ::xsd::cxx::tree::traits< axi_type, char > axi_traits;

    const axi_optional&
    axi () const;

    axi_optional&
    axi ();

    void
    axi (const axi_type& x);

    void
    axi (const axi_optional& x);

    void
    axi (::std::unique_ptr< axi_type > p);

    // axi_r
    //
    typedef ::xml_schema::string axi_r_type;
    typedef ::xsd::cxx::tree::optional< axi_r_type > axi_r_optional;
    typedef ::xsd::cxx::tree::traits< axi_r_type, char > axi_r_traits;

    const axi_r_optional&
    axi_r () const;

    axi_r_optional&
    axi_r ();

    void
    axi_r (const axi_r_type& x);

    void
    axi_r (const axi_r_optional& x);

    void
    axi_r (::std::unique_ptr< axi_r_type > p);

    // axi_z
    //
    typedef ::xml_schema::string axi_z_type;
    typedef ::xsd::cxx::tree::optional< axi_z_type > axi_z_optional;
    typedef ::xsd::cxx::tree::traits< axi_z_type, char > axi_z_traits;

    const axi_z_optional&
    axi_z () const;

    axi_z_optional&
    axi_z ();

    void
    axi_z (const axi_z_type& x);

    void
    axi_z (const axi_z_optional& x);

    void
    axi_z (::std::unique_ptr< axi_z_type > p);

    // axi_phi
    //
    typedef ::xml_schema::string axi_phi_type;
    typedef ::xsd::cxx::tree::optional< axi_phi_type > axi_phi_optional;
    typedef ::xsd::cxx::tree::traits< axi_phi_type, char > axi_phi_traits;

    const axi_phi_optional&
    axi_phi () const;

    axi_phi_optional&
    axi_phi ();

    void
    axi_phi (const axi_phi_type& x);

    void
    axi_phi (const axi_phi_optional& x);

    void
    axi_phi (::std::unique_ptr< axi_phi_type > p);

    // planar
    //
    typedef ::xml_schema::string planar_type;
    typedef ::xsd::cxx::tree::optional< planar_type > planar_optional;
    typedef ::xsd::cxx::tree::traits< planar_type, char > planar_traits;

    const planar_optional&
    planar () const;

    planar_optional&
    planar ();

    void
    planar (const planar_type& x);

    void
    planar (const planar_optional& x);

    void
    planar (::std::unique_ptr< planar_type > p);

    // planar_x
    //
    typedef ::xml_schema::string planar_x_type;
    typedef ::xsd::cxx::tree::optional< planar_x_type > planar_x_optional;
    typedef ::xsd::cxx::tree::traits< planar_x_type, char > planar_x_traits;

    const planar_x_optional&
    planar_x () const;

    planar_x_optional&
    planar_x ();

    void
    planar_x (const planar_x_type& x);

    void
    planar_x (const planar_x_optional& x);

    void
    planar_x (::std::unique_ptr< planar_x_type > p);

    // planar_y
    //
    typedef ::xml_schema::string planar_y_type;
    typedef ::xsd::cxx::tree::optional< planar_y_type > planar_y_optional;
    typedef ::xsd::cxx::tree::traits< planar_y_type, char > planar_y_traits;

    const planar_y_optional&
    planar_y () const;

    planar_y_optional&
    planar_y ();

    void
    planar_y (const planar_y_type& x);

    void
    planar_y (const planar_y_optional& x);

    void
    planar_y (::std::unique_ptr< planar_y_type > p);

    // planar_z
    //
    typedef ::xml_schema::string planar_z_type;
    typedef ::xsd::cxx::tree::optional< planar_z_type > planar_z_optional;
    typedef ::xsd::cxx::tree::traits< planar_z_type, char > planar_z_traits;

    const planar_z_optional&
    planar_z () const;

    planar_z_optional&
    planar_z ();

    void
    planar_z (const planar_z_type& x);

    void
    planar_z (const planar_z_optional& x);

    void
    planar_z (::std::unique_ptr< planar_z_type > p);

    // Constructors.
    //
    expression (const analysistype_type&);

    expression (const ::xercesc::DOMElement& e,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

    expression (const expression& x,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

    virtual expression*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    expression&
    operator= (const expression& x);

    virtual 
    ~expression ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xsd::cxx::tree::one< analysistype_type > analysistype_;
    axi_optional axi_;
    axi_r_optional axi_r_;
    axi_z_optional axi_z_;
    axi_phi_optional axi_phi_;
    planar_optional planar_;
    planar_x_optional planar_x_;
    planar_y_optional planar_y_;
    planar_z_optional planar_z_;
  };

  class field_item: public ::xml_schema::type
  {
    public:
    // field_key
    //
    typedef ::xml_schema::string field_key_type;
    typedef ::xsd::cxx::tree::traits< field_key_type, char > field_key_traits;

    const field_key_type&
    field_key () const;

    field_key_type&
    field_key ();

    void
    field_key (const field_key_type& x);

    void
    field_key (::std::unique_ptr< field_key_type > p);

    // field_value
    //
    typedef ::xml_schema::string field_value_type;
    typedef ::xsd::cxx::tree::traits< field_value_type, char > field_value_traits;

    const field_value_type&
    field_value () const;

    field_value_type&
    field_value ();

    void
    field_value (const field_value_type& x);

    void
    field_value (::std::unique_ptr< field_value_type > p);

    // Constructors.
    //
    field_item (const field_key_type&,
                const field_value_type&);

    field_item (const ::xercesc::DOMElement& e,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

    field_item (const field_item& x,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

    virtual field_item*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    field_item&
    operator= (const field_item& x);

    virtual 
    ~field_item ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xsd::cxx::tree::one< field_key_type > field_key_;
    ::xsd::cxx::tree::one< field_value_type > field_value_;
  };
}

#include <iosfwd>

namespace XMLModule
{
  ::std::ostream&
  operator<< (::std::ostream&, const module&);

  ::std::ostream&
  operator<< (::std::ostream&, const field&);

  ::std::ostream&
  operator<< (::std::ostream&, const general_field&);

  ::std::ostream&
  operator<< (::std::ostream&, const analyses&);

  ::std::ostream&
  operator<< (::std::ostream&, const analysis&);

  ::std::ostream&
  operator<< (::std::ostream&, const field_config&);

  ::std::ostream&
  operator<< (::std::ostream&, const coupling&);

  ::std::ostream&
  operator<< (::std::ostream&, const general_coupling&);

  ::std::ostream&
  operator<< (::std::ostream&, const modules&);

  ::std::ostream&
  operator<< (::std::ostream&, const source&);

  ::std::ostream&
  operator<< (::std::ostream&, const target&);

  ::std::ostream&
  operator<< (::std::ostream&, const constants&);

  ::std::ostream&
  operator<< (::std::ostream&, const constant&);

  ::std::ostream&
  operator<< (::std::ostream&, const macros&);

  ::std::ostream&
  operator<< (::std::ostream&, const macro&);

  ::std::ostream&
  operator<< (::std::ostream&, const spaces&);

  ::std::ostream&
  operator<< (::std::ostream&, const space&);

  ::std::ostream&
  operator<< (::std::ostream&, const space_config&);

  ::std::ostream&
  operator<< (::std::ostream&, const preprocessor&);

  ::std::ostream&
  operator<< (::std::ostream&, const gui&);

  ::std::ostream&
  operator<< (::std::ostream&, const group&);

  ::std::ostream&
  operator<< (::std::ostream&, const switch_combo&);

  ::std::ostream&
  operator<< (::std::ostream&, const switch_option&);

  ::std::ostream&
  operator<< (::std::ostream&, const postprocessor&);

  ::std::ostream&
  operator<< (::std::ostream&, const localvariables&);

  ::std::ostream&
  operator<< (::std::ostream&, const localvariable&);

  ::std::ostream&
  operator<< (::std::ostream&, const view&);

  ::std::ostream&
  operator<< (::std::ostream&, const scalar_view&);

  ::std::ostream&
  operator<< (::std::ostream&, const vector_view&);

  ::std::ostream&
  operator<< (::std::ostream&, const default_&);

  ::std::ostream&
  operator<< (::std::ostream&, const volumeintegrals&);

  ::std::ostream&
  operator<< (::std::ostream&, const volumeintegral&);

  ::std::ostream&
  operator<< (::std::ostream&, const surfaceintegrals&);

  ::std::ostream&
  operator<< (::std::ostream&, const surfaceintegral&);

  ::std::ostream&
  operator<< (::std::ostream&, const force&);

  ::std::ostream&
  operator<< (::std::ostream&, const volume&);

  ::std::ostream&
  operator<< (::std::ostream&, const surface&);

  ::std::ostream&
  operator<< (::std::ostream&, const boundary&);

  ::std::ostream&
  operator<< (::std::ostream&, const weakforms_surface&);

  ::std::ostream&
  operator<< (::std::ostream&, const weakform_surface&);

  ::std::ostream&
  operator<< (::std::ostream&, const weakforms_volume&);

  ::std::ostream&
  operator<< (::std::ostream&, const weakform_volume&);

  ::std::ostream&
  operator<< (::std::ostream&, const linearity_option&);

  ::std::ostream&
  operator<< (::std::ostream&, const matrix_form&);

  ::std::ostream&
  operator<< (::std::ostream&, const vector_form&);

  ::std::ostream&
  operator<< (::std::ostream&, const matrix_transient_form&);

  ::std::ostream&
  operator<< (::std::ostream&, const essential_form&);

  ::std::ostream&
  operator<< (::std::ostream&, const quantity&);

  ::std::ostream&
  operator<< (::std::ostream&, const function&);

  ::std::ostream&
  operator<< (::std::ostream&, const function_variant&);

  ::std::ostream&
  operator<< (::std::ostream&, const function_use&);

  ::std::ostream&
  operator<< (::std::ostream&, const error_calculator&);

  ::std::ostream&
  operator<< (::std::ostream&, const calculator&);

  ::std::ostream&
  operator<< (::std::ostream&, const expression&);

  ::std::ostream&
  operator<< (::std::ostream&, const field_item&);
}

#include <iosfwd>

#include <xercesc/sax/InputSource.hpp>
#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>

namespace XMLModule
{
  // Parse a URI or a local file.
  //

  ::std::unique_ptr< ::XMLModule::module >
  module_ (const ::std::string& uri,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::XMLModule::module >
  module_ (const ::std::string& uri,
           ::xml_schema::error_handler& eh,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::XMLModule::module >
  module_ (const ::std::string& uri,
           ::xercesc::DOMErrorHandler& eh,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::unique_ptr< ::XMLModule::module >
  module_ (::std::istream& is,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::XMLModule::module >
  module_ (::std::istream& is,
           ::xml_schema::error_handler& eh,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::XMLModule::module >
  module_ (::std::istream& is,
           ::xercesc::DOMErrorHandler& eh,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::XMLModule::module >
  module_ (::std::istream& is,
           const ::std::string& id,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::XMLModule::module >
  module_ (::std::istream& is,
           const ::std::string& id,
           ::xml_schema::error_handler& eh,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::XMLModule::module >
  module_ (::std::istream& is,
           const ::std::string& id,
           ::xercesc::DOMErrorHandler& eh,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::unique_ptr< ::XMLModule::module >
  module_ (::xercesc::InputSource& is,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::XMLModule::module >
  module_ (::xercesc::InputSource& is,
           ::xml_schema::error_handler& eh,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::XMLModule::module >
  module_ (::xercesc::InputSource& is,
           ::xercesc::DOMErrorHandler& eh,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::unique_ptr< ::XMLModule::module >
  module_ (const ::xercesc::DOMDocument& d,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::XMLModule::module >
  module_ (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());
}

#include <iosfwd>

#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>
#include <xercesc/framework/XMLFormatter.hpp>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

namespace XMLModule
{
  // Serialize to std::ostream.
  //

  void
  module_ (::std::ostream& os,
           const ::XMLModule::module& x, 
           const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
           const ::std::string& e = "UTF-8",
           ::xml_schema::flags f = 0);

  void
  module_ (::std::ostream& os,
           const ::XMLModule::module& x, 
           ::xml_schema::error_handler& eh,
           const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
           const ::std::string& e = "UTF-8",
           ::xml_schema::flags f = 0);

  void
  module_ (::std::ostream& os,
           const ::XMLModule::module& x, 
           ::xercesc::DOMErrorHandler& eh,
           const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
           const ::std::string& e = "UTF-8",
           ::xml_schema::flags f = 0);

  // Serialize to xercesc::XMLFormatTarget.
  //

  void
  module_ (::xercesc::XMLFormatTarget& ft,
           const ::XMLModule::module& x, 
           const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
           const ::std::string& e = "UTF-8",
           ::xml_schema::flags f = 0);

  void
  module_ (::xercesc::XMLFormatTarget& ft,
           const ::XMLModule::module& x, 
           ::xml_schema::error_handler& eh,
           const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
           const ::std::string& e = "UTF-8",
           ::xml_schema::flags f = 0);

  void
  module_ (::xercesc::XMLFormatTarget& ft,
           const ::XMLModule::module& x, 
           ::xercesc::DOMErrorHandler& eh,
           const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
           const ::std::string& e = "UTF-8",
           ::xml_schema::flags f = 0);

  // Serialize to an existing xercesc::DOMDocument.
  //

  void
  module_ (::xercesc::DOMDocument& d,
           const ::XMLModule::module& x,
           ::xml_schema::flags f = 0);

  // Serialize to a new xercesc::DOMDocument.
  //

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
  module_ (const ::XMLModule::module& x, 
           const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
           ::xml_schema::flags f = 0);

  void
  operator<< (::xercesc::DOMElement&, const module&);

  void
  operator<< (::xercesc::DOMElement&, const field&);

  void
  operator<< (::xercesc::DOMElement&, const general_field&);

  void
  operator<< (::xercesc::DOMElement&, const analyses&);

  void
  operator<< (::xercesc::DOMElement&, const analysis&);

  void
  operator<< (::xercesc::DOMElement&, const field_config&);

  void
  operator<< (::xercesc::DOMElement&, const coupling&);

  void
  operator<< (::xercesc::DOMElement&, const general_coupling&);

  void
  operator<< (::xercesc::DOMElement&, const modules&);

  void
  operator<< (::xercesc::DOMElement&, const source&);

  void
  operator<< (::xercesc::DOMElement&, const target&);

  void
  operator<< (::xercesc::DOMElement&, const constants&);

  void
  operator<< (::xercesc::DOMElement&, const constant&);

  void
  operator<< (::xercesc::DOMElement&, const macros&);

  void
  operator<< (::xercesc::DOMElement&, const macro&);

  void
  operator<< (::xercesc::DOMElement&, const spaces&);

  void
  operator<< (::xercesc::DOMElement&, const space&);

  void
  operator<< (::xercesc::DOMElement&, const space_config&);

  void
  operator<< (::xercesc::DOMElement&, const preprocessor&);

  void
  operator<< (::xercesc::DOMElement&, const gui&);

  void
  operator<< (::xercesc::DOMElement&, const group&);

  void
  operator<< (::xercesc::DOMElement&, const switch_combo&);

  void
  operator<< (::xercesc::DOMElement&, const switch_option&);

  void
  operator<< (::xercesc::DOMElement&, const postprocessor&);

  void
  operator<< (::xercesc::DOMElement&, const localvariables&);

  void
  operator<< (::xercesc::DOMElement&, const localvariable&);

  void
  operator<< (::xercesc::DOMElement&, const view&);

  void
  operator<< (::xercesc::DOMElement&, const scalar_view&);

  void
  operator<< (::xercesc::DOMElement&, const vector_view&);

  void
  operator<< (::xercesc::DOMElement&, const default_&);

  void
  operator<< (::xercesc::DOMElement&, const volumeintegrals&);

  void
  operator<< (::xercesc::DOMElement&, const volumeintegral&);

  void
  operator<< (::xercesc::DOMElement&, const surfaceintegrals&);

  void
  operator<< (::xercesc::DOMElement&, const surfaceintegral&);

  void
  operator<< (::xercesc::DOMElement&, const force&);

  void
  operator<< (::xercesc::DOMElement&, const volume&);

  void
  operator<< (::xercesc::DOMElement&, const surface&);

  void
  operator<< (::xercesc::DOMElement&, const boundary&);

  void
  operator<< (::xercesc::DOMElement&, const weakforms_surface&);

  void
  operator<< (::xercesc::DOMElement&, const weakform_surface&);

  void
  operator<< (::xercesc::DOMElement&, const weakforms_volume&);

  void
  operator<< (::xercesc::DOMElement&, const weakform_volume&);

  void
  operator<< (::xercesc::DOMElement&, const linearity_option&);

  void
  operator<< (::xercesc::DOMElement&, const matrix_form&);

  void
  operator<< (::xercesc::DOMElement&, const vector_form&);

  void
  operator<< (::xercesc::DOMElement&, const matrix_transient_form&);

  void
  operator<< (::xercesc::DOMElement&, const essential_form&);

  void
  operator<< (::xercesc::DOMElement&, const quantity&);

  void
  operator<< (::xercesc::DOMElement&, const function&);

  void
  operator<< (::xercesc::DOMElement&, const function_variant&);

  void
  operator<< (::xercesc::DOMElement&, const function_use&);

  void
  operator<< (::xercesc::DOMElement&, const error_calculator&);

  void
  operator<< (::xercesc::DOMElement&, const calculator&);

  void
  operator<< (::xercesc::DOMElement&, const expression&);

  void
  operator<< (::xercesc::DOMElement&, const field_item&);
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

#endif // CXX_HOME_KARBAN_PROJECTS_AGROS2D_DEALII_RESOURCES_XSD_MODULE_XML_H
