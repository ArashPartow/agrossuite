/* Generated by Cython 0.29.21 */

#define PY_SSIZE_T_CLEAN
#include "Python.h"
#ifndef Py_PYTHON_H
    #error Python headers needed to compile C extensions, please install development version of Python.
#elif PY_VERSION_HEX < 0x02060000 || (0x03000000 <= PY_VERSION_HEX && PY_VERSION_HEX < 0x03030000)
    #error Cython requires Python 2.6+ or Python 3.3+.
#else
#define CYTHON_ABI "0_29_21"
#define CYTHON_HEX_VERSION 0x001D15F0
#define CYTHON_FUTURE_DIVISION 0
#include <stddef.h>
#ifndef offsetof
  #define offsetof(type, member) ( (size_t) & ((type*)0) -> member )
#endif
#if !defined(WIN32) && !defined(MS_WINDOWS)
  #ifndef __stdcall
    #define __stdcall
  #endif
  #ifndef __cdecl
    #define __cdecl
  #endif
  #ifndef __fastcall
    #define __fastcall
  #endif
#endif
#ifndef DL_IMPORT
  #define DL_IMPORT(t) t
#endif
#ifndef DL_EXPORT
  #define DL_EXPORT(t) t
#endif
#define __PYX_COMMA ,
#ifndef HAVE_LONG_LONG
  #if PY_VERSION_HEX >= 0x02070000
    #define HAVE_LONG_LONG
  #endif
#endif
#ifndef PY_LONG_LONG
  #define PY_LONG_LONG LONG_LONG
#endif
#ifndef Py_HUGE_VAL
  #define Py_HUGE_VAL HUGE_VAL
#endif
#ifdef PYPY_VERSION
  #define CYTHON_COMPILING_IN_PYPY 1
  #define CYTHON_COMPILING_IN_PYSTON 0
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #undef CYTHON_USE_TYPE_SLOTS
  #define CYTHON_USE_TYPE_SLOTS 0
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #if PY_VERSION_HEX < 0x03050000
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #undef CYTHON_USE_UNICODE_INTERNALS
  #define CYTHON_USE_UNICODE_INTERNALS 0
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #undef CYTHON_AVOID_BORROWED_REFS
  #define CYTHON_AVOID_BORROWED_REFS 1
  #undef CYTHON_ASSUME_SAFE_MACROS
  #define CYTHON_ASSUME_SAFE_MACROS 0
  #undef CYTHON_UNPACK_METHODS
  #define CYTHON_UNPACK_METHODS 0
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #undef CYTHON_PEP489_MULTI_PHASE_INIT
  #define CYTHON_PEP489_MULTI_PHASE_INIT 0
  #undef CYTHON_USE_TP_FINALIZE
  #define CYTHON_USE_TP_FINALIZE 0
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
#elif defined(PYSTON_VERSION)
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_PYSTON 1
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #undef CYTHON_USE_ASYNC_SLOTS
  #define CYTHON_USE_ASYNC_SLOTS 0
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #undef CYTHON_PEP489_MULTI_PHASE_INIT
  #define CYTHON_PEP489_MULTI_PHASE_INIT 0
  #undef CYTHON_USE_TP_FINALIZE
  #define CYTHON_USE_TP_FINALIZE 0
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
#else
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_PYSTON 0
  #define CYTHON_COMPILING_IN_CPYTHON 1
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #if PY_VERSION_HEX < 0x02070000
    #undef CYTHON_USE_PYTYPE_LOOKUP
    #define CYTHON_USE_PYTYPE_LOOKUP 0
  #elif !defined(CYTHON_USE_PYTYPE_LOOKUP)
    #define CYTHON_USE_PYTYPE_LOOKUP 1
  #endif
  #if PY_MAJOR_VERSION < 3
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #if PY_VERSION_HEX < 0x02070000
    #undef CYTHON_USE_PYLONG_INTERNALS
    #define CYTHON_USE_PYLONG_INTERNALS 0
  #elif !defined(CYTHON_USE_PYLONG_INTERNALS)
    #define CYTHON_USE_PYLONG_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_PYLIST_INTERNALS
    #define CYTHON_USE_PYLIST_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #if PY_VERSION_HEX < 0x030300F0
    #undef CYTHON_USE_UNICODE_WRITER
    #define CYTHON_USE_UNICODE_WRITER 0
  #elif !defined(CYTHON_USE_UNICODE_WRITER)
    #define CYTHON_USE_UNICODE_WRITER 1
  #endif
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #ifndef CYTHON_FAST_THREAD_STATE
    #define CYTHON_FAST_THREAD_STATE 1
  #endif
  #ifndef CYTHON_FAST_PYCALL
    #define CYTHON_FAST_PYCALL 1
  #endif
  #ifndef CYTHON_PEP489_MULTI_PHASE_INIT
    #define CYTHON_PEP489_MULTI_PHASE_INIT (PY_VERSION_HEX >= 0x03050000)
  #endif
  #ifndef CYTHON_USE_TP_FINALIZE
    #define CYTHON_USE_TP_FINALIZE (PY_VERSION_HEX >= 0x030400a1)
  #endif
  #ifndef CYTHON_USE_DICT_VERSIONS
    #define CYTHON_USE_DICT_VERSIONS (PY_VERSION_HEX >= 0x030600B1)
  #endif
  #ifndef CYTHON_USE_EXC_INFO_STACK
    #define CYTHON_USE_EXC_INFO_STACK (PY_VERSION_HEX >= 0x030700A3)
  #endif
#endif
#if !defined(CYTHON_FAST_PYCCALL)
#define CYTHON_FAST_PYCCALL  (CYTHON_FAST_PYCALL && PY_VERSION_HEX >= 0x030600B1)
#endif
#if CYTHON_USE_PYLONG_INTERNALS
  #include "longintrepr.h"
  #undef SHIFT
  #undef BASE
  #undef MASK
  #ifdef SIZEOF_VOID_P
    enum { __pyx_check_sizeof_voidp = 1 / (int)(SIZEOF_VOID_P == sizeof(void*)) };
  #endif
#endif
#ifndef __has_attribute
  #define __has_attribute(x) 0
#endif
#ifndef __has_cpp_attribute
  #define __has_cpp_attribute(x) 0
#endif
#ifndef CYTHON_RESTRICT
  #if defined(__GNUC__)
    #define CYTHON_RESTRICT __restrict__
  #elif defined(_MSC_VER) && _MSC_VER >= 1400
    #define CYTHON_RESTRICT __restrict
  #elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define CYTHON_RESTRICT restrict
  #else
    #define CYTHON_RESTRICT
  #endif
#endif
#ifndef CYTHON_UNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define CYTHON_UNUSED __attribute__ ((__unused__))
#   else
#     define CYTHON_UNUSED
#   endif
# elif defined(__ICC) || (defined(__INTEL_COMPILER) && !defined(_MSC_VER))
#   define CYTHON_UNUSED __attribute__ ((__unused__))
# else
#   define CYTHON_UNUSED
# endif
#endif
#ifndef CYTHON_MAYBE_UNUSED_VAR
#  if defined(__cplusplus)
     template<class T> void CYTHON_MAYBE_UNUSED_VAR( const T& ) { }
#  else
#    define CYTHON_MAYBE_UNUSED_VAR(x) (void)(x)
#  endif
#endif
#ifndef CYTHON_NCP_UNUSED
# if CYTHON_COMPILING_IN_CPYTHON
#  define CYTHON_NCP_UNUSED
# else
#  define CYTHON_NCP_UNUSED CYTHON_UNUSED
# endif
#endif
#define __Pyx_void_to_None(void_result) ((void)(void_result), Py_INCREF(Py_None), Py_None)
#ifdef _MSC_VER
    #ifndef _MSC_STDINT_H_
        #if _MSC_VER < 1300
           typedef unsigned char     uint8_t;
           typedef unsigned int      uint32_t;
        #else
           typedef unsigned __int8   uint8_t;
           typedef unsigned __int32  uint32_t;
        #endif
    #endif
#else
   #include <stdint.h>
#endif
#ifndef CYTHON_FALLTHROUGH
  #if defined(__cplusplus) && __cplusplus >= 201103L
    #if __has_cpp_attribute(fallthrough)
      #define CYTHON_FALLTHROUGH [[fallthrough]]
    #elif __has_cpp_attribute(clang::fallthrough)
      #define CYTHON_FALLTHROUGH [[clang::fallthrough]]
    #elif __has_cpp_attribute(gnu::fallthrough)
      #define CYTHON_FALLTHROUGH [[gnu::fallthrough]]
    #endif
  #endif
  #ifndef CYTHON_FALLTHROUGH
    #if __has_attribute(fallthrough)
      #define CYTHON_FALLTHROUGH __attribute__((fallthrough))
    #else
      #define CYTHON_FALLTHROUGH
    #endif
  #endif
  #if defined(__clang__ ) && defined(__apple_build_version__)
    #if __apple_build_version__ < 7000000
      #undef  CYTHON_FALLTHROUGH
      #define CYTHON_FALLTHROUGH
    #endif
  #endif
#endif

#ifndef __cplusplus
  #error "Cython files generated with the C++ option must be compiled with a C++ compiler."
#endif
#ifndef CYTHON_INLINE
  #if defined(__clang__)
    #define CYTHON_INLINE __inline__ __attribute__ ((__unused__))
  #else
    #define CYTHON_INLINE inline
  #endif
#endif
template<typename T>
void __Pyx_call_destructor(T& x) {
    x.~T();
}
template<typename T>
class __Pyx_FakeReference {
  public:
    __Pyx_FakeReference() : ptr(NULL) { }
    __Pyx_FakeReference(const T& ref) : ptr(const_cast<T*>(&ref)) { }
    T *operator->() { return ptr; }
    T *operator&() { return ptr; }
    operator T&() { return *ptr; }
    template<typename U> bool operator ==(U other) { return *ptr == other; }
    template<typename U> bool operator !=(U other) { return *ptr != other; }
  private:
    T *ptr;
};

#if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x02070600 && !defined(Py_OptimizeFlag)
  #define Py_OptimizeFlag 0
#endif
#define __PYX_BUILD_PY_SSIZE_T "n"
#define CYTHON_FORMAT_SSIZE_T "z"
#if PY_MAJOR_VERSION < 3
  #define __Pyx_BUILTIN_MODULE_NAME "__builtin__"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a+k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
  #define __Pyx_DefaultClassType PyClass_Type
#else
  #define __Pyx_BUILTIN_MODULE_NAME "builtins"
#if PY_VERSION_HEX >= 0x030800A4 && PY_VERSION_HEX < 0x030800B2
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a, 0, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
#else
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
#endif
  #define __Pyx_DefaultClassType PyType_Type
#endif
#ifndef Py_TPFLAGS_CHECKTYPES
  #define Py_TPFLAGS_CHECKTYPES 0
#endif
#ifndef Py_TPFLAGS_HAVE_INDEX
  #define Py_TPFLAGS_HAVE_INDEX 0
#endif
#ifndef Py_TPFLAGS_HAVE_NEWBUFFER
  #define Py_TPFLAGS_HAVE_NEWBUFFER 0
#endif
#ifndef Py_TPFLAGS_HAVE_FINALIZE
  #define Py_TPFLAGS_HAVE_FINALIZE 0
#endif
#ifndef METH_STACKLESS
  #define METH_STACKLESS 0
#endif
#if PY_VERSION_HEX <= 0x030700A3 || !defined(METH_FASTCALL)
  #ifndef METH_FASTCALL
     #define METH_FASTCALL 0x80
  #endif
  typedef PyObject *(*__Pyx_PyCFunctionFast) (PyObject *self, PyObject *const *args, Py_ssize_t nargs);
  typedef PyObject *(*__Pyx_PyCFunctionFastWithKeywords) (PyObject *self, PyObject *const *args,
                                                          Py_ssize_t nargs, PyObject *kwnames);
#else
  #define __Pyx_PyCFunctionFast _PyCFunctionFast
  #define __Pyx_PyCFunctionFastWithKeywords _PyCFunctionFastWithKeywords
#endif
#if CYTHON_FAST_PYCCALL
#define __Pyx_PyFastCFunction_Check(func)\
    ((PyCFunction_Check(func) && (METH_FASTCALL == (PyCFunction_GET_FLAGS(func) & ~(METH_CLASS | METH_STATIC | METH_COEXIST | METH_KEYWORDS | METH_STACKLESS)))))
#else
#define __Pyx_PyFastCFunction_Check(func) 0
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Malloc)
  #define PyObject_Malloc(s)   PyMem_Malloc(s)
  #define PyObject_Free(p)     PyMem_Free(p)
  #define PyObject_Realloc(p)  PyMem_Realloc(p)
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x030400A1
  #define PyMem_RawMalloc(n)           PyMem_Malloc(n)
  #define PyMem_RawRealloc(p, n)       PyMem_Realloc(p, n)
  #define PyMem_RawFree(p)             PyMem_Free(p)
#endif
#if CYTHON_COMPILING_IN_PYSTON
  #define __Pyx_PyCode_HasFreeVars(co)  PyCode_HasFreeVars(co)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno) PyFrame_SetLineNumber(frame, lineno)
#else
  #define __Pyx_PyCode_HasFreeVars(co)  (PyCode_GetNumFree(co) > 0)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno)  (frame)->f_lineno = (lineno)
#endif
#if !CYTHON_FAST_THREAD_STATE || PY_VERSION_HEX < 0x02070000
  #define __Pyx_PyThreadState_Current PyThreadState_GET()
#elif PY_VERSION_HEX >= 0x03060000
  #define __Pyx_PyThreadState_Current _PyThreadState_UncheckedGet()
#elif PY_VERSION_HEX >= 0x03000000
  #define __Pyx_PyThreadState_Current PyThreadState_GET()
#else
  #define __Pyx_PyThreadState_Current _PyThreadState_Current
#endif
#if PY_VERSION_HEX < 0x030700A2 && !defined(PyThread_tss_create) && !defined(Py_tss_NEEDS_INIT)
#include "pythread.h"
#define Py_tss_NEEDS_INIT 0
typedef int Py_tss_t;
static CYTHON_INLINE int PyThread_tss_create(Py_tss_t *key) {
  *key = PyThread_create_key();
  return 0;
}
static CYTHON_INLINE Py_tss_t * PyThread_tss_alloc(void) {
  Py_tss_t *key = (Py_tss_t *)PyObject_Malloc(sizeof(Py_tss_t));
  *key = Py_tss_NEEDS_INIT;
  return key;
}
static CYTHON_INLINE void PyThread_tss_free(Py_tss_t *key) {
  PyObject_Free(key);
}
static CYTHON_INLINE int PyThread_tss_is_created(Py_tss_t *key) {
  return *key != Py_tss_NEEDS_INIT;
}
static CYTHON_INLINE void PyThread_tss_delete(Py_tss_t *key) {
  PyThread_delete_key(*key);
  *key = Py_tss_NEEDS_INIT;
}
static CYTHON_INLINE int PyThread_tss_set(Py_tss_t *key, void *value) {
  return PyThread_set_key_value(*key, value);
}
static CYTHON_INLINE void * PyThread_tss_get(Py_tss_t *key) {
  return PyThread_get_key_value(*key);
}
#endif
#if CYTHON_COMPILING_IN_CPYTHON || defined(_PyDict_NewPresized)
#define __Pyx_PyDict_NewPresized(n)  ((n <= 8) ? PyDict_New() : _PyDict_NewPresized(n))
#else
#define __Pyx_PyDict_NewPresized(n)  PyDict_New()
#endif
#if PY_MAJOR_VERSION >= 3 || CYTHON_FUTURE_DIVISION
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_TrueDivide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceTrueDivide(x,y)
#else
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_Divide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceDivide(x,y)
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030500A1 && CYTHON_USE_UNICODE_INTERNALS
#define __Pyx_PyDict_GetItemStr(dict, name)  _PyDict_GetItem_KnownHash(dict, name, ((PyASCIIObject *) name)->hash)
#else
#define __Pyx_PyDict_GetItemStr(dict, name)  PyDict_GetItem(dict, name)
#endif
#if PY_VERSION_HEX > 0x03030000 && defined(PyUnicode_KIND)
  #define CYTHON_PEP393_ENABLED 1
  #define __Pyx_PyUnicode_READY(op)       (likely(PyUnicode_IS_READY(op)) ?\
                                              0 : _PyUnicode_Ready((PyObject *)(op)))
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_LENGTH(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) PyUnicode_READ_CHAR(u, i)
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   PyUnicode_MAX_CHAR_VALUE(u)
  #define __Pyx_PyUnicode_KIND(u)         PyUnicode_KIND(u)
  #define __Pyx_PyUnicode_DATA(u)         PyUnicode_DATA(u)
  #define __Pyx_PyUnicode_READ(k, d, i)   PyUnicode_READ(k, d, i)
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  PyUnicode_WRITE(k, d, i, ch)
  #if defined(PyUnicode_IS_READY) && defined(PyUnicode_GET_SIZE)
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != (likely(PyUnicode_IS_READY(u)) ? PyUnicode_GET_LENGTH(u) : PyUnicode_GET_SIZE(u)))
  #else
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != PyUnicode_GET_LENGTH(u))
  #endif
#else
  #define CYTHON_PEP393_ENABLED 0
  #define PyUnicode_1BYTE_KIND  1
  #define PyUnicode_2BYTE_KIND  2
  #define PyUnicode_4BYTE_KIND  4
  #define __Pyx_PyUnicode_READY(op)       (0)
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_SIZE(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) ((Py_UCS4)(PyUnicode_AS_UNICODE(u)[i]))
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   ((sizeof(Py_UNICODE) == 2) ? 65535 : 1114111)
  #define __Pyx_PyUnicode_KIND(u)         (sizeof(Py_UNICODE))
  #define __Pyx_PyUnicode_DATA(u)         ((void*)PyUnicode_AS_UNICODE(u))
  #define __Pyx_PyUnicode_READ(k, d, i)   ((void)(k), (Py_UCS4)(((Py_UNICODE*)d)[i]))
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  (((void)(k)), ((Py_UNICODE*)d)[i] = ch)
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != PyUnicode_GET_SIZE(u))
#endif
#if CYTHON_COMPILING_IN_PYPY
  #define __Pyx_PyUnicode_Concat(a, b)      PyNumber_Add(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  PyNumber_Add(a, b)
#else
  #define __Pyx_PyUnicode_Concat(a, b)      PyUnicode_Concat(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  ((unlikely((a) == Py_None) || unlikely((b) == Py_None)) ?\
      PyNumber_Add(a, b) : __Pyx_PyUnicode_Concat(a, b))
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyUnicode_Contains)
  #define PyUnicode_Contains(u, s)  PySequence_Contains(u, s)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyByteArray_Check)
  #define PyByteArray_Check(obj)  PyObject_TypeCheck(obj, &PyByteArray_Type)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Format)
  #define PyObject_Format(obj, fmt)  PyObject_CallMethod(obj, "__format__", "O", fmt)
#endif
#define __Pyx_PyString_FormatSafe(a, b)   ((unlikely((a) == Py_None || (PyString_Check(b) && !PyString_CheckExact(b)))) ? PyNumber_Remainder(a, b) : __Pyx_PyString_Format(a, b))
#define __Pyx_PyUnicode_FormatSafe(a, b)  ((unlikely((a) == Py_None || (PyUnicode_Check(b) && !PyUnicode_CheckExact(b)))) ? PyNumber_Remainder(a, b) : PyUnicode_Format(a, b))
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyString_Format(a, b)  PyUnicode_Format(a, b)
#else
  #define __Pyx_PyString_Format(a, b)  PyString_Format(a, b)
#endif
#if PY_MAJOR_VERSION < 3 && !defined(PyObject_ASCII)
  #define PyObject_ASCII(o)            PyObject_Repr(o)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBaseString_Type            PyUnicode_Type
  #define PyStringObject               PyUnicodeObject
  #define PyString_Type                PyUnicode_Type
  #define PyString_Check               PyUnicode_Check
  #define PyString_CheckExact          PyUnicode_CheckExact
#ifndef PyObject_Unicode
  #define PyObject_Unicode             PyObject_Str
#endif
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyBaseString_Check(obj) PyUnicode_Check(obj)
  #define __Pyx_PyBaseString_CheckExact(obj) PyUnicode_CheckExact(obj)
#else
  #define __Pyx_PyBaseString_Check(obj) (PyString_Check(obj) || PyUnicode_Check(obj))
  #define __Pyx_PyBaseString_CheckExact(obj) (PyString_CheckExact(obj) || PyUnicode_CheckExact(obj))
#endif
#ifndef PySet_CheckExact
  #define PySet_CheckExact(obj)        (Py_TYPE(obj) == &PySet_Type)
#endif
#if PY_VERSION_HEX >= 0x030900A4
  #define __Pyx_SET_REFCNT(obj, refcnt) Py_SET_REFCNT(obj, refcnt)
  #define __Pyx_SET_SIZE(obj, size) Py_SET_SIZE(obj, size)
#else
  #define __Pyx_SET_REFCNT(obj, refcnt) Py_REFCNT(obj) = (refcnt)
  #define __Pyx_SET_SIZE(obj, size) Py_SIZE(obj) = (size)
#endif
#if CYTHON_ASSUME_SAFE_MACROS
  #define __Pyx_PySequence_SIZE(seq)  Py_SIZE(seq)
#else
  #define __Pyx_PySequence_SIZE(seq)  PySequence_Size(seq)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyIntObject                  PyLongObject
  #define PyInt_Type                   PyLong_Type
  #define PyInt_Check(op)              PyLong_Check(op)
  #define PyInt_CheckExact(op)         PyLong_CheckExact(op)
  #define PyInt_FromString             PyLong_FromString
  #define PyInt_FromUnicode            PyLong_FromUnicode
  #define PyInt_FromLong               PyLong_FromLong
  #define PyInt_FromSize_t             PyLong_FromSize_t
  #define PyInt_FromSsize_t            PyLong_FromSsize_t
  #define PyInt_AsLong                 PyLong_AsLong
  #define PyInt_AS_LONG                PyLong_AS_LONG
  #define PyInt_AsSsize_t              PyLong_AsSsize_t
  #define PyInt_AsUnsignedLongMask     PyLong_AsUnsignedLongMask
  #define PyInt_AsUnsignedLongLongMask PyLong_AsUnsignedLongLongMask
  #define PyNumber_Int                 PyNumber_Long
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBoolObject                 PyLongObject
#endif
#if PY_MAJOR_VERSION >= 3 && CYTHON_COMPILING_IN_PYPY
  #ifndef PyUnicode_InternFromString
    #define PyUnicode_InternFromString(s) PyUnicode_FromString(s)
  #endif
#endif
#if PY_VERSION_HEX < 0x030200A4
  typedef long Py_hash_t;
  #define __Pyx_PyInt_FromHash_t PyInt_FromLong
  #define __Pyx_PyInt_AsHash_t   PyInt_AsLong
#else
  #define __Pyx_PyInt_FromHash_t PyInt_FromSsize_t
  #define __Pyx_PyInt_AsHash_t   PyInt_AsSsize_t
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyMethod_New(func, self, klass) ((self) ? ((void)(klass), PyMethod_New(func, self)) : __Pyx_NewRef(func))
#else
  #define __Pyx_PyMethod_New(func, self, klass) PyMethod_New(func, self, klass)
#endif
#if CYTHON_USE_ASYNC_SLOTS
  #if PY_VERSION_HEX >= 0x030500B1
    #define __Pyx_PyAsyncMethodsStruct PyAsyncMethods
    #define __Pyx_PyType_AsAsync(obj) (Py_TYPE(obj)->tp_as_async)
  #else
    #define __Pyx_PyType_AsAsync(obj) ((__Pyx_PyAsyncMethodsStruct*) (Py_TYPE(obj)->tp_reserved))
  #endif
#else
  #define __Pyx_PyType_AsAsync(obj) NULL
#endif
#ifndef __Pyx_PyAsyncMethodsStruct
    typedef struct {
        unaryfunc am_await;
        unaryfunc am_aiter;
        unaryfunc am_anext;
    } __Pyx_PyAsyncMethodsStruct;
#endif

#if defined(WIN32) || defined(MS_WINDOWS)
  #define _USE_MATH_DEFINES
#endif
#include <math.h>
#ifdef NAN
#define __PYX_NAN() ((float) NAN)
#else
static CYTHON_INLINE float __PYX_NAN() {
  float value;
  memset(&value, 0xFF, sizeof(value));
  return value;
}
#endif
#if defined(__CYGWIN__) && defined(_LDBL_EQ_DBL)
#define __Pyx_truncl trunc
#else
#define __Pyx_truncl truncl
#endif

#define __PYX_MARK_ERR_POS(f_index, lineno) \
    { __pyx_filename = __pyx_f[f_index]; (void)__pyx_filename; __pyx_lineno = lineno; (void)__pyx_lineno; __pyx_clineno = __LINE__; (void)__pyx_clineno; }
#define __PYX_ERR(f_index, lineno, Ln_error) \
    { __PYX_MARK_ERR_POS(f_index, lineno) goto Ln_error; }

#ifndef __PYX_EXTERN_C
  #ifdef __cplusplus
    #define __PYX_EXTERN_C extern "C"
  #else
    #define __PYX_EXTERN_C extern
  #endif
#endif

#define __PYX_HAVE___agros
#define __PYX_HAVE_API___agros
/* Early includes */
#include "ios"
#include "new"
#include "stdexcept"
#include "typeinfo"
#include <utility>

    #if __cplusplus > 199711L
    #include <type_traits>

    namespace cython_std {
    template <typename T> typename std::remove_reference<T>::type&& move(T& t) noexcept { return std::move(t); }
    template <typename T> typename std::remove_reference<T>::type&& move(T&& t) noexcept { return std::move(t); }
    }

    #endif
    
#include <vector>
#include <map>
#include "limits.h"
#include <string>
#include "../../agros-python/pythonlab/pygeometry.h"
#include "../../agros-python/pythonlab/pyfield.h"
#include "../../agros-python/pythonlab/pyproblem.h"
#include "../../agros-python/pythonlab/pyparticletracing.h"
#include "../../agros-python/pythonlab/pystudy.h"
#include "../../agros-python/pythonlab/pyagros.h"
#ifdef _OPENMP
#include <omp.h>
#endif /* _OPENMP */

#if defined(PYREX_WITHOUT_ASSERTIONS) && !defined(CYTHON_WITHOUT_ASSERTIONS)
#define CYTHON_WITHOUT_ASSERTIONS
#endif

typedef struct {PyObject **p; const char *s; const Py_ssize_t n; const char* encoding;
                const char is_unicode; const char is_str; const char intern; } __Pyx_StringTabEntry;

#define __PYX_DEFAULT_STRING_ENCODING_IS_ASCII 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_UTF8 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT (PY_MAJOR_VERSION >= 3 && __PYX_DEFAULT_STRING_ENCODING_IS_UTF8)
#define __PYX_DEFAULT_STRING_ENCODING ""
#define __Pyx_PyObject_FromString __Pyx_PyBytes_FromString
#define __Pyx_PyObject_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#define __Pyx_uchar_cast(c) ((unsigned char)c)
#define __Pyx_long_cast(x) ((long)x)
#define __Pyx_fits_Py_ssize_t(v, type, is_signed)  (\
    (sizeof(type) < sizeof(Py_ssize_t))  ||\
    (sizeof(type) > sizeof(Py_ssize_t) &&\
          likely(v < (type)PY_SSIZE_T_MAX ||\
                 v == (type)PY_SSIZE_T_MAX)  &&\
          (!is_signed || likely(v > (type)PY_SSIZE_T_MIN ||\
                                v == (type)PY_SSIZE_T_MIN)))  ||\
    (sizeof(type) == sizeof(Py_ssize_t) &&\
          (is_signed || likely(v < (type)PY_SSIZE_T_MAX ||\
                               v == (type)PY_SSIZE_T_MAX)))  )
static CYTHON_INLINE int __Pyx_is_valid_index(Py_ssize_t i, Py_ssize_t limit) {
    return (size_t) i < (size_t) limit;
}
#if defined (__cplusplus) && __cplusplus >= 201103L
    #include <cstdlib>
    #define __Pyx_sst_abs(value) std::abs(value)
#elif SIZEOF_INT >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) abs(value)
#elif SIZEOF_LONG >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) labs(value)
#elif defined (_MSC_VER)
    #define __Pyx_sst_abs(value) ((Py_ssize_t)_abs64(value))
#elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define __Pyx_sst_abs(value) llabs(value)
#elif defined (__GNUC__)
    #define __Pyx_sst_abs(value) __builtin_llabs(value)
#else
    #define __Pyx_sst_abs(value) ((value<0) ? -value : value)
#endif
static CYTHON_INLINE const char* __Pyx_PyObject_AsString(PyObject*);
static CYTHON_INLINE const char* __Pyx_PyObject_AsStringAndSize(PyObject*, Py_ssize_t* length);
#define __Pyx_PyByteArray_FromString(s) PyByteArray_FromStringAndSize((const char*)s, strlen((const char*)s))
#define __Pyx_PyByteArray_FromStringAndSize(s, l) PyByteArray_FromStringAndSize((const char*)s, l)
#define __Pyx_PyBytes_FromString        PyBytes_FromString
#define __Pyx_PyBytes_FromStringAndSize PyBytes_FromStringAndSize
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char*);
#if PY_MAJOR_VERSION < 3
    #define __Pyx_PyStr_FromString        __Pyx_PyBytes_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#else
    #define __Pyx_PyStr_FromString        __Pyx_PyUnicode_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyUnicode_FromStringAndSize
#endif
#define __Pyx_PyBytes_AsWritableString(s)     ((char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsWritableSString(s)    ((signed char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsWritableUString(s)    ((unsigned char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsString(s)     ((const char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsSString(s)    ((const signed char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsUString(s)    ((const unsigned char*) PyBytes_AS_STRING(s))
#define __Pyx_PyObject_AsWritableString(s)    ((char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsWritableSString(s)    ((signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsWritableUString(s)    ((unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsSString(s)    ((const signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsUString(s)    ((const unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_FromCString(s)  __Pyx_PyObject_FromString((const char*)s)
#define __Pyx_PyBytes_FromCString(s)   __Pyx_PyBytes_FromString((const char*)s)
#define __Pyx_PyByteArray_FromCString(s)   __Pyx_PyByteArray_FromString((const char*)s)
#define __Pyx_PyStr_FromCString(s)     __Pyx_PyStr_FromString((const char*)s)
#define __Pyx_PyUnicode_FromCString(s) __Pyx_PyUnicode_FromString((const char*)s)
static CYTHON_INLINE size_t __Pyx_Py_UNICODE_strlen(const Py_UNICODE *u) {
    const Py_UNICODE *u_end = u;
    while (*u_end++) ;
    return (size_t)(u_end - u - 1);
}
#define __Pyx_PyUnicode_FromUnicode(u)       PyUnicode_FromUnicode(u, __Pyx_Py_UNICODE_strlen(u))
#define __Pyx_PyUnicode_FromUnicodeAndLength PyUnicode_FromUnicode
#define __Pyx_PyUnicode_AsUnicode            PyUnicode_AsUnicode
#define __Pyx_NewRef(obj) (Py_INCREF(obj), obj)
#define __Pyx_Owned_Py_None(b) __Pyx_NewRef(Py_None)
static CYTHON_INLINE PyObject * __Pyx_PyBool_FromLong(long b);
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject*);
static CYTHON_INLINE int __Pyx_PyObject_IsTrueAndDecref(PyObject*);
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x);
#define __Pyx_PySequence_Tuple(obj)\
    (likely(PyTuple_CheckExact(obj)) ? __Pyx_NewRef(obj) : PySequence_Tuple(obj))
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject*);
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t);
#if CYTHON_ASSUME_SAFE_MACROS
#define __pyx_PyFloat_AsDouble(x) (PyFloat_CheckExact(x) ? PyFloat_AS_DOUBLE(x) : PyFloat_AsDouble(x))
#else
#define __pyx_PyFloat_AsDouble(x) PyFloat_AsDouble(x)
#endif
#define __pyx_PyFloat_AsFloat(x) ((float) __pyx_PyFloat_AsDouble(x))
#if PY_MAJOR_VERSION >= 3
#define __Pyx_PyNumber_Int(x) (PyLong_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Long(x))
#else
#define __Pyx_PyNumber_Int(x) (PyInt_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Int(x))
#endif
#define __Pyx_PyNumber_Float(x) (PyFloat_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Float(x))
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
static int __Pyx_sys_getdefaultencoding_not_ascii;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    PyObject* ascii_chars_u = NULL;
    PyObject* ascii_chars_b = NULL;
    const char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    if (strcmp(default_encoding_c, "ascii") == 0) {
        __Pyx_sys_getdefaultencoding_not_ascii = 0;
    } else {
        char ascii_chars[128];
        int c;
        for (c = 0; c < 128; c++) {
            ascii_chars[c] = c;
        }
        __Pyx_sys_getdefaultencoding_not_ascii = 1;
        ascii_chars_u = PyUnicode_DecodeASCII(ascii_chars, 128, NULL);
        if (!ascii_chars_u) goto bad;
        ascii_chars_b = PyUnicode_AsEncodedString(ascii_chars_u, default_encoding_c, NULL);
        if (!ascii_chars_b || !PyBytes_Check(ascii_chars_b) || memcmp(ascii_chars, PyBytes_AS_STRING(ascii_chars_b), 128) != 0) {
            PyErr_Format(
                PyExc_ValueError,
                "This module compiled with c_string_encoding=ascii, but default encoding '%.200s' is not a superset of ascii.",
                default_encoding_c);
            goto bad;
        }
        Py_DECREF(ascii_chars_u);
        Py_DECREF(ascii_chars_b);
    }
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    Py_XDECREF(ascii_chars_u);
    Py_XDECREF(ascii_chars_b);
    return -1;
}
#endif
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT && PY_MAJOR_VERSION >= 3
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_DecodeUTF8(c_str, size, NULL)
#else
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_Decode(c_str, size, __PYX_DEFAULT_STRING_ENCODING, NULL)
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
static char* __PYX_DEFAULT_STRING_ENCODING;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) (const char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    __PYX_DEFAULT_STRING_ENCODING = (char*) malloc(strlen(default_encoding_c) + 1);
    if (!__PYX_DEFAULT_STRING_ENCODING) goto bad;
    strcpy(__PYX_DEFAULT_STRING_ENCODING, default_encoding_c);
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    return -1;
}
#endif
#endif


/* Test for GCC > 2.95 */
#if defined(__GNUC__)     && (__GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95)))
  #define likely(x)   __builtin_expect(!!(x), 1)
  #define unlikely(x) __builtin_expect(!!(x), 0)
#else /* !__GNUC__ or GCC < 2.95 */
  #define likely(x)   (x)
  #define unlikely(x) (x)
#endif /* __GNUC__ */
static CYTHON_INLINE void __Pyx_pretend_to_initialize(void* ptr) { (void)ptr; }

static PyObject *__pyx_m = NULL;
static PyObject *__pyx_d;
static PyObject *__pyx_b;
static PyObject *__pyx_cython_runtime = NULL;
static PyObject *__pyx_empty_tuple;
static PyObject *__pyx_empty_bytes;
static PyObject *__pyx_empty_unicode;
static int __pyx_lineno;
static int __pyx_clineno = 0;
static const char * __pyx_cfilenm= __FILE__;
static const char *__pyx_filename;


static const char *__pyx_f[] = {
  "pyproblem.pxi",
  "_agros.pyx",
  "stringsource",
  "pygeometry.pxi",
  "pyfield.pxi",
  "pycomputation.pxi",
  "pysolution.pxi",
  "pyparticletracing.pxi",
  "pystudy.pxi",
};

/*--- Type declarations ---*/
struct __pyx_obj_6_agros___Geometry__;
struct __pyx_obj_6_agros___Field__;
struct __pyx_obj_6_agros___Problem__;
struct __pyx_obj_6_agros___Computation__;
struct __pyx_obj_6_agros___Solution__;
struct __pyx_obj_6_agros___ParticleTracing__;
struct __pyx_obj_6_agros___Study__;
struct __pyx_obj_6_agros___StudyBayesOpt__;
struct __pyx_obj_6_agros___StudyNLopt__;
struct __pyx_obj_6_agros___StudyNSGA2__;
struct __pyx_obj_6_agros___StudySweep__;
struct __pyx_obj_6_agros___Options__;

/* "../resources_source/python/pygeometry.pxi":40
 *         string exportSVG()
 * 
 * cdef class __Geometry__:             # <<<<<<<<<<<<<<
 *     cdef PyGeometry *thisptr
 * 
 */
struct __pyx_obj_6_agros___Geometry__ {
  PyObject_HEAD
  PyGeometry *thisptr;
};


/* "../resources_source/python/pyfield.pxi":187
 *     return settings_map
 * 
 * cdef class __Field__:             # <<<<<<<<<<<<<<
 *     cdef PyField *thisptr
 *     cdef object matrix_solver_parameters
 */
struct __pyx_obj_6_agros___Field__ {
  PyObject_HEAD
  PyField *thisptr;
  PyObject *matrix_solver_parameters;
  PyObject *solver_parameters;
  PyObject *adaptivity_parameters;
  PyObject *_adaptivity_callback;
};


/* "../resources_source/python/pyproblem.pxi":46
 *         string typeOfStudyAtIndex(int index) except +
 * 
 * cdef class __Problem__:             # <<<<<<<<<<<<<<
 *     cdef PyProblem *_problem
 *     #cdef object _time_callback
 */
struct __pyx_obj_6_agros___Problem__ {
  PyObject_HEAD
  PyProblem *_problem;
  PyObject *_parameters;
  PyObject *_fields;
  PyObject *_geometry;
};


/* "../resources_source/python/pycomputation.pxi":31
 *         string getCouplingType(string &sourceField, string &targetField) except +
 * 
 * cdef class __Computation__:             # <<<<<<<<<<<<<<
 *     cdef PyComputation *_computation
 *     cdef object _solutions
 */
struct __pyx_obj_6_agros___Computation__ {
  PyObject_HEAD
  PyComputation *_computation;
  PyObject *_solutions;
  PyObject *parameters;
  PyObject *results;
};


/* "../resources_source/python/pysolution.pxi":27
 *         void exportVTK(string &fileName, int timeStep, int adaptivityStep, const string &variable, string physicFieldVariableComp)
 * 
 * cdef class __Solution__:             # <<<<<<<<<<<<<<
 *     cdef PySolution *_solution
 * 
 */
struct __pyx_obj_6_agros___Solution__ {
  PyObject_HEAD
  PySolution *_solution;
};


/* "../resources_source/python/pyparticletracing.pxi":75
 *         void times(vector[vector[double]] &t)
 * 
 * cdef class __ParticleTracing__:             # <<<<<<<<<<<<<<
 *     cdef PyParticleTracing *_tracing
 * 
 */
struct __pyx_obj_6_agros___ParticleTracing__ {
  PyObject_HEAD
  PyParticleTracing *_tracing;
};


/* "../resources_source/python/pystudy.pxi":56
 *         void setInitMethod(string &initMethod) except +
 * 
 * cdef class __Study__:             # <<<<<<<<<<<<<<
 *     cdef PyStudy *thisptr
 *     cdef object settings
 */
struct __pyx_obj_6_agros___Study__ {
  PyObject_HEAD
  PyStudy *thisptr;
  PyObject *settings;
};


/* "../resources_source/python/pystudy.pxi":139
 *         return out
 * 
 * cdef class __StudyBayesOpt__(__Study__):             # <<<<<<<<<<<<<<
 *     def __cinit__(self, index = -1):
 *         self.thisptr = new PyStudyBayesOpt(index)
 */
struct __pyx_obj_6_agros___StudyBayesOpt__ {
  struct __pyx_obj_6_agros___Study__ __pyx_base;
};


/* "../resources_source/python/pystudy.pxi":174
 *         (<PyStudyBayesOpt*> self.thisptr).setLearningType(<string> settings['l_type'].encode())
 * 
 * cdef class __StudyNLopt__(__Study__):             # <<<<<<<<<<<<<<
 *     def __cinit__(self, index = -1):
 *         self.thisptr = new PyStudyNLopt(index)
 */
struct __pyx_obj_6_agros___StudyNLopt__ {
  struct __pyx_obj_6_agros___Study__ __pyx_base;
};


/* "../resources_source/python/pystudy.pxi":207
 *         (<PyStudyNLopt*> self.thisptr).setAlgorithm(<string> settings['algorithm'].encode())
 * 
 * cdef class __StudyNSGA2__(__Study__):             # <<<<<<<<<<<<<<
 *     def __cinit__(self, index = -1):
 *         self.thisptr = new PyStudyNSGA2(index)
 */
struct __pyx_obj_6_agros___StudyNSGA2__ {
  struct __pyx_obj_6_agros___Study__ __pyx_base;
};


/* "../resources_source/python/pystudy.pxi":245
 *         self.thisptr.setParameter(string(b'NSGA2_crowdobj'), <bool> settings['crowdobj'])
 * 
 * cdef class __StudySweep__(__Study__):             # <<<<<<<<<<<<<<
 *     def __cinit__(self, index = -1):
 *         self.thisptr = new PyStudySweep(index)
 */
struct __pyx_obj_6_agros___StudySweep__ {
  struct __pyx_obj_6_agros___Study__ __pyx_base;
};


/* "_agros.pyx":175
 *     return pyVersion()
 * 
 * cdef class __Options__:             # <<<<<<<<<<<<<<
 *     cdef PyOptions *thisptr
 * 
 */
struct __pyx_obj_6_agros___Options__ {
  PyObject_HEAD
  PyOptions *thisptr;
};


/* --- Runtime support code (head) --- */
/* Refnanny.proto */
#ifndef CYTHON_REFNANNY
  #define CYTHON_REFNANNY 0
#endif
#if CYTHON_REFNANNY
  typedef struct {
    void (*INCREF)(void*, PyObject*, int);
    void (*DECREF)(void*, PyObject*, int);
    void (*GOTREF)(void*, PyObject*, int);
    void (*GIVEREF)(void*, PyObject*, int);
    void* (*SetupContext)(const char*, int, const char*);
    void (*FinishContext)(void**);
  } __Pyx_RefNannyAPIStruct;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNanny = NULL;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname);
  #define __Pyx_RefNannyDeclarations void *__pyx_refnanny = NULL;
#ifdef WITH_THREAD
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          if (acquire_gil) {\
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\
              PyGILState_Release(__pyx_gilstate_save);\
          } else {\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\
          }
#else
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__)
#endif
  #define __Pyx_RefNannyFinishContext()\
          __Pyx_RefNanny->FinishContext(&__pyx_refnanny)
  #define __Pyx_INCREF(r)  __Pyx_RefNanny->INCREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_DECREF(r)  __Pyx_RefNanny->DECREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GOTREF(r)  __Pyx_RefNanny->GOTREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GIVEREF(r) __Pyx_RefNanny->GIVEREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_XINCREF(r)  do { if((r) != NULL) {__Pyx_INCREF(r); }} while(0)
  #define __Pyx_XDECREF(r)  do { if((r) != NULL) {__Pyx_DECREF(r); }} while(0)
  #define __Pyx_XGOTREF(r)  do { if((r) != NULL) {__Pyx_GOTREF(r); }} while(0)
  #define __Pyx_XGIVEREF(r) do { if((r) != NULL) {__Pyx_GIVEREF(r);}} while(0)
#else
  #define __Pyx_RefNannyDeclarations
  #define __Pyx_RefNannySetupContext(name, acquire_gil)
  #define __Pyx_RefNannyFinishContext()
  #define __Pyx_INCREF(r) Py_INCREF(r)
  #define __Pyx_DECREF(r) Py_DECREF(r)
  #define __Pyx_GOTREF(r)
  #define __Pyx_GIVEREF(r)
  #define __Pyx_XINCREF(r) Py_XINCREF(r)
  #define __Pyx_XDECREF(r) Py_XDECREF(r)
  #define __Pyx_XGOTREF(r)
  #define __Pyx_XGIVEREF(r)
#endif
#define __Pyx_XDECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_XDECREF(tmp);\
    } while (0)
#define __Pyx_DECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_DECREF(tmp);\
    } while (0)
#define __Pyx_CLEAR(r)    do { PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);} while(0)
#define __Pyx_XCLEAR(r)   do { if((r) != NULL) {PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);}} while(0)

/* PyObjectGetAttrStr.proto */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GetAttrStr(o,n) PyObject_GetAttr(o,n)
#endif

/* GetBuiltinName.proto */
static PyObject *__Pyx_GetBuiltinName(PyObject *name);

/* RaiseArgTupleInvalid.proto */
static void __Pyx_RaiseArgtupleInvalid(const char* func_name, int exact,
    Py_ssize_t num_min, Py_ssize_t num_max, Py_ssize_t num_found);

/* RaiseDoubleKeywords.proto */
static void __Pyx_RaiseDoubleKeywordsError(const char* func_name, PyObject* kw_name);

/* ParseKeywords.proto */
static int __Pyx_ParseOptionalKeywords(PyObject *kwds, PyObject **argnames[],\
    PyObject *kwds2, PyObject *values[], Py_ssize_t num_pos_args,\
    const char* function_name);

/* PyObjectSetAttrStr.proto */
#if CYTHON_USE_TYPE_SLOTS
#define __Pyx_PyObject_DelAttrStr(o,n) __Pyx_PyObject_SetAttrStr(o, n, NULL)
static CYTHON_INLINE int __Pyx_PyObject_SetAttrStr(PyObject* obj, PyObject* attr_name, PyObject* value);
#else
#define __Pyx_PyObject_DelAttrStr(o,n)   PyObject_DelAttr(o,n)
#define __Pyx_PyObject_SetAttrStr(o,n,v) PyObject_SetAttr(o,n,v)
#endif

/* PyFunctionFastCall.proto */
#if CYTHON_FAST_PYCALL
#define __Pyx_PyFunction_FastCall(func, args, nargs)\
    __Pyx_PyFunction_FastCallDict((func), (args), (nargs), NULL)
#if 1 || PY_VERSION_HEX < 0x030600B1
static PyObject *__Pyx_PyFunction_FastCallDict(PyObject *func, PyObject **args, Py_ssize_t nargs, PyObject *kwargs);
#else
#define __Pyx_PyFunction_FastCallDict(func, args, nargs, kwargs) _PyFunction_FastCallDict(func, args, nargs, kwargs)
#endif
#define __Pyx_BUILD_ASSERT_EXPR(cond)\
    (sizeof(char [1 - 2*!(cond)]) - 1)
#ifndef Py_MEMBER_SIZE
#define Py_MEMBER_SIZE(type, member) sizeof(((type *)0)->member)
#endif
  static size_t __pyx_pyframe_localsplus_offset = 0;
  #include "frameobject.h"
  #define __Pxy_PyFrame_Initialize_Offsets()\
    ((void)__Pyx_BUILD_ASSERT_EXPR(sizeof(PyFrameObject) == offsetof(PyFrameObject, f_localsplus) + Py_MEMBER_SIZE(PyFrameObject, f_localsplus)),\
     (void)(__pyx_pyframe_localsplus_offset = ((size_t)PyFrame_Type.tp_basicsize) - Py_MEMBER_SIZE(PyFrameObject, f_localsplus)))
  #define __Pyx_PyFrame_GetLocalsplus(frame)\
    (assert(__pyx_pyframe_localsplus_offset), (PyObject **)(((char *)(frame)) + __pyx_pyframe_localsplus_offset))
#endif

/* PyObjectCall.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw);
#else
#define __Pyx_PyObject_Call(func, arg, kw) PyObject_Call(func, arg, kw)
#endif

/* PyObjectCallMethO.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg);
#endif

/* PyObjectCallNoArg.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func);
#else
#define __Pyx_PyObject_CallNoArg(func) __Pyx_PyObject_Call(func, __pyx_empty_tuple, NULL)
#endif

/* PyCFunctionFastCall.proto */
#if CYTHON_FAST_PYCCALL
static CYTHON_INLINE PyObject *__Pyx_PyCFunction_FastCall(PyObject *func, PyObject **args, Py_ssize_t nargs);
#else
#define __Pyx_PyCFunction_FastCall(func, args, nargs)  (assert(0), NULL)
#endif

/* PyObjectCallOneArg.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg);

/* GetItemInt.proto */
#define __Pyx_GetItemInt(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_Fast(o, (Py_ssize_t)i, is_list, wraparound, boundscheck) :\
    (is_list ? (PyErr_SetString(PyExc_IndexError, "list index out of range"), (PyObject*)NULL) :\
               __Pyx_GetItemInt_Generic(o, to_py_func(i))))
#define __Pyx_GetItemInt_List(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_List_Fast(o, (Py_ssize_t)i, wraparound, boundscheck) :\
    (PyErr_SetString(PyExc_IndexError, "list index out of range"), (PyObject*)NULL))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck);
#define __Pyx_GetItemInt_Tuple(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_Tuple_Fast(o, (Py_ssize_t)i, wraparound, boundscheck) :\
    (PyErr_SetString(PyExc_IndexError, "tuple index out of range"), (PyObject*)NULL))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck);
static PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j);
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i,
                                                     int is_list, int wraparound, int boundscheck);

/* ObjectGetItem.proto */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject *__Pyx_PyObject_GetItem(PyObject *obj, PyObject* key);
#else
#define __Pyx_PyObject_GetItem(obj, key)  PyObject_GetItem(obj, key)
#endif

/* PySequenceContains.proto */
static CYTHON_INLINE int __Pyx_PySequence_ContainsTF(PyObject* item, PyObject* seq, int eq) {
    int result = PySequence_Contains(seq, item);
    return unlikely(result < 0) ? result : (result == (eq == Py_EQ));
}

/* PyObjectCall2Args.proto */
static CYTHON_UNUSED PyObject* __Pyx_PyObject_Call2Args(PyObject* function, PyObject* arg1, PyObject* arg2);

/* PyThreadStateGet.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyThreadState_declare  PyThreadState *__pyx_tstate;
#define __Pyx_PyThreadState_assign  __pyx_tstate = __Pyx_PyThreadState_Current;
#define __Pyx_PyErr_Occurred()  __pyx_tstate->curexc_type
#else
#define __Pyx_PyThreadState_declare
#define __Pyx_PyThreadState_assign
#define __Pyx_PyErr_Occurred()  PyErr_Occurred()
#endif

/* PyErrFetchRestore.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyErr_Clear() __Pyx_ErrRestore(NULL, NULL, NULL)
#define __Pyx_ErrRestoreWithState(type, value, tb)  __Pyx_ErrRestoreInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)    __Pyx_ErrFetchInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  __Pyx_ErrRestoreInState(__pyx_tstate, type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)    __Pyx_ErrFetchInState(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb);
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_PyErr_SetNone(exc) (Py_INCREF(exc), __Pyx_ErrRestore((exc), NULL, NULL))
#else
#define __Pyx_PyErr_SetNone(exc) PyErr_SetNone(exc)
#endif
#else
#define __Pyx_PyErr_Clear() PyErr_Clear()
#define __Pyx_PyErr_SetNone(exc) PyErr_SetNone(exc)
#define __Pyx_ErrRestoreWithState(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)  PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestoreInState(tstate, type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchInState(tstate, type, value, tb)  PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)  PyErr_Fetch(type, value, tb)
#endif

/* RaiseException.proto */
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause);

/* WriteUnraisableException.proto */
static void __Pyx_WriteUnraisable(const char *name, int clineno,
                                  int lineno, const char *filename,
                                  int full_traceback, int nogil);

/* ListAppend.proto */
#if CYTHON_USE_PYLIST_INTERNALS && CYTHON_ASSUME_SAFE_MACROS
static CYTHON_INLINE int __Pyx_PyList_Append(PyObject* list, PyObject* x) {
    PyListObject* L = (PyListObject*) list;
    Py_ssize_t len = Py_SIZE(list);
    if (likely(L->allocated > len) & likely(len > (L->allocated >> 1))) {
        Py_INCREF(x);
        PyList_SET_ITEM(list, len, x);
        __Pyx_SET_SIZE(list, len + 1);
        return 0;
    }
    return PyList_Append(list, x);
}
#else
#define __Pyx_PyList_Append(L,x) PyList_Append(L,x)
#endif

/* KeywordStringCheck.proto */
static int __Pyx_CheckKeywordStrings(PyObject *kwdict, const char* function_name, int kw_allowed);

/* PyFloatBinop.proto */
#if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyFloat_DivideObjC(PyObject *op1, PyObject *op2, double floatval, int inplace, int zerodivision_check);
#else
#define __Pyx_PyFloat_DivideObjC(op1, op2, floatval, inplace, zerodivision_check)\
    ((inplace ? __Pyx_PyNumber_InPlaceDivide(op1, op2) : __Pyx_PyNumber_Divide(op1, op2)))
    #endif

/* IncludeCppStringH.proto */
#include <string>

/* decode_c_string_utf16.proto */
static CYTHON_INLINE PyObject *__Pyx_PyUnicode_DecodeUTF16(const char *s, Py_ssize_t size, const char *errors) {
    int byteorder = 0;
    return PyUnicode_DecodeUTF16(s, size, errors, &byteorder);
}
static CYTHON_INLINE PyObject *__Pyx_PyUnicode_DecodeUTF16LE(const char *s, Py_ssize_t size, const char *errors) {
    int byteorder = -1;
    return PyUnicode_DecodeUTF16(s, size, errors, &byteorder);
}
static CYTHON_INLINE PyObject *__Pyx_PyUnicode_DecodeUTF16BE(const char *s, Py_ssize_t size, const char *errors) {
    int byteorder = 1;
    return PyUnicode_DecodeUTF16(s, size, errors, &byteorder);
}

/* decode_c_bytes.proto */
static CYTHON_INLINE PyObject* __Pyx_decode_c_bytes(
         const char* cstring, Py_ssize_t length, Py_ssize_t start, Py_ssize_t stop,
         const char* encoding, const char* errors,
         PyObject* (*decode_func)(const char *s, Py_ssize_t size, const char *errors));

/* decode_cpp_string.proto */
static CYTHON_INLINE PyObject* __Pyx_decode_cpp_string(
         std::string cppstring, Py_ssize_t start, Py_ssize_t stop,
         const char* encoding, const char* errors,
         PyObject* (*decode_func)(const char *s, Py_ssize_t size, const char *errors)) {
    return __Pyx_decode_c_bytes(
        cppstring.data(), cppstring.size(), start, stop, encoding, errors, decode_func);
}

/* DictGetItem.proto */
#if PY_MAJOR_VERSION >= 3 && !CYTHON_COMPILING_IN_PYPY
static PyObject *__Pyx_PyDict_GetItem(PyObject *d, PyObject* key);
#define __Pyx_PyObject_Dict_GetItem(obj, name)\
    (likely(PyDict_CheckExact(obj)) ?\
     __Pyx_PyDict_GetItem(obj, name) : PyObject_GetItem(obj, name))
#else
#define __Pyx_PyDict_GetItem(d, key) PyObject_GetItem(d, key)
#define __Pyx_PyObject_Dict_GetItem(obj, name)  PyObject_GetItem(obj, name)
#endif

/* PyDictVersioning.proto */
#if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_TYPE_SLOTS
#define __PYX_DICT_VERSION_INIT  ((PY_UINT64_T) -1)
#define __PYX_GET_DICT_VERSION(dict)  (((PyDictObject*)(dict))->ma_version_tag)
#define __PYX_UPDATE_DICT_CACHE(dict, value, cache_var, version_var)\
    (version_var) = __PYX_GET_DICT_VERSION(dict);\
    (cache_var) = (value);
#define __PYX_PY_DICT_LOOKUP_IF_MODIFIED(VAR, DICT, LOOKUP) {\
    static PY_UINT64_T __pyx_dict_version = 0;\
    static PyObject *__pyx_dict_cached_value = NULL;\
    if (likely(__PYX_GET_DICT_VERSION(DICT) == __pyx_dict_version)) {\
        (VAR) = __pyx_dict_cached_value;\
    } else {\
        (VAR) = __pyx_dict_cached_value = (LOOKUP);\
        __pyx_dict_version = __PYX_GET_DICT_VERSION(DICT);\
    }\
}
static CYTHON_INLINE PY_UINT64_T __Pyx_get_tp_dict_version(PyObject *obj);
static CYTHON_INLINE PY_UINT64_T __Pyx_get_object_dict_version(PyObject *obj);
static CYTHON_INLINE int __Pyx_object_dict_version_matches(PyObject* obj, PY_UINT64_T tp_dict_version, PY_UINT64_T obj_dict_version);
#else
#define __PYX_GET_DICT_VERSION(dict)  (0)
#define __PYX_UPDATE_DICT_CACHE(dict, value, cache_var, version_var)
#define __PYX_PY_DICT_LOOKUP_IF_MODIFIED(VAR, DICT, LOOKUP)  (VAR) = (LOOKUP);
#endif

/* GetModuleGlobalName.proto */
#if CYTHON_USE_DICT_VERSIONS
#define __Pyx_GetModuleGlobalName(var, name)  {\
    static PY_UINT64_T __pyx_dict_version = 0;\
    static PyObject *__pyx_dict_cached_value = NULL;\
    (var) = (likely(__pyx_dict_version == __PYX_GET_DICT_VERSION(__pyx_d))) ?\
        (likely(__pyx_dict_cached_value) ? __Pyx_NewRef(__pyx_dict_cached_value) : __Pyx_GetBuiltinName(name)) :\
        __Pyx__GetModuleGlobalName(name, &__pyx_dict_version, &__pyx_dict_cached_value);\
}
#define __Pyx_GetModuleGlobalNameUncached(var, name)  {\
    PY_UINT64_T __pyx_dict_version;\
    PyObject *__pyx_dict_cached_value;\
    (var) = __Pyx__GetModuleGlobalName(name, &__pyx_dict_version, &__pyx_dict_cached_value);\
}
static PyObject *__Pyx__GetModuleGlobalName(PyObject *name, PY_UINT64_T *dict_version, PyObject **dict_cached_value);
#else
#define __Pyx_GetModuleGlobalName(var, name)  (var) = __Pyx__GetModuleGlobalName(name)
#define __Pyx_GetModuleGlobalNameUncached(var, name)  (var) = __Pyx__GetModuleGlobalName(name)
static CYTHON_INLINE PyObject *__Pyx__GetModuleGlobalName(PyObject *name);
#endif

/* IncludeStringH.proto */
#include <string.h>

/* BytesEquals.proto */
static CYTHON_INLINE int __Pyx_PyBytes_Equals(PyObject* s1, PyObject* s2, int equals);

/* UnicodeEquals.proto */
static CYTHON_INLINE int __Pyx_PyUnicode_Equals(PyObject* s1, PyObject* s2, int equals);

/* StrEquals.proto */
#if PY_MAJOR_VERSION >= 3
#define __Pyx_PyString_Equals __Pyx_PyUnicode_Equals
#else
#define __Pyx_PyString_Equals __Pyx_PyBytes_Equals
#endif

/* PyObjectGetMethod.proto */
static int __Pyx_PyObject_GetMethod(PyObject *obj, PyObject *name, PyObject **method);

/* PyObjectCallMethod1.proto */
static PyObject* __Pyx_PyObject_CallMethod1(PyObject* obj, PyObject* method_name, PyObject* arg);

/* append.proto */
static CYTHON_INLINE int __Pyx_PyObject_Append(PyObject* L, PyObject* x);

/* PyObject_GenericGetAttrNoDict.proto */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static CYTHON_INLINE PyObject* __Pyx_PyObject_GenericGetAttrNoDict(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GenericGetAttrNoDict PyObject_GenericGetAttr
#endif

/* PyObject_GenericGetAttr.proto */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static PyObject* __Pyx_PyObject_GenericGetAttr(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GenericGetAttr PyObject_GenericGetAttr
#endif

/* PyErrExceptionMatches.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyErr_ExceptionMatches(err) __Pyx_PyErr_ExceptionMatchesInState(__pyx_tstate, err)
static CYTHON_INLINE int __Pyx_PyErr_ExceptionMatchesInState(PyThreadState* tstate, PyObject* err);
#else
#define __Pyx_PyErr_ExceptionMatches(err)  PyErr_ExceptionMatches(err)
#endif

/* PyObjectGetAttrStrNoError.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStrNoError(PyObject* obj, PyObject* attr_name);

/* SetupReduce.proto */
static int __Pyx_setup_reduce(PyObject* type_obj);

/* CalculateMetaclass.proto */
static PyObject *__Pyx_CalculateMetaclass(PyTypeObject *metaclass, PyObject *bases);

/* FetchCommonType.proto */
static PyTypeObject* __Pyx_FetchCommonType(PyTypeObject* type);

/* CythonFunctionShared.proto */
#define __Pyx_CyFunction_USED 1
#define __Pyx_CYFUNCTION_STATICMETHOD  0x01
#define __Pyx_CYFUNCTION_CLASSMETHOD   0x02
#define __Pyx_CYFUNCTION_CCLASS        0x04
#define __Pyx_CyFunction_GetClosure(f)\
    (((__pyx_CyFunctionObject *) (f))->func_closure)
#define __Pyx_CyFunction_GetClassObj(f)\
    (((__pyx_CyFunctionObject *) (f))->func_classobj)
#define __Pyx_CyFunction_Defaults(type, f)\
    ((type *)(((__pyx_CyFunctionObject *) (f))->defaults))
#define __Pyx_CyFunction_SetDefaultsGetter(f, g)\
    ((__pyx_CyFunctionObject *) (f))->defaults_getter = (g)
typedef struct {
    PyCFunctionObject func;
#if PY_VERSION_HEX < 0x030500A0
    PyObject *func_weakreflist;
#endif
    PyObject *func_dict;
    PyObject *func_name;
    PyObject *func_qualname;
    PyObject *func_doc;
    PyObject *func_globals;
    PyObject *func_code;
    PyObject *func_closure;
    PyObject *func_classobj;
    void *defaults;
    int defaults_pyobjects;
    size_t defaults_size;  // used by FusedFunction for copying defaults
    int flags;
    PyObject *defaults_tuple;
    PyObject *defaults_kwdict;
    PyObject *(*defaults_getter)(PyObject *);
    PyObject *func_annotations;
} __pyx_CyFunctionObject;
static PyTypeObject *__pyx_CyFunctionType = 0;
#define __Pyx_CyFunction_Check(obj)  (__Pyx_TypeCheck(obj, __pyx_CyFunctionType))
static PyObject *__Pyx_CyFunction_Init(__pyx_CyFunctionObject* op, PyMethodDef *ml,
                                      int flags, PyObject* qualname,
                                      PyObject *self,
                                      PyObject *module, PyObject *globals,
                                      PyObject* code);
static CYTHON_INLINE void *__Pyx_CyFunction_InitDefaults(PyObject *m,
                                                         size_t size,
                                                         int pyobjects);
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsTuple(PyObject *m,
                                                            PyObject *tuple);
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsKwDict(PyObject *m,
                                                             PyObject *dict);
static CYTHON_INLINE void __Pyx_CyFunction_SetAnnotationsDict(PyObject *m,
                                                              PyObject *dict);
static int __pyx_CyFunction_init(void);

/* CythonFunction.proto */
static PyObject *__Pyx_CyFunction_New(PyMethodDef *ml,
                                      int flags, PyObject* qualname,
                                      PyObject *closure,
                                      PyObject *module, PyObject *globals,
                                      PyObject* code);

/* SetNameInClass.proto */
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030500A1
#define __Pyx_SetNameInClass(ns, name, value)\
    (likely(PyDict_CheckExact(ns)) ? _PyDict_SetItem_KnownHash(ns, name, value, ((PyASCIIObject *) name)->hash) : PyObject_SetItem(ns, name, value))
#elif CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_SetNameInClass(ns, name, value)\
    (likely(PyDict_CheckExact(ns)) ? PyDict_SetItem(ns, name, value) : PyObject_SetItem(ns, name, value))
#else
#define __Pyx_SetNameInClass(ns, name, value)  PyObject_SetItem(ns, name, value)
#endif

/* Py3ClassCreate.proto */
static PyObject *__Pyx_Py3MetaclassPrepare(PyObject *metaclass, PyObject *bases, PyObject *name, PyObject *qualname,
                                           PyObject *mkw, PyObject *modname, PyObject *doc);
static PyObject *__Pyx_Py3ClassCreate(PyObject *metaclass, PyObject *name, PyObject *bases, PyObject *dict,
                                      PyObject *mkw, int calculate_metaclass, int allow_py2_metaclass);

/* GetNameInClass.proto */
#define __Pyx_GetNameInClass(var, nmspace, name)  (var) = __Pyx__GetNameInClass(nmspace, name)
static PyObject *__Pyx__GetNameInClass(PyObject *nmspace, PyObject *name);

/* CLineInTraceback.proto */
#ifdef CYTHON_CLINE_IN_TRACEBACK
#define __Pyx_CLineForTraceback(tstate, c_line)  (((CYTHON_CLINE_IN_TRACEBACK)) ? c_line : 0)
#else
static int __Pyx_CLineForTraceback(PyThreadState *tstate, int c_line);
#endif

/* CodeObjectCache.proto */
typedef struct {
    PyCodeObject* code_object;
    int code_line;
} __Pyx_CodeObjectCacheEntry;
struct __Pyx_CodeObjectCache {
    int count;
    int max_count;
    __Pyx_CodeObjectCacheEntry* entries;
};
static struct __Pyx_CodeObjectCache __pyx_code_cache = {0,0,NULL};
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line);
static PyCodeObject *__pyx_find_code_object(int code_line);
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object);

/* AddTraceback.proto */
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename);

/* CppExceptionConversion.proto */
#ifndef __Pyx_CppExn2PyErr
#include <new>
#include <typeinfo>
#include <stdexcept>
#include <ios>
static void __Pyx_CppExn2PyErr() {
  try {
    if (PyErr_Occurred())
      ; // let the latest Python exn pass through and ignore the current one
    else
      throw;
  } catch (const std::bad_alloc& exn) {
    PyErr_SetString(PyExc_MemoryError, exn.what());
  } catch (const std::bad_cast& exn) {
    PyErr_SetString(PyExc_TypeError, exn.what());
  } catch (const std::bad_typeid& exn) {
    PyErr_SetString(PyExc_TypeError, exn.what());
  } catch (const std::domain_error& exn) {
    PyErr_SetString(PyExc_ValueError, exn.what());
  } catch (const std::invalid_argument& exn) {
    PyErr_SetString(PyExc_ValueError, exn.what());
  } catch (const std::ios_base::failure& exn) {
    PyErr_SetString(PyExc_IOError, exn.what());
  } catch (const std::out_of_range& exn) {
    PyErr_SetString(PyExc_IndexError, exn.what());
  } catch (const std::overflow_error& exn) {
    PyErr_SetString(PyExc_OverflowError, exn.what());
  } catch (const std::range_error& exn) {
    PyErr_SetString(PyExc_ArithmeticError, exn.what());
  } catch (const std::underflow_error& exn) {
    PyErr_SetString(PyExc_ArithmeticError, exn.what());
  } catch (const std::exception& exn) {
    PyErr_SetString(PyExc_RuntimeError, exn.what());
  }
  catch (...)
  {
    PyErr_SetString(PyExc_RuntimeError, "Unknown exception");
  }
}
#endif

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value);

/* CIntFromPy.proto */
static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE size_t __Pyx_PyInt_As_size_t(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *);

/* FastTypeChecks.proto */
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_TypeCheck(obj, type) __Pyx_IsSubtype(Py_TYPE(obj), (PyTypeObject *)type)
static CYTHON_INLINE int __Pyx_IsSubtype(PyTypeObject *a, PyTypeObject *b);
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches(PyObject *err, PyObject *type);
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches2(PyObject *err, PyObject *type1, PyObject *type2);
#else
#define __Pyx_TypeCheck(obj, type) PyObject_TypeCheck(obj, (PyTypeObject *)type)
#define __Pyx_PyErr_GivenExceptionMatches(err, type) PyErr_GivenExceptionMatches(err, type)
#define __Pyx_PyErr_GivenExceptionMatches2(err, type1, type2) (PyErr_GivenExceptionMatches(err, type1) || PyErr_GivenExceptionMatches(err, type2))
#endif
#define __Pyx_PyException_Check(obj) __Pyx_TypeCheck(obj, PyExc_Exception)

/* CheckBinaryVersion.proto */
static int __Pyx_check_binary_version(void);

/* InitStrings.proto */
static int __Pyx_InitStrings(__Pyx_StringTabEntry *t);


/* Module declarations from 'libcpp' */

/* Module declarations from 'libcpp.utility' */

/* Module declarations from 'libcpp.pair' */

/* Module declarations from 'libcpp.vector' */

/* Module declarations from 'libcpp.map' */

/* Module declarations from '_agros' */
static PyTypeObject *__pyx_ptype_6_agros___Geometry__ = 0;
static PyTypeObject *__pyx_ptype_6_agros___Field__ = 0;
static PyTypeObject *__pyx_ptype_6_agros___Problem__ = 0;
static PyTypeObject *__pyx_ptype_6_agros___Computation__ = 0;
static PyTypeObject *__pyx_ptype_6_agros___Solution__ = 0;
static PyTypeObject *__pyx_ptype_6_agros___ParticleTracing__ = 0;
static PyTypeObject *__pyx_ptype_6_agros___Study__ = 0;
static PyTypeObject *__pyx_ptype_6_agros___StudyBayesOpt__ = 0;
static PyTypeObject *__pyx_ptype_6_agros___StudyNLopt__ = 0;
static PyTypeObject *__pyx_ptype_6_agros___StudyNSGA2__ = 0;
static PyTypeObject *__pyx_ptype_6_agros___StudySweep__ = 0;
static PyTypeObject *__pyx_ptype_6_agros___Options__ = 0;
static std::vector<int>  __pyx_f_6_agros_list_to_int_vector(PyObject *); /*proto*/
static std::vector<double>  __pyx_f_6_agros_list_to_double_vector(PyObject *); /*proto*/
static PyObject *__pyx_f_6_agros_double_vector_to_list(std::vector<double> ); /*proto*/
static std::map<std::string,int>  __pyx_f_6_agros_dictionary_to_int_map(PyObject *); /*proto*/
static std::map<std::string,std::string>  __pyx_f_6_agros_dictionary_to_string_map(PyObject *); /*proto*/
static std::map<std::string,std::string>  __pyx_f_6_agros_get_parameters_map(PyObject *); /*proto*/
static std::map<std::string,std::string>  __pyx_f_6_agros_get_expression_map(PyObject *); /*proto*/
static std::map<std::string,std::vector<double> >  __pyx_f_6_agros_get_nonlin_x_map(PyObject *); /*proto*/
static std::map<std::string,std::vector<double> >  __pyx_f_6_agros_get_nonlin_y_map(PyObject *); /*proto*/
static std::map<std::string,std::map<std::string,std::string> >  __pyx_f_6_agros_get_settings_map(PyObject *); /*proto*/
static std::string __pyx_convert_string_from_py_std__in_string(PyObject *); /*proto*/
static CYTHON_INLINE PyObject *__pyx_convert_PyObject_string_to_py_std__in_string(std::string const &); /*proto*/
static CYTHON_INLINE PyObject *__pyx_convert_PyUnicode_string_to_py_std__in_string(std::string const &); /*proto*/
static CYTHON_INLINE PyObject *__pyx_convert_PyStr_string_to_py_std__in_string(std::string const &); /*proto*/
static CYTHON_INLINE PyObject *__pyx_convert_PyBytes_string_to_py_std__in_string(std::string const &); /*proto*/
static CYTHON_INLINE PyObject *__pyx_convert_PyByteArray_string_to_py_std__in_string(std::string const &); /*proto*/
static std::vector<double>  __pyx_convert_vector_from_py_double(PyObject *); /*proto*/
#define __Pyx_MODULE_NAME "_agros"
extern int __pyx_module_is_main__agros;
int __pyx_module_is_main__agros = 0;

/* Implementation of '_agros' */
static PyObject *__pyx_builtin_property;
static PyObject *__pyx_builtin_KeyError;
static PyObject *__pyx_builtin_IndexError;
static PyObject *__pyx_builtin_range;
static PyObject *__pyx_builtin_TypeError;
static const char __pyx_k_x[] = "x";
static const char __pyx_k_y[] = "y";
static const char __pyx_k_dx[] = "dx";
static const char __pyx_k_dy[] = "dy";
static const char __pyx_k_x0[] = "x0";
static const char __pyx_k_x1[] = "x1";
static const char __pyx_k_x2[] = "x2";
static const char __pyx_k_y0[] = "y0";
static const char __pyx_k_y1[] = "y1";
static const char __pyx_k_y2[] = "y2";
static const char __pyx_k_0_1[] = "{0}/{1}";
static const char __pyx_k__25[] = "";
static const char __pyx_k_dir[] = "dir";
static const char __pyx_k_doc[] = "__doc__";
static const char __pyx_k_get[] = "get";
static const char __pyx_k_key[] = "key";
static const char __pyx_k_max[] = "max";
static const char __pyx_k_min[] = "min";
static const char __pyx_k_set[] = "set";
static const char __pyx_k_sln[] = "sln";
static const char __pyx_k_str[] = "str";
static const char __pyx_k_area[] = "area";
static const char __pyx_k_copy[] = "copy";
static const char __pyx_k_dofs[] = "dofs";
static const char __pyx_k_file[] = "file";
static const char __pyx_k_init[] = "__init__";
static const char __pyx_k_item[] = "item";
static const char __pyx_k_keys[] = "keys";
static const char __pyx_k_list[] = "list";
static const char __pyx_k_main[] = "__main__";
static const char __pyx_k_name[] = "name";
static const char __pyx_k_ngen[] = "ngen";
static const char __pyx_k_pmut[] = "pmut";
static const char __pyx_k_self[] = "self";
static const char __pyx_k_test[] = "__test__";
static const char __pyx_k_type[] = "type";
static const char __pyx_k_Field[] = "__Field__";
static const char __pyx_k_Study[] = "__Study__";
static const char __pyx_k_agros[] = "_agros";
static const char __pyx_k_angle[] = "angle";
static const char __pyx_k_clear[] = "clear";
static const char __pyx_k_edges[] = "edges";
static const char __pyx_k_error[] = "error";
static const char __pyx_k_eta_c[] = "eta_c";
static const char __pyx_k_eta_m[] = "eta_m";
static const char __pyx_k_index[] = "index";
static const char __pyx_k_nlopt[] = "nlopt";
static const char __pyx_k_nodes[] = "nodes";
static const char __pyx_k_nsga2[] = "nsga2";
static const char __pyx_k_range[] = "range";
static const char __pyx_k_scale[] = "scale";
static const char __pyx_k_steps[] = "steps";
static const char __pyx_k_sweep[] = "sweep";
static const char __pyx_k_value[] = "value";
static const char __pyx_k_width[] = "width";
static const char __pyx_k_append[] = "append";
static const char __pyx_k_encode[] = "encode";
static const char __pyx_k_format[] = "format";
static const char __pyx_k_height[] = "height";
static const char __pyx_k_l_type[] = "l_type";
static const char __pyx_k_labels[] = "labels";
static const char __pyx_k_module[] = "__module__";
static const char __pyx_k_name_2[] = "__name__";
static const char __pyx_k_orders[] = "orders";
static const char __pyx_k_pcross[] = "pcross";
static const char __pyx_k_radius[] = "radius";
static const char __pyx_k_reduce[] = "__reduce__";
static const char __pyx_k_update[] = "__update__";
static const char __pyx_k_weight[] = "weight";
static const char __pyx_k_Options[] = "__Options__";
static const char __pyx_k_Problem[] = "__Problem__";
static const char __pyx_k_damping[] = "damping";
static const char __pyx_k_datadir[] = "datadir";
static const char __pyx_k_getitem[] = "__getitem__";
static const char __pyx_k_minimum[] = "minimum";
static const char __pyx_k_options[] = "options";
static const char __pyx_k_popsize[] = "popsize";
static const char __pyx_k_prepare[] = "__prepare__";
static const char __pyx_k_problem[] = "__problem__";
static const char __pyx_k_sc_type[] = "sc_type";
static const char __pyx_k_setitem[] = "__setitem__";
static const char __pyx_k_tempdir[] = "tempdir";
static const char __pyx_k_version[] = "version";
static const char __pyx_k_Geometry[] = "__Geometry__";
static const char __pyx_k_KeyError[] = "KeyError";
static const char __pyx_k_Solution[] = "__Solution__";
static const char __pyx_k_add_edge[] = "add_edge";
static const char __pyx_k_bayesopt[] = "bayesopt";
static const char __pyx_k_cachedir[] = "cachedir";
static const char __pyx_k_crowdobj[] = "crowdobj";
static const char __pyx_k_field_id[] = "field_id";
static const char __pyx_k_fileName[] = "fileName";
static const char __pyx_k_ftol_abs[] = "ftol_abs";
static const char __pyx_k_ftol_rel[] = "ftol_rel";
static const char __pyx_k_getstate[] = "__getstate__";
static const char __pyx_k_property[] = "property";
static const char __pyx_k_qualname[] = "__qualname__";
static const char __pyx_k_residual[] = "residual";
static const char __pyx_k_segments[] = "segments";
static const char __pyx_k_setstate[] = "__setstate__";
static const char __pyx_k_strategy[] = "strategy";
static const char __pyx_k_variable[] = "variable";
static const char __pyx_k_xtol_abs[] = "xtol_abs";
static const char __pyx_k_xtol_rel[] = "xtol_rel";
static const char __pyx_k_TypeError[] = "TypeError";
static const char __pyx_k_add_label[] = "add_label";
static const char __pyx_k_algorithm[] = "algorithm";
static const char __pyx_k_check_set[] = "check_set";
static const char __pyx_k_component[] = "component";
static const char __pyx_k_estimator[] = "estimator";
static const char __pyx_k_frequency[] = "frequency";
static const char __pyx_k_materials[] = "materials";
static const char __pyx_k_mesh_type[] = "mesh_type";
static const char __pyx_k_metaclass[] = "__metaclass__";
static const char __pyx_k_open_file[] = "open_file";
static const char __pyx_k_problem_2[] = "problem";
static const char __pyx_k_reduce_ex[] = "__reduce_ex__";
static const char __pyx_k_save_file[] = "save_file";
static const char __pyx_k_surr_name[] = "surr_name";
static const char __pyx_k_time_step[] = "time_step";
static const char __pyx_k_tolerance[] = "tolerance";
static const char __pyx_k_IndexError[] = "IndexError";
static const char __pyx_k_NSGA2_ngen[] = "NSGA2_ngen";
static const char __pyx_k_NSGA2_pmut[] = "NSGA2_pmut";
static const char __pyx_k_Parameters[] = "__Parameters__";
static const char __pyx_k_StudyNLopt[] = "__StudyNLopt__";
static const char __pyx_k_StudyNSGA2[] = "__StudyNSGA2__";
static const char __pyx_k_StudySweep[] = "__StudySweep__";
static const char __pyx_k_boundaries[] = "boundaries";
static const char __pyx_k_expression[] = "expression";
static const char __pyx_k_get_method[] = "get_method";
static const char __pyx_k_parameters[] = "parameters";
static const char __pyx_k_set_method[] = "set_method";
static const char __pyx_k_surr_noise[] = "surr_noise";
static const char __pyx_k_time_steps[] = "time_steps";
static const char __pyx_k_time_total[] = "time_total";
static const char __pyx_k_Computation[] = "__Computation__";
static const char __pyx_k_General_DoE[] = "General_DoE";
static const char __pyx_k_NSGA2_eta_c[] = "NSGA2_eta_c";
static const char __pyx_k_NSGA2_eta_m[] = "NSGA2_eta_m";
static const char __pyx_k_computation[] = "computation";
static const char __pyx_k_get_results[] = "__get_results__";
static const char __pyx_k_init_method[] = "init_method";
static const char __pyx_k_lower_bound[] = "lower_bound";
static const char __pyx_k_num_samples[] = "num_samples";
static const char __pyx_k_refinements[] = "refinements";
static const char __pyx_k_set_datadir[] = "_set_datadir";
static const char __pyx_k_set_results[] = "__set_results__";
static const char __pyx_k_strategy_hp[] = "strategy_hp";
static const char __pyx_k_upper_bound[] = "upper_bound";
static const char __pyx_k_withMarkers[] = "withMarkers";
static const char __pyx_k_NSGA2_pcross[] = "NSGA2_pcross";
static const char __pyx_k_get_settings[] = "__get_settings__";
static const char __pyx_k_n_iterations[] = "n_iterations";
static const char __pyx_k_read_plugins[] = "_read_plugins";
static const char __pyx_k_set_settings[] = "__set_settings__";
static const char __pyx_k_source_field[] = "source_field";
static const char __pyx_k_target_field[] = "target_field";
static const char __pyx_k_unauthorized[] = "__unauthorized__";
static const char __pyx_k_variableComp[] = "variableComp";
static const char __pyx_k_NSGA2_popsize[] = "NSGA2_popsize";
static const char __pyx_k_StudyBayesOpt[] = "__StudyBayesOpt__";
static const char __pyx_k_anderson_beta[] = "anderson_beta";
static const char __pyx_k_dealii_method[] = "dealii_method";
static const char __pyx_k_doe_deviation[] = "doe_deviation";
static const char __pyx_k_extrapolation[] = "extrapolation";
static const char __pyx_k_get_frequency[] = "_get_frequency";
static const char __pyx_k_get_mesh_type[] = "_get_mesh_type";
static const char __pyx_k_interpolation[] = "interpolation";
static const char __pyx_k_reduce_cython[] = "__reduce_cython__";
static const char __pyx_k_set_frequency[] = "_set_frequency";
static const char __pyx_k_set_mesh_type[] = "_set_mesh_type";
static const char __pyx_k_value_in_list[] = "value_in_list";
static const char __pyx_k_NLopt_ftol_abs[] = "NLopt_ftol_abs";
static const char __pyx_k_NLopt_ftol_rel[] = "NLopt_ftol_rel";
static const char __pyx_k_NLopt_xtol_abs[] = "NLopt_xtol_abs";
static const char __pyx_k_NLopt_xtol_rel[] = "NLopt_xtol_rel";
static const char __pyx_k_NSGA2_crowdobj[] = "NSGA2_crowdobj";
static const char __pyx_k_damping_factor[] = "damping_factor";
static const char __pyx_k_end_node_index[] = "end_node_index";
static const char __pyx_k_get_parameters[] = "get_parameters";
static const char __pyx_k_get_time_steps[] = "_get_time_steps";
static const char __pyx_k_get_time_total[] = "_get_time_total";
static const char __pyx_k_jacobian_reuse[] = "jacobian_reuse";
static const char __pyx_k_n_init_samples[] = "n_init_samples";
static const char __pyx_k_n_iter_relearn[] = "n_iter_relearn";
static const char __pyx_k_parameters_key[] = "parameters_key";
static const char __pyx_k_positive_value[] = "positive_value";
static const char __pyx_k_set_parameters[] = "__set_parameters__";
static const char __pyx_k_set_time_steps[] = "_set_time_steps";
static const char __pyx_k_set_time_total[] = "_set_time_total";
static const char __pyx_k_value_in_range[] = "value_in_range";
static const char __pyx_k_AdaptivitySteps[] = "AdaptivitySteps";
static const char __pyx_k_ParticleTracing[] = "__ParticleTracing__";
static const char __pyx_k_adaptivity_step[] = "adaptivity_step";
static const char __pyx_k_coordinate_type[] = "coordinate_type";
static const char __pyx_k_external_method[] = "external_method";
static const char __pyx_k_external_solver[] = "external_solver";
static const char __pyx_k_fine_percentage[] = "fine_percentage";
static const char __pyx_k_new_computation[] = "new_computation";
static const char __pyx_k_particle_masses[] = "particle_masses";
static const char __pyx_k_setstate_cython[] = "__setstate_cython__";
static const char __pyx_k_solution_change[] = "solution_change";
static const char __pyx_k_dealii_tolerance[] = "dealii_tolerance";
static const char __pyx_k_get_parameters_2[] = "__get_parameters__";
static const char __pyx_k_particle_charges[] = "particle_charges";
static const char __pyx_k_start_node_index[] = "start_node_index";
static const char __pyx_k_time_step_method[] = "time_step_method";
static const char __pyx_k_Sweep_num_samples[] = "Sweep_num_samples";
static const char __pyx_k_coarse_percentage[] = "coarse_percentage";
static const char __pyx_k_dealii_iterations[] = "dealii_iterations";
static const char __pyx_k_doe_sweep_samples[] = "doe_sweep_samples";
static const char __pyx_k_initial_positions[] = "initial_positions";
static const char __pyx_k_initial_time_step[] = "initial_time_step";
static const char __pyx_k_time_method_order[] = "time_method_order";
static const char __pyx_k_NLopt_n_iterations[] = "NLopt_n_iterations";
static const char __pyx_k_PicardAndersonBeta[] = "PicardAndersonBeta";
static const char __pyx_k_cline_in_traceback[] = "cline_in_traceback";
static const char __pyx_k_initial_velocities[] = "initial_velocities";
static const char __pyx_k_open_with_solution[] = "open_with_solution";
static const char __pyx_k_save_with_solution[] = "save_with_solution";
static const char __pyx_k_AdaptivityTolerance[] = "AdaptivityTolerance";
static const char __pyx_k_BayesOpt_surr_noise[] = "BayesOpt_surr_noise";
static const char __pyx_k_NewtonReuseJacobian[] = "NewtonReuseJacobian";
static const char __pyx_k_Parameters_____init[] = "__Parameters__.__init__";
static const char __pyx_k_external_parameters[] = "external_parameters";
static const char __pyx_k_get_coordinate_type[] = "_get_coordinate_type";
static const char __pyx_k_set_coordinate_type[] = "_set_coordinate_type";
static const char __pyx_k_General_SolveProblem[] = "General_SolveProblem";
static const char __pyx_k_get_time_step_method[] = "_get_time_step_method";
static const char __pyx_k_jacobian_reuse_ratio[] = "jacobian_reuse_ratio";
static const char __pyx_k_jacobian_reuse_steps[] = "jacobian_reuse_steps";
static const char __pyx_k_set_time_step_method[] = "_set_time_step_method";
static const char __pyx_k_transient_back_steps[] = "transient_back_steps";
static const char __pyx_k_BayesOpt_n_iterations[] = "BayesOpt_n_iterations";
static const char __pyx_k_General_ClearSolution[] = "General_ClearSolution";
static const char __pyx_k_General_DoE_Deviation[] = "General_DoE_Deviation";
static const char __pyx_k_LinearSolverIterIters[] = "LinearSolverIterIters";
static const char __pyx_k_NonlinearDampingCoeff[] = "NonlinearDampingCoeff";
static const char __pyx_k_NonlinearResidualNorm[] = "NonlinearResidualNorm";
static const char __pyx_k_Parameters_____update[] = "__Parameters__.__update__";
static const char __pyx_k_anderson_acceleration[] = "anderson_acceleration";
static const char __pyx_k_anderson_last_vectors[] = "anderson_last_vectors";
static const char __pyx_k_dealii_preconditioner[] = "dealii_preconditioner";
static const char __pyx_k_get_initial_time_step[] = "_get_initial_time_step";
static const char __pyx_k_get_script_from_model[] = "get_script_from_model";
static const char __pyx_k_get_solver_parameters[] = "__get_solver_parameters__";
static const char __pyx_k_get_time_method_order[] = "_get_time_method_order";
static const char __pyx_k_jacobian_calculations[] = "jacobian_calculations";
static const char __pyx_k_set_initial_time_step[] = "_set_initial_time_step";
static const char __pyx_k_set_solver_parameters[] = "__set_solver_parameters__";
static const char __pyx_k_set_time_method_order[] = "_set_time_method_order";
static const char __pyx_k_time_method_tolerance[] = "time_method_tolerance";
static const char __pyx_k_Parameters_____getitem[] = "__Parameters__.__getitem__";
static const char __pyx_k_Parameters_____setitem[] = "__Parameters__.__setitem__";
static const char __pyx_k_transient_redone_steps[] = "transient_redone_steps";
static const char __pyx_k_BayesOpt_n_init_samples[] = "BayesOpt_n_init_samples";
static const char __pyx_k_BayesOpt_n_iter_relearn[] = "BayesOpt_n_iter_relearn";
static const char __pyx_k_derivative_at_endpoints[] = "derivative_at_endpoints";
static const char __pyx_k_AdaptivityFinePercentage[] = "AdaptivityFinePercentage";
static const char __pyx_k_General_DoE_SweepSamples[] = "General_DoE_SweepSamples";
static const char __pyx_k_Invalid_key_Valid_keys_0[] = "Invalid key. Valid keys: {0}";
static const char __pyx_k_NewtonJacobianReuseRatio[] = "NewtonJacobianReuseRatio";
static const char __pyx_k_Value_can_not_be_changed[] = "Value can not be changed.";
static const char __pyx_k_get_adaptivity_parameters[] = "__get_adaptivity_parameters__";
static const char __pyx_k_get_time_method_tolerance[] = "_get_time_method_tolerance";
static const char __pyx_k_set_adaptivity_parameters[] = "__set_adaptivity_parameters__";
static const char __pyx_k_set_time_method_tolerance[] = "_set_time_method_tolerance";
static const char __pyx_k_AdaptivityCoarsePercentage[] = "AdaptivityCoarsePercentage";
static const char __pyx_k_PicardAndersonAcceleration[] = "PicardAndersonAcceleration";
static const char __pyx_k_NewtonMaxStepsReuseJacobian[] = "NewtonMaxStepsReuseJacobian";
static const char __pyx_k_Parameters___get_parameters[] = "__Parameters__.get_parameters";
static const char __pyx_k_Study_type_is_not_supported[] = "Study type is not supported.";
static const char __pyx_k_AdaptivityTransientBackSteps[] = "AdaptivityTransientBackSteps";
static const char __pyx_k_Value_of_0_must_be_possitive[] = "Value of {0} must be possitive.";
static const char __pyx_k_get_matrix_solver_parameters[] = "__get_matrix_solver_parameters__";
static const char __pyx_k_relative_change_of_solutions[] = "relative_change_of_solutions";
static const char __pyx_k_set_matrix_solver_parameters[] = "__set_matrix_solver_parameters__";
static const char __pyx_k_AdaptivityTransientRedoneEach[] = "AdaptivityTransientRedoneEach";
static const char __pyx_k_Key_0_is_invalid_Valid_keys_1[] = "Key '{0}' is invalid. Valid keys: {1}";
static const char __pyx_k_damping_factor_decrease_ratio[] = "damping_factor_decrease_ratio";
static const char __pyx_k_damping_factor_increase_steps[] = "damping_factor_increase_steps";
static const char __pyx_k_Value_of_0_is_out_of_range_1_2[] = "Value of '{0}' is out of range ({1} - {2})";
static const char __pyx_k_Parameter_type_is_not_supported[] = "Parameter type is not supported.";
static const char __pyx_k_home_karban_Projects_agros2d_de[] = "/home/karban/Projects/agros2d-dealii/resources_source/python/_agros.pyx";
static const char __pyx_k_LinearSolverIterToleranceAbsolut[] = "LinearSolverIterToleranceAbsolute";
static const char __pyx_k_NonlinearDampingFactorDecreaseRa[] = "NonlinearDampingFactorDecreaseRatio";
static const char __pyx_k_NonlinearRelativeChangeOfSolutio[] = "NonlinearRelativeChangeOfSolutions";
static const char __pyx_k_NonlinearStepsToIncreaseDampingF[] = "NonlinearStepsToIncreaseDampingFactor";
static const char __pyx_k_PicardAndersonNumberOfLastVector[] = "PicardAndersonNumberOfLastVectors";
static const char __pyx_k_no_default___reduce___due_to_non[] = "no default __reduce__ due to non-trivial __cinit__";
static const char __pyx_k_self_thisptr_cannot_be_converted[] = "self.thisptr cannot be converted to a Python object for pickling";
static const char __pyx_k_home_karban_Projects_agros2d_de_2[] = "/home/karban/Projects/agros2d-dealii/resources_source/python/pyproblem.pxi";
static const char __pyx_k_home_karban_Projects_agros2d_de_3[] = "/home/karban/Projects/agros2d-dealii/resources_source/python/pycomputation.pxi";
static PyObject *__pyx_kp_s_0_1;
static PyObject *__pyx_n_b_AdaptivityCoarsePercentage;
static PyObject *__pyx_n_b_AdaptivityFinePercentage;
static PyObject *__pyx_n_b_AdaptivitySteps;
static PyObject *__pyx_n_b_AdaptivityTolerance;
static PyObject *__pyx_n_b_AdaptivityTransientBackSteps;
static PyObject *__pyx_n_b_AdaptivityTransientRedoneEach;
static PyObject *__pyx_n_b_BayesOpt_n_init_samples;
static PyObject *__pyx_n_b_BayesOpt_n_iter_relearn;
static PyObject *__pyx_n_b_BayesOpt_n_iterations;
static PyObject *__pyx_n_b_BayesOpt_surr_noise;
static PyObject *__pyx_n_s_Computation;
static PyObject *__pyx_n_s_Field;
static PyObject *__pyx_n_b_General_ClearSolution;
static PyObject *__pyx_n_b_General_DoE;
static PyObject *__pyx_n_b_General_DoE_Deviation;
static PyObject *__pyx_n_b_General_DoE_SweepSamples;
static PyObject *__pyx_n_b_General_SolveProblem;
static PyObject *__pyx_n_s_Geometry;
static PyObject *__pyx_n_s_IndexError;
static PyObject *__pyx_kp_s_Invalid_key_Valid_keys_0;
static PyObject *__pyx_n_s_KeyError;
static PyObject *__pyx_kp_s_Key_0_is_invalid_Valid_keys_1;
static PyObject *__pyx_n_b_LinearSolverIterIters;
static PyObject *__pyx_n_b_LinearSolverIterToleranceAbsolut;
static PyObject *__pyx_n_b_NLopt_ftol_abs;
static PyObject *__pyx_n_b_NLopt_ftol_rel;
static PyObject *__pyx_n_b_NLopt_n_iterations;
static PyObject *__pyx_n_b_NLopt_xtol_abs;
static PyObject *__pyx_n_b_NLopt_xtol_rel;
static PyObject *__pyx_n_b_NSGA2_crowdobj;
static PyObject *__pyx_n_b_NSGA2_eta_c;
static PyObject *__pyx_n_b_NSGA2_eta_m;
static PyObject *__pyx_n_b_NSGA2_ngen;
static PyObject *__pyx_n_b_NSGA2_pcross;
static PyObject *__pyx_n_b_NSGA2_pmut;
static PyObject *__pyx_n_b_NSGA2_popsize;
static PyObject *__pyx_n_b_NewtonJacobianReuseRatio;
static PyObject *__pyx_n_b_NewtonMaxStepsReuseJacobian;
static PyObject *__pyx_n_b_NewtonReuseJacobian;
static PyObject *__pyx_n_b_NonlinearDampingCoeff;
static PyObject *__pyx_n_b_NonlinearDampingFactorDecreaseRa;
static PyObject *__pyx_n_b_NonlinearRelativeChangeOfSolutio;
static PyObject *__pyx_n_b_NonlinearResidualNorm;
static PyObject *__pyx_n_b_NonlinearStepsToIncreaseDampingF;
static PyObject *__pyx_n_s_Options;
static PyObject *__pyx_kp_s_Parameter_type_is_not_supported;
static PyObject *__pyx_n_s_Parameters;
static PyObject *__pyx_n_s_Parameters_____getitem;
static PyObject *__pyx_n_s_Parameters_____init;
static PyObject *__pyx_n_s_Parameters_____setitem;
static PyObject *__pyx_n_s_Parameters_____update;
static PyObject *__pyx_n_s_Parameters___get_parameters;
static PyObject *__pyx_n_s_ParticleTracing;
static PyObject *__pyx_n_b_PicardAndersonAcceleration;
static PyObject *__pyx_n_b_PicardAndersonBeta;
static PyObject *__pyx_n_b_PicardAndersonNumberOfLastVector;
static PyObject *__pyx_n_s_Problem;
static PyObject *__pyx_n_s_Solution;
static PyObject *__pyx_n_s_Study;
static PyObject *__pyx_n_s_StudyBayesOpt;
static PyObject *__pyx_n_s_StudyNLopt;
static PyObject *__pyx_n_s_StudyNSGA2;
static PyObject *__pyx_n_s_StudySweep;
static PyObject *__pyx_kp_s_Study_type_is_not_supported;
static PyObject *__pyx_n_b_Sweep_num_samples;
static PyObject *__pyx_n_s_TypeError;
static PyObject *__pyx_kp_s_Value_can_not_be_changed;
static PyObject *__pyx_kp_s_Value_of_0_is_out_of_range_1_2;
static PyObject *__pyx_kp_s_Value_of_0_must_be_possitive;
static PyObject *__pyx_kp_s__25;
static PyObject *__pyx_n_s_adaptivity_step;
static PyObject *__pyx_n_s_add_edge;
static PyObject *__pyx_n_s_add_label;
static PyObject *__pyx_n_s_agros;
static PyObject *__pyx_n_s_algorithm;
static PyObject *__pyx_n_s_anderson_acceleration;
static PyObject *__pyx_n_s_anderson_beta;
static PyObject *__pyx_n_s_anderson_last_vectors;
static PyObject *__pyx_n_s_angle;
static PyObject *__pyx_n_s_append;
static PyObject *__pyx_n_s_area;
static PyObject *__pyx_n_s_bayesopt;
static PyObject *__pyx_n_s_boundaries;
static PyObject *__pyx_n_s_cachedir;
static PyObject *__pyx_n_s_check_set;
static PyObject *__pyx_n_s_clear;
static PyObject *__pyx_n_s_cline_in_traceback;
static PyObject *__pyx_n_s_coarse_percentage;
static PyObject *__pyx_n_s_component;
static PyObject *__pyx_n_s_computation;
static PyObject *__pyx_n_s_coordinate_type;
static PyObject *__pyx_n_s_copy;
static PyObject *__pyx_n_s_crowdobj;
static PyObject *__pyx_n_s_damping;
static PyObject *__pyx_n_s_damping_factor;
static PyObject *__pyx_n_s_damping_factor_decrease_ratio;
static PyObject *__pyx_n_s_damping_factor_increase_steps;
static PyObject *__pyx_n_s_datadir;
static PyObject *__pyx_n_s_dealii_iterations;
static PyObject *__pyx_n_s_dealii_method;
static PyObject *__pyx_n_s_dealii_preconditioner;
static PyObject *__pyx_n_s_dealii_tolerance;
static PyObject *__pyx_n_b_derivative_at_endpoints;
static PyObject *__pyx_n_s_derivative_at_endpoints;
static PyObject *__pyx_n_s_dir;
static PyObject *__pyx_n_s_doc;
static PyObject *__pyx_n_s_doe_deviation;
static PyObject *__pyx_n_s_doe_sweep_samples;
static PyObject *__pyx_n_s_dofs;
static PyObject *__pyx_n_s_dx;
static PyObject *__pyx_n_s_dy;
static PyObject *__pyx_n_s_edges;
static PyObject *__pyx_n_s_encode;
static PyObject *__pyx_n_s_end_node_index;
static PyObject *__pyx_n_s_error;
static PyObject *__pyx_n_s_estimator;
static PyObject *__pyx_n_s_eta_c;
static PyObject *__pyx_n_s_eta_m;
static PyObject *__pyx_n_s_expression;
static PyObject *__pyx_n_s_external_method;
static PyObject *__pyx_n_s_external_parameters;
static PyObject *__pyx_n_s_external_solver;
static PyObject *__pyx_n_b_extrapolation;
static PyObject *__pyx_n_s_extrapolation;
static PyObject *__pyx_n_s_field_id;
static PyObject *__pyx_n_s_file;
static PyObject *__pyx_n_s_fileName;
static PyObject *__pyx_n_s_fine_percentage;
static PyObject *__pyx_n_s_format;
static PyObject *__pyx_n_s_frequency;
static PyObject *__pyx_n_s_ftol_abs;
static PyObject *__pyx_n_s_ftol_rel;
static PyObject *__pyx_n_s_get;
static PyObject *__pyx_n_s_get_adaptivity_parameters;
static PyObject *__pyx_n_s_get_coordinate_type;
static PyObject *__pyx_n_s_get_frequency;
static PyObject *__pyx_n_s_get_initial_time_step;
static PyObject *__pyx_n_s_get_matrix_solver_parameters;
static PyObject *__pyx_n_s_get_mesh_type;
static PyObject *__pyx_n_s_get_method;
static PyObject *__pyx_n_s_get_parameters;
static PyObject *__pyx_n_s_get_parameters_2;
static PyObject *__pyx_n_s_get_results;
static PyObject *__pyx_n_s_get_script_from_model;
static PyObject *__pyx_n_s_get_settings;
static PyObject *__pyx_n_s_get_solver_parameters;
static PyObject *__pyx_n_s_get_time_method_order;
static PyObject *__pyx_n_s_get_time_method_tolerance;
static PyObject *__pyx_n_s_get_time_step_method;
static PyObject *__pyx_n_s_get_time_steps;
static PyObject *__pyx_n_s_get_time_total;
static PyObject *__pyx_n_s_getitem;
static PyObject *__pyx_n_s_getstate;
static PyObject *__pyx_n_s_height;
static PyObject *__pyx_kp_s_home_karban_Projects_agros2d_de;
static PyObject *__pyx_kp_s_home_karban_Projects_agros2d_de_2;
static PyObject *__pyx_kp_s_home_karban_Projects_agros2d_de_3;
static PyObject *__pyx_n_s_index;
static PyObject *__pyx_n_s_init;
static PyObject *__pyx_n_s_init_method;
static PyObject *__pyx_n_s_initial_positions;
static PyObject *__pyx_n_s_initial_time_step;
static PyObject *__pyx_n_s_initial_velocities;
static PyObject *__pyx_n_b_interpolation;
static PyObject *__pyx_n_s_interpolation;
static PyObject *__pyx_n_s_item;
static PyObject *__pyx_n_s_jacobian_calculations;
static PyObject *__pyx_n_s_jacobian_reuse;
static PyObject *__pyx_n_s_jacobian_reuse_ratio;
static PyObject *__pyx_n_s_jacobian_reuse_steps;
static PyObject *__pyx_n_s_key;
static PyObject *__pyx_n_s_keys;
static PyObject *__pyx_n_s_l_type;
static PyObject *__pyx_n_s_labels;
static PyObject *__pyx_n_s_list;
static PyObject *__pyx_n_s_lower_bound;
static PyObject *__pyx_n_s_main;
static PyObject *__pyx_n_s_materials;
static PyObject *__pyx_n_s_max;
static PyObject *__pyx_n_s_mesh_type;
static PyObject *__pyx_n_s_metaclass;
static PyObject *__pyx_n_s_min;
static PyObject *__pyx_n_s_minimum;
static PyObject *__pyx_n_s_module;
static PyObject *__pyx_n_s_n_init_samples;
static PyObject *__pyx_n_s_n_iter_relearn;
static PyObject *__pyx_n_s_n_iterations;
static PyObject *__pyx_n_s_name;
static PyObject *__pyx_n_s_name_2;
static PyObject *__pyx_n_s_new_computation;
static PyObject *__pyx_n_s_ngen;
static PyObject *__pyx_n_s_nlopt;
static PyObject *__pyx_kp_s_no_default___reduce___due_to_non;
static PyObject *__pyx_n_s_nodes;
static PyObject *__pyx_n_s_nsga2;
static PyObject *__pyx_n_s_num_samples;
static PyObject *__pyx_n_s_open_file;
static PyObject *__pyx_n_s_open_with_solution;
static PyObject *__pyx_n_s_options;
static PyObject *__pyx_n_s_orders;
static PyObject *__pyx_n_s_parameters;
static PyObject *__pyx_n_s_parameters_key;
static PyObject *__pyx_n_s_particle_charges;
static PyObject *__pyx_n_s_particle_masses;
static PyObject *__pyx_n_s_pcross;
static PyObject *__pyx_n_s_pmut;
static PyObject *__pyx_n_s_popsize;
static PyObject *__pyx_n_s_positive_value;
static PyObject *__pyx_n_s_prepare;
static PyObject *__pyx_n_s_problem;
static PyObject *__pyx_n_s_problem_2;
static PyObject *__pyx_n_s_property;
static PyObject *__pyx_n_s_qualname;
static PyObject *__pyx_n_s_radius;
static PyObject *__pyx_n_s_range;
static PyObject *__pyx_n_s_read_plugins;
static PyObject *__pyx_n_s_reduce;
static PyObject *__pyx_n_s_reduce_cython;
static PyObject *__pyx_n_s_reduce_ex;
static PyObject *__pyx_n_s_refinements;
static PyObject *__pyx_n_s_relative_change_of_solutions;
static PyObject *__pyx_n_s_residual;
static PyObject *__pyx_n_s_save_file;
static PyObject *__pyx_n_s_save_with_solution;
static PyObject *__pyx_n_s_sc_type;
static PyObject *__pyx_n_s_scale;
static PyObject *__pyx_n_s_segments;
static PyObject *__pyx_n_s_self;
static PyObject *__pyx_kp_s_self_thisptr_cannot_be_converted;
static PyObject *__pyx_n_s_set;
static PyObject *__pyx_n_s_set_adaptivity_parameters;
static PyObject *__pyx_n_s_set_coordinate_type;
static PyObject *__pyx_n_s_set_datadir;
static PyObject *__pyx_n_s_set_frequency;
static PyObject *__pyx_n_s_set_initial_time_step;
static PyObject *__pyx_n_s_set_matrix_solver_parameters;
static PyObject *__pyx_n_s_set_mesh_type;
static PyObject *__pyx_n_s_set_method;
static PyObject *__pyx_n_s_set_parameters;
static PyObject *__pyx_n_s_set_results;
static PyObject *__pyx_n_s_set_settings;
static PyObject *__pyx_n_s_set_solver_parameters;
static PyObject *__pyx_n_s_set_time_method_order;
static PyObject *__pyx_n_s_set_time_method_tolerance;
static PyObject *__pyx_n_s_set_time_step_method;
static PyObject *__pyx_n_s_set_time_steps;
static PyObject *__pyx_n_s_set_time_total;
static PyObject *__pyx_n_s_setitem;
static PyObject *__pyx_n_s_setstate;
static PyObject *__pyx_n_s_setstate_cython;
static PyObject *__pyx_n_s_sln;
static PyObject *__pyx_n_s_solution_change;
static PyObject *__pyx_n_s_source_field;
static PyObject *__pyx_n_s_start_node_index;
static PyObject *__pyx_n_s_steps;
static PyObject *__pyx_n_s_str;
static PyObject *__pyx_n_s_strategy;
static PyObject *__pyx_n_s_strategy_hp;
static PyObject *__pyx_n_s_surr_name;
static PyObject *__pyx_n_s_surr_noise;
static PyObject *__pyx_n_s_sweep;
static PyObject *__pyx_n_s_target_field;
static PyObject *__pyx_n_s_tempdir;
static PyObject *__pyx_n_s_test;
static PyObject *__pyx_n_s_time_method_order;
static PyObject *__pyx_n_s_time_method_tolerance;
static PyObject *__pyx_n_s_time_step;
static PyObject *__pyx_n_s_time_step_method;
static PyObject *__pyx_n_s_time_steps;
static PyObject *__pyx_n_s_time_total;
static PyObject *__pyx_n_s_tolerance;
static PyObject *__pyx_n_s_transient_back_steps;
static PyObject *__pyx_n_s_transient_redone_steps;
static PyObject *__pyx_n_s_type;
static PyObject *__pyx_n_s_unauthorized;
static PyObject *__pyx_n_s_update;
static PyObject *__pyx_n_s_upper_bound;
static PyObject *__pyx_n_s_value;
static PyObject *__pyx_n_s_value_in_list;
static PyObject *__pyx_n_s_value_in_range;
static PyObject *__pyx_n_s_variable;
static PyObject *__pyx_n_s_variableComp;
static PyObject *__pyx_n_s_version;
static PyObject *__pyx_n_s_weight;
static PyObject *__pyx_n_s_width;
static PyObject *__pyx_n_s_withMarkers;
static PyObject *__pyx_n_s_x;
static PyObject *__pyx_n_s_x0;
static PyObject *__pyx_n_s_x1;
static PyObject *__pyx_n_s_x2;
static PyObject *__pyx_n_s_xtol_abs;
static PyObject *__pyx_n_s_xtol_rel;
static PyObject *__pyx_n_s_y;
static PyObject *__pyx_n_s_y0;
static PyObject *__pyx_n_s_y1;
static PyObject *__pyx_n_s_y2;
static PyObject *__pyx_pf_6_agros_14__Parameters_____init__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_get_method, PyObject *__pyx_v_set_method, PyObject *__pyx_v_check_set); /* proto */
static PyObject *__pyx_pf_6_agros_14__Parameters___2__update__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6_agros_14__Parameters___4__getitem__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_key); /* proto */
static PyObject *__pyx_pf_6_agros_14__Parameters___6__setitem__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_key, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_6_agros_14__Parameters___8get_parameters(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6_agros_value_in_range(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_value, PyObject *__pyx_v_min, PyObject *__pyx_v_max, PyObject *__pyx_v_key); /* proto */
static PyObject *__pyx_pf_6_agros_2value_in_list(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_value, PyObject *__pyx_v_list, PyObject *__pyx_v_key); /* proto */
static PyObject *__pyx_pf_6_agros_4positive_value(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_value, PyObject *__pyx_v_key); /* proto */
static int __pyx_pf_6_agros_12__Geometry_____cinit__(struct __pyx_obj_6_agros___Geometry__ *__pyx_v_self); /* proto */
static void __pyx_pf_6_agros_12__Geometry___2__dealloc__(struct __pyx_obj_6_agros___Geometry__ *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6_agros_12__Geometry___4add_node(struct __pyx_obj_6_agros___Geometry__ *__pyx_v_self, PyObject *__pyx_v_x, PyObject *__pyx_v_y); /* proto */
static PyObject *__pyx_pf_6_agros_12__Geometry___6remove_nodes(struct __pyx_obj_6_agros___Geometry__ *__pyx_v_self, PyObject *__pyx_v_nodes); /* proto */
static PyObject *__pyx_pf_6_agros_12__Geometry___8add_edge(struct __pyx_obj_6_agros___Geometry__ *__pyx_v_self, PyObject *__pyx_v_x1, PyObject *__pyx_v_y1, PyObject *__pyx_v_x2, PyObject *__pyx_v_y2, PyObject *__pyx_v_angle, PyObject *__pyx_v_segments, PyObject *__pyx_v_refinements, PyObject *__pyx_v_boundaries); /* proto */
static PyObject *__pyx_pf_6_agros_12__Geometry___10add_edge_by_nodes(struct __pyx_obj_6_agros___Geometry__ *__pyx_v_self, PyObject *__pyx_v_start_node_index, PyObject *__pyx_v_end_node_index, PyObject *__pyx_v_angle, PyObject *__pyx_v_segments, PyObject *__pyx_v_refinements, PyObject *__pyx_v_boundaries); /* proto */
static PyObject *__pyx_pf_6_agros_12__Geometry___12modify_edge(struct __pyx_obj_6_agros___Geometry__ *__pyx_v_self, PyObject *__pyx_v_index, PyObject *__pyx_v_angle, PyObject *__pyx_v_segments, PyObject *__pyx_v_refinements, PyObject *__pyx_v_boundaries); /* proto */
static PyObject *__pyx_pf_6_agros_12__Geometry___14remove_edges(struct __pyx_obj_6_agros___Geometry__ *__pyx_v_self, PyObject *__pyx_v_edges); /* proto */
static PyObject *__pyx_pf_6_agros_12__Geometry___16add_label(struct __pyx_obj_6_agros___Geometry__ *__pyx_v_self, PyObject *__pyx_v_x, PyObject *__pyx_v_y, PyObject *__pyx_v_area, PyObject *__pyx_v_refinements, PyObject *__pyx_v_orders, PyObject *__pyx_v_materials); /* proto */
static PyObject *__pyx_pf_6_agros_12__Geometry___18modify_label(struct __pyx_obj_6_agros___Geometry__ *__pyx_v_self, PyObject *__pyx_v_index, PyObject *__pyx_v_area, PyObject *__pyx_v_refinements, PyObject *__pyx_v_orders, PyObject *__pyx_v_materials); /* proto */
static PyObject *__pyx_pf_6_agros_12__Geometry___20remove_labels(struct __pyx_obj_6_agros___Geometry__ *__pyx_v_self, PyObject *__pyx_v_labels); /* proto */
static PyObject *__pyx_pf_6_agros_12__Geometry___22add_rect(struct __pyx_obj_6_agros___Geometry__ *__pyx_v_self, PyObject *__pyx_v_x0, PyObject *__pyx_v_y0, PyObject *__pyx_v_width, PyObject *__pyx_v_height, PyObject *__pyx_v_boundaries, PyObject *__pyx_v_materials); /* proto */
static PyObject *__pyx_pf_6_agros_12__Geometry___24add_circle(struct __pyx_obj_6_agros___Geometry__ *__pyx_v_self, PyObject *__pyx_v_x0, PyObject *__pyx_v_y0, PyObject *__pyx_v_radius, PyObject *__pyx_v_boundaries, PyObject *__pyx_v_materials); /* proto */
static PyObject *__pyx_pf_6_agros_12__Geometry___26add_semicircle(struct __pyx_obj_6_agros___Geometry__ *__pyx_v_self, PyObject *__pyx_v_x0, PyObject *__pyx_v_y0, PyObject *__pyx_v_radius, PyObject *__pyx_v_boundaries, PyObject *__pyx_v_materials); /* proto */
static PyObject *__pyx_pf_6_agros_12__Geometry___28nodes_count(struct __pyx_obj_6_agros___Geometry__ *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6_agros_12__Geometry___30edges_count(struct __pyx_obj_6_agros___Geometry__ *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6_agros_12__Geometry___32labels_count(struct __pyx_obj_6_agros___Geometry__ *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6_agros_12__Geometry___34select_nodes(struct __pyx_obj_6_agros___Geometry__ *__pyx_v_self, PyObject *__pyx_v_nodes); /* proto */
static PyObject *__pyx_pf_6_agros_12__Geometry___36select_edges(struct __pyx_obj_6_agros___Geometry__ *__pyx_v_self, PyObject *__pyx_v_edges); /* proto */
static PyObject *__pyx_pf_6_agros_12__Geometry___38select_labels(struct __pyx_obj_6_agros___Geometry__ *__pyx_v_self, PyObject *__pyx_v_labels); /* proto */
static PyObject *__pyx_pf_6_agros_12__Geometry___40select_node_by_point(struct __pyx_obj_6_agros___Geometry__ *__pyx_v_self, PyObject *__pyx_v_x, PyObject *__pyx_v_y); /* proto */
static PyObject *__pyx_pf_6_agros_12__Geometry___42select_edge_by_point(struct __pyx_obj_6_agros___Geometry__ *__pyx_v_self, PyObject *__pyx_v_x, PyObject *__pyx_v_y); /* proto */
static PyObject *__pyx_pf_6_agros_12__Geometry___44select_label_by_point(struct __pyx_obj_6_agros___Geometry__ *__pyx_v_self, PyObject *__pyx_v_x, PyObject *__pyx_v_y); /* proto */
static PyObject *__pyx_pf_6_agros_12__Geometry___46move_selection(struct __pyx_obj_6_agros___Geometry__ *__pyx_v_self, PyObject *__pyx_v_dx, PyObject *__pyx_v_dy, int __pyx_v_copy, int __pyx_v_withMarkers); /* proto */
static PyObject *__pyx_pf_6_agros_12__Geometry___48rotate_selection(struct __pyx_obj_6_agros___Geometry__ *__pyx_v_self, PyObject *__pyx_v_x, PyObject *__pyx_v_y, PyObject *__pyx_v_angle, PyObject *__pyx_v_copy, int __pyx_v_withMarkers); /* proto */
static PyObject *__pyx_pf_6_agros_12__Geometry___50scale_selection(struct __pyx_obj_6_agros___Geometry__ *__pyx_v_self, PyObject *__pyx_v_x, PyObject *__pyx_v_y, PyObject *__pyx_v_scale, PyObject *__pyx_v_copy, int __pyx_v_withMarkers); /* proto */
static PyObject *__pyx_pf_6_agros_12__Geometry___52remove_selection(struct __pyx_obj_6_agros___Geometry__ *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6_agros_12__Geometry___54select_none(struct __pyx_obj_6_agros___Geometry__ *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6_agros_12__Geometry___56export_vtk(struct __pyx_obj_6_agros___Geometry__ *__pyx_v_self, PyObject *__pyx_v_filename); /* proto */
static PyObject *__pyx_pf_6_agros_12__Geometry___58export_svg(struct __pyx_obj_6_agros___Geometry__ *__pyx_v_self, PyObject *__pyx_v_filename); /* proto */
static PyObject *__pyx_pf_6_agros_12__Geometry___60export_svg_image(struct __pyx_obj_6_agros___Geometry__ *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6_agros_12__Geometry___62__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_6_agros___Geometry__ *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6_agros_12__Geometry___64__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_6_agros___Geometry__ *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_6_agros_9__Field_____cinit__(struct __pyx_obj_6_agros___Field__ *__pyx_v_self, PyObject *__pyx_v_field_id); /* proto */
static void __pyx_pf_6_agros_9__Field___2__dealloc__(struct __pyx_obj_6_agros___Field__ *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6_agros_9__Field___8field_id___get__(struct __pyx_obj_6_agros___Field__ *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6_agros_9__Field___13analysis_type___get__(struct __pyx_obj_6_agros___Field__ *__pyx_v_self); /* proto */
static int __pyx_pf_6_agros_9__Field___13analysis_type_2__set__(struct __pyx_obj_6_agros___Field__ *__pyx_v_self, PyObject *__pyx_v_analysis); /* proto */
static PyObject *__pyx_pf_6_agros_9__Field___6solver___get__(struct __pyx_obj_6_agros___Field__ *__pyx_v_self); /* proto */
static int __pyx_pf_6_agros_9__Field___6solver_2__set__(struct __pyx_obj_6_agros___Field__ *__pyx_v_self, PyObject *__pyx_v_solver); /* proto */
static PyObject *__pyx_pf_6_agros_9__Field___17solver_parameters___get__(struct __pyx_obj_6_agros___Field__ *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6_agros_9__Field___19adaptivity_callback___get__(struct __pyx_obj_6_agros___Field__ *__pyx_v_self); /* proto */
static int __pyx_pf_6_agros_9__Field___19adaptivity_callback_2__set__(struct __pyx_obj_6_agros___Field__ *__pyx_v_self, PyObject *__pyx_v_callback); /* proto */
static PyObject *__pyx_pf_6_agros_9__Field___4__get_solver_parameters__(struct __pyx_obj_6_agros___Field__ *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6_agros_9__Field___6__set_solver_parameters__(struct __pyx_obj_6_agros___Field__ *__pyx_v_self, PyObject *__pyx_v_parameters); /* proto */
static PyObject *__pyx_pf_6_agros_9__Field___13matrix_solver___get__(struct __pyx_obj_6_agros___Field__ *__pyx_v_self); /* proto */
static int __pyx_pf_6_agros_9__Field___13matrix_solver_2__set__(struct __pyx_obj_6_agros___Field__ *__pyx_v_self, PyObject *__pyx_v_solver); /* proto */
static PyObject *__pyx_pf_6_agros_9__Field___24matrix_solver_parameters___get__(struct __pyx_obj_6_agros___Field__ *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6_agros_9__Field___8__get_matrix_solver_parameters__(struct __pyx_obj_6_agros___Field__ *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6_agros_9__Field___10__set_matrix_solver_parameters__(struct __pyx_obj_6_agros___Field__ *__pyx_v_self, PyObject *__pyx_v_parameters); /* proto */
static PyObject *__pyx_pf_6_agros_9__Field___21number_of_refinements___get__(struct __pyx_obj_6_agros___Field__ *__pyx_v_self); /* proto */
static int __pyx_pf_6_agros_9__Field___21number_of_refinements_2__set__(struct __pyx_obj_6_agros___Field__ *__pyx_v_self, PyObject *__pyx_v_refinements); /* proto */
static PyObject *__pyx_pf_6_agros_9__Field___16polynomial_order___get__(struct __pyx_obj_6_agros___Field__ *__pyx_v_self); /* proto */
static int __pyx_pf_6_agros_9__Field___16polynomial_order_2__set__(struct __pyx_obj_6_agros___Field__ *__pyx_v_self, PyObject *__pyx_v_order); /* proto */
static PyObject *__pyx_pf_6_agros_9__Field___15adaptivity_type___get__(struct __pyx_obj_6_agros___Field__ *__pyx_v_self); /* proto */
static int __pyx_pf_6_agros_9__Field___15adaptivity_type_2__set__(struct __pyx_obj_6_agros___Field__ *__pyx_v_self, PyObject *__pyx_v_adaptivity_type); /* proto */
static PyObject *__pyx_pf_6_agros_9__Field___21adaptivity_parameters___get__(struct __pyx_obj_6_agros___Field__ *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6_agros_9__Field___12__get_adaptivity_parameters__(struct __pyx_obj_6_agros___Field__ *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6_agros_9__Field___14__set_adaptivity_parameters__(struct __pyx_obj_6_agros___Field__ *__pyx_v_self, PyObject *__pyx_v_parameters); /* proto */
static PyObject *__pyx_pf_6_agros_9__Field___27transient_initial_condition___get__(struct __pyx_obj_6_agros___Field__ *__pyx_v_self); /* proto */
static int __pyx_pf_6_agros_9__Field___27transient_initial_condition_2__set__(struct __pyx_obj_6_agros___Field__ *__pyx_v_self, PyObject *__pyx_v_condition); /* proto */
static PyObject *__pyx_pf_6_agros_9__Field___19transient_time_skip___get__(struct __pyx_obj_6_agros___Field__ *__pyx_v_self); /* proto */
static int __pyx_pf_6_agros_9__Field___19transient_time_skip_2__set__(struct __pyx_obj_6_agros___Field__ *__pyx_v_self, PyObject *__pyx_v_skip); /* proto */
static PyObject *__pyx_pf_6_agros_9__Field___16add_boundary(struct __pyx_obj_6_agros___Field__ *__pyx_v_self, PyObject *__pyx_v_name, PyObject *__pyx_v_type, PyObject *__pyx_v_parameters); /* proto */
static PyObject *__pyx_pf_6_agros_9__Field___18modify_boundary(struct __pyx_obj_6_agros___Field__ *__pyx_v_self, PyObject *__pyx_v_name, PyObject *__pyx_v_type, PyObject *__pyx_v_parameters); /* proto */
static PyObject *__pyx_pf_6_agros_9__Field___20remove_boundary(struct __pyx_obj_6_agros___Field__ *__pyx_v_self, PyObject *__pyx_v_name); /* proto */
static PyObject *__pyx_pf_6_agros_9__Field___22add_material(struct __pyx_obj_6_agros___Field__ *__pyx_v_self, PyObject *__pyx_v_name, PyObject *__pyx_v_parameters); /* proto */
static PyObject *__pyx_pf_6_agros_9__Field___24modify_material(struct __pyx_obj_6_agros___Field__ *__pyx_v_self, PyObject *__pyx_v_name, PyObject *__pyx_v_parameters); /* proto */
static PyObject *__pyx_pf_6_agros_9__Field___26remove_material(struct __pyx_obj_6_agros___Field__ *__pyx_v_self, PyObject *__pyx_v_name); /* proto */
static PyObject *__pyx_pf_6_agros_9__Field___28add_recipe_volume_integral(struct __pyx_obj_6_agros___Field__ *__pyx_v_self, PyObject *__pyx_v_name, PyObject *__pyx_v_variable, PyObject *__pyx_v_labels, PyObject *__pyx_v_time_step, PyObject *__pyx_v_adaptivity_step); /* proto */
static PyObject *__pyx_pf_6_agros_9__Field___30add_recipe_surface_integral(struct __pyx_obj_6_agros___Field__ *__pyx_v_self, PyObject *__pyx_v_name, PyObject *__pyx_v_variable, PyObject *__pyx_v_edges, PyObject *__pyx_v_time_step, PyObject *__pyx_v_adaptivity_step); /* proto */
static PyObject *__pyx_pf_6_agros_9__Field___32add_recipe_local_value(struct __pyx_obj_6_agros___Field__ *__pyx_v_self, PyObject *__pyx_v_name, PyObject *__pyx_v_variable, PyObject *__pyx_v_component, PyObject *__pyx_v_x, PyObject *__pyx_v_y, PyObject *__pyx_v_time_step, PyObject *__pyx_v_adaptivity_step); /* proto */
static PyObject *__pyx_pf_6_agros_9__Field___34__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_6_agros___Field__ *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6_agros_9__Field___36__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_6_agros___Field__ *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_6_agros_11__Problem_____cinit__(struct __pyx_obj_6_agros___Problem__ *__pyx_v_self, PyObject *__pyx_v_clear); /* proto */
static void __pyx_pf_6_agros_11__Problem___2__dealloc__(struct __pyx_obj_6_agros___Problem__ *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6_agros_11__Problem___4clear(struct __pyx_obj_6_agros___Problem__ *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6_agros_11__Problem___6field(struct __pyx_obj_6_agros___Problem__ *__pyx_v_self, PyObject *__pyx_v_field_id); /* proto */
static PyObject *__pyx_pf_6_agros_11__Problem___8__remove_field__(struct __pyx_obj_6_agros___Problem__ *__pyx_v_self, PyObject *__pyx_v_field_id); /* proto */
static PyObject *__pyx_pf_6_agros_11__Problem___10geometry(struct __pyx_obj_6_agros___Problem__ *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6_agros_11__Problem___12computation(CYTHON_UNUSED struct __pyx_obj_6_agros___Problem__ *__pyx_v_self, PyObject *__pyx_v_new_computation); /* proto */
static PyObject *__pyx_pf_6_agros_11__Problem___10parameters___get__(struct __pyx_obj_6_agros___Problem__ *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6_agros_11__Problem___14__get_parameters__(struct __pyx_obj_6_agros___Problem__ *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6_agros_11__Problem___16__set_parameters__(struct __pyx_obj_6_agros___Problem__ *__pyx_v_self, PyObject *__pyx_v_parameters); /* proto */
static PyObject *__pyx_pf_6_agros_11__Problem___18_get_coordinate_type(struct __pyx_obj_6_agros___Problem__ *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6_agros_11__Problem___20_set_coordinate_type(struct __pyx_obj_6_agros___Problem__ *__pyx_v_self, PyObject *__pyx_v_coordinate_type); /* proto */
static PyObject *__pyx_pf_6_agros_11__Problem___22_get_mesh_type(struct __pyx_obj_6_agros___Problem__ *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6_agros_11__Problem___24_set_mesh_type(struct __pyx_obj_6_agros___Problem__ *__pyx_v_self, PyObject *__pyx_v_mesh_type); /* proto */
static PyObject *__pyx_pf_6_agros_11__Problem___26_get_frequency(struct __pyx_obj_6_agros___Problem__ *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6_agros_11__Problem___28_set_frequency(struct __pyx_obj_6_agros___Problem__ *__pyx_v_self, PyObject *__pyx_v_frequency); /* proto */
static PyObject *__pyx_pf_6_agros_11__Problem___30_get_time_step_method(struct __pyx_obj_6_agros___Problem__ *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6_agros_11__Problem___32_set_time_step_method(struct __pyx_obj_6_agros___Problem__ *__pyx_v_self, PyObject *__pyx_v_time_step_method); /* proto */
static PyObject *__pyx_pf_6_agros_11__Problem___34_get_time_method_order(struct __pyx_obj_6_agros___Problem__ *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6_agros_11__Problem___36_set_time_method_order(struct __pyx_obj_6_agros___Problem__ *__pyx_v_self, PyObject *__pyx_v_time_method_order); /* proto */
static PyObject *__pyx_pf_6_agros_11__Problem___38_get_time_method_tolerance(struct __pyx_obj_6_agros___Problem__ *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6_agros_11__Problem___40_set_time_method_tolerance(struct __pyx_obj_6_agros___Problem__ *__pyx_v_self, PyObject *__pyx_v_time_method_tolerance); /* proto */
static PyObject *__pyx_pf_6_agros_11__Problem___42_get_time_total(struct __pyx_obj_6_agros___Problem__ *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6_agros_11__Problem___44_set_time_total(struct __pyx_obj_6_agros___Problem__ *__pyx_v_self, PyObject *__pyx_v_time_total); /* proto */
static PyObject *__pyx_pf_6_agros_11__Problem___46_get_time_steps(struct __pyx_obj_6_agros___Problem__ *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6_agros_11__Problem___48_set_time_steps(struct __pyx_obj_6_agros___Problem__ *__pyx_v_self, PyObject *__pyx_v_time_steps); /* proto */
static PyObject *__pyx_pf_6_agros_11__Problem___50_get_initial_time_step(struct __pyx_obj_6_agros___Problem__ *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6_agros_11__Problem___52_set_initial_time_step(struct __pyx_obj_6_agros___Problem__ *__pyx_v_self, PyObject *__pyx_v_initial_time_step); /* proto */
static PyObject *__pyx_pf_6_agros_11__Problem___54get_coupling_type(struct __pyx_obj_6_agros___Problem__ *__pyx_v_self, PyObject *__pyx_v_source_field, PyObject *__pyx_v_target_field); /* proto */
static PyObject *__pyx_pf_6_agros_11__Problem___56set_coupling_type(struct __pyx_obj_6_agros___Problem__ *__pyx_v_self, PyObject *__pyx_v_source_field, PyObject *__pyx_v_target_field, PyObject *__pyx_v_type); /* proto */
static PyObject *__pyx_pf_6_agros_11__Problem___58add_study(CYTHON_UNUSED struct __pyx_obj_6_agros___Problem__ *__pyx_v_self, PyObject *__pyx_v_type); /* proto */
static PyObject *__pyx_pf_6_agros_11__Problem___60study(struct __pyx_obj_6_agros___Problem__ *__pyx_v_self, PyObject *__pyx_v_index); /* proto */
static PyObject *__pyx_pf_6_agros_11__Problem___62load(struct __pyx_obj_6_agros___Problem__ *__pyx_v_self, PyObject *__pyx_v_fn); /* proto */
static PyObject *__pyx_pf_6_agros_11__Problem___64save(struct __pyx_obj_6_agros___Problem__ *__pyx_v_self, PyObject *__pyx_v_fn); /* proto */
static PyObject *__pyx_pf_6_agros_11__Problem___66__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_6_agros___Problem__ *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6_agros_11__Problem___68__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_6_agros___Problem__ *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_6_agros_6problem(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_clear); /* proto */
static int __pyx_pf_6_agros_15__Computation_____cinit__(struct __pyx_obj_6_agros___Computation__ *__pyx_v_self, PyObject *__pyx_v_new_computation, PyObject *__pyx_v_computation); /* proto */
static void __pyx_pf_6_agros_15__Computation___2__dealloc__(struct __pyx_obj_6_agros___Computation__ *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6_agros_15__Computation___4__unauthorized__(CYTHON_UNUSED struct __pyx_obj_6_agros___Computation__ *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_6_agros_15__Computation___6clear(struct __pyx_obj_6_agros___Computation__ *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6_agros_15__Computation___8solve(struct __pyx_obj_6_agros___Computation__ *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6_agros_15__Computation___10solution(struct __pyx_obj_6_agros___Computation__ *__pyx_v_self, PyObject *__pyx_v_field_id); /* proto */
static PyObject *__pyx_pf_6_agros_15__Computation___12particle_tracing(struct __pyx_obj_6_agros___Computation__ *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6_agros_15__Computation___14elapsed_time(struct __pyx_obj_6_agros___Computation__ *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6_agros_15__Computation___16time_steps_length(struct __pyx_obj_6_agros___Computation__ *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6_agros_15__Computation___18time_steps_total(struct __pyx_obj_6_agros___Computation__ *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6_agros_15__Computation___7results___get__(struct __pyx_obj_6_agros___Computation__ *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6_agros_15__Computation___20__get_results__(struct __pyx_obj_6_agros___Computation__ *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6_agros_15__Computation___22__set_results__(struct __pyx_obj_6_agros___Computation__ *__pyx_v_self, PyObject *__pyx_v_results); /* proto */
static PyObject *__pyx_pf_6_agros_15__Computation___10parameters___get__(struct __pyx_obj_6_agros___Computation__ *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6_agros_15__Computation___24__get_parameters__(struct __pyx_obj_6_agros___Computation__ *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6_agros_15__Computation___26_get_coordinate_type(struct __pyx_obj_6_agros___Computation__ *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6_agros_15__Computation___28_get_mesh_type(struct __pyx_obj_6_agros___Computation__ *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6_agros_15__Computation___30_get_frequency(struct __pyx_obj_6_agros___Computation__ *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6_agros_15__Computation___32_get_time_step_method(struct __pyx_obj_6_agros___Computation__ *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6_agros_15__Computation___34_get_time_method_order(struct __pyx_obj_6_agros___Computation__ *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6_agros_15__Computation___36_get_time_method_tolerance(struct __pyx_obj_6_agros___Computation__ *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6_agros_15__Computation___38_get_time_total(struct __pyx_obj_6_agros___Computation__ *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6_agros_15__Computation___40_get_time_steps(struct __pyx_obj_6_agros___Computation__ *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6_agros_15__Computation___42_get_initial_time_step(struct __pyx_obj_6_agros___Computation__ *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6_agros_15__Computation___44get_coupling_type(struct __pyx_obj_6_agros___Computation__ *__pyx_v_self, PyObject *__pyx_v_source_field, PyObject *__pyx_v_target_field); /* proto */
static PyObject *__pyx_pf_6_agros_15__Computation___46__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_6_agros___Computation__ *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6_agros_15__Computation___48__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_6_agros___Computation__ *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_6_agros_8computation(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_computation); /* proto */
static int __pyx_pf_6_agros_12__Solution_____cinit__(struct __pyx_obj_6_agros___Solution__ *__pyx_v_self); /* proto */
static void __pyx_pf_6_agros_12__Solution___2__dealloc__(struct __pyx_obj_6_agros___Solution__ *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6_agros_12__Solution___4local_values(struct __pyx_obj_6_agros___Solution__ *__pyx_v_self, PyObject *__pyx_v_x, PyObject *__pyx_v_y, PyObject *__pyx_v_time_step, PyObject *__pyx_v_adaptivity_step); /* proto */
static PyObject *__pyx_pf_6_agros_12__Solution___6surface_integrals(struct __pyx_obj_6_agros___Solution__ *__pyx_v_self, PyObject *__pyx_v_edges, PyObject *__pyx_v_time_step, PyObject *__pyx_v_adaptivity_step); /* proto */
static PyObject *__pyx_pf_6_agros_12__Solution___8volume_integrals(struct __pyx_obj_6_agros___Solution__ *__pyx_v_self, PyObject *__pyx_v_labels, PyObject *__pyx_v_time_step, PyObject *__pyx_v_adaptivity_step); /* proto */
static PyObject *__pyx_pf_6_agros_12__Solution___10initial_mesh_info(struct __pyx_obj_6_agros___Solution__ *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6_agros_12__Solution___12solution_mesh_info(struct __pyx_obj_6_agros___Solution__ *__pyx_v_self, PyObject *__pyx_v_time_step, PyObject *__pyx_v_adaptivity_step); /* proto */
static PyObject *__pyx_pf_6_agros_12__Solution___14solver_info(struct __pyx_obj_6_agros___Solution__ *__pyx_v_self, PyObject *__pyx_v_time_step, PyObject *__pyx_v_adaptivity_step); /* proto */
static PyObject *__pyx_pf_6_agros_12__Solution___16adaptivity_info(struct __pyx_obj_6_agros___Solution__ *__pyx_v_self, PyObject *__pyx_v_time_step); /* proto */
static PyObject *__pyx_pf_6_agros_12__Solution___18export_vtk(struct __pyx_obj_6_agros___Solution__ *__pyx_v_self, PyObject *__pyx_v_fileName, PyObject *__pyx_v_time_step, PyObject *__pyx_v_adaptivity_step, PyObject *__pyx_v_variable, PyObject *__pyx_v_variableComp); /* proto */
static PyObject *__pyx_pf_6_agros_12__Solution___20solution(struct __pyx_obj_6_agros___Solution__ *__pyx_v_self, PyObject *__pyx_v_time_step, PyObject *__pyx_v_adaptivity_step); /* proto */
static PyObject *__pyx_pf_6_agros_12__Solution___22setSolution(struct __pyx_obj_6_agros___Solution__ *__pyx_v_self, PyObject *__pyx_v_sln, PyObject *__pyx_v_time_step, PyObject *__pyx_v_adaptivity_step); /* proto */
static PyObject *__pyx_pf_6_agros_12__Solution___24__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_6_agros___Solution__ *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6_agros_12__Solution___26__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_6_agros___Solution__ *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_6_agros_19__ParticleTracing_____cinit__(struct __pyx_obj_6_agros___ParticleTracing__ *__pyx_v_self); /* proto */
static void __pyx_pf_6_agros_19__ParticleTracing___2__dealloc__(struct __pyx_obj_6_agros___ParticleTracing__ *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6_agros_19__ParticleTracing___4solve(struct __pyx_obj_6_agros___ParticleTracing__ *__pyx_v_self, PyObject *__pyx_v_initial_positions, PyObject *__pyx_v_initial_velocities, PyObject *__pyx_v_particle_charges, PyObject *__pyx_v_particle_masses); /* proto */
static PyObject *__pyx_pf_6_agros_19__ParticleTracing___6positions(struct __pyx_obj_6_agros___ParticleTracing__ *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6_agros_19__ParticleTracing___8velocities(struct __pyx_obj_6_agros___ParticleTracing__ *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6_agros_19__ParticleTracing___10times(struct __pyx_obj_6_agros___ParticleTracing__ *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6_agros_19__ParticleTracing___19number_of_particles___get__(struct __pyx_obj_6_agros___ParticleTracing__ *__pyx_v_self); /* proto */
static int __pyx_pf_6_agros_19__ParticleTracing___19number_of_particles_2__set__(struct __pyx_obj_6_agros___ParticleTracing__ *__pyx_v_self, PyObject *__pyx_v_particles); /* proto */
static PyObject *__pyx_pf_6_agros_19__ParticleTracing___20particles_dispersion___get__(struct __pyx_obj_6_agros___ParticleTracing__ *__pyx_v_self); /* proto */
static int __pyx_pf_6_agros_19__ParticleTracing___20particles_dispersion_2__set__(struct __pyx_obj_6_agros___ParticleTracing__ *__pyx_v_self, PyObject *__pyx_v_dispersion); /* proto */
static PyObject *__pyx_pf_6_agros_19__ParticleTracing___16initial_position___get__(struct __pyx_obj_6_agros___ParticleTracing__ *__pyx_v_self); /* proto */
static int __pyx_pf_6_agros_19__ParticleTracing___16initial_position_2__set__(struct __pyx_obj_6_agros___ParticleTracing__ *__pyx_v_self, PyObject *__pyx_v_position); /* proto */
static PyObject *__pyx_pf_6_agros_19__ParticleTracing___16initial_velocity___get__(struct __pyx_obj_6_agros___ParticleTracing__ *__pyx_v_self); /* proto */
static int __pyx_pf_6_agros_19__ParticleTracing___16initial_velocity_2__set__(struct __pyx_obj_6_agros___ParticleTracing__ *__pyx_v_self, PyObject *__pyx_v_velocity); /* proto */
static PyObject *__pyx_pf_6_agros_19__ParticleTracing___4mass___get__(struct __pyx_obj_6_agros___ParticleTracing__ *__pyx_v_self); /* proto */
static int __pyx_pf_6_agros_19__ParticleTracing___4mass_2__set__(struct __pyx_obj_6_agros___ParticleTracing__ *__pyx_v_self, PyObject *__pyx_v_mass); /* proto */
static PyObject *__pyx_pf_6_agros_19__ParticleTracing___6charge___get__(struct __pyx_obj_6_agros___ParticleTracing__ *__pyx_v_self); /* proto */
static int __pyx_pf_6_agros_19__ParticleTracing___6charge_2__set__(struct __pyx_obj_6_agros___ParticleTracing__ *__pyx_v_self, PyObject *__pyx_v_charge); /* proto */
static PyObject *__pyx_pf_6_agros_19__ParticleTracing___31include_relativistic_correction___get__(struct __pyx_obj_6_agros___ParticleTracing__ *__pyx_v_self); /* proto */
static int __pyx_pf_6_agros_19__ParticleTracing___31include_relativistic_correction_2__set__(struct __pyx_obj_6_agros___ParticleTracing__ *__pyx_v_self, PyObject *__pyx_v_correction); /* proto */
static PyObject *__pyx_pf_6_agros_19__ParticleTracing___29reflect_on_different_material___get__(struct __pyx_obj_6_agros___ParticleTracing__ *__pyx_v_self); /* proto */
static int __pyx_pf_6_agros_19__ParticleTracing___29reflect_on_different_material_2__set__(struct __pyx_obj_6_agros___ParticleTracing__ *__pyx_v_self, PyObject *__pyx_v_reflect); /* proto */
static PyObject *__pyx_pf_6_agros_19__ParticleTracing___19reflect_on_boundary___get__(struct __pyx_obj_6_agros___ParticleTracing__ *__pyx_v_self); /* proto */
static int __pyx_pf_6_agros_19__ParticleTracing___19reflect_on_boundary_2__set__(struct __pyx_obj_6_agros___ParticleTracing__ *__pyx_v_self, PyObject *__pyx_v_reflect); /* proto */
static PyObject *__pyx_pf_6_agros_19__ParticleTracing___26coefficient_of_restitution___get__(struct __pyx_obj_6_agros___ParticleTracing__ *__pyx_v_self); /* proto */
static int __pyx_pf_6_agros_19__ParticleTracing___26coefficient_of_restitution_2__set__(struct __pyx_obj_6_agros___ParticleTracing__ *__pyx_v_self, PyObject *__pyx_v_coeff); /* proto */
static PyObject *__pyx_pf_6_agros_19__ParticleTracing___18drag_force_density___get__(struct __pyx_obj_6_agros___ParticleTracing__ *__pyx_v_self); /* proto */
static int __pyx_pf_6_agros_19__ParticleTracing___18drag_force_density_2__set__(struct __pyx_obj_6_agros___ParticleTracing__ *__pyx_v_self, PyObject *__pyx_v_density); /* proto */
static PyObject *__pyx_pf_6_agros_19__ParticleTracing___25drag_force_reference_area___get__(struct __pyx_obj_6_agros___ParticleTracing__ *__pyx_v_self); /* proto */
static int __pyx_pf_6_agros_19__ParticleTracing___25drag_force_reference_area_2__set__(struct __pyx_obj_6_agros___ParticleTracing__ *__pyx_v_self, PyObject *__pyx_v_area); /* proto */
static PyObject *__pyx_pf_6_agros_19__ParticleTracing___22drag_force_coefficient___get__(struct __pyx_obj_6_agros___ParticleTracing__ *__pyx_v_self); /* proto */
static int __pyx_pf_6_agros_19__ParticleTracing___22drag_force_coefficient_2__set__(struct __pyx_obj_6_agros___ParticleTracing__ *__pyx_v_self, PyObject *__pyx_v_coeff); /* proto */
static PyObject *__pyx_pf_6_agros_19__ParticleTracing___12custom_force___get__(struct __pyx_obj_6_agros___ParticleTracing__ *__pyx_v_self); /* proto */
static int __pyx_pf_6_agros_19__ParticleTracing___12custom_force_2__set__(struct __pyx_obj_6_agros___ParticleTracing__ *__pyx_v_self, PyObject *__pyx_v_force); /* proto */
static PyObject *__pyx_pf_6_agros_19__ParticleTracing___25electrostatic_interaction___get__(struct __pyx_obj_6_agros___ParticleTracing__ *__pyx_v_self); /* proto */
static int __pyx_pf_6_agros_19__ParticleTracing___25electrostatic_interaction_2__set__(struct __pyx_obj_6_agros___ParticleTracing__ *__pyx_v_self, PyObject *__pyx_v_interaction); /* proto */
static PyObject *__pyx_pf_6_agros_19__ParticleTracing___20magnetic_interaction___get__(struct __pyx_obj_6_agros___ParticleTracing__ *__pyx_v_self); /* proto */
static int __pyx_pf_6_agros_19__ParticleTracing___20magnetic_interaction_2__set__(struct __pyx_obj_6_agros___ParticleTracing__ *__pyx_v_self, PyObject *__pyx_v_interaction); /* proto */
static PyObject *__pyx_pf_6_agros_19__ParticleTracing___18butcher_table_type___get__(struct __pyx_obj_6_agros___ParticleTracing__ *__pyx_v_self); /* proto */
static int __pyx_pf_6_agros_19__ParticleTracing___18butcher_table_type_2__set__(struct __pyx_obj_6_agros___ParticleTracing__ *__pyx_v_self, PyObject *__pyx_v_table_type); /* proto */
static PyObject *__pyx_pf_6_agros_19__ParticleTracing___23maximum_number_of_steps___get__(struct __pyx_obj_6_agros___ParticleTracing__ *__pyx_v_self); /* proto */
static int __pyx_pf_6_agros_19__ParticleTracing___23maximum_number_of_steps_2__set__(struct __pyx_obj_6_agros___ParticleTracing__ *__pyx_v_self, PyObject *__pyx_v_steps); /* proto */
static PyObject *__pyx_pf_6_agros_19__ParticleTracing___22maximum_relative_error___get__(struct __pyx_obj_6_agros___ParticleTracing__ *__pyx_v_self); /* proto */
static int __pyx_pf_6_agros_19__ParticleTracing___22maximum_relative_error_2__set__(struct __pyx_obj_6_agros___ParticleTracing__ *__pyx_v_self, PyObject *__pyx_v_tolerance); /* proto */
static PyObject *__pyx_pf_6_agros_19__ParticleTracing___12maximum_step___get__(struct __pyx_obj_6_agros___ParticleTracing__ *__pyx_v_self); /* proto */
static int __pyx_pf_6_agros_19__ParticleTracing___12maximum_step_2__set__(struct __pyx_obj_6_agros___ParticleTracing__ *__pyx_v_self, PyObject *__pyx_v_step); /* proto */
static PyObject *__pyx_pf_6_agros_19__ParticleTracing___18collor_by_velocity___get__(struct __pyx_obj_6_agros___ParticleTracing__ *__pyx_v_self); /* proto */
static int __pyx_pf_6_agros_19__ParticleTracing___18collor_by_velocity_2__set__(struct __pyx_obj_6_agros___ParticleTracing__ *__pyx_v_self, PyObject *__pyx_v_show); /* proto */
static PyObject *__pyx_pf_6_agros_19__ParticleTracing___11show_points___get__(struct __pyx_obj_6_agros___ParticleTracing__ *__pyx_v_self); /* proto */
static int __pyx_pf_6_agros_19__ParticleTracing___11show_points_2__set__(struct __pyx_obj_6_agros___ParticleTracing__ *__pyx_v_self, PyObject *__pyx_v_show); /* proto */
static PyObject *__pyx_pf_6_agros_19__ParticleTracing___13blended_faces___get__(struct __pyx_obj_6_agros___ParticleTracing__ *__pyx_v_self); /* proto */
static int __pyx_pf_6_agros_19__ParticleTracing___13blended_faces_2__set__(struct __pyx_obj_6_agros___ParticleTracing__ *__pyx_v_self, PyObject *__pyx_v_show); /* proto */
static PyObject *__pyx_pf_6_agros_19__ParticleTracing___23multiple_show_particles___get__(struct __pyx_obj_6_agros___ParticleTracing__ *__pyx_v_self); /* proto */
static int __pyx_pf_6_agros_19__ParticleTracing___23multiple_show_particles_2__set__(struct __pyx_obj_6_agros___ParticleTracing__ *__pyx_v_self, PyObject *__pyx_v_particles); /* proto */
static PyObject *__pyx_pf_6_agros_19__ParticleTracing___12__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_6_agros___ParticleTracing__ *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6_agros_19__ParticleTracing___14__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_6_agros___ParticleTracing__ *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static void __pyx_pf_6_agros_9__Study_____dealloc__(struct __pyx_obj_6_agros___Study__ *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6_agros_9__Study___2add_parameter(struct __pyx_obj_6_agros___Study__ *__pyx_v_self, PyObject *__pyx_v_name, PyObject *__pyx_v_lower_bound, PyObject *__pyx_v_upper_bound); /* proto */
static PyObject *__pyx_pf_6_agros_9__Study___4add_functional(struct __pyx_obj_6_agros___Study__ *__pyx_v_self, PyObject *__pyx_v_name, PyObject *__pyx_v_expression, PyObject *__pyx_v_weight); /* proto */
static PyObject *__pyx_pf_6_agros_9__Study___6type(struct __pyx_obj_6_agros___Study__ *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6_agros_9__Study___8settings___get__(struct __pyx_obj_6_agros___Study__ *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6_agros_9__Study___14clear_solution___get__(struct __pyx_obj_6_agros___Study__ *__pyx_v_self); /* proto */
static int __pyx_pf_6_agros_9__Study___14clear_solution_2__set__(struct __pyx_obj_6_agros___Study__ *__pyx_v_self, PyObject *__pyx_v_val); /* proto */
static PyObject *__pyx_pf_6_agros_9__Study___13solve_problem___get__(struct __pyx_obj_6_agros___Study__ *__pyx_v_self); /* proto */
static int __pyx_pf_6_agros_9__Study___13solve_problem_2__set__(struct __pyx_obj_6_agros___Study__ *__pyx_v_self, PyObject *__pyx_v_val); /* proto */
static PyObject *__pyx_pf_6_agros_9__Study___3doe___get__(struct __pyx_obj_6_agros___Study__ *__pyx_v_self); /* proto */
static int __pyx_pf_6_agros_9__Study___3doe_2__set__(struct __pyx_obj_6_agros___Study__ *__pyx_v_self, PyObject *__pyx_v_val); /* proto */
static PyObject *__pyx_pf_6_agros_9__Study___13doe_deviation___get__(struct __pyx_obj_6_agros___Study__ *__pyx_v_self); /* proto */
static int __pyx_pf_6_agros_9__Study___13doe_deviation_2__set__(struct __pyx_obj_6_agros___Study__ *__pyx_v_self, PyObject *__pyx_v_val); /* proto */
static PyObject *__pyx_pf_6_agros_9__Study___17doe_sweep_samples___get__(struct __pyx_obj_6_agros___Study__ *__pyx_v_self); /* proto */
static int __pyx_pf_6_agros_9__Study___17doe_sweep_samples_2__set__(struct __pyx_obj_6_agros___Study__ *__pyx_v_self, PyObject *__pyx_v_val); /* proto */
static PyObject *__pyx_pf_6_agros_9__Study___8solve(struct __pyx_obj_6_agros___Study__ *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6_agros_9__Study___10find_extreme(struct __pyx_obj_6_agros___Study__ *__pyx_v_self, PyObject *__pyx_v_type, PyObject *__pyx_v_key, PyObject *__pyx_v_minimum); /* proto */
static PyObject *__pyx_pf_6_agros_9__Study___12steps(struct __pyx_obj_6_agros___Study__ *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6_agros_9__Study___14values(struct __pyx_obj_6_agros___Study__ *__pyx_v_self, PyObject *__pyx_v_variable); /* proto */
static PyObject *__pyx_pf_6_agros_9__Study___16__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_6_agros___Study__ *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6_agros_9__Study___18__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_6_agros___Study__ *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_6_agros_17__StudyBayesOpt_____cinit__(struct __pyx_obj_6_agros___StudyBayesOpt__ *__pyx_v_self, PyObject *__pyx_v_index); /* proto */
static PyObject *__pyx_pf_6_agros_17__StudyBayesOpt___2__get_settings__(struct __pyx_obj_6_agros___StudyBayesOpt__ *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6_agros_17__StudyBayesOpt___4__set_settings__(struct __pyx_obj_6_agros___StudyBayesOpt__ *__pyx_v_self, PyObject *__pyx_v_settings); /* proto */
static PyObject *__pyx_pf_6_agros_17__StudyBayesOpt___6__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_6_agros___StudyBayesOpt__ *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6_agros_17__StudyBayesOpt___8__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_6_agros___StudyBayesOpt__ *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_6_agros_14__StudyNLopt_____cinit__(struct __pyx_obj_6_agros___StudyNLopt__ *__pyx_v_self, PyObject *__pyx_v_index); /* proto */
static PyObject *__pyx_pf_6_agros_14__StudyNLopt___2__get_settings__(struct __pyx_obj_6_agros___StudyNLopt__ *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6_agros_14__StudyNLopt___4__set_settings__(struct __pyx_obj_6_agros___StudyNLopt__ *__pyx_v_self, PyObject *__pyx_v_settings); /* proto */
static PyObject *__pyx_pf_6_agros_14__StudyNLopt___6__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_6_agros___StudyNLopt__ *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6_agros_14__StudyNLopt___8__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_6_agros___StudyNLopt__ *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_6_agros_14__StudyNSGA2_____cinit__(struct __pyx_obj_6_agros___StudyNSGA2__ *__pyx_v_self, PyObject *__pyx_v_index); /* proto */
static PyObject *__pyx_pf_6_agros_14__StudyNSGA2___2__get_settings__(struct __pyx_obj_6_agros___StudyNSGA2__ *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6_agros_14__StudyNSGA2___4__set_settings__(struct __pyx_obj_6_agros___StudyNSGA2__ *__pyx_v_self, PyObject *__pyx_v_settings); /* proto */
static PyObject *__pyx_pf_6_agros_14__StudyNSGA2___6__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_6_agros___StudyNSGA2__ *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6_agros_14__StudyNSGA2___8__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_6_agros___StudyNSGA2__ *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_6_agros_14__StudySweep_____cinit__(struct __pyx_obj_6_agros___StudySweep__ *__pyx_v_self, PyObject *__pyx_v_index); /* proto */
static PyObject *__pyx_pf_6_agros_14__StudySweep___2__get_settings__(struct __pyx_obj_6_agros___StudySweep__ *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6_agros_14__StudySweep___4__set_settings__(struct __pyx_obj_6_agros___StudySweep__ *__pyx_v_self, PyObject *__pyx_v_settings); /* proto */
static PyObject *__pyx_pf_6_agros_14__StudySweep___6__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_6_agros___StudySweep__ *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6_agros_14__StudySweep___8__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_6_agros___StudySweep__ *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_6_agros_10open_file(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_file, PyObject *__pyx_v_open_with_solution); /* proto */
static PyObject *__pyx_pf_6_agros_12save_file(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_file, PyObject *__pyx_v_save_with_solution); /* proto */
static PyObject *__pyx_pf_6_agros_14get_script_from_model(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_6_agros_16tempdir(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_dir); /* proto */
static PyObject *__pyx_pf_6_agros_18cachedir(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_dir); /* proto */
static PyObject *__pyx_pf_6_agros_20datadir(CYTHON_UNUSED PyObject *__pyx_self, CYTHON_UNUSED PyObject *__pyx_v_str); /* proto */
static PyObject *__pyx_pf_6_agros_22_set_datadir(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_str); /* proto */
static PyObject *__pyx_pf_6_agros_24_read_plugins(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_6_agros_26version(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static int __pyx_pf_6_agros_11__Options_____cinit__(struct __pyx_obj_6_agros___Options__ *__pyx_v_self); /* proto */
static void __pyx_pf_6_agros_11__Options___2__dealloc__(struct __pyx_obj_6_agros___Options__ *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6_agros_11__Options___10cache_size___get__(struct __pyx_obj_6_agros___Options__ *__pyx_v_self); /* proto */
static int __pyx_pf_6_agros_11__Options___10cache_size_2__set__(struct __pyx_obj_6_agros___Options__ *__pyx_v_self, PyObject *__pyx_v_size); /* proto */
static PyObject *__pyx_pf_6_agros_11__Options___19save_matrix_and_rhs___get__(struct __pyx_obj_6_agros___Options__ *__pyx_v_self); /* proto */
static int __pyx_pf_6_agros_11__Options___19save_matrix_and_rhs_2__set__(struct __pyx_obj_6_agros___Options__ *__pyx_v_self, PyObject *__pyx_v_save); /* proto */
static PyObject *__pyx_pf_6_agros_11__Options___11save_system___get__(struct __pyx_obj_6_agros___Options__ *__pyx_v_self); /* proto */
static int __pyx_pf_6_agros_11__Options___11save_system_2__set__(struct __pyx_obj_6_agros___Options__ *__pyx_v_self, PyObject *__pyx_v_save); /* proto */
static PyObject *__pyx_pf_6_agros_11__Options___11dump_format___get__(struct __pyx_obj_6_agros___Options__ *__pyx_v_self); /* proto */
static int __pyx_pf_6_agros_11__Options___11dump_format_2__set__(struct __pyx_obj_6_agros___Options__ *__pyx_v_self, PyObject *__pyx_v_format); /* proto */
static PyObject *__pyx_pf_6_agros_11__Options___4__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_6_agros___Options__ *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6_agros_11__Options___6__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_6_agros___Options__ *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_tp_new_6_agros___Geometry__(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_6_agros___Field__(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_6_agros___Problem__(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_6_agros___Computation__(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_6_agros___Solution__(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_6_agros___ParticleTracing__(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_6_agros___Study__(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_6_agros___StudyBayesOpt__(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_6_agros___StudyNLopt__(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_6_agros___StudyNSGA2__(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_6_agros___StudySweep__(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_6_agros___Options__(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_float_0_0;
static PyObject *__pyx_float_1_0;
static PyObject *__pyx_float_1e4;
static PyObject *__pyx_float_2_0;
static PyObject *__pyx_int_0;
static PyObject *__pyx_int_1;
static PyObject *__pyx_int_4;
static PyObject *__pyx_int_5;
static PyObject *__pyx_int_90;
static PyObject *__pyx_int_100;
static PyObject *__pyx_int_neg_1;
static PyObject *__pyx_k_;
static PyObject *__pyx_k__2;
static PyObject *__pyx_k__3;
static PyObject *__pyx_k__4;
static PyObject *__pyx_k__5;
static PyObject *__pyx_k__6;
static PyObject *__pyx_k__7;
static PyObject *__pyx_k__8;
static PyObject *__pyx_k__9;
static PyObject *__pyx_k__10;
static PyObject *__pyx_k__11;
static PyObject *__pyx_k__12;
static PyObject *__pyx_k__13;
static PyObject *__pyx_k__14;
static PyObject *__pyx_k__15;
static PyObject *__pyx_k__16;
static PyObject *__pyx_k__17;
static PyObject *__pyx_k__18;
static PyObject *__pyx_k__19;
static PyObject *__pyx_k__20;
static PyObject *__pyx_k__21;
static PyObject *__pyx_k__24;
static PyObject *__pyx_k__26;
static PyObject *__pyx_k__27;
static PyObject *__pyx_k__28;
static PyObject *__pyx_k__29;
static PyObject *__pyx_k__30;
static PyObject *__pyx_k__40;
static PyObject *__pyx_k__41;
static PyObject *__pyx_k__44;
static PyObject *__pyx_k__45;
static PyObject *__pyx_k__46;
static PyObject *__pyx_k__47;
static PyObject *__pyx_tuple__22;
static PyObject *__pyx_tuple__23;
static PyObject *__pyx_tuple__31;
static PyObject *__pyx_tuple__32;
static PyObject *__pyx_tuple__33;
static PyObject *__pyx_tuple__34;
static PyObject *__pyx_tuple__35;
static PyObject *__pyx_tuple__36;
static PyObject *__pyx_tuple__37;
static PyObject *__pyx_tuple__38;
static PyObject *__pyx_tuple__39;
static PyObject *__pyx_tuple__42;
static PyObject *__pyx_tuple__43;
static PyObject *__pyx_tuple__48;
static PyObject *__pyx_tuple__49;
static PyObject *__pyx_tuple__50;
static PyObject *__pyx_tuple__51;
static PyObject *__pyx_tuple__52;
static PyObject *__pyx_tuple__53;
static PyObject *__pyx_tuple__54;
static PyObject *__pyx_tuple__55;
static PyObject *__pyx_tuple__56;
static PyObject *__pyx_tuple__57;
static PyObject *__pyx_tuple__58;
static PyObject *__pyx_tuple__59;
static PyObject *__pyx_tuple__60;
static PyObject *__pyx_tuple__61;
static PyObject *__pyx_tuple__62;
static PyObject *__pyx_tuple__64;
static PyObject *__pyx_tuple__65;
static PyObject *__pyx_tuple__67;
static PyObject *__pyx_tuple__69;
static PyObject *__pyx_tuple__71;
static PyObject *__pyx_tuple__73;
static PyObject *__pyx_tuple__75;
static PyObject *__pyx_tuple__77;
static PyObject *__pyx_tuple__79;
static PyObject *__pyx_tuple__81;
static PyObject *__pyx_tuple__83;
static PyObject *__pyx_tuple__85;
static PyObject *__pyx_tuple__88;
static PyObject *__pyx_tuple__90;
static PyObject *__pyx_tuple__92;
static PyObject *__pyx_tuple__94;
static PyObject *__pyx_codeobj__63;
static PyObject *__pyx_codeobj__66;
static PyObject *__pyx_codeobj__68;
static PyObject *__pyx_codeobj__70;
static PyObject *__pyx_codeobj__72;
static PyObject *__pyx_codeobj__74;
static PyObject *__pyx_codeobj__76;
static PyObject *__pyx_codeobj__78;
static PyObject *__pyx_codeobj__80;
static PyObject *__pyx_codeobj__82;
static PyObject *__pyx_codeobj__84;
static PyObject *__pyx_codeobj__86;
static PyObject *__pyx_codeobj__87;
static PyObject *__pyx_codeobj__89;
static PyObject *__pyx_codeobj__91;
static PyObject *__pyx_codeobj__93;
static PyObject *__pyx_codeobj__95;
static PyObject *__pyx_codeobj__96;
static PyObject *__pyx_codeobj__97;
/* Late includes */

/* "_agros.pyx":24
 * # Parameters class
 * class __Parameters__(dict):
 *     def __init__(self, get_method, set_method, check_set = True):             # <<<<<<<<<<<<<<
 *         self.get = get_method
 *         self.set = set_method
 */

/* Python wrapper */
static PyObject *__pyx_pw_6_agros_14__Parameters___1__init__(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_6_agros_14__Parameters___1__init__ = {"__init__", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6_agros_14__Parameters___1__init__, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_6_agros_14__Parameters___1__init__(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_self = 0;
  PyObject *__pyx_v_get_method = 0;
  PyObject *__pyx_v_set_method = 0;
  PyObject *__pyx_v_check_set = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_self,&__pyx_n_s_get_method,&__pyx_n_s_set_method,&__pyx_n_s_check_set,0};
    PyObject* values[4] = {0,0,0,0};
    values[3] = ((PyObject *)((PyObject *)Py_True));
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_self)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_get_method)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 0, 3, 4, 1); __PYX_ERR(1, 24, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_set_method)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 0, 3, 4, 2); __PYX_ERR(1, 24, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_check_set);
          if (value) { values[3] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__init__") < 0)) __PYX_ERR(1, 24, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_self = values[0];
    __pyx_v_get_method = values[1];
    __pyx_v_set_method = values[2];
    __pyx_v_check_set = values[3];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 0, 3, 4, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 24, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("_agros.__Parameters__.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6_agros_14__Parameters_____init__(__pyx_self, __pyx_v_self, __pyx_v_get_method, __pyx_v_set_method, __pyx_v_check_set);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6_agros_14__Parameters_____init__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_get_method, PyObject *__pyx_v_set_method, PyObject *__pyx_v_check_set) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "_agros.pyx":25
 * class __Parameters__(dict):
 *     def __init__(self, get_method, set_method, check_set = True):
 *         self.get = get_method             # <<<<<<<<<<<<<<
 *         self.set = set_method
 *         self.check_set = check_set
 */
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_get, __pyx_v_get_method) < 0) __PYX_ERR(1, 25, __pyx_L1_error)

  /* "_agros.pyx":26
 *     def __init__(self, get_method, set_method, check_set = True):
 *         self.get = get_method
 *         self.set = set_method             # <<<<<<<<<<<<<<
 *         self.check_set = check_set
 *         dict.__init__(self, self.get())
 */
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_set, __pyx_v_set_method) < 0) __PYX_ERR(1, 26, __pyx_L1_error)

  /* "_agros.pyx":27
 *         self.get = get_method
 *         self.set = set_method
 *         self.check_set = check_set             # <<<<<<<<<<<<<<
 *         dict.__init__(self, self.get())
 * 
 */
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_check_set, __pyx_v_check_set) < 0) __PYX_ERR(1, 27, __pyx_L1_error)

  /* "_agros.pyx":28
 *         self.set = set_method
 *         self.check_set = check_set
 *         dict.__init__(self, self.get())             # <<<<<<<<<<<<<<
 * 
 *     def __update__(self):
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)(&PyDict_Type)), __pyx_n_s_init); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 28, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_get); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 28, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  __pyx_t_3 = (__pyx_t_5) ? __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_5) : __Pyx_PyObject_CallNoArg(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 28, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = NULL;
  __pyx_t_6 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_6 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[3] = {__pyx_t_4, __pyx_v_self, __pyx_t_3};
    __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_6, 2+__pyx_t_6); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 28, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[3] = {__pyx_t_4, __pyx_v_self, __pyx_t_3};
    __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_6, 2+__pyx_t_6); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 28, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else
  #endif
  {
    __pyx_t_5 = PyTuple_New(2+__pyx_t_6); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 28, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (__pyx_t_4) {
      __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_4); __pyx_t_4 = NULL;
    }
    __Pyx_INCREF(__pyx_v_self);
    __Pyx_GIVEREF(__pyx_v_self);
    PyTuple_SET_ITEM(__pyx_t_5, 0+__pyx_t_6, __pyx_v_self);
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_5, 1+__pyx_t_6, __pyx_t_3);
    __pyx_t_3 = 0;
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_5, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 28, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "_agros.pyx":24
 * # Parameters class
 * class __Parameters__(dict):
 *     def __init__(self, get_method, set_method, check_set = True):             # <<<<<<<<<<<<<<
 *         self.get = get_method
 *         self.set = set_method
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("_agros.__Parameters__.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_agros.pyx":30
 *         dict.__init__(self, self.get())
 * 
 *     def __update__(self):             # <<<<<<<<<<<<<<
 *         parameters = self.get()
 *         for parameters_key in parameters:
 */

/* Python wrapper */
static PyObject *__pyx_pw_6_agros_14__Parameters___3__update__(PyObject *__pyx_self, PyObject *__pyx_v_self); /*proto*/
static PyMethodDef __pyx_mdef_6_agros_14__Parameters___3__update__ = {"__update__", (PyCFunction)__pyx_pw_6_agros_14__Parameters___3__update__, METH_O, 0};
static PyObject *__pyx_pw_6_agros_14__Parameters___3__update__(PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__update__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6_agros_14__Parameters___2__update__(__pyx_self, ((PyObject *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6_agros_14__Parameters___2__update__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_v_parameters = NULL;
  PyObject *__pyx_v_parameters_key = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  Py_ssize_t __pyx_t_4;
  PyObject *(*__pyx_t_5)(PyObject *);
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_t_8;
  PyObject *__pyx_t_9 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__update__", 0);

  /* "_agros.pyx":31
 * 
 *     def __update__(self):
 *         parameters = self.get()             # <<<<<<<<<<<<<<
 *         for parameters_key in parameters:
 *             dict.__setitem__(self, parameters_key, parameters[parameters_key])
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_get); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 31, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 31, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_parameters = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "_agros.pyx":32
 *     def __update__(self):
 *         parameters = self.get()
 *         for parameters_key in parameters:             # <<<<<<<<<<<<<<
 *             dict.__setitem__(self, parameters_key, parameters[parameters_key])
 * 
 */
  if (likely(PyList_CheckExact(__pyx_v_parameters)) || PyTuple_CheckExact(__pyx_v_parameters)) {
    __pyx_t_1 = __pyx_v_parameters; __Pyx_INCREF(__pyx_t_1); __pyx_t_4 = 0;
    __pyx_t_5 = NULL;
  } else {
    __pyx_t_4 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_v_parameters); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 32, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_5 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 32, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_5)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        if (__pyx_t_4 >= PyList_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_2 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_4); __Pyx_INCREF(__pyx_t_2); __pyx_t_4++; if (unlikely(0 < 0)) __PYX_ERR(1, 32, __pyx_L1_error)
        #else
        __pyx_t_2 = PySequence_ITEM(__pyx_t_1, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 32, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        #endif
      } else {
        if (__pyx_t_4 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_2 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_4); __Pyx_INCREF(__pyx_t_2); __pyx_t_4++; if (unlikely(0 < 0)) __PYX_ERR(1, 32, __pyx_L1_error)
        #else
        __pyx_t_2 = PySequence_ITEM(__pyx_t_1, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 32, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        #endif
      }
    } else {
      __pyx_t_2 = __pyx_t_5(__pyx_t_1);
      if (unlikely(!__pyx_t_2)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(1, 32, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_2);
    }
    __Pyx_XDECREF_SET(__pyx_v_parameters_key, __pyx_t_2);
    __pyx_t_2 = 0;

    /* "_agros.pyx":33
 *         parameters = self.get()
 *         for parameters_key in parameters:
 *             dict.__setitem__(self, parameters_key, parameters[parameters_key])             # <<<<<<<<<<<<<<
 * 
 *     def __getitem__(self, key):
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)(&PyDict_Type)), __pyx_n_s_setitem); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 33, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_6 = __Pyx_PyObject_GetItem(__pyx_v_parameters, __pyx_v_parameters_key); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 33, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_7 = NULL;
    __pyx_t_8 = 0;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_7)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_7);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
        __pyx_t_8 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_3)) {
      PyObject *__pyx_temp[4] = {__pyx_t_7, __pyx_v_self, __pyx_v_parameters_key, __pyx_t_6};
      __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_8, 3+__pyx_t_8); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 33, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
      PyObject *__pyx_temp[4] = {__pyx_t_7, __pyx_v_self, __pyx_v_parameters_key, __pyx_t_6};
      __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_8, 3+__pyx_t_8); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 33, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    } else
    #endif
    {
      __pyx_t_9 = PyTuple_New(3+__pyx_t_8); if (unlikely(!__pyx_t_9)) __PYX_ERR(1, 33, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      if (__pyx_t_7) {
        __Pyx_GIVEREF(__pyx_t_7); PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_7); __pyx_t_7 = NULL;
      }
      __Pyx_INCREF(__pyx_v_self);
      __Pyx_GIVEREF(__pyx_v_self);
      PyTuple_SET_ITEM(__pyx_t_9, 0+__pyx_t_8, __pyx_v_self);
      __Pyx_INCREF(__pyx_v_parameters_key);
      __Pyx_GIVEREF(__pyx_v_parameters_key);
      PyTuple_SET_ITEM(__pyx_t_9, 1+__pyx_t_8, __pyx_v_parameters_key);
      __Pyx_GIVEREF(__pyx_t_6);
      PyTuple_SET_ITEM(__pyx_t_9, 2+__pyx_t_8, __pyx_t_6);
      __pyx_t_6 = 0;
      __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_9, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 33, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    }
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "_agros.pyx":32
 *     def __update__(self):
 *         parameters = self.get()
 *         for parameters_key in parameters:             # <<<<<<<<<<<<<<
 *             dict.__setitem__(self, parameters_key, parameters[parameters_key])
 * 
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "_agros.pyx":30
 *         dict.__init__(self, self.get())
 * 
 *     def __update__(self):             # <<<<<<<<<<<<<<
 *         parameters = self.get()
 *         for parameters_key in parameters:
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("_agros.__Parameters__.__update__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_parameters);
  __Pyx_XDECREF(__pyx_v_parameters_key);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_agros.pyx":35
 *             dict.__setitem__(self, parameters_key, parameters[parameters_key])
 * 
 *     def __getitem__(self, key):             # <<<<<<<<<<<<<<
 *         self.__update__()
 *         return dict.__getitem__(self, key)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6_agros_14__Parameters___5__getitem__(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_6_agros_14__Parameters___5__getitem__ = {"__getitem__", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6_agros_14__Parameters___5__getitem__, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_6_agros_14__Parameters___5__getitem__(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_self = 0;
  PyObject *__pyx_v_key = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__getitem__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_self,&__pyx_n_s_key,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_self)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_key)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__getitem__", 1, 2, 2, 1); __PYX_ERR(1, 35, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__getitem__") < 0)) __PYX_ERR(1, 35, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_self = values[0];
    __pyx_v_key = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__getitem__", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 35, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("_agros.__Parameters__.__getitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6_agros_14__Parameters___4__getitem__(__pyx_self, __pyx_v_self, __pyx_v_key);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6_agros_14__Parameters___4__getitem__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_key) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__getitem__", 0);

  /* "_agros.pyx":36
 * 
 *     def __getitem__(self, key):
 *         self.__update__()             # <<<<<<<<<<<<<<
 *         return dict.__getitem__(self, key)
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_update); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 36, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 36, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "_agros.pyx":37
 *     def __getitem__(self, key):
 *         self.__update__()
 *         return dict.__getitem__(self, key)             # <<<<<<<<<<<<<<
 * 
 *     def __setitem__(self, key, value):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)(&PyDict_Type)), __pyx_n_s_getitem); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 37, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  __pyx_t_4 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_4 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[3] = {__pyx_t_3, __pyx_v_self, __pyx_v_key};
    __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_4, 2+__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 37, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[3] = {__pyx_t_3, __pyx_v_self, __pyx_v_key};
    __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_4, 2+__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 37, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else
  #endif
  {
    __pyx_t_5 = PyTuple_New(2+__pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 37, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (__pyx_t_3) {
      __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_3); __pyx_t_3 = NULL;
    }
    __Pyx_INCREF(__pyx_v_self);
    __Pyx_GIVEREF(__pyx_v_self);
    PyTuple_SET_ITEM(__pyx_t_5, 0+__pyx_t_4, __pyx_v_self);
    __Pyx_INCREF(__pyx_v_key);
    __Pyx_GIVEREF(__pyx_v_key);
    PyTuple_SET_ITEM(__pyx_t_5, 1+__pyx_t_4, __pyx_v_key);
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_5, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 37, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "_agros.pyx":35
 *             dict.__setitem__(self, parameters_key, parameters[parameters_key])
 * 
 *     def __getitem__(self, key):             # <<<<<<<<<<<<<<
 *         self.__update__()
 *         return dict.__getitem__(self, key)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("_agros.__Parameters__.__getitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_agros.pyx":39
 *         return dict.__getitem__(self, key)
 * 
 *     def __setitem__(self, key, value):             # <<<<<<<<<<<<<<
 *         if (self.check_set):
 *             if (not key in self):
 */

/* Python wrapper */
static PyObject *__pyx_pw_6_agros_14__Parameters___7__setitem__(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_6_agros_14__Parameters___7__setitem__ = {"__setitem__", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6_agros_14__Parameters___7__setitem__, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_6_agros_14__Parameters___7__setitem__(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_self = 0;
  PyObject *__pyx_v_key = 0;
  PyObject *__pyx_v_value = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setitem__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_self,&__pyx_n_s_key,&__pyx_n_s_value,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_self)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_key)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__setitem__", 1, 3, 3, 1); __PYX_ERR(1, 39, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_value)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__setitem__", 1, 3, 3, 2); __PYX_ERR(1, 39, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__setitem__") < 0)) __PYX_ERR(1, 39, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_self = values[0];
    __pyx_v_key = values[1];
    __pyx_v_value = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__setitem__", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 39, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("_agros.__Parameters__.__setitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6_agros_14__Parameters___6__setitem__(__pyx_self, __pyx_v_self, __pyx_v_key, __pyx_v_value);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6_agros_14__Parameters___6__setitem__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_key, PyObject *__pyx_v_value) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_t_8;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setitem__", 0);

  /* "_agros.pyx":40
 * 
 *     def __setitem__(self, key, value):
 *         if (self.check_set):             # <<<<<<<<<<<<<<
 *             if (not key in self):
 *                 raise KeyError("Invalid key. Valid keys: {0}".format(self.keys()))
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_check_set); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 40, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(1, 40, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_2) {

    /* "_agros.pyx":41
 *     def __setitem__(self, key, value):
 *         if (self.check_set):
 *             if (not key in self):             # <<<<<<<<<<<<<<
 *                 raise KeyError("Invalid key. Valid keys: {0}".format(self.keys()))
 * 
 */
    __pyx_t_2 = (__Pyx_PySequence_ContainsTF(__pyx_v_key, __pyx_v_self, Py_NE)); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(1, 41, __pyx_L1_error)
    __pyx_t_3 = (__pyx_t_2 != 0);
    if (unlikely(__pyx_t_3)) {

      /* "_agros.pyx":42
 *         if (self.check_set):
 *             if (not key in self):
 *                 raise KeyError("Invalid key. Valid keys: {0}".format(self.keys()))             # <<<<<<<<<<<<<<
 * 
 *         dict.__setitem__(self, key, value)
 */
      __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_kp_s_Invalid_key_Valid_keys_0, __pyx_n_s_format); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 42, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_keys); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 42, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_7 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_6))) {
        __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_6);
        if (likely(__pyx_t_7)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
          __Pyx_INCREF(__pyx_t_7);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_6, function);
        }
      }
      __pyx_t_5 = (__pyx_t_7) ? __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_t_7) : __Pyx_PyObject_CallNoArg(__pyx_t_6);
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 42, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_t_6 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
        __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_4);
        if (likely(__pyx_t_6)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
          __Pyx_INCREF(__pyx_t_6);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_4, function);
        }
      }
      __pyx_t_1 = (__pyx_t_6) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_6, __pyx_t_5) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_5);
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 42, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_builtin_KeyError, __pyx_t_1); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 42, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_Raise(__pyx_t_4, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __PYX_ERR(1, 42, __pyx_L1_error)

      /* "_agros.pyx":41
 *     def __setitem__(self, key, value):
 *         if (self.check_set):
 *             if (not key in self):             # <<<<<<<<<<<<<<
 *                 raise KeyError("Invalid key. Valid keys: {0}".format(self.keys()))
 * 
 */
    }

    /* "_agros.pyx":40
 * 
 *     def __setitem__(self, key, value):
 *         if (self.check_set):             # <<<<<<<<<<<<<<
 *             if (not key in self):
 *                 raise KeyError("Invalid key. Valid keys: {0}".format(self.keys()))
 */
  }

  /* "_agros.pyx":44
 *                 raise KeyError("Invalid key. Valid keys: {0}".format(self.keys()))
 * 
 *         dict.__setitem__(self, key, value)             # <<<<<<<<<<<<<<
 *         self.set(dict(self))
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)(&PyDict_Type)), __pyx_n_s_setitem); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 44, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_5 = NULL;
  __pyx_t_8 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_1);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_1, function);
      __pyx_t_8 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_1)) {
    PyObject *__pyx_temp[4] = {__pyx_t_5, __pyx_v_self, __pyx_v_key, __pyx_v_value};
    __pyx_t_4 = __Pyx_PyFunction_FastCall(__pyx_t_1, __pyx_temp+1-__pyx_t_8, 3+__pyx_t_8); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 44, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_GOTREF(__pyx_t_4);
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_1)) {
    PyObject *__pyx_temp[4] = {__pyx_t_5, __pyx_v_self, __pyx_v_key, __pyx_v_value};
    __pyx_t_4 = __Pyx_PyCFunction_FastCall(__pyx_t_1, __pyx_temp+1-__pyx_t_8, 3+__pyx_t_8); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 44, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_GOTREF(__pyx_t_4);
  } else
  #endif
  {
    __pyx_t_6 = PyTuple_New(3+__pyx_t_8); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 44, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    if (__pyx_t_5) {
      __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_5); __pyx_t_5 = NULL;
    }
    __Pyx_INCREF(__pyx_v_self);
    __Pyx_GIVEREF(__pyx_v_self);
    PyTuple_SET_ITEM(__pyx_t_6, 0+__pyx_t_8, __pyx_v_self);
    __Pyx_INCREF(__pyx_v_key);
    __Pyx_GIVEREF(__pyx_v_key);
    PyTuple_SET_ITEM(__pyx_t_6, 1+__pyx_t_8, __pyx_v_key);
    __Pyx_INCREF(__pyx_v_value);
    __Pyx_GIVEREF(__pyx_v_value);
    PyTuple_SET_ITEM(__pyx_t_6, 2+__pyx_t_8, __pyx_v_value);
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_6, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 44, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "_agros.pyx":45
 * 
 *         dict.__setitem__(self, key, value)
 *         self.set(dict(self))             # <<<<<<<<<<<<<<
 * 
 *     def get_parameters(self):
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_set); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 45, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_6 = __Pyx_PyObject_CallOneArg(((PyObject *)(&PyDict_Type)), __pyx_v_self); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 45, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_5 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_1);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_1, function);
    }
  }
  __pyx_t_4 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_1, __pyx_t_5, __pyx_t_6) : __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_6);
  __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 45, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "_agros.pyx":39
 *         return dict.__getitem__(self, key)
 * 
 *     def __setitem__(self, key, value):             # <<<<<<<<<<<<<<
 *         if (self.check_set):
 *             if (not key in self):
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("_agros.__Parameters__.__setitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_agros.pyx":47
 *         self.set(dict(self))
 * 
 *     def get_parameters(self):             # <<<<<<<<<<<<<<
 *         self.__update__()
 *         return self
 */

/* Python wrapper */
static PyObject *__pyx_pw_6_agros_14__Parameters___9get_parameters(PyObject *__pyx_self, PyObject *__pyx_v_self); /*proto*/
static PyMethodDef __pyx_mdef_6_agros_14__Parameters___9get_parameters = {"get_parameters", (PyCFunction)__pyx_pw_6_agros_14__Parameters___9get_parameters, METH_O, 0};
static PyObject *__pyx_pw_6_agros_14__Parameters___9get_parameters(PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_parameters (wrapper)", 0);
  __pyx_r = __pyx_pf_6_agros_14__Parameters___8get_parameters(__pyx_self, ((PyObject *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6_agros_14__Parameters___8get_parameters(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_parameters", 0);

  /* "_agros.pyx":48
 * 
 *     def get_parameters(self):
 *         self.__update__()             # <<<<<<<<<<<<<<
 *         return self
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_update); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 48, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 48, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "_agros.pyx":49
 *     def get_parameters(self):
 *         self.__update__()
 *         return self             # <<<<<<<<<<<<<<
 * 
 * # test functions
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self);
  __pyx_r = __pyx_v_self;
  goto __pyx_L0;

  /* "_agros.pyx":47
 *         self.set(dict(self))
 * 
 *     def get_parameters(self):             # <<<<<<<<<<<<<<
 *         self.__update__()
 *         return self
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("_agros.__Parameters__.get_parameters", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_agros.pyx":52
 * 
 * # test functions
 * def value_in_range(value, min, max, key):             # <<<<<<<<<<<<<<
 *     if (value < min or value > max):
 *         raise IndexError("Value of '{0}' is out of range ({1} - {2})".format(key, min, max))
 */

/* Python wrapper */
static PyObject *__pyx_pw_6_agros_1value_in_range(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_6_agros_1value_in_range = {"value_in_range", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6_agros_1value_in_range, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_6_agros_1value_in_range(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_value = 0;
  PyObject *__pyx_v_min = 0;
  PyObject *__pyx_v_max = 0;
  PyObject *__pyx_v_key = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("value_in_range (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_value,&__pyx_n_s_min,&__pyx_n_s_max,&__pyx_n_s_key,0};
    PyObject* values[4] = {0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_value)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_min)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("value_in_range", 1, 4, 4, 1); __PYX_ERR(1, 52, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_max)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("value_in_range", 1, 4, 4, 2); __PYX_ERR(1, 52, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_key)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("value_in_range", 1, 4, 4, 3); __PYX_ERR(1, 52, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "value_in_range") < 0)) __PYX_ERR(1, 52, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 4) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
    }
    __pyx_v_value = values[0];
    __pyx_v_min = values[1];
    __pyx_v_max = values[2];
    __pyx_v_key = values[3];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("value_in_range", 1, 4, 4, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 52, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("_agros.value_in_range", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6_agros_value_in_range(__pyx_self, __pyx_v_value, __pyx_v_min, __pyx_v_max, __pyx_v_key);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6_agros_value_in_range(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_value, PyObject *__pyx_v_min, PyObject *__pyx_v_max, PyObject *__pyx_v_key) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("value_in_range", 0);

  /* "_agros.pyx":53
 * # test functions
 * def value_in_range(value, min, max, key):
 *     if (value < min or value > max):             # <<<<<<<<<<<<<<
 *         raise IndexError("Value of '{0}' is out of range ({1} - {2})".format(key, min, max))
 * 
 */
  __pyx_t_2 = PyObject_RichCompare(__pyx_v_value, __pyx_v_min, Py_LT); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 53, __pyx_L1_error)
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(1, 53, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (!__pyx_t_3) {
  } else {
    __pyx_t_1 = __pyx_t_3;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_2 = PyObject_RichCompare(__pyx_v_value, __pyx_v_max, Py_GT); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 53, __pyx_L1_error)
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(1, 53, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_1 = __pyx_t_3;
  __pyx_L4_bool_binop_done:;
  if (unlikely(__pyx_t_1)) {

    /* "_agros.pyx":54
 * def value_in_range(value, min, max, key):
 *     if (value < min or value > max):
 *         raise IndexError("Value of '{0}' is out of range ({1} - {2})".format(key, min, max))             # <<<<<<<<<<<<<<
 * 
 * def value_in_list(value, list, key):
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_kp_s_Value_of_0_is_out_of_range_1_2, __pyx_n_s_format); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 54, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = NULL;
    __pyx_t_6 = 0;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
        __pyx_t_6 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_4)) {
      PyObject *__pyx_temp[4] = {__pyx_t_5, __pyx_v_key, __pyx_v_min, __pyx_v_max};
      __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_4, __pyx_temp+1-__pyx_t_6, 3+__pyx_t_6); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 54, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_GOTREF(__pyx_t_2);
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_4)) {
      PyObject *__pyx_temp[4] = {__pyx_t_5, __pyx_v_key, __pyx_v_min, __pyx_v_max};
      __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_4, __pyx_temp+1-__pyx_t_6, 3+__pyx_t_6); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 54, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_GOTREF(__pyx_t_2);
    } else
    #endif
    {
      __pyx_t_7 = PyTuple_New(3+__pyx_t_6); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 54, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      if (__pyx_t_5) {
        __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_5); __pyx_t_5 = NULL;
      }
      __Pyx_INCREF(__pyx_v_key);
      __Pyx_GIVEREF(__pyx_v_key);
      PyTuple_SET_ITEM(__pyx_t_7, 0+__pyx_t_6, __pyx_v_key);
      __Pyx_INCREF(__pyx_v_min);
      __Pyx_GIVEREF(__pyx_v_min);
      PyTuple_SET_ITEM(__pyx_t_7, 1+__pyx_t_6, __pyx_v_min);
      __Pyx_INCREF(__pyx_v_max);
      __Pyx_GIVEREF(__pyx_v_max);
      PyTuple_SET_ITEM(__pyx_t_7, 2+__pyx_t_6, __pyx_v_max);
      __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_7, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 54, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    }
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_builtin_IndexError, __pyx_t_2); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 54, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_Raise(__pyx_t_4, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __PYX_ERR(1, 54, __pyx_L1_error)

    /* "_agros.pyx":53
 * # test functions
 * def value_in_range(value, min, max, key):
 *     if (value < min or value > max):             # <<<<<<<<<<<<<<
 *         raise IndexError("Value of '{0}' is out of range ({1} - {2})".format(key, min, max))
 * 
 */
  }

  /* "_agros.pyx":52
 * 
 * # test functions
 * def value_in_range(value, min, max, key):             # <<<<<<<<<<<<<<
 *     if (value < min or value > max):
 *         raise IndexError("Value of '{0}' is out of range ({1} - {2})".format(key, min, max))
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("_agros.value_in_range", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_agros.pyx":56
 *         raise IndexError("Value of '{0}' is out of range ({1} - {2})".format(key, min, max))
 * 
 * def value_in_list(value, list, key):             # <<<<<<<<<<<<<<
 *     for item in list:
 *         if (value == item):
 */

/* Python wrapper */
static PyObject *__pyx_pw_6_agros_3value_in_list(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_6_agros_3value_in_list = {"value_in_list", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6_agros_3value_in_list, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_6_agros_3value_in_list(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_value = 0;
  PyObject *__pyx_v_list = 0;
  PyObject *__pyx_v_key = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("value_in_list (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_value,&__pyx_n_s_list,&__pyx_n_s_key,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_value)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_list)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("value_in_list", 1, 3, 3, 1); __PYX_ERR(1, 56, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_key)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("value_in_list", 1, 3, 3, 2); __PYX_ERR(1, 56, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "value_in_list") < 0)) __PYX_ERR(1, 56, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_value = values[0];
    __pyx_v_list = values[1];
    __pyx_v_key = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("value_in_list", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 56, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("_agros.value_in_list", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6_agros_2value_in_list(__pyx_self, __pyx_v_value, __pyx_v_list, __pyx_v_key);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6_agros_2value_in_list(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_value, PyObject *__pyx_v_list, PyObject *__pyx_v_key) {
  PyObject *__pyx_v_item = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *(*__pyx_t_3)(PyObject *);
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("value_in_list", 0);

  /* "_agros.pyx":57
 * 
 * def value_in_list(value, list, key):
 *     for item in list:             # <<<<<<<<<<<<<<
 *         if (value == item):
 *             return
 */
  if (likely(PyList_CheckExact(__pyx_v_list)) || PyTuple_CheckExact(__pyx_v_list)) {
    __pyx_t_1 = __pyx_v_list; __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
    __pyx_t_3 = NULL;
  } else {
    __pyx_t_2 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_v_list); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 57, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 57, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_3)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(1, 57, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 57, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      } else {
        if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(1, 57, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 57, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      }
    } else {
      __pyx_t_4 = __pyx_t_3(__pyx_t_1);
      if (unlikely(!__pyx_t_4)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(1, 57, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_4);
    }
    __Pyx_XDECREF_SET(__pyx_v_item, __pyx_t_4);
    __pyx_t_4 = 0;

    /* "_agros.pyx":58
 * def value_in_list(value, list, key):
 *     for item in list:
 *         if (value == item):             # <<<<<<<<<<<<<<
 *             return
 * 
 */
    __pyx_t_4 = PyObject_RichCompare(__pyx_v_value, __pyx_v_item, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 58, __pyx_L1_error)
    __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_5 < 0)) __PYX_ERR(1, 58, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (__pyx_t_5) {

      /* "_agros.pyx":59
 *     for item in list:
 *         if (value == item):
 *             return             # <<<<<<<<<<<<<<
 * 
 *     raise KeyError("Key '{0}' is invalid. Valid keys: {1}".format(list, key))
 */
      __Pyx_XDECREF(__pyx_r);
      __pyx_r = Py_None; __Pyx_INCREF(Py_None);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;

      /* "_agros.pyx":58
 * def value_in_list(value, list, key):
 *     for item in list:
 *         if (value == item):             # <<<<<<<<<<<<<<
 *             return
 * 
 */
    }

    /* "_agros.pyx":57
 * 
 * def value_in_list(value, list, key):
 *     for item in list:             # <<<<<<<<<<<<<<
 *         if (value == item):
 *             return
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "_agros.pyx":61
 *             return
 * 
 *     raise KeyError("Key '{0}' is invalid. Valid keys: {1}".format(list, key))             # <<<<<<<<<<<<<<
 * 
 * def positive_value(value, key):
 */
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_kp_s_Key_0_is_invalid_Valid_keys_1, __pyx_n_s_format); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 61, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_6 = NULL;
  __pyx_t_7 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_6)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
      __pyx_t_7 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_4)) {
    PyObject *__pyx_temp[3] = {__pyx_t_6, __pyx_v_list, __pyx_v_key};
    __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_4, __pyx_temp+1-__pyx_t_7, 2+__pyx_t_7); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 61, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_4)) {
    PyObject *__pyx_temp[3] = {__pyx_t_6, __pyx_v_list, __pyx_v_key};
    __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_4, __pyx_temp+1-__pyx_t_7, 2+__pyx_t_7); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 61, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else
  #endif
  {
    __pyx_t_8 = PyTuple_New(2+__pyx_t_7); if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 61, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    if (__pyx_t_6) {
      __Pyx_GIVEREF(__pyx_t_6); PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_6); __pyx_t_6 = NULL;
    }
    __Pyx_INCREF(__pyx_v_list);
    __Pyx_GIVEREF(__pyx_v_list);
    PyTuple_SET_ITEM(__pyx_t_8, 0+__pyx_t_7, __pyx_v_list);
    __Pyx_INCREF(__pyx_v_key);
    __Pyx_GIVEREF(__pyx_v_key);
    PyTuple_SET_ITEM(__pyx_t_8, 1+__pyx_t_7, __pyx_v_key);
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_8, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 61, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  }
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_builtin_KeyError, __pyx_t_1); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 61, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_Raise(__pyx_t_4, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __PYX_ERR(1, 61, __pyx_L1_error)

  /* "_agros.pyx":56
 *         raise IndexError("Value of '{0}' is out of range ({1} - {2})".format(key, min, max))
 * 
 * def value_in_list(value, list, key):             # <<<<<<<<<<<<<<
 *     for item in list:
 *         if (value == item):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("_agros.value_in_list", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_item);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_agros.pyx":63
 *     raise KeyError("Key '{0}' is invalid. Valid keys: {1}".format(list, key))
 * 
 * def positive_value(value, key):             # <<<<<<<<<<<<<<
 *     if (value < 0):
 *         raise IndexError("Value of {0} must be possitive.".format(key))
 */

/* Python wrapper */
static PyObject *__pyx_pw_6_agros_5positive_value(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_6_agros_5positive_value = {"positive_value", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6_agros_5positive_value, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_6_agros_5positive_value(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_value = 0;
  PyObject *__pyx_v_key = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("positive_value (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_value,&__pyx_n_s_key,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_value)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_key)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("positive_value", 1, 2, 2, 1); __PYX_ERR(1, 63, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "positive_value") < 0)) __PYX_ERR(1, 63, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_value = values[0];
    __pyx_v_key = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("positive_value", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 63, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("_agros.positive_value", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6_agros_4positive_value(__pyx_self, __pyx_v_value, __pyx_v_key);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6_agros_4positive_value(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_value, PyObject *__pyx_v_key) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("positive_value", 0);

  /* "_agros.pyx":64
 * 
 * def positive_value(value, key):
 *     if (value < 0):             # <<<<<<<<<<<<<<
 *         raise IndexError("Value of {0} must be possitive.".format(key))
 * 
 */
  __pyx_t_1 = PyObject_RichCompare(__pyx_v_value, __pyx_int_0, Py_LT); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 64, __pyx_L1_error)
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(1, 64, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (unlikely(__pyx_t_2)) {

    /* "_agros.pyx":65
 * def positive_value(value, key):
 *     if (value < 0):
 *         raise IndexError("Value of {0} must be possitive.".format(key))             # <<<<<<<<<<<<<<
 * 
 * # convert functions
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_kp_s_Value_of_0_must_be_possitive, __pyx_n_s_format); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 65, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_4)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_4);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
      }
    }
    __pyx_t_1 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_4, __pyx_v_key) : __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_v_key);
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 65, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_builtin_IndexError, __pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 65, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(1, 65, __pyx_L1_error)

    /* "_agros.pyx":64
 * 
 * def positive_value(value, key):
 *     if (value < 0):             # <<<<<<<<<<<<<<
 *         raise IndexError("Value of {0} must be possitive.".format(key))
 * 
 */
  }

  /* "_agros.pyx":63
 *     raise KeyError("Key '{0}' is invalid. Valid keys: {1}".format(list, key))
 * 
 * def positive_value(value, key):             # <<<<<<<<<<<<<<
 *     if (value < 0):
 *         raise IndexError("Value of {0} must be possitive.".format(key))
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("_agros.positive_value", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_agros.pyx":68
 * 
 * # convert functions
 * cdef vector[int] list_to_int_vector(list):             # <<<<<<<<<<<<<<
 *     cdef vector[int] int_vector
 *     for item in list:
 */

static std::vector<int>  __pyx_f_6_agros_list_to_int_vector(PyObject *__pyx_v_list) {
  std::vector<int>  __pyx_v_int_vector;
  PyObject *__pyx_v_item = NULL;
  std::vector<int>  __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *(*__pyx_t_3)(PyObject *);
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("list_to_int_vector", 0);

  /* "_agros.pyx":70
 * cdef vector[int] list_to_int_vector(list):
 *     cdef vector[int] int_vector
 *     for item in list:             # <<<<<<<<<<<<<<
 *         int_vector.push_back(item)
 * 
 */
  if (likely(PyList_CheckExact(__pyx_v_list)) || PyTuple_CheckExact(__pyx_v_list)) {
    __pyx_t_1 = __pyx_v_list; __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
    __pyx_t_3 = NULL;
  } else {
    __pyx_t_2 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_v_list); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 70, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 70, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_3)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(1, 70, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 70, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      } else {
        if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(1, 70, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 70, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      }
    } else {
      __pyx_t_4 = __pyx_t_3(__pyx_t_1);
      if (unlikely(!__pyx_t_4)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(1, 70, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_4);
    }
    __Pyx_XDECREF_SET(__pyx_v_item, __pyx_t_4);
    __pyx_t_4 = 0;

    /* "_agros.pyx":71
 *     cdef vector[int] int_vector
 *     for item in list:
 *         int_vector.push_back(item)             # <<<<<<<<<<<<<<
 * 
 *     return int_vector
 */
    __pyx_t_5 = __Pyx_PyInt_As_int(__pyx_v_item); if (unlikely((__pyx_t_5 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 71, __pyx_L1_error)
    try {
      __pyx_v_int_vector.push_back(__pyx_t_5);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(1, 71, __pyx_L1_error)
    }

    /* "_agros.pyx":70
 * cdef vector[int] list_to_int_vector(list):
 *     cdef vector[int] int_vector
 *     for item in list:             # <<<<<<<<<<<<<<
 *         int_vector.push_back(item)
 * 
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "_agros.pyx":73
 *         int_vector.push_back(item)
 * 
 *     return int_vector             # <<<<<<<<<<<<<<
 * 
 * cdef vector[double] list_to_double_vector(list):
 */
  __pyx_r = __pyx_v_int_vector;
  goto __pyx_L0;

  /* "_agros.pyx":68
 * 
 * # convert functions
 * cdef vector[int] list_to_int_vector(list):             # <<<<<<<<<<<<<<
 *     cdef vector[int] int_vector
 *     for item in list:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_WriteUnraisable("_agros.list_to_int_vector", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __Pyx_pretend_to_initialize(&__pyx_r);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_item);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_agros.pyx":75
 *     return int_vector
 * 
 * cdef vector[double] list_to_double_vector(list):             # <<<<<<<<<<<<<<
 *     cdef vector[double] double_vector
 *     for item in list:
 */

static std::vector<double>  __pyx_f_6_agros_list_to_double_vector(PyObject *__pyx_v_list) {
  std::vector<double>  __pyx_v_double_vector;
  PyObject *__pyx_v_item = NULL;
  std::vector<double>  __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *(*__pyx_t_3)(PyObject *);
  PyObject *__pyx_t_4 = NULL;
  double __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("list_to_double_vector", 0);

  /* "_agros.pyx":77
 * cdef vector[double] list_to_double_vector(list):
 *     cdef vector[double] double_vector
 *     for item in list:             # <<<<<<<<<<<<<<
 *         double_vector.push_back(item)
 * 
 */
  if (likely(PyList_CheckExact(__pyx_v_list)) || PyTuple_CheckExact(__pyx_v_list)) {
    __pyx_t_1 = __pyx_v_list; __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
    __pyx_t_3 = NULL;
  } else {
    __pyx_t_2 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_v_list); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 77, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 77, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_3)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(1, 77, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 77, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      } else {
        if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(1, 77, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 77, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      }
    } else {
      __pyx_t_4 = __pyx_t_3(__pyx_t_1);
      if (unlikely(!__pyx_t_4)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(1, 77, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_4);
    }
    __Pyx_XDECREF_SET(__pyx_v_item, __pyx_t_4);
    __pyx_t_4 = 0;

    /* "_agros.pyx":78
 *     cdef vector[double] double_vector
 *     for item in list:
 *         double_vector.push_back(item)             # <<<<<<<<<<<<<<
 * 
 *     return double_vector
 */
    __pyx_t_5 = __pyx_PyFloat_AsDouble(__pyx_v_item); if (unlikely((__pyx_t_5 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 78, __pyx_L1_error)
    try {
      __pyx_v_double_vector.push_back(__pyx_t_5);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(1, 78, __pyx_L1_error)
    }

    /* "_agros.pyx":77
 * cdef vector[double] list_to_double_vector(list):
 *     cdef vector[double] double_vector
 *     for item in list:             # <<<<<<<<<<<<<<
 *         double_vector.push_back(item)
 * 
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "_agros.pyx":80
 *         double_vector.push_back(item)
 * 
 *     return double_vector             # <<<<<<<<<<<<<<
 * 
 * cdef object double_vector_to_list(vector[double] vector):
 */
  __pyx_r = __pyx_v_double_vector;
  goto __pyx_L0;

  /* "_agros.pyx":75
 *     return int_vector
 * 
 * cdef vector[double] list_to_double_vector(list):             # <<<<<<<<<<<<<<
 *     cdef vector[double] double_vector
 *     for item in list:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_WriteUnraisable("_agros.list_to_double_vector", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __Pyx_pretend_to_initialize(&__pyx_r);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_item);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_agros.pyx":82
 *     return double_vector
 * 
 * cdef object double_vector_to_list(vector[double] vector):             # <<<<<<<<<<<<<<
 *     out = list()
 *     for i in range(vector.size()):
 */

static PyObject *__pyx_f_6_agros_double_vector_to_list(std::vector<double>  __pyx_v_vector) {
  PyObject *__pyx_v_out = NULL;
  std::vector<double> ::size_type __pyx_v_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  std::vector<double> ::size_type __pyx_t_2;
  std::vector<double> ::size_type __pyx_t_3;
  std::vector<double> ::size_type __pyx_t_4;
  int __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("double_vector_to_list", 0);

  /* "_agros.pyx":83
 * 
 * cdef object double_vector_to_list(vector[double] vector):
 *     out = list()             # <<<<<<<<<<<<<<
 *     for i in range(vector.size()):
 *         out.append(vector[i])
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 83, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_out = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "_agros.pyx":84
 * cdef object double_vector_to_list(vector[double] vector):
 *     out = list()
 *     for i in range(vector.size()):             # <<<<<<<<<<<<<<
 *         out.append(vector[i])
 * 
 */
  __pyx_t_2 = __pyx_v_vector.size();
  __pyx_t_3 = __pyx_t_2;
  for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
    __pyx_v_i = __pyx_t_4;

    /* "_agros.pyx":85
 *     out = list()
 *     for i in range(vector.size()):
 *         out.append(vector[i])             # <<<<<<<<<<<<<<
 * 
 *     return out
 */
    __pyx_t_1 = PyFloat_FromDouble((__pyx_v_vector[__pyx_v_i])); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 85, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_5 = __Pyx_PyList_Append(__pyx_v_out, __pyx_t_1); if (unlikely(__pyx_t_5 == ((int)-1))) __PYX_ERR(1, 85, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "_agros.pyx":87
 *         out.append(vector[i])
 * 
 *     return out             # <<<<<<<<<<<<<<
 * 
 * cdef map[string, int] dictionary_to_int_map(dictionary):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_out);
  __pyx_r = __pyx_v_out;
  goto __pyx_L0;

  /* "_agros.pyx":82
 *     return double_vector
 * 
 * cdef object double_vector_to_list(vector[double] vector):             # <<<<<<<<<<<<<<
 *     out = list()
 *     for i in range(vector.size()):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("_agros.double_vector_to_list", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_out);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_agros.pyx":89
 *     return out
 * 
 * cdef map[string, int] dictionary_to_int_map(dictionary):             # <<<<<<<<<<<<<<
 *     cdef map[string, int] int_map
 *     cdef pair[string, int] row
 */

static std::map<std::string,int>  __pyx_f_6_agros_dictionary_to_int_map(PyObject *__pyx_v_dictionary) {
  std::map<std::string,int>  __pyx_v_int_map;
  std::pair<std::string,int>  __pyx_v_row;
  PyObject *__pyx_v_key = NULL;
  std::map<std::string,int>  __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *(*__pyx_t_3)(PyObject *);
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  std::string __pyx_t_7;
  int __pyx_t_8;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("dictionary_to_int_map", 0);

  /* "_agros.pyx":92
 *     cdef map[string, int] int_map
 *     cdef pair[string, int] row
 *     for key in dictionary:             # <<<<<<<<<<<<<<
 *         row.first = key.encode()
 *         row.second = dictionary[key]
 */
  if (likely(PyList_CheckExact(__pyx_v_dictionary)) || PyTuple_CheckExact(__pyx_v_dictionary)) {
    __pyx_t_1 = __pyx_v_dictionary; __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
    __pyx_t_3 = NULL;
  } else {
    __pyx_t_2 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_v_dictionary); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 92, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 92, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_3)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(1, 92, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 92, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      } else {
        if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(1, 92, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 92, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      }
    } else {
      __pyx_t_4 = __pyx_t_3(__pyx_t_1);
      if (unlikely(!__pyx_t_4)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(1, 92, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_4);
    }
    __Pyx_XDECREF_SET(__pyx_v_key, __pyx_t_4);
    __pyx_t_4 = 0;

    /* "_agros.pyx":93
 *     cdef pair[string, int] row
 *     for key in dictionary:
 *         row.first = key.encode()             # <<<<<<<<<<<<<<
 *         row.second = dictionary[key]
 *         int_map.insert(row)
 */
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_key, __pyx_n_s_encode); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 93, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_5);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_5, function);
      }
    }
    __pyx_t_4 = (__pyx_t_6) ? __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_6) : __Pyx_PyObject_CallNoArg(__pyx_t_5);
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 93, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_7 = __pyx_convert_string_from_py_std__in_string(__pyx_t_4); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 93, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_v_row.first = __pyx_t_7;

    /* "_agros.pyx":94
 *     for key in dictionary:
 *         row.first = key.encode()
 *         row.second = dictionary[key]             # <<<<<<<<<<<<<<
 *         int_map.insert(row)
 * 
 */
    __pyx_t_4 = __Pyx_PyObject_GetItem(__pyx_v_dictionary, __pyx_v_key); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 94, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_8 = __Pyx_PyInt_As_int(__pyx_t_4); if (unlikely((__pyx_t_8 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 94, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_v_row.second = __pyx_t_8;

    /* "_agros.pyx":95
 *         row.first = key.encode()
 *         row.second = dictionary[key]
 *         int_map.insert(row)             # <<<<<<<<<<<<<<
 * 
 *     return int_map
 */
    try {
      __pyx_v_int_map.insert(__pyx_v_row);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(1, 95, __pyx_L1_error)
    }

    /* "_agros.pyx":92
 *     cdef map[string, int] int_map
 *     cdef pair[string, int] row
 *     for key in dictionary:             # <<<<<<<<<<<<<<
 *         row.first = key.encode()
 *         row.second = dictionary[key]
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "_agros.pyx":97
 *         int_map.insert(row)
 * 
 *     return int_map             # <<<<<<<<<<<<<<
 * 
 * cdef map[string, string] dictionary_to_string_map(dictionary):
 */
  __pyx_r = __pyx_v_int_map;
  goto __pyx_L0;

  /* "_agros.pyx":89
 *     return out
 * 
 * cdef map[string, int] dictionary_to_int_map(dictionary):             # <<<<<<<<<<<<<<
 *     cdef map[string, int] int_map
 *     cdef pair[string, int] row
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_WriteUnraisable("_agros.dictionary_to_int_map", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __Pyx_pretend_to_initialize(&__pyx_r);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_key);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_agros.pyx":99
 *     return int_map
 * 
 * cdef map[string, string] dictionary_to_string_map(dictionary):             # <<<<<<<<<<<<<<
 *     cdef map[string, string] string_map
 *     cdef pair[string, string] row
 */

static std::map<std::string,std::string>  __pyx_f_6_agros_dictionary_to_string_map(PyObject *__pyx_v_dictionary) {
  std::map<std::string,std::string>  __pyx_v_string_map;
  std::pair<std::string,std::string>  __pyx_v_row;
  PyObject *__pyx_v_key = NULL;
  std::map<std::string,std::string>  __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *(*__pyx_t_3)(PyObject *);
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  std::string __pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("dictionary_to_string_map", 0);

  /* "_agros.pyx":102
 *     cdef map[string, string] string_map
 *     cdef pair[string, string] row
 *     for key in dictionary:             # <<<<<<<<<<<<<<
 *         row.first = key.encode()
 *         row.second = dictionary[key].encode()
 */
  if (likely(PyList_CheckExact(__pyx_v_dictionary)) || PyTuple_CheckExact(__pyx_v_dictionary)) {
    __pyx_t_1 = __pyx_v_dictionary; __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
    __pyx_t_3 = NULL;
  } else {
    __pyx_t_2 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_v_dictionary); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 102, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 102, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_3)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(1, 102, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 102, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      } else {
        if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(1, 102, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 102, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      }
    } else {
      __pyx_t_4 = __pyx_t_3(__pyx_t_1);
      if (unlikely(!__pyx_t_4)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(1, 102, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_4);
    }
    __Pyx_XDECREF_SET(__pyx_v_key, __pyx_t_4);
    __pyx_t_4 = 0;

    /* "_agros.pyx":103
 *     cdef pair[string, string] row
 *     for key in dictionary:
 *         row.first = key.encode()             # <<<<<<<<<<<<<<
 *         row.second = dictionary[key].encode()
 *         string_map.insert(row)
 */
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_key, __pyx_n_s_encode); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 103, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_5);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_5, function);
      }
    }
    __pyx_t_4 = (__pyx_t_6) ? __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_6) : __Pyx_PyObject_CallNoArg(__pyx_t_5);
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 103, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_7 = __pyx_convert_string_from_py_std__in_string(__pyx_t_4); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 103, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_v_row.first = __pyx_t_7;

    /* "_agros.pyx":104
 *     for key in dictionary:
 *         row.first = key.encode()
 *         row.second = dictionary[key].encode()             # <<<<<<<<<<<<<<
 *         string_map.insert(row)
 * 
 */
    __pyx_t_5 = __Pyx_PyObject_GetItem(__pyx_v_dictionary, __pyx_v_key); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 104, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_encode); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 104, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_6))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_6);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_6, function);
      }
    }
    __pyx_t_4 = (__pyx_t_5) ? __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_t_5) : __Pyx_PyObject_CallNoArg(__pyx_t_6);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 104, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_7 = __pyx_convert_string_from_py_std__in_string(__pyx_t_4); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 104, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_v_row.second = __pyx_t_7;

    /* "_agros.pyx":105
 *         row.first = key.encode()
 *         row.second = dictionary[key].encode()
 *         string_map.insert(row)             # <<<<<<<<<<<<<<
 * 
 *     return string_map
 */
    try {
      __pyx_v_string_map.insert(__pyx_v_row);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(1, 105, __pyx_L1_error)
    }

    /* "_agros.pyx":102
 *     cdef map[string, string] string_map
 *     cdef pair[string, string] row
 *     for key in dictionary:             # <<<<<<<<<<<<<<
 *         row.first = key.encode()
 *         row.second = dictionary[key].encode()
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "_agros.pyx":107
 *         string_map.insert(row)
 * 
 *     return string_map             # <<<<<<<<<<<<<<
 * 
 * # wrappers
 */
  __pyx_r = __pyx_v_string_map;
  goto __pyx_L0;

  /* "_agros.pyx":99
 *     return int_map
 * 
 * cdef map[string, string] dictionary_to_string_map(dictionary):             # <<<<<<<<<<<<<<
 *     cdef map[string, string] string_map
 *     cdef pair[string, string] row
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_WriteUnraisable("_agros.dictionary_to_string_map", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __Pyx_pretend_to_initialize(&__pyx_r);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_key);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../resources_source/python/pygeometry.pxi":43
 *     cdef PyGeometry *thisptr
 * 
 *     def __cinit__(self):             # <<<<<<<<<<<<<<
 *         self.thisptr = new PyGeometry()
 *     def __dealloc__(self):
 */

/* Python wrapper */
static int __pyx_pw_6_agros_12__Geometry___1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_6_agros_12__Geometry___1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__cinit__", 0))) return -1;
  __pyx_r = __pyx_pf_6_agros_12__Geometry_____cinit__(((struct __pyx_obj_6_agros___Geometry__ *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6_agros_12__Geometry_____cinit__(struct __pyx_obj_6_agros___Geometry__ *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "../resources_source/python/pygeometry.pxi":44
 * 
 *     def __cinit__(self):
 *         self.thisptr = new PyGeometry()             # <<<<<<<<<<<<<<
 *     def __dealloc__(self):
 *         del self.thisptr
 */
  __pyx_v_self->thisptr = new PyGeometry();

  /* "../resources_source/python/pygeometry.pxi":43
 *     cdef PyGeometry *thisptr
 * 
 *     def __cinit__(self):             # <<<<<<<<<<<<<<
 *         self.thisptr = new PyGeometry()
 *     def __dealloc__(self):
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../resources_source/python/pygeometry.pxi":45
 *     def __cinit__(self):
 *         self.thisptr = new PyGeometry()
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.thisptr
 * 
 */

/* Python wrapper */
static void __pyx_pw_6_agros_12__Geometry___3__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_6_agros_12__Geometry___3__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_6_agros_12__Geometry___2__dealloc__(((struct __pyx_obj_6_agros___Geometry__ *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_6_agros_12__Geometry___2__dealloc__(struct __pyx_obj_6_agros___Geometry__ *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "../resources_source/python/pygeometry.pxi":46
 *         self.thisptr = new PyGeometry()
 *     def __dealloc__(self):
 *         del self.thisptr             # <<<<<<<<<<<<<<
 * 
 *     def add_node(self, x, y):
 */
  delete __pyx_v_self->thisptr;

  /* "../resources_source/python/pygeometry.pxi":45
 *     def __cinit__(self):
 *         self.thisptr = new PyGeometry()
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.thisptr
 * 
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "../resources_source/python/pygeometry.pxi":48
 *         del self.thisptr
 * 
 *     def add_node(self, x, y):             # <<<<<<<<<<<<<<
 *         """Add a new node according to coordinates and return its index.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6_agros_12__Geometry___5add_node(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6_agros_12__Geometry___4add_node[] = "Add a new node according to coordinates and return its index.\n\n        add_node(x, y)\n\n        Keyword arguments:\n        x -- x or r coordinate of node\n        y -- y or z coordinate of node\n        ";
static PyObject *__pyx_pw_6_agros_12__Geometry___5add_node(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_x = 0;
  PyObject *__pyx_v_y = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("add_node (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_x,&__pyx_n_s_y,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_x)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_y)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("add_node", 1, 2, 2, 1); __PYX_ERR(3, 48, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "add_node") < 0)) __PYX_ERR(3, 48, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_x = values[0];
    __pyx_v_y = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("add_node", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(3, 48, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("_agros.__Geometry__.add_node", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6_agros_12__Geometry___4add_node(((struct __pyx_obj_6_agros___Geometry__ *)__pyx_v_self), __pyx_v_x, __pyx_v_y);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6_agros_12__Geometry___4add_node(struct __pyx_obj_6_agros___Geometry__ *__pyx_v_self, PyObject *__pyx_v_x, PyObject *__pyx_v_y) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  std::string __pyx_t_4;
  std::string __pyx_t_5;
  int __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("add_node", 0);

  /* "../resources_source/python/pygeometry.pxi":57
 *         y -- y or z coordinate of node
 *         """
 *         return self.thisptr.addNode(str(x).encode(), str(y).encode())             # <<<<<<<<<<<<<<
 * 
 *     def remove_nodes(self, nodes = []):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyObject_CallOneArg(((PyObject *)(&PyString_Type)), __pyx_v_x); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 57, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_encode); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 57, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  __pyx_t_1 = (__pyx_t_2) ? __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_2) : __Pyx_PyObject_CallNoArg(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 57, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_4 = __pyx_convert_string_from_py_std__in_string(__pyx_t_1); if (unlikely(PyErr_Occurred())) __PYX_ERR(3, 57, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = __Pyx_PyObject_CallOneArg(((PyObject *)(&PyString_Type)), __pyx_v_y); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 57, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_encode); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 57, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 57, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_5 = __pyx_convert_string_from_py_std__in_string(__pyx_t_1); if (unlikely(PyErr_Occurred())) __PYX_ERR(3, 57, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  try {
    __pyx_t_6 = __pyx_v_self->thisptr->addNode(__pyx_t_4, __pyx_t_5);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(3, 57, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_t_6); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 57, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../resources_source/python/pygeometry.pxi":48
 *         del self.thisptr
 * 
 *     def add_node(self, x, y):             # <<<<<<<<<<<<<<
 *         """Add a new node according to coordinates and return its index.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("_agros.__Geometry__.add_node", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../resources_source/python/pygeometry.pxi":59
 *         return self.thisptr.addNode(str(x).encode(), str(y).encode())
 * 
 *     def remove_nodes(self, nodes = []):             # <<<<<<<<<<<<<<
 *         """Remove nodes according to their indexes.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6_agros_12__Geometry___7remove_nodes(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6_agros_12__Geometry___6remove_nodes[] = "Remove nodes according to their indexes.\n\n        remove_nodes(nodes = [])\n\n        Keyword arguments:\n        nodes -- list of indexes of removed nodes (default [] - remove all nodes)\n        ";
static PyObject *__pyx_pw_6_agros_12__Geometry___7remove_nodes(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_nodes = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("remove_nodes (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_nodes,0};
    PyObject* values[1] = {0};
    values[0] = __pyx_k_;
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_nodes);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "remove_nodes") < 0)) __PYX_ERR(3, 59, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_nodes = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("remove_nodes", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(3, 59, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("_agros.__Geometry__.remove_nodes", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6_agros_12__Geometry___6remove_nodes(((struct __pyx_obj_6_agros___Geometry__ *)__pyx_v_self), __pyx_v_nodes);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6_agros_12__Geometry___6remove_nodes(struct __pyx_obj_6_agros___Geometry__ *__pyx_v_self, PyObject *__pyx_v_nodes) {
  std::vector<int>  __pyx_v_nodes_vector;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("remove_nodes", 0);

  /* "../resources_source/python/pygeometry.pxi":67
 *         nodes -- list of indexes of removed nodes (default [] - remove all nodes)
 *         """
 *         cdef vector[int] nodes_vector = list_to_int_vector(nodes)             # <<<<<<<<<<<<<<
 *         self.thisptr.removeNodes(nodes_vector)
 * 
 */
  __pyx_v_nodes_vector = __pyx_f_6_agros_list_to_int_vector(__pyx_v_nodes);

  /* "../resources_source/python/pygeometry.pxi":68
 *         """
 *         cdef vector[int] nodes_vector = list_to_int_vector(nodes)
 *         self.thisptr.removeNodes(nodes_vector)             # <<<<<<<<<<<<<<
 * 
 *     def add_edge(self, x1, y1, x2, y2, angle = 0.0, segments = 4, refinements = {}, boundaries = {}):
 */
  try {
    __pyx_v_self->thisptr->removeNodes(__pyx_v_nodes_vector);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(3, 68, __pyx_L1_error)
  }

  /* "../resources_source/python/pygeometry.pxi":59
 *         return self.thisptr.addNode(str(x).encode(), str(y).encode())
 * 
 *     def remove_nodes(self, nodes = []):             # <<<<<<<<<<<<<<
 *         """Remove nodes according to their indexes.
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("_agros.__Geometry__.remove_nodes", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../resources_source/python/pygeometry.pxi":70
 *         self.thisptr.removeNodes(nodes_vector)
 * 
 *     def add_edge(self, x1, y1, x2, y2, angle = 0.0, segments = 4, refinements = {}, boundaries = {}):             # <<<<<<<<<<<<<<
 *         """Add a new edge according to coordinates and return its index.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6_agros_12__Geometry___9add_edge(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6_agros_12__Geometry___8add_edge[] = "Add a new edge according to coordinates and return its index.\n\n        add_edge(x1, y1, x2, y2, angle = 0.0, segments = 4, refinements = {}, boundaries = {})\n\n        Keyword arguments:\n        x1 -- x or r coordinate of start node\n        y1 -- y or z coordinate of start node\n        x2 -- x or r coordinate of end node\n        y2 -- y or z coordinate of end node\n        angle -- angle between connecting lines, which join terminal nodes of edge and center of arc (default 0.0)\n        refinements -- refinement towards edge {'field' : refinement} (default {})\n        boundaries -- boundary condition {'field' : 'boundary name'} (default {})\n        ";
static PyObject *__pyx_pw_6_agros_12__Geometry___9add_edge(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_x1 = 0;
  PyObject *__pyx_v_y1 = 0;
  PyObject *__pyx_v_x2 = 0;
  PyObject *__pyx_v_y2 = 0;
  PyObject *__pyx_v_angle = 0;
  PyObject *__pyx_v_segments = 0;
  PyObject *__pyx_v_refinements = 0;
  PyObject *__pyx_v_boundaries = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("add_edge (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_x1,&__pyx_n_s_y1,&__pyx_n_s_x2,&__pyx_n_s_y2,&__pyx_n_s_angle,&__pyx_n_s_segments,&__pyx_n_s_refinements,&__pyx_n_s_boundaries,0};
    PyObject* values[8] = {0,0,0,0,0,0,0,0};
    values[4] = ((PyObject *)__pyx_float_0_0);
    values[5] = ((PyObject *)__pyx_int_4);
    values[6] = __pyx_k__2;
    values[7] = __pyx_k__3;
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        CYTHON_FALLTHROUGH;
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_x1)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_y1)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("add_edge", 0, 4, 8, 1); __PYX_ERR(3, 70, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_x2)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("add_edge", 0, 4, 8, 2); __PYX_ERR(3, 70, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_y2)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("add_edge", 0, 4, 8, 3); __PYX_ERR(3, 70, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_angle);
          if (value) { values[4] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_segments);
          if (value) { values[5] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  6:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_refinements);
          if (value) { values[6] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  7:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_boundaries);
          if (value) { values[7] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "add_edge") < 0)) __PYX_ERR(3, 70, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        CYTHON_FALLTHROUGH;
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_x1 = values[0];
    __pyx_v_y1 = values[1];
    __pyx_v_x2 = values[2];
    __pyx_v_y2 = values[3];
    __pyx_v_angle = values[4];
    __pyx_v_segments = values[5];
    __pyx_v_refinements = values[6];
    __pyx_v_boundaries = values[7];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("add_edge", 0, 4, 8, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(3, 70, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("_agros.__Geometry__.add_edge", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6_agros_12__Geometry___8add_edge(((struct __pyx_obj_6_agros___Geometry__ *)__pyx_v_self), __pyx_v_x1, __pyx_v_y1, __pyx_v_x2, __pyx_v_y2, __pyx_v_angle, __pyx_v_segments, __pyx_v_refinements, __pyx_v_boundaries);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6_agros_12__Geometry___8add_edge(struct __pyx_obj_6_agros___Geometry__ *__pyx_v_self, PyObject *__pyx_v_x1, PyObject *__pyx_v_y1, PyObject *__pyx_v_x2, PyObject *__pyx_v_y2, PyObject *__pyx_v_angle, PyObject *__pyx_v_segments, PyObject *__pyx_v_refinements, PyObject *__pyx_v_boundaries) {
  std::map<std::string,int>  __pyx_v_refinements_map;
  std::map<std::string,std::string>  __pyx_v_boundaries_map;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  std::string __pyx_t_4;
  std::string __pyx_t_5;
  std::string __pyx_t_6;
  std::string __pyx_t_7;
  std::string __pyx_t_8;
  int __pyx_t_9;
  int __pyx_t_10;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("add_edge", 0);

  /* "../resources_source/python/pygeometry.pxi":84
 *         boundaries -- boundary condition {'field' : 'boundary name'} (default {})
 *         """
 *         cdef map[string, int] refinements_map = dictionary_to_int_map(refinements)             # <<<<<<<<<<<<<<
 *         cdef map[string, string] boundaries_map = dictionary_to_string_map(boundaries)
 * 
 */
  __pyx_v_refinements_map = __pyx_f_6_agros_dictionary_to_int_map(__pyx_v_refinements);

  /* "../resources_source/python/pygeometry.pxi":85
 *         """
 *         cdef map[string, int] refinements_map = dictionary_to_int_map(refinements)
 *         cdef map[string, string] boundaries_map = dictionary_to_string_map(boundaries)             # <<<<<<<<<<<<<<
 * 
 *         return self.thisptr.addEdge(str(x1).encode(), str(y1).encode(), str(x2).encode(), str(y2).encode(), str(angle).encode(),
 */
  __pyx_v_boundaries_map = __pyx_f_6_agros_dictionary_to_string_map(__pyx_v_boundaries);

  /* "../resources_source/python/pygeometry.pxi":87
 *         cdef map[string, string] boundaries_map = dictionary_to_string_map(boundaries)
 * 
 *         return self.thisptr.addEdge(str(x1).encode(), str(y1).encode(), str(x2).encode(), str(y2).encode(), str(angle).encode(),             # <<<<<<<<<<<<<<
 *             segments, refinements_map, boundaries_map)
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyObject_CallOneArg(((PyObject *)(&PyString_Type)), __pyx_v_x1); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 87, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_encode); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 87, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  __pyx_t_1 = (__pyx_t_2) ? __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_2) : __Pyx_PyObject_CallNoArg(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 87, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_4 = __pyx_convert_string_from_py_std__in_string(__pyx_t_1); if (unlikely(PyErr_Occurred())) __PYX_ERR(3, 87, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = __Pyx_PyObject_CallOneArg(((PyObject *)(&PyString_Type)), __pyx_v_y1); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 87, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_encode); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 87, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 87, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_5 = __pyx_convert_string_from_py_std__in_string(__pyx_t_1); if (unlikely(PyErr_Occurred())) __PYX_ERR(3, 87, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_2 = __Pyx_PyObject_CallOneArg(((PyObject *)(&PyString_Type)), __pyx_v_x2); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 87, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_encode); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 87, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  __pyx_t_1 = (__pyx_t_2) ? __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_2) : __Pyx_PyObject_CallNoArg(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 87, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_6 = __pyx_convert_string_from_py_std__in_string(__pyx_t_1); if (unlikely(PyErr_Occurred())) __PYX_ERR(3, 87, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = __Pyx_PyObject_CallOneArg(((PyObject *)(&PyString_Type)), __pyx_v_y2); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 87, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_encode); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 87, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 87, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_7 = __pyx_convert_string_from_py_std__in_string(__pyx_t_1); if (unlikely(PyErr_Occurred())) __PYX_ERR(3, 87, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_2 = __Pyx_PyObject_CallOneArg(((PyObject *)(&PyString_Type)), __pyx_v_angle); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 87, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_encode); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 87, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  __pyx_t_1 = (__pyx_t_2) ? __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_2) : __Pyx_PyObject_CallNoArg(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 87, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_8 = __pyx_convert_string_from_py_std__in_string(__pyx_t_1); if (unlikely(PyErr_Occurred())) __PYX_ERR(3, 87, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "../resources_source/python/pygeometry.pxi":88
 * 
 *         return self.thisptr.addEdge(str(x1).encode(), str(y1).encode(), str(x2).encode(), str(y2).encode(), str(angle).encode(),
 *             segments, refinements_map, boundaries_map)             # <<<<<<<<<<<<<<
 * 
 *     def add_edge_by_nodes(self, start_node_index, end_node_index, angle = 0.0, segments = 4, refinements = {}, boundaries = {}):
 */
  __pyx_t_9 = __Pyx_PyInt_As_int(__pyx_v_segments); if (unlikely((__pyx_t_9 == (int)-1) && PyErr_Occurred())) __PYX_ERR(3, 88, __pyx_L1_error)

  /* "../resources_source/python/pygeometry.pxi":87
 *         cdef map[string, string] boundaries_map = dictionary_to_string_map(boundaries)
 * 
 *         return self.thisptr.addEdge(str(x1).encode(), str(y1).encode(), str(x2).encode(), str(y2).encode(), str(angle).encode(),             # <<<<<<<<<<<<<<
 *             segments, refinements_map, boundaries_map)
 * 
 */
  try {
    __pyx_t_10 = __pyx_v_self->thisptr->addEdge(__pyx_t_4, __pyx_t_5, __pyx_t_6, __pyx_t_7, __pyx_t_8, __pyx_t_9, __pyx_v_refinements_map, __pyx_v_boundaries_map);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(3, 87, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_t_10); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 87, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../resources_source/python/pygeometry.pxi":70
 *         self.thisptr.removeNodes(nodes_vector)
 * 
 *     def add_edge(self, x1, y1, x2, y2, angle = 0.0, segments = 4, refinements = {}, boundaries = {}):             # <<<<<<<<<<<<<<
 *         """Add a new edge according to coordinates and return its index.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("_agros.__Geometry__.add_edge", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../resources_source/python/pygeometry.pxi":90
 *             segments, refinements_map, boundaries_map)
 * 
 *     def add_edge_by_nodes(self, start_node_index, end_node_index, angle = 0.0, segments = 4, refinements = {}, boundaries = {}):             # <<<<<<<<<<<<<<
 *         """Add a new edge according to indexes of start and end node and return the index of edge.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6_agros_12__Geometry___11add_edge_by_nodes(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6_agros_12__Geometry___10add_edge_by_nodes[] = "Add a new edge according to indexes of start and end node and return the index of edge.\n\n        add_edge(start_node_index, end_node_index, angle = 0.0, segments = 4, refinements = {}, boundaries = {})\n\n        Keyword arguments:\n        start_node_index -- index of start node\n        end_node_index -- index of end node\n        angle -- angle between connecting lines, which join terminal nodes of edge and center of arc (default 0.0)\n        refinements -- refinement towards edge {'field' : refinement} (default {})\n        boundaries -- boundary condition {'field' : 'boundary name'} (default {})\n        ";
static PyObject *__pyx_pw_6_agros_12__Geometry___11add_edge_by_nodes(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_start_node_index = 0;
  PyObject *__pyx_v_end_node_index = 0;
  PyObject *__pyx_v_angle = 0;
  PyObject *__pyx_v_segments = 0;
  PyObject *__pyx_v_refinements = 0;
  PyObject *__pyx_v_boundaries = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("add_edge_by_nodes (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_start_node_index,&__pyx_n_s_end_node_index,&__pyx_n_s_angle,&__pyx_n_s_segments,&__pyx_n_s_refinements,&__pyx_n_s_boundaries,0};
    PyObject* values[6] = {0,0,0,0,0,0};
    values[2] = ((PyObject *)__pyx_float_0_0);
    values[3] = ((PyObject *)__pyx_int_4);
    values[4] = __pyx_k__4;
    values[5] = __pyx_k__5;
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_start_node_index)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_end_node_index)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("add_edge_by_nodes", 0, 2, 6, 1); __PYX_ERR(3, 90, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_angle);
          if (value) { values[2] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_segments);
          if (value) { values[3] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_refinements);
          if (value) { values[4] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_boundaries);
          if (value) { values[5] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "add_edge_by_nodes") < 0)) __PYX_ERR(3, 90, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_start_node_index = values[0];
    __pyx_v_end_node_index = values[1];
    __pyx_v_angle = values[2];
    __pyx_v_segments = values[3];
    __pyx_v_refinements = values[4];
    __pyx_v_boundaries = values[5];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("add_edge_by_nodes", 0, 2, 6, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(3, 90, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("_agros.__Geometry__.add_edge_by_nodes", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6_agros_12__Geometry___10add_edge_by_nodes(((struct __pyx_obj_6_agros___Geometry__ *)__pyx_v_self), __pyx_v_start_node_index, __pyx_v_end_node_index, __pyx_v_angle, __pyx_v_segments, __pyx_v_refinements, __pyx_v_boundaries);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6_agros_12__Geometry___10add_edge_by_nodes(struct __pyx_obj_6_agros___Geometry__ *__pyx_v_self, PyObject *__pyx_v_start_node_index, PyObject *__pyx_v_end_node_index, PyObject *__pyx_v_angle, PyObject *__pyx_v_segments, PyObject *__pyx_v_refinements, PyObject *__pyx_v_boundaries) {
  std::map<std::string,int>  __pyx_v_refinements_map;
  std::map<std::string,std::string>  __pyx_v_boundaries_map;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  std::string __pyx_t_6;
  int __pyx_t_7;
  int __pyx_t_8;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("add_edge_by_nodes", 0);

  /* "../resources_source/python/pygeometry.pxi":102
 *         boundaries -- boundary condition {'field' : 'boundary name'} (default {})
 *         """
 *         cdef map[string, int] refinements_map = dictionary_to_int_map(refinements)             # <<<<<<<<<<<<<<
 *         cdef map[string, string] boundaries_map = dictionary_to_string_map(boundaries)
 * 
 */
  __pyx_v_refinements_map = __pyx_f_6_agros_dictionary_to_int_map(__pyx_v_refinements);

  /* "../resources_source/python/pygeometry.pxi":103
 *         """
 *         cdef map[string, int] refinements_map = dictionary_to_int_map(refinements)
 *         cdef map[string, string] boundaries_map = dictionary_to_string_map(boundaries)             # <<<<<<<<<<<<<<
 * 
 *         return self.thisptr.addEdgeByNodes(start_node_index, end_node_index, str(angle).encode(), segments, refinements_map, boundaries_map)
 */
  __pyx_v_boundaries_map = __pyx_f_6_agros_dictionary_to_string_map(__pyx_v_boundaries);

  /* "../resources_source/python/pygeometry.pxi":105
 *         cdef map[string, string] boundaries_map = dictionary_to_string_map(boundaries)
 * 
 *         return self.thisptr.addEdgeByNodes(start_node_index, end_node_index, str(angle).encode(), segments, refinements_map, boundaries_map)             # <<<<<<<<<<<<<<
 * 
 *     def modify_edge(self, index, angle = 0.0, segments = 4, refinements = {}, boundaries = {}):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_As_int(__pyx_v_start_node_index); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) __PYX_ERR(3, 105, __pyx_L1_error)
  __pyx_t_2 = __Pyx_PyInt_As_int(__pyx_v_end_node_index); if (unlikely((__pyx_t_2 == (int)-1) && PyErr_Occurred())) __PYX_ERR(3, 105, __pyx_L1_error)
  __pyx_t_4 = __Pyx_PyObject_CallOneArg(((PyObject *)(&PyString_Type)), __pyx_v_angle); if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 105, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_encode); if (unlikely(!__pyx_t_5)) __PYX_ERR(3, 105, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_5);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_5, function);
    }
  }
  __pyx_t_3 = (__pyx_t_4) ? __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_4) : __Pyx_PyObject_CallNoArg(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 105, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_6 = __pyx_convert_string_from_py_std__in_string(__pyx_t_3); if (unlikely(PyErr_Occurred())) __PYX_ERR(3, 105, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_7 = __Pyx_PyInt_As_int(__pyx_v_segments); if (unlikely((__pyx_t_7 == (int)-1) && PyErr_Occurred())) __PYX_ERR(3, 105, __pyx_L1_error)
  try {
    __pyx_t_8 = __pyx_v_self->thisptr->addEdgeByNodes(__pyx_t_1, __pyx_t_2, __pyx_t_6, __pyx_t_7, __pyx_v_refinements_map, __pyx_v_boundaries_map);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(3, 105, __pyx_L1_error)
  }
  __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_t_8); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 105, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "../resources_source/python/pygeometry.pxi":90
 *             segments, refinements_map, boundaries_map)
 * 
 *     def add_edge_by_nodes(self, start_node_index, end_node_index, angle = 0.0, segments = 4, refinements = {}, boundaries = {}):             # <<<<<<<<<<<<<<
 *         """Add a new edge according to indexes of start and end node and return the index of edge.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("_agros.__Geometry__.add_edge_by_nodes", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../resources_source/python/pygeometry.pxi":107
 *         return self.thisptr.addEdgeByNodes(start_node_index, end_node_index, str(angle).encode(), segments, refinements_map, boundaries_map)
 * 
 *     def modify_edge(self, index, angle = 0.0, segments = 4, refinements = {}, boundaries = {}):             # <<<<<<<<<<<<<<
 *         """Modify parameters of existing edge.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6_agros_12__Geometry___13modify_edge(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6_agros_12__Geometry___12modify_edge[] = "Modify parameters of existing edge.\n\n        modify_edge(index, angle = 0.0, segments = 4, refinements = {}, boundaries = {})\n\n        Keyword arguments:\n        index -- edge index\n        angle -- angle between connecting lines, which join terminal nodes of edge and center of arc (default 0.0)\n        refinements -- refinement towards edge {'field' : refinement} (default {})\n        boundaries -- boundary condition {'field' : 'boundary name'} (default {})\n        ";
static PyObject *__pyx_pw_6_agros_12__Geometry___13modify_edge(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_index = 0;
  PyObject *__pyx_v_angle = 0;
  PyObject *__pyx_v_segments = 0;
  PyObject *__pyx_v_refinements = 0;
  PyObject *__pyx_v_boundaries = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("modify_edge (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_index,&__pyx_n_s_angle,&__pyx_n_s_segments,&__pyx_n_s_refinements,&__pyx_n_s_boundaries,0};
    PyObject* values[5] = {0,0,0,0,0};
    values[1] = ((PyObject *)__pyx_float_0_0);
    values[2] = ((PyObject *)__pyx_int_4);
    values[3] = __pyx_k__6;
    values[4] = __pyx_k__7;
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_index)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_angle);
          if (value) { values[1] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_segments);
          if (value) { values[2] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_refinements);
          if (value) { values[3] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_boundaries);
          if (value) { values[4] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "modify_edge") < 0)) __PYX_ERR(3, 107, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_index = values[0];
    __pyx_v_angle = values[1];
    __pyx_v_segments = values[2];
    __pyx_v_refinements = values[3];
    __pyx_v_boundaries = values[4];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("modify_edge", 0, 1, 5, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(3, 107, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("_agros.__Geometry__.modify_edge", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6_agros_12__Geometry___12modify_edge(((struct __pyx_obj_6_agros___Geometry__ *)__pyx_v_self), __pyx_v_index, __pyx_v_angle, __pyx_v_segments, __pyx_v_refinements, __pyx_v_boundaries);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6_agros_12__Geometry___12modify_edge(struct __pyx_obj_6_agros___Geometry__ *__pyx_v_self, PyObject *__pyx_v_index, PyObject *__pyx_v_angle, PyObject *__pyx_v_segments, PyObject *__pyx_v_refinements, PyObject *__pyx_v_boundaries) {
  std::map<std::string,int>  __pyx_v_refinements_map;
  std::map<std::string,std::string>  __pyx_v_boundaries_map;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  std::string __pyx_t_5;
  int __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("modify_edge", 0);

  /* "../resources_source/python/pygeometry.pxi":118
 *         boundaries -- boundary condition {'field' : 'boundary name'} (default {})
 *         """
 *         cdef map[string, int] refinements_map = dictionary_to_int_map(refinements)             # <<<<<<<<<<<<<<
 *         cdef map[string, string] boundaries_map = dictionary_to_string_map(boundaries)
 * 
 */
  __pyx_v_refinements_map = __pyx_f_6_agros_dictionary_to_int_map(__pyx_v_refinements);

  /* "../resources_source/python/pygeometry.pxi":119
 *         """
 *         cdef map[string, int] refinements_map = dictionary_to_int_map(refinements)
 *         cdef map[string, string] boundaries_map = dictionary_to_string_map(boundaries)             # <<<<<<<<<<<<<<
 * 
 *         self.thisptr.modifyEdge(index, str(angle).encode(), segments, refinements_map, boundaries_map)
 */
  __pyx_v_boundaries_map = __pyx_f_6_agros_dictionary_to_string_map(__pyx_v_boundaries);

  /* "../resources_source/python/pygeometry.pxi":121
 *         cdef map[string, string] boundaries_map = dictionary_to_string_map(boundaries)
 * 
 *         self.thisptr.modifyEdge(index, str(angle).encode(), segments, refinements_map, boundaries_map)             # <<<<<<<<<<<<<<
 * 
 *     def remove_edges(self, edges = []):
 */
  __pyx_t_1 = __Pyx_PyInt_As_int(__pyx_v_index); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) __PYX_ERR(3, 121, __pyx_L1_error)
  __pyx_t_3 = __Pyx_PyObject_CallOneArg(((PyObject *)(&PyString_Type)), __pyx_v_angle); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 121, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_encode); if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 121, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  __pyx_t_2 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 121, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_5 = __pyx_convert_string_from_py_std__in_string(__pyx_t_2); if (unlikely(PyErr_Occurred())) __PYX_ERR(3, 121, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_6 = __Pyx_PyInt_As_int(__pyx_v_segments); if (unlikely((__pyx_t_6 == (int)-1) && PyErr_Occurred())) __PYX_ERR(3, 121, __pyx_L1_error)
  try {
    __pyx_v_self->thisptr->modifyEdge(__pyx_t_1, __pyx_t_5, __pyx_t_6, __pyx_v_refinements_map, __pyx_v_boundaries_map);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(3, 121, __pyx_L1_error)
  }

  /* "../resources_source/python/pygeometry.pxi":107
 *         return self.thisptr.addEdgeByNodes(start_node_index, end_node_index, str(angle).encode(), segments, refinements_map, boundaries_map)
 * 
 *     def modify_edge(self, index, angle = 0.0, segments = 4, refinements = {}, boundaries = {}):             # <<<<<<<<<<<<<<
 *         """Modify parameters of existing edge.
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("_agros.__Geometry__.modify_edge", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../resources_source/python/pygeometry.pxi":123
 *         self.thisptr.modifyEdge(index, str(angle).encode(), segments, refinements_map, boundaries_map)
 * 
 *     def remove_edges(self, edges = []):             # <<<<<<<<<<<<<<
 *         """Remove edges according to their indexes.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6_agros_12__Geometry___15remove_edges(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6_agros_12__Geometry___14remove_edges[] = "Remove edges according to their indexes.\n\n        remove_edges(edges = [])\n\n        Keyword arguments:\n        edges -- list of indexes of removed edges (default [] - remove all edges)\n        ";
static PyObject *__pyx_pw_6_agros_12__Geometry___15remove_edges(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_edges = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("remove_edges (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_edges,0};
    PyObject* values[1] = {0};
    values[0] = __pyx_k__8;
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_edges);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "remove_edges") < 0)) __PYX_ERR(3, 123, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_edges = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("remove_edges", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(3, 123, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("_agros.__Geometry__.remove_edges", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6_agros_12__Geometry___14remove_edges(((struct __pyx_obj_6_agros___Geometry__ *)__pyx_v_self), __pyx_v_edges);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6_agros_12__Geometry___14remove_edges(struct __pyx_obj_6_agros___Geometry__ *__pyx_v_self, PyObject *__pyx_v_edges) {
  std::vector<int>  __pyx_v_edges_vector;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("remove_edges", 0);

  /* "../resources_source/python/pygeometry.pxi":131
 *         edges -- list of indexes of removed edges (default [] - remove all edges)
 *         """
 *         cdef vector[int] edges_vector = list_to_int_vector(edges)             # <<<<<<<<<<<<<<
 * 
 *         self.thisptr.removeEdges(edges_vector)
 */
  __pyx_v_edges_vector = __pyx_f_6_agros_list_to_int_vector(__pyx_v_edges);

  /* "../resources_source/python/pygeometry.pxi":133
 *         cdef vector[int] edges_vector = list_to_int_vector(edges)
 * 
 *         self.thisptr.removeEdges(edges_vector)             # <<<<<<<<<<<<<<
 * 
 *     def add_label(self, x, y, area = 0.0, refinements = {}, orders = {}, materials = {}):
 */
  try {
    __pyx_v_self->thisptr->removeEdges(__pyx_v_edges_vector);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(3, 133, __pyx_L1_error)
  }

  /* "../resources_source/python/pygeometry.pxi":123
 *         self.thisptr.modifyEdge(index, str(angle).encode(), segments, refinements_map, boundaries_map)
 * 
 *     def remove_edges(self, edges = []):             # <<<<<<<<<<<<<<
 *         """Remove edges according to their indexes.
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("_agros.__Geometry__.remove_edges", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../resources_source/python/pygeometry.pxi":135
 *         self.thisptr.removeEdges(edges_vector)
 * 
 *     def add_label(self, x, y, area = 0.0, refinements = {}, orders = {}, materials = {}):             # <<<<<<<<<<<<<<
 *         """Add a new label according to coordinates and return its index.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6_agros_12__Geometry___17add_label(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6_agros_12__Geometry___16add_label[] = "Add a new label according to coordinates and return its index.\n\n        add_label(x, y, area = 0.0, refinements = {}, orders = {}, materials = {})\n\n        Keyword arguments:\n        x -- x or r coordinate of label\n        y -- y or z coordinate of label\n        area -- cross section of circle which influence maximum cross section of elements (default 0.0)\n        refinements -- refinement of area {'field' : refinement} (default {})\n        orders -- polynomial order of area elements {'field' : refinement} (default {})\n        materials -- materials {'field' : 'material name'} (default {})\n        ";
static PyObject *__pyx_pw_6_agros_12__Geometry___17add_label(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_x = 0;
  PyObject *__pyx_v_y = 0;
  PyObject *__pyx_v_area = 0;
  PyObject *__pyx_v_refinements = 0;
  PyObject *__pyx_v_orders = 0;
  PyObject *__pyx_v_materials = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("add_label (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_x,&__pyx_n_s_y,&__pyx_n_s_area,&__pyx_n_s_refinements,&__pyx_n_s_orders,&__pyx_n_s_materials,0};
    PyObject* values[6] = {0,0,0,0,0,0};
    values[2] = ((PyObject *)__pyx_float_0_0);
    values[3] = __pyx_k__9;
    values[4] = __pyx_k__10;
    values[5] = __pyx_k__11;
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_x)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_y)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("add_label", 0, 2, 6, 1); __PYX_ERR(3, 135, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_area);
          if (value) { values[2] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_refinements);
          if (value) { values[3] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_orders);
          if (value) { values[4] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_materials);
          if (value) { values[5] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "add_label") < 0)) __PYX_ERR(3, 135, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_x = values[0];
    __pyx_v_y = values[1];
    __pyx_v_area = values[2];
    __pyx_v_refinements = values[3];
    __pyx_v_orders = values[4];
    __pyx_v_materials = values[5];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("add_label", 0, 2, 6, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(3, 135, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("_agros.__Geometry__.add_label", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6_agros_12__Geometry___16add_label(((struct __pyx_obj_6_agros___Geometry__ *)__pyx_v_self), __pyx_v_x, __pyx_v_y, __pyx_v_area, __pyx_v_refinements, __pyx_v_orders, __pyx_v_materials);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6_agros_12__Geometry___16add_label(struct __pyx_obj_6_agros___Geometry__ *__pyx_v_self, PyObject *__pyx_v_x, PyObject *__pyx_v_y, PyObject *__pyx_v_area, PyObject *__pyx_v_refinements, PyObject *__pyx_v_orders, PyObject *__pyx_v_materials) {
  std::map<std::string,int>  __pyx_v_refinements_map;
  std::map<std::string,int>  __pyx_v_orders_map;
  std::map<std::string,std::string>  __pyx_v_materials_map;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  std::string __pyx_t_4;
  std::string __pyx_t_5;
  double __pyx_t_6;
  int __pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("add_label", 0);

  /* "../resources_source/python/pygeometry.pxi":148
 *         materials -- materials {'field' : 'material name'} (default {})
 *         """
 *         cdef map[string, int] refinements_map = dictionary_to_int_map(refinements)             # <<<<<<<<<<<<<<
 *         cdef map[string, int] orders_map = dictionary_to_int_map(orders)
 *         cdef map[string, string] materials_map = dictionary_to_string_map(materials)
 */
  __pyx_v_refinements_map = __pyx_f_6_agros_dictionary_to_int_map(__pyx_v_refinements);

  /* "../resources_source/python/pygeometry.pxi":149
 *         """
 *         cdef map[string, int] refinements_map = dictionary_to_int_map(refinements)
 *         cdef map[string, int] orders_map = dictionary_to_int_map(orders)             # <<<<<<<<<<<<<<
 *         cdef map[string, string] materials_map = dictionary_to_string_map(materials)
 * 
 */
  __pyx_v_orders_map = __pyx_f_6_agros_dictionary_to_int_map(__pyx_v_orders);

  /* "../resources_source/python/pygeometry.pxi":150
 *         cdef map[string, int] refinements_map = dictionary_to_int_map(refinements)
 *         cdef map[string, int] orders_map = dictionary_to_int_map(orders)
 *         cdef map[string, string] materials_map = dictionary_to_string_map(materials)             # <<<<<<<<<<<<<<
 * 
 *         return self.thisptr.addLabel(str(x).encode(), str(y).encode(), area, refinements_map, orders_map, materials_map)
 */
  __pyx_v_materials_map = __pyx_f_6_agros_dictionary_to_string_map(__pyx_v_materials);

  /* "../resources_source/python/pygeometry.pxi":152
 *         cdef map[string, string] materials_map = dictionary_to_string_map(materials)
 * 
 *         return self.thisptr.addLabel(str(x).encode(), str(y).encode(), area, refinements_map, orders_map, materials_map)             # <<<<<<<<<<<<<<
 * 
 *     def modify_label(self, index, area = 0.0, refinements = {}, orders = {}, materials = {}):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyObject_CallOneArg(((PyObject *)(&PyString_Type)), __pyx_v_x); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 152, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_encode); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 152, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  __pyx_t_1 = (__pyx_t_2) ? __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_2) : __Pyx_PyObject_CallNoArg(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 152, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_4 = __pyx_convert_string_from_py_std__in_string(__pyx_t_1); if (unlikely(PyErr_Occurred())) __PYX_ERR(3, 152, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = __Pyx_PyObject_CallOneArg(((PyObject *)(&PyString_Type)), __pyx_v_y); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 152, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_encode); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 152, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 152, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_5 = __pyx_convert_string_from_py_std__in_string(__pyx_t_1); if (unlikely(PyErr_Occurred())) __PYX_ERR(3, 152, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_6 = __pyx_PyFloat_AsDouble(__pyx_v_area); if (unlikely((__pyx_t_6 == (double)-1) && PyErr_Occurred())) __PYX_ERR(3, 152, __pyx_L1_error)
  try {
    __pyx_t_7 = __pyx_v_self->thisptr->addLabel(__pyx_t_4, __pyx_t_5, __pyx_t_6, __pyx_v_refinements_map, __pyx_v_orders_map, __pyx_v_materials_map);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(3, 152, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_t_7); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 152, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../resources_source/python/pygeometry.pxi":135
 *         self.thisptr.removeEdges(edges_vector)
 * 
 *     def add_label(self, x, y, area = 0.0, refinements = {}, orders = {}, materials = {}):             # <<<<<<<<<<<<<<
 *         """Add a new label according to coordinates and return its index.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("_agros.__Geometry__.add_label", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../resources_source/python/pygeometry.pxi":154
 *         return self.thisptr.addLabel(str(x).encode(), str(y).encode(), area, refinements_map, orders_map, materials_map)
 * 
 *     def modify_label(self, index, area = 0.0, refinements = {}, orders = {}, materials = {}):             # <<<<<<<<<<<<<<
 *         """Modify parameters of existing label.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6_agros_12__Geometry___19modify_label(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6_agros_12__Geometry___18modify_label[] = "Modify parameters of existing label.\n\n        modify_label(index, area = 0.0, refinements = {}, orders = {}, materials = {})\n\n        Keyword arguments:\n        index -- label index\n        area -- cross section of circle which influence maximum cross section of elements (default 0.0)\n        refinements -- refinement of area {'field' : refinement} (default {})\n        orders -- polynomial order of area elements {'field' : refinement} (default {})\n        materials -- materials {'field' : 'material name'} (default {})\n        ";
static PyObject *__pyx_pw_6_agros_12__Geometry___19modify_label(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_index = 0;
  PyObject *__pyx_v_area = 0;
  PyObject *__pyx_v_refinements = 0;
  PyObject *__pyx_v_orders = 0;
  PyObject *__pyx_v_materials = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("modify_label (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_index,&__pyx_n_s_area,&__pyx_n_s_refinements,&__pyx_n_s_orders,&__pyx_n_s_materials,0};
    PyObject* values[5] = {0,0,0,0,0};
    values[1] = ((PyObject *)__pyx_float_0_0);
    values[2] = __pyx_k__12;
    values[3] = __pyx_k__13;
    values[4] = __pyx_k__14;
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_index)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_area);
          if (value) { values[1] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_refinements);
          if (value) { values[2] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_orders);
          if (value) { values[3] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_materials);
          if (value) { values[4] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "modify_label") < 0)) __PYX_ERR(3, 154, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_index = values[0];
    __pyx_v_area = values[1];
    __pyx_v_refinements = values[2];
    __pyx_v_orders = values[3];
    __pyx_v_materials = values[4];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("modify_label", 0, 1, 5, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(3, 154, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("_agros.__Geometry__.modify_label", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6_agros_12__Geometry___18modify_label(((struct __pyx_obj_6_agros___Geometry__ *)__pyx_v_self), __pyx_v_index, __pyx_v_area, __pyx_v_refinements, __pyx_v_orders, __pyx_v_materials);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6_agros_12__Geometry___18modify_label(struct __pyx_obj_6_agros___Geometry__ *__pyx_v_self, PyObject *__pyx_v_index, PyObject *__pyx_v_area, PyObject *__pyx_v_refinements, PyObject *__pyx_v_orders, PyObject *__pyx_v_materials) {
  std::map<std::string,int>  __pyx_v_refinements_map;
  std::map<std::string,int>  __pyx_v_orders_map;
  std::map<std::string,std::string>  __pyx_v_materials_map;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  double __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("modify_label", 0);

  /* "../resources_source/python/pygeometry.pxi":166
 *         materials -- materials {'field' : 'material name'} (default {})
 *         """
 *         cdef map[string, int] refinements_map = dictionary_to_int_map(refinements)             # <<<<<<<<<<<<<<
 *         cdef map[string, int] orders_map = dictionary_to_int_map(orders)
 *         cdef map[string, string] materials_map = dictionary_to_string_map(materials)
 */
  __pyx_v_refinements_map = __pyx_f_6_agros_dictionary_to_int_map(__pyx_v_refinements);

  /* "../resources_source/python/pygeometry.pxi":167
 *         """
 *         cdef map[string, int] refinements_map = dictionary_to_int_map(refinements)
 *         cdef map[string, int] orders_map = dictionary_to_int_map(orders)             # <<<<<<<<<<<<<<
 *         cdef map[string, string] materials_map = dictionary_to_string_map(materials)
 * 
 */
  __pyx_v_orders_map = __pyx_f_6_agros_dictionary_to_int_map(__pyx_v_orders);

  /* "../resources_source/python/pygeometry.pxi":168
 *         cdef map[string, int] refinements_map = dictionary_to_int_map(refinements)
 *         cdef map[string, int] orders_map = dictionary_to_int_map(orders)
 *         cdef map[string, string] materials_map = dictionary_to_string_map(materials)             # <<<<<<<<<<<<<<
 * 
 *         self.thisptr.modifyLabel(index, area, refinements_map, orders_map, materials_map)
 */
  __pyx_v_materials_map = __pyx_f_6_agros_dictionary_to_string_map(__pyx_v_materials);

  /* "../resources_source/python/pygeometry.pxi":170
 *         cdef map[string, string] materials_map = dictionary_to_string_map(materials)
 * 
 *         self.thisptr.modifyLabel(index, area, refinements_map, orders_map, materials_map)             # <<<<<<<<<<<<<<
 * 
 *     def remove_labels(self, labels = []):
 */
  __pyx_t_1 = __Pyx_PyInt_As_int(__pyx_v_index); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) __PYX_ERR(3, 170, __pyx_L1_error)
  __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_v_area); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(3, 170, __pyx_L1_error)
  try {
    __pyx_v_self->thisptr->modifyLabel(__pyx_t_1, __pyx_t_2, __pyx_v_refinements_map, __pyx_v_orders_map, __pyx_v_materials_map);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(3, 170, __pyx_L1_error)
  }

  /* "../resources_source/python/pygeometry.pxi":154
 *         return self.thisptr.addLabel(str(x).encode(), str(y).encode(), area, refinements_map, orders_map, materials_map)
 * 
 *     def modify_label(self, index, area = 0.0, refinements = {}, orders = {}, materials = {}):             # <<<<<<<<<<<<<<
 *         """Modify parameters of existing label.
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("_agros.__Geometry__.modify_label", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../resources_source/python/pygeometry.pxi":172
 *         self.thisptr.modifyLabel(index, area, refinements_map, orders_map, materials_map)
 * 
 *     def remove_labels(self, labels = []):             # <<<<<<<<<<<<<<
 *         """Remove labels according to their indexes.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6_agros_12__Geometry___21remove_labels(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6_agros_12__Geometry___20remove_labels[] = "Remove labels according to their indexes.\n\n        remove_labels(labels = [])\n\n        Keyword arguments:\n        labels -- list of indexes of removed labels (default [] - remove all labels)\n        ";
static PyObject *__pyx_pw_6_agros_12__Geometry___21remove_labels(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_labels = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("remove_labels (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_labels,0};
    PyObject* values[1] = {0};
    values[0] = __pyx_k__15;
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_labels);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "remove_labels") < 0)) __PYX_ERR(3, 172, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_labels = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("remove_labels", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(3, 172, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("_agros.__Geometry__.remove_labels", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6_agros_12__Geometry___20remove_labels(((struct __pyx_obj_6_agros___Geometry__ *)__pyx_v_self), __pyx_v_labels);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6_agros_12__Geometry___20remove_labels(struct __pyx_obj_6_agros___Geometry__ *__pyx_v_self, PyObject *__pyx_v_labels) {
  std::vector<int>  __pyx_v_labels_vector;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("remove_labels", 0);

  /* "../resources_source/python/pygeometry.pxi":180
 *         labels -- list of indexes of removed labels (default [] - remove all labels)
 *         """
 *         cdef vector[int] labels_vector = list_to_int_vector(labels)             # <<<<<<<<<<<<<<
 * 
 *         self.thisptr.removeLabels(labels_vector)
 */
  __pyx_v_labels_vector = __pyx_f_6_agros_list_to_int_vector(__pyx_v_labels);

  /* "../resources_source/python/pygeometry.pxi":182
 *         cdef vector[int] labels_vector = list_to_int_vector(labels)
 * 
 *         self.thisptr.removeLabels(labels_vector)             # <<<<<<<<<<<<<<
 * 
 *     def add_rect(self, x0, y0, width, height, boundaries = {}, materials = None):
 */
  try {
    __pyx_v_self->thisptr->removeLabels(__pyx_v_labels_vector);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(3, 182, __pyx_L1_error)
  }

  /* "../resources_source/python/pygeometry.pxi":172
 *         self.thisptr.modifyLabel(index, area, refinements_map, orders_map, materials_map)
 * 
 *     def remove_labels(self, labels = []):             # <<<<<<<<<<<<<<
 *         """Remove labels according to their indexes.
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("_agros.__Geometry__.remove_labels", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../resources_source/python/pygeometry.pxi":184
 *         self.thisptr.removeLabels(labels_vector)
 * 
 *     def add_rect(self, x0, y0, width, height, boundaries = {}, materials = None):             # <<<<<<<<<<<<<<
 *         """Add rect by start point (lower left node), width and height.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6_agros_12__Geometry___23add_rect(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6_agros_12__Geometry___22add_rect[] = "Add rect by start point (lower left node), width and height.\n\n        add_rect(x0, y0, width, height, boundaries = {}, materials = None)\n\n        Keyword arguments:\n        x0 -- x or r coordinate of start point\n        y0 -- y or z coordinate of start points\n        width -- width of rect\n        height -- height of rect\n        boundaries -- boundaries {'field' : refinement} (default {})\n        materials -- materials {'field' : 'material name'} (default None)\n        ";
static PyObject *__pyx_pw_6_agros_12__Geometry___23add_rect(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_x0 = 0;
  PyObject *__pyx_v_y0 = 0;
  PyObject *__pyx_v_width = 0;
  PyObject *__pyx_v_height = 0;
  PyObject *__pyx_v_boundaries = 0;
  PyObject *__pyx_v_materials = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("add_rect (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_x0,&__pyx_n_s_y0,&__pyx_n_s_width,&__pyx_n_s_height,&__pyx_n_s_boundaries,&__pyx_n_s_materials,0};
    PyObject* values[6] = {0,0,0,0,0,0};
    values[4] = __pyx_k__16;
    values[5] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_x0)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_y0)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("add_rect", 0, 4, 6, 1); __PYX_ERR(3, 184, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_width)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("add_rect", 0, 4, 6, 2); __PYX_ERR(3, 184, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_height)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("add_rect", 0, 4, 6, 3); __PYX_ERR(3, 184, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_boundaries);
          if (value) { values[4] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_materials);
          if (value) { values[5] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "add_rect") < 0)) __PYX_ERR(3, 184, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_x0 = values[0];
    __pyx_v_y0 = values[1];
    __pyx_v_width = values[2];
    __pyx_v_height = values[3];
    __pyx_v_boundaries = values[4];
    __pyx_v_materials = values[5];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("add_rect", 0, 4, 6, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(3, 184, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("_agros.__Geometry__.add_rect", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6_agros_12__Geometry___22add_rect(((struct __pyx_obj_6_agros___Geometry__ *)__pyx_v_self), __pyx_v_x0, __pyx_v_y0, __pyx_v_width, __pyx_v_height, __pyx_v_boundaries, __pyx_v_materials);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6_agros_12__Geometry___22add_rect(struct __pyx_obj_6_agros___Geometry__ *__pyx_v_self, PyObject *__pyx_v_x0, PyObject *__pyx_v_y0, PyObject *__pyx_v_width, PyObject *__pyx_v_height, PyObject *__pyx_v_boundaries, PyObject *__pyx_v_materials) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("add_rect", 0);

  /* "../resources_source/python/pygeometry.pxi":197
 *         materials -- materials {'field' : 'material name'} (default None)
 *         """
 *         self.add_edge(x0, y0, (x0)+width, y0, boundaries=boundaries)             # <<<<<<<<<<<<<<
 *         self.add_edge(x0+width, y0, (x0)+width, (y0)+height, boundaries=boundaries)
 *         self.add_edge(x0+width, (y0)+height, x0, (y0)+height, boundaries=boundaries)
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_add_edge); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 197, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyNumber_Add(__pyx_v_x0, __pyx_v_width); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 197, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(4); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 197, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(__pyx_v_x0);
  __Pyx_GIVEREF(__pyx_v_x0);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_v_x0);
  __Pyx_INCREF(__pyx_v_y0);
  __Pyx_GIVEREF(__pyx_v_y0);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_v_y0);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_3, 2, __pyx_t_2);
  __Pyx_INCREF(__pyx_v_y0);
  __Pyx_GIVEREF(__pyx_v_y0);
  PyTuple_SET_ITEM(__pyx_t_3, 3, __pyx_v_y0);
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 197, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_boundaries, __pyx_v_boundaries) < 0) __PYX_ERR(3, 197, __pyx_L1_error)
  __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_3, __pyx_t_2); if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 197, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "../resources_source/python/pygeometry.pxi":198
 *         """
 *         self.add_edge(x0, y0, (x0)+width, y0, boundaries=boundaries)
 *         self.add_edge(x0+width, y0, (x0)+width, (y0)+height, boundaries=boundaries)             # <<<<<<<<<<<<<<
 *         self.add_edge(x0+width, (y0)+height, x0, (y0)+height, boundaries=boundaries)
 *         self.add_edge(x0, (y0)+height, x0, y0, boundaries=boundaries)
 */
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_add_edge); if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 198, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_2 = PyNumber_Add(__pyx_v_x0, __pyx_v_width); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 198, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyNumber_Add(__pyx_v_x0, __pyx_v_width); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 198, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_1 = PyNumber_Add(__pyx_v_y0, __pyx_v_height); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 198, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_5 = PyTuple_New(4); if (unlikely(!__pyx_t_5)) __PYX_ERR(3, 198, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_2);
  __Pyx_INCREF(__pyx_v_y0);
  __Pyx_GIVEREF(__pyx_v_y0);
  PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_v_y0);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_5, 2, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_5, 3, __pyx_t_1);
  __pyx_t_2 = 0;
  __pyx_t_3 = 0;
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 198, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_boundaries, __pyx_v_boundaries) < 0) __PYX_ERR(3, 198, __pyx_L1_error)
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_5, __pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 198, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "../resources_source/python/pygeometry.pxi":199
 *         self.add_edge(x0, y0, (x0)+width, y0, boundaries=boundaries)
 *         self.add_edge(x0+width, y0, (x0)+width, (y0)+height, boundaries=boundaries)
 *         self.add_edge(x0+width, (y0)+height, x0, (y0)+height, boundaries=boundaries)             # <<<<<<<<<<<<<<
 *         self.add_edge(x0, (y0)+height, x0, y0, boundaries=boundaries)
 * 
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_add_edge); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 199, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_1 = PyNumber_Add(__pyx_v_x0, __pyx_v_width); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 199, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_5 = PyNumber_Add(__pyx_v_y0, __pyx_v_height); if (unlikely(!__pyx_t_5)) __PYX_ERR(3, 199, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_4 = PyNumber_Add(__pyx_v_y0, __pyx_v_height); if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 199, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_2 = PyTuple_New(4); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 199, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_5);
  PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_t_5);
  __Pyx_INCREF(__pyx_v_x0);
  __Pyx_GIVEREF(__pyx_v_x0);
  PyTuple_SET_ITEM(__pyx_t_2, 2, __pyx_v_x0);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_2, 3, __pyx_t_4);
  __pyx_t_1 = 0;
  __pyx_t_5 = 0;
  __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 199, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_t_4, __pyx_n_s_boundaries, __pyx_v_boundaries) < 0) __PYX_ERR(3, 199, __pyx_L1_error)
  __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_2, __pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(3, 199, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "../resources_source/python/pygeometry.pxi":200
 *         self.add_edge(x0+width, y0, (x0)+width, (y0)+height, boundaries=boundaries)
 *         self.add_edge(x0+width, (y0)+height, x0, (y0)+height, boundaries=boundaries)
 *         self.add_edge(x0, (y0)+height, x0, y0, boundaries=boundaries)             # <<<<<<<<<<<<<<
 * 
 *         if (materials != None):
 */
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_add_edge); if (unlikely(!__pyx_t_5)) __PYX_ERR(3, 200, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_4 = PyNumber_Add(__pyx_v_y0, __pyx_v_height); if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 200, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_2 = PyTuple_New(4); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 200, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_v_x0);
  __Pyx_GIVEREF(__pyx_v_x0);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v_x0);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_t_4);
  __Pyx_INCREF(__pyx_v_x0);
  __Pyx_GIVEREF(__pyx_v_x0);
  PyTuple_SET_ITEM(__pyx_t_2, 2, __pyx_v_x0);
  __Pyx_INCREF(__pyx_v_y0);
  __Pyx_GIVEREF(__pyx_v_y0);
  PyTuple_SET_ITEM(__pyx_t_2, 3, __pyx_v_y0);
  __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 200, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_t_4, __pyx_n_s_boundaries, __pyx_v_boundaries) < 0) __PYX_ERR(3, 200, __pyx_L1_error)
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_2, __pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 200, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "../resources_source/python/pygeometry.pxi":202
 *         self.add_edge(x0, (y0)+height, x0, y0, boundaries=boundaries)
 * 
 *         if (materials != None):             # <<<<<<<<<<<<<<
 *             self.add_label((x0)+(width/2.0), (y0)+(height/2.0), materials=materials)
 * 
 */
  __pyx_t_3 = PyObject_RichCompare(__pyx_v_materials, Py_None, Py_NE); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 202, __pyx_L1_error)
  __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(3, 202, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (__pyx_t_6) {

    /* "../resources_source/python/pygeometry.pxi":203
 * 
 *         if (materials != None):
 *             self.add_label((x0)+(width/2.0), (y0)+(height/2.0), materials=materials)             # <<<<<<<<<<<<<<
 * 
 *     def add_circle(self, x0, y0, radius, boundaries = {}, materials = None):
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_add_label); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 203, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyFloat_DivideObjC(__pyx_v_width, __pyx_float_2_0, 2.0, 0, 0); if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 203, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_2 = PyNumber_Add(__pyx_v_x0, __pyx_t_4); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 203, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_PyFloat_DivideObjC(__pyx_v_height, __pyx_float_2_0, 2.0, 0, 0); if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 203, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = PyNumber_Add(__pyx_v_y0, __pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(3, 203, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 203, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_2);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_5);
    __pyx_t_2 = 0;
    __pyx_t_5 = 0;
    __pyx_t_5 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_5)) __PYX_ERR(3, 203, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (PyDict_SetItem(__pyx_t_5, __pyx_n_s_materials, __pyx_v_materials) < 0) __PYX_ERR(3, 203, __pyx_L1_error)
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_4, __pyx_t_5); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 203, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "../resources_source/python/pygeometry.pxi":202
 *         self.add_edge(x0, (y0)+height, x0, y0, boundaries=boundaries)
 * 
 *         if (materials != None):             # <<<<<<<<<<<<<<
 *             self.add_label((x0)+(width/2.0), (y0)+(height/2.0), materials=materials)
 * 
 */
  }

  /* "../resources_source/python/pygeometry.pxi":184
 *         self.thisptr.removeLabels(labels_vector)
 * 
 *     def add_rect(self, x0, y0, width, height, boundaries = {}, materials = None):             # <<<<<<<<<<<<<<
 *         """Add rect by start point (lower left node), width and height.
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("_agros.__Geometry__.add_rect", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../resources_source/python/pygeometry.pxi":205
 *             self.add_label((x0)+(width/2.0), (y0)+(height/2.0), materials=materials)
 * 
 *     def add_circle(self, x0, y0, radius, boundaries = {}, materials = None):             # <<<<<<<<<<<<<<
 *         """Add circle by center point and radius.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6_agros_12__Geometry___25add_circle(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6_agros_12__Geometry___24add_circle[] = "Add circle by center point and radius.\n\n        add_circle(self, x0, y0, radius, boundaries = {}, materials = None)\n\n        Keyword arguments:\n        x0 -- x or r coordinate of center point\n        y0 -- y or z coordinate of center point\n        radius -- radius of center\n        boundaries -- boundaries {'field' : refinement} (default {})\n        materials -- materials {'field' : 'material name'} (default None)\n        ";
static PyObject *__pyx_pw_6_agros_12__Geometry___25add_circle(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_x0 = 0;
  PyObject *__pyx_v_y0 = 0;
  PyObject *__pyx_v_radius = 0;
  PyObject *__pyx_v_boundaries = 0;
  PyObject *__pyx_v_materials = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("add_circle (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_x0,&__pyx_n_s_y0,&__pyx_n_s_radius,&__pyx_n_s_boundaries,&__pyx_n_s_materials,0};
    PyObject* values[5] = {0,0,0,0,0};
    values[3] = __pyx_k__17;
    values[4] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_x0)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_y0)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("add_circle", 0, 3, 5, 1); __PYX_ERR(3, 205, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_radius)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("add_circle", 0, 3, 5, 2); __PYX_ERR(3, 205, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_boundaries);
          if (value) { values[3] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_materials);
          if (value) { values[4] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "add_circle") < 0)) __PYX_ERR(3, 205, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_x0 = values[0];
    __pyx_v_y0 = values[1];
    __pyx_v_radius = values[2];
    __pyx_v_boundaries = values[3];
    __pyx_v_materials = values[4];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("add_circle", 0, 3, 5, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(3, 205, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("_agros.__Geometry__.add_circle", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6_agros_12__Geometry___24add_circle(((struct __pyx_obj_6_agros___Geometry__ *)__pyx_v_self), __pyx_v_x0, __pyx_v_y0, __pyx_v_radius, __pyx_v_boundaries, __pyx_v_materials);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6_agros_12__Geometry___24add_circle(struct __pyx_obj_6_agros___Geometry__ *__pyx_v_self, PyObject *__pyx_v_x0, PyObject *__pyx_v_y0, PyObject *__pyx_v_radius, PyObject *__pyx_v_boundaries, PyObject *__pyx_v_materials) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("add_circle", 0);

  /* "../resources_source/python/pygeometry.pxi":217
 *         materials -- materials {'field' : 'material name'} (default None)
 *         """
 *         self.add_edge(x0, (y0)-radius, (x0)+radius, y0, boundaries=boundaries, angle=90)             # <<<<<<<<<<<<<<
 *         self.add_edge((x0)+radius, y0, x0, (y0)+radius, boundaries=boundaries, angle=90)
 *         self.add_edge(x0, (y0)+radius, (x0)-radius, y0, boundaries=boundaries, angle=90)
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_add_edge); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 217, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyNumber_Subtract(__pyx_v_y0, __pyx_v_radius); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 217, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyNumber_Add(__pyx_v_x0, __pyx_v_radius); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 217, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyTuple_New(4); if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 217, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_INCREF(__pyx_v_x0);
  __Pyx_GIVEREF(__pyx_v_x0);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_v_x0);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_4, 2, __pyx_t_3);
  __Pyx_INCREF(__pyx_v_y0);
  __Pyx_GIVEREF(__pyx_v_y0);
  PyTuple_SET_ITEM(__pyx_t_4, 3, __pyx_v_y0);
  __pyx_t_2 = 0;
  __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyDict_NewPresized(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 217, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_boundaries, __pyx_v_boundaries) < 0) __PYX_ERR(3, 217, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_angle, __pyx_int_90) < 0) __PYX_ERR(3, 217, __pyx_L1_error)
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_4, __pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 217, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "../resources_source/python/pygeometry.pxi":218
 *         """
 *         self.add_edge(x0, (y0)-radius, (x0)+radius, y0, boundaries=boundaries, angle=90)
 *         self.add_edge((x0)+radius, y0, x0, (y0)+radius, boundaries=boundaries, angle=90)             # <<<<<<<<<<<<<<
 *         self.add_edge(x0, (y0)+radius, (x0)-radius, y0, boundaries=boundaries, angle=90)
 *         self.add_edge((x0)-radius, y0, x0, (y0)-radius, boundaries=boundaries, angle=90)
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_add_edge); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 218, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyNumber_Add(__pyx_v_x0, __pyx_v_radius); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 218, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyNumber_Add(__pyx_v_y0, __pyx_v_radius); if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 218, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_1 = PyTuple_New(4); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 218, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_3);
  __Pyx_INCREF(__pyx_v_y0);
  __Pyx_GIVEREF(__pyx_v_y0);
  PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_v_y0);
  __Pyx_INCREF(__pyx_v_x0);
  __Pyx_GIVEREF(__pyx_v_x0);
  PyTuple_SET_ITEM(__pyx_t_1, 2, __pyx_v_x0);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_1, 3, __pyx_t_4);
  __pyx_t_3 = 0;
  __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyDict_NewPresized(2); if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 218, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_t_4, __pyx_n_s_boundaries, __pyx_v_boundaries) < 0) __PYX_ERR(3, 218, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_4, __pyx_n_s_angle, __pyx_int_90) < 0) __PYX_ERR(3, 218, __pyx_L1_error)
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_1, __pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 218, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "../resources_source/python/pygeometry.pxi":219
 *         self.add_edge(x0, (y0)-radius, (x0)+radius, y0, boundaries=boundaries, angle=90)
 *         self.add_edge((x0)+radius, y0, x0, (y0)+radius, boundaries=boundaries, angle=90)
 *         self.add_edge(x0, (y0)+radius, (x0)-radius, y0, boundaries=boundaries, angle=90)             # <<<<<<<<<<<<<<
 *         self.add_edge((x0)-radius, y0, x0, (y0)-radius, boundaries=boundaries, angle=90)
 * 
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_add_edge); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 219, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyNumber_Add(__pyx_v_y0, __pyx_v_radius); if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 219, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_1 = PyNumber_Subtract(__pyx_v_x0, __pyx_v_radius); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 219, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(4); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 219, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_v_x0);
  __Pyx_GIVEREF(__pyx_v_x0);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v_x0);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_2, 2, __pyx_t_1);
  __Pyx_INCREF(__pyx_v_y0);
  __Pyx_GIVEREF(__pyx_v_y0);
  PyTuple_SET_ITEM(__pyx_t_2, 3, __pyx_v_y0);
  __pyx_t_4 = 0;
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyDict_NewPresized(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 219, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_boundaries, __pyx_v_boundaries) < 0) __PYX_ERR(3, 219, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_angle, __pyx_int_90) < 0) __PYX_ERR(3, 219, __pyx_L1_error)
  __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_2, __pyx_t_1); if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 219, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "../resources_source/python/pygeometry.pxi":220
 *         self.add_edge((x0)+radius, y0, x0, (y0)+radius, boundaries=boundaries, angle=90)
 *         self.add_edge(x0, (y0)+radius, (x0)-radius, y0, boundaries=boundaries, angle=90)
 *         self.add_edge((x0)-radius, y0, x0, (y0)-radius, boundaries=boundaries, angle=90)             # <<<<<<<<<<<<<<
 * 
 *         if (materials != None):
 */
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_add_edge); if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 220, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_1 = PyNumber_Subtract(__pyx_v_x0, __pyx_v_radius); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 220, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyNumber_Subtract(__pyx_v_y0, __pyx_v_radius); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 220, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(4); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 220, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_1);
  __Pyx_INCREF(__pyx_v_y0);
  __Pyx_GIVEREF(__pyx_v_y0);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_v_y0);
  __Pyx_INCREF(__pyx_v_x0);
  __Pyx_GIVEREF(__pyx_v_x0);
  PyTuple_SET_ITEM(__pyx_t_3, 2, __pyx_v_x0);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_3, 3, __pyx_t_2);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyDict_NewPresized(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 220, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_boundaries, __pyx_v_boundaries) < 0) __PYX_ERR(3, 220, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_angle, __pyx_int_90) < 0) __PYX_ERR(3, 220, __pyx_L1_error)
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_3, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 220, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "../resources_source/python/pygeometry.pxi":222
 *         self.add_edge((x0)-radius, y0, x0, (y0)-radius, boundaries=boundaries, angle=90)
 * 
 *         if (materials != None):             # <<<<<<<<<<<<<<
 *             self.add_label(x0, y0, materials=materials)
 * 
 */
  __pyx_t_1 = PyObject_RichCompare(__pyx_v_materials, Py_None, Py_NE); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 222, __pyx_L1_error)
  __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_5 < 0)) __PYX_ERR(3, 222, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_5) {

    /* "../resources_source/python/pygeometry.pxi":223
 * 
 *         if (materials != None):
 *             self.add_label(x0, y0, materials=materials)             # <<<<<<<<<<<<<<
 * 
 *     def add_semicircle(self, x0, y0, radius, boundaries = {}, materials = None):
 */
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_add_label); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 223, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 223, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_v_x0);
    __Pyx_GIVEREF(__pyx_v_x0);
    PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v_x0);
    __Pyx_INCREF(__pyx_v_y0);
    __Pyx_GIVEREF(__pyx_v_y0);
    PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_v_y0);
    __pyx_t_3 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 223, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_materials, __pyx_v_materials) < 0) __PYX_ERR(3, 223, __pyx_L1_error)
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 223, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "../resources_source/python/pygeometry.pxi":222
 *         self.add_edge((x0)-radius, y0, x0, (y0)-radius, boundaries=boundaries, angle=90)
 * 
 *         if (materials != None):             # <<<<<<<<<<<<<<
 *             self.add_label(x0, y0, materials=materials)
 * 
 */
  }

  /* "../resources_source/python/pygeometry.pxi":205
 *             self.add_label((x0)+(width/2.0), (y0)+(height/2.0), materials=materials)
 * 
 *     def add_circle(self, x0, y0, radius, boundaries = {}, materials = None):             # <<<<<<<<<<<<<<
 *         """Add circle by center point and radius.
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("_agros.__Geometry__.add_circle", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../resources_source/python/pygeometry.pxi":225
 *             self.add_label(x0, y0, materials=materials)
 * 
 *     def add_semicircle(self, x0, y0, radius, boundaries = {}, materials = None):             # <<<<<<<<<<<<<<
 *         """Add semicircle by center point of full circle and radius.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6_agros_12__Geometry___27add_semicircle(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6_agros_12__Geometry___26add_semicircle[] = "Add semicircle by center point of full circle and radius.\n\n        add_semicircle(self, x0, y0, radius, boundaries = {}, materials = None)\n\n        Keyword arguments:\n        x0 -- x or r coordinate of center point\n        y0 -- y or z coordinate of center point\n        radius -- radius of center\n        boundaries -- boundaries {'field' : refinement} (default {})\n        materials -- materials {'field' : 'material name'} (default None)\n        ";
static PyObject *__pyx_pw_6_agros_12__Geometry___27add_semicircle(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_x0 = 0;
  PyObject *__pyx_v_y0 = 0;
  PyObject *__pyx_v_radius = 0;
  PyObject *__pyx_v_boundaries = 0;
  PyObject *__pyx_v_materials = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("add_semicircle (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_x0,&__pyx_n_s_y0,&__pyx_n_s_radius,&__pyx_n_s_boundaries,&__pyx_n_s_materials,0};
    PyObject* values[5] = {0,0,0,0,0};
    values[3] = __pyx_k__18;
    values[4] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_x0)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_y0)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("add_semicircle", 0, 3, 5, 1); __PYX_ERR(3, 225, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_radius)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("add_semicircle", 0, 3, 5, 2); __PYX_ERR(3, 225, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_boundaries);
          if (value) { values[3] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_materials);
          if (value) { values[4] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "add_semicircle") < 0)) __PYX_ERR(3, 225, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_x0 = values[0];
    __pyx_v_y0 = values[1];
    __pyx_v_radius = values[2];
    __pyx_v_boundaries = values[3];
    __pyx_v_materials = values[4];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("add_semicircle", 0, 3, 5, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(3, 225, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("_agros.__Geometry__.add_semicircle", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6_agros_12__Geometry___26add_semicircle(((struct __pyx_obj_6_agros___Geometry__ *)__pyx_v_self), __pyx_v_x0, __pyx_v_y0, __pyx_v_radius, __pyx_v_boundaries, __pyx_v_materials);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6_agros_12__Geometry___26add_semicircle(struct __pyx_obj_6_agros___Geometry__ *__pyx_v_self, PyObject *__pyx_v_x0, PyObject *__pyx_v_y0, PyObject *__pyx_v_radius, PyObject *__pyx_v_boundaries, PyObject *__pyx_v_materials) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("add_semicircle", 0);

  /* "../resources_source/python/pygeometry.pxi":237
 *         materials -- materials {'field' : 'material name'} (default None)
 *         """
 *         self.add_edge(x0, (y0)-radius, (x0)+radius, y0, boundaries=boundaries, angle=90)             # <<<<<<<<<<<<<<
 *         self.add_edge((x0)+radius, y0, x0, (y0)+radius, boundaries=boundaries, angle=90)
 *         self.add_edge(x0, (y0)+radius, x0, (y0)-radius, boundaries=boundaries, angle=0)
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_add_edge); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 237, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyNumber_Subtract(__pyx_v_y0, __pyx_v_radius); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 237, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyNumber_Add(__pyx_v_x0, __pyx_v_radius); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 237, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyTuple_New(4); if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 237, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_INCREF(__pyx_v_x0);
  __Pyx_GIVEREF(__pyx_v_x0);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_v_x0);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_4, 2, __pyx_t_3);
  __Pyx_INCREF(__pyx_v_y0);
  __Pyx_GIVEREF(__pyx_v_y0);
  PyTuple_SET_ITEM(__pyx_t_4, 3, __pyx_v_y0);
  __pyx_t_2 = 0;
  __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyDict_NewPresized(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 237, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_boundaries, __pyx_v_boundaries) < 0) __PYX_ERR(3, 237, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_angle, __pyx_int_90) < 0) __PYX_ERR(3, 237, __pyx_L1_error)
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_4, __pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 237, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "../resources_source/python/pygeometry.pxi":238
 *         """
 *         self.add_edge(x0, (y0)-radius, (x0)+radius, y0, boundaries=boundaries, angle=90)
 *         self.add_edge((x0)+radius, y0, x0, (y0)+radius, boundaries=boundaries, angle=90)             # <<<<<<<<<<<<<<
 *         self.add_edge(x0, (y0)+radius, x0, (y0)-radius, boundaries=boundaries, angle=0)
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_add_edge); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 238, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyNumber_Add(__pyx_v_x0, __pyx_v_radius); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 238, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyNumber_Add(__pyx_v_y0, __pyx_v_radius); if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 238, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_1 = PyTuple_New(4); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 238, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_3);
  __Pyx_INCREF(__pyx_v_y0);
  __Pyx_GIVEREF(__pyx_v_y0);
  PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_v_y0);
  __Pyx_INCREF(__pyx_v_x0);
  __Pyx_GIVEREF(__pyx_v_x0);
  PyTuple_SET_ITEM(__pyx_t_1, 2, __pyx_v_x0);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_1, 3, __pyx_t_4);
  __pyx_t_3 = 0;
  __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyDict_NewPresized(2); if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 238, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_t_4, __pyx_n_s_boundaries, __pyx_v_boundaries) < 0) __PYX_ERR(3, 238, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_4, __pyx_n_s_angle, __pyx_int_90) < 0) __PYX_ERR(3, 238, __pyx_L1_error)
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_1, __pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 238, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "../resources_source/python/pygeometry.pxi":239
 *         self.add_edge(x0, (y0)-radius, (x0)+radius, y0, boundaries=boundaries, angle=90)
 *         self.add_edge((x0)+radius, y0, x0, (y0)+radius, boundaries=boundaries, angle=90)
 *         self.add_edge(x0, (y0)+radius, x0, (y0)-radius, boundaries=boundaries, angle=0)             # <<<<<<<<<<<<<<
 * 
 *         if (materials != None):
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_add_edge); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 239, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyNumber_Add(__pyx_v_y0, __pyx_v_radius); if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 239, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_1 = PyNumber_Subtract(__pyx_v_y0, __pyx_v_radius); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 239, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(4); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 239, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_v_x0);
  __Pyx_GIVEREF(__pyx_v_x0);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v_x0);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_t_4);
  __Pyx_INCREF(__pyx_v_x0);
  __Pyx_GIVEREF(__pyx_v_x0);
  PyTuple_SET_ITEM(__pyx_t_2, 2, __pyx_v_x0);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_2, 3, __pyx_t_1);
  __pyx_t_4 = 0;
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyDict_NewPresized(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 239, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_boundaries, __pyx_v_boundaries) < 0) __PYX_ERR(3, 239, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_angle, __pyx_int_0) < 0) __PYX_ERR(3, 239, __pyx_L1_error)
  __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_2, __pyx_t_1); if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 239, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "../resources_source/python/pygeometry.pxi":241
 *         self.add_edge(x0, (y0)+radius, x0, (y0)-radius, boundaries=boundaries, angle=0)
 * 
 *         if (materials != None):             # <<<<<<<<<<<<<<
 *             self.add_label((x0)+(radius/2.0), y0, materials=materials)
 * 
 */
  __pyx_t_4 = PyObject_RichCompare(__pyx_v_materials, Py_None, Py_NE); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 241, __pyx_L1_error)
  __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_5 < 0)) __PYX_ERR(3, 241, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (__pyx_t_5) {

    /* "../resources_source/python/pygeometry.pxi":242
 * 
 *         if (materials != None):
 *             self.add_label((x0)+(radius/2.0), y0, materials=materials)             # <<<<<<<<<<<<<<
 * 
 *     def nodes_count(self):
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_add_label); if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 242, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_1 = __Pyx_PyFloat_DivideObjC(__pyx_v_radius, __pyx_float_2_0, 2.0, 0, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 242, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = PyNumber_Add(__pyx_v_x0, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 242, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 242, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_2);
    __Pyx_INCREF(__pyx_v_y0);
    __Pyx_GIVEREF(__pyx_v_y0);
    PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_v_y0);
    __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 242, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_materials, __pyx_v_materials) < 0) __PYX_ERR(3, 242, __pyx_L1_error)
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_1, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 242, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "../resources_source/python/pygeometry.pxi":241
 *         self.add_edge(x0, (y0)+radius, x0, (y0)-radius, boundaries=boundaries, angle=0)
 * 
 *         if (materials != None):             # <<<<<<<<<<<<<<
 *             self.add_label((x0)+(radius/2.0), y0, materials=materials)
 * 
 */
  }

  /* "../resources_source/python/pygeometry.pxi":225
 *             self.add_label(x0, y0, materials=materials)
 * 
 *     def add_semicircle(self, x0, y0, radius, boundaries = {}, materials = None):             # <<<<<<<<<<<<<<
 *         """Add semicircle by center point of full circle and radius.
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("_agros.__Geometry__.add_semicircle", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../resources_source/python/pygeometry.pxi":244
 *             self.add_label((x0)+(radius/2.0), y0, materials=materials)
 * 
 *     def nodes_count(self):             # <<<<<<<<<<<<<<
 *         """Return count of existing nodes."""
 *         return self.thisptr.nodesCount()
 */

/* Python wrapper */
static PyObject *__pyx_pw_6_agros_12__Geometry___29nodes_count(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_6_agros_12__Geometry___28nodes_count[] = "Return count of existing nodes.";
static PyObject *__pyx_pw_6_agros_12__Geometry___29nodes_count(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("nodes_count (wrapper)", 0);
  __pyx_r = __pyx_pf_6_agros_12__Geometry___28nodes_count(((struct __pyx_obj_6_agros___Geometry__ *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6_agros_12__Geometry___28nodes_count(struct __pyx_obj_6_agros___Geometry__ *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("nodes_count", 0);

  /* "../resources_source/python/pygeometry.pxi":246
 *     def nodes_count(self):
 *         """Return count of existing nodes."""
 *         return self.thisptr.nodesCount()             # <<<<<<<<<<<<<<
 * 
 *     def edges_count(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->thisptr->nodesCount()); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 246, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../resources_source/python/pygeometry.pxi":244
 *             self.add_label((x0)+(radius/2.0), y0, materials=materials)
 * 
 *     def nodes_count(self):             # <<<<<<<<<<<<<<
 *         """Return count of existing nodes."""
 *         return self.thisptr.nodesCount()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("_agros.__Geometry__.nodes_count", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../resources_source/python/pygeometry.pxi":248
 *         return self.thisptr.nodesCount()
 * 
 *     def edges_count(self):             # <<<<<<<<<<<<<<
 *         """Return count of existing edges."""
 *         return self.thisptr.edgesCount()
 */

/* Python wrapper */
static PyObject *__pyx_pw_6_agros_12__Geometry___31edges_count(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_6_agros_12__Geometry___30edges_count[] = "Return count of existing edges.";
static PyObject *__pyx_pw_6_agros_12__Geometry___31edges_count(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("edges_count (wrapper)", 0);
  __pyx_r = __pyx_pf_6_agros_12__Geometry___30edges_count(((struct __pyx_obj_6_agros___Geometry__ *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6_agros_12__Geometry___30edges_count(struct __pyx_obj_6_agros___Geometry__ *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("edges_count", 0);

  /* "../resources_source/python/pygeometry.pxi":250
 *     def edges_count(self):
 *         """Return count of existing edges."""
 *         return self.thisptr.edgesCount()             # <<<<<<<<<<<<<<
 * 
 *     def labels_count(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->thisptr->edgesCount()); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 250, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../resources_source/python/pygeometry.pxi":248
 *         return self.thisptr.nodesCount()
 * 
 *     def edges_count(self):             # <<<<<<<<<<<<<<
 *         """Return count of existing edges."""
 *         return self.thisptr.edgesCount()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("_agros.__Geometry__.edges_count", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../resources_source/python/pygeometry.pxi":252
 *         return self.thisptr.edgesCount()
 * 
 *     def labels_count(self):             # <<<<<<<<<<<<<<
 *         """Return count of existing labels."""
 *         return self.thisptr.labelsCount()
 */

/* Python wrapper */
static PyObject *__pyx_pw_6_agros_12__Geometry___33labels_count(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_6_agros_12__Geometry___32labels_count[] = "Return count of existing labels.";
static PyObject *__pyx_pw_6_agros_12__Geometry___33labels_count(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("labels_count (wrapper)", 0);
  __pyx_r = __pyx_pf_6_agros_12__Geometry___32labels_count(((struct __pyx_obj_6_agros___Geometry__ *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6_agros_12__Geometry___32labels_count(struct __pyx_obj_6_agros___Geometry__ *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("labels_count", 0);

  /* "../resources_source/python/pygeometry.pxi":254
 *     def labels_count(self):
 *         """Return count of existing labels."""
 *         return self.thisptr.labelsCount()             # <<<<<<<<<<<<<<
 * 
 *     def select_nodes(self, nodes = []):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->thisptr->labelsCount()); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 254, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../resources_source/python/pygeometry.pxi":252
 *         return self.thisptr.edgesCount()
 * 
 *     def labels_count(self):             # <<<<<<<<<<<<<<
 *         """Return count of existing labels."""
 *         return self.thisptr.labelsCount()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("_agros.__Geometry__.labels_count", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../resources_source/python/pygeometry.pxi":256
 *         return self.thisptr.labelsCount()
 * 
 *     def select_nodes(self, nodes = []):             # <<<<<<<<<<<<<<
 *         """Select nodes according to their indexes.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6_agros_12__Geometry___35select_nodes(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6_agros_12__Geometry___34select_nodes[] = "Select nodes according to their indexes.\n\n        select_nodes(nodes = [])\n\n        Keyword arguments:\n        nodes -- list of indexes (default is [] - select all nodes)\n        ";
static PyObject *__pyx_pw_6_agros_12__Geometry___35select_nodes(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_nodes = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("select_nodes (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_nodes,0};
    PyObject* values[1] = {0};
    values[0] = __pyx_k__19;
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_nodes);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "select_nodes") < 0)) __PYX_ERR(3, 256, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_nodes = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("select_nodes", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(3, 256, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("_agros.__Geometry__.select_nodes", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6_agros_12__Geometry___34select_nodes(((struct __pyx_obj_6_agros___Geometry__ *)__pyx_v_self), __pyx_v_nodes);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6_agros_12__Geometry___34select_nodes(struct __pyx_obj_6_agros___Geometry__ *__pyx_v_self, PyObject *__pyx_v_nodes) {
  std::vector<int>  __pyx_v_nodes_vector;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("select_nodes", 0);

  /* "../resources_source/python/pygeometry.pxi":264
 *         nodes -- list of indexes (default is [] - select all nodes)
 *         """
 *         cdef vector[int] nodes_vector = list_to_int_vector(nodes)             # <<<<<<<<<<<<<<
 * 
 *         self.thisptr.selectNodes(nodes_vector)
 */
  __pyx_v_nodes_vector = __pyx_f_6_agros_list_to_int_vector(__pyx_v_nodes);

  /* "../resources_source/python/pygeometry.pxi":266
 *         cdef vector[int] nodes_vector = list_to_int_vector(nodes)
 * 
 *         self.thisptr.selectNodes(nodes_vector)             # <<<<<<<<<<<<<<
 * 
 *     def select_edges(self, edges = []):
 */
  try {
    __pyx_v_self->thisptr->selectNodes(__pyx_v_nodes_vector);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(3, 266, __pyx_L1_error)
  }

  /* "../resources_source/python/pygeometry.pxi":256
 *         return self.thisptr.labelsCount()
 * 
 *     def select_nodes(self, nodes = []):             # <<<<<<<<<<<<<<
 *         """Select nodes according to their indexes.
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("_agros.__Geometry__.select_nodes", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../resources_source/python/pygeometry.pxi":268
 *         self.thisptr.selectNodes(nodes_vector)
 * 
 *     def select_edges(self, edges = []):             # <<<<<<<<<<<<<<
 *         """Select edges according to their indexes.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6_agros_12__Geometry___37select_edges(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6_agros_12__Geometry___36select_edges[] = "Select edges according to their indexes.\n\n        select_edges(edges = [])\n\n        Keyword arguments:\n        edges -- list of indexes (default is []  - select all edges)\n        ";
static PyObject *__pyx_pw_6_agros_12__Geometry___37select_edges(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_edges = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("select_edges (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_edges,0};
    PyObject* values[1] = {0};
    values[0] = __pyx_k__20;
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_edges);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "select_edges") < 0)) __PYX_ERR(3, 268, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_edges = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("select_edges", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(3, 268, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("_agros.__Geometry__.select_edges", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6_agros_12__Geometry___36select_edges(((struct __pyx_obj_6_agros___Geometry__ *)__pyx_v_self), __pyx_v_edges);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6_agros_12__Geometry___36select_edges(struct __pyx_obj_6_agros___Geometry__ *__pyx_v_self, PyObject *__pyx_v_edges) {
  std::vector<int>  __pyx_v_edges_vector;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("select_edges", 0);

  /* "../resources_source/python/pygeometry.pxi":276
 *         edges -- list of indexes (default is []  - select all edges)
 *         """
 *         cdef vector[int] edges_vector = list_to_int_vector(edges)             # <<<<<<<<<<<<<<
 * 
 *         self.thisptr.selectEdges(edges_vector)
 */
  __pyx_v_edges_vector = __pyx_f_6_agros_list_to_int_vector(__pyx_v_edges);

  /* "../resources_source/python/pygeometry.pxi":278
 *         cdef vector[int] edges_vector = list_to_int_vector(edges)
 * 
 *         self.thisptr.selectEdges(edges_vector)             # <<<<<<<<<<<<<<
 * 
 *     def select_labels(self, labels = []):
 */
  try {
    __pyx_v_self->thisptr->selectEdges(__pyx_v_edges_vector);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(3, 278, __pyx_L1_error)
  }

  /* "../resources_source/python/pygeometry.pxi":268
 *         self.thisptr.selectNodes(nodes_vector)
 * 
 *     def select_edges(self, edges = []):             # <<<<<<<<<<<<<<
 *         """Select edges according to their indexes.
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("_agros.__Geometry__.select_edges", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../resources_source/python/pygeometry.pxi":280
 *         self.thisptr.selectEdges(edges_vector)
 * 
 *     def select_labels(self, labels = []):             # <<<<<<<<<<<<<<
 *         """Select labels according to their indexes.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6_agros_12__Geometry___39select_labels(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6_agros_12__Geometry___38select_labels[] = "Select labels according to their indexes.\n\n        select_labels(labels = [])\n\n        Keyword arguments:\n        labels -- list of indexes (default is [] - select all labels)\n        ";
static PyObject *__pyx_pw_6_agros_12__Geometry___39select_labels(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_labels = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("select_labels (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_labels,0};
    PyObject* values[1] = {0};
    values[0] = __pyx_k__21;
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_labels);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "select_labels") < 0)) __PYX_ERR(3, 280, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_labels = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("select_labels", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(3, 280, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("_agros.__Geometry__.select_labels", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6_agros_12__Geometry___38select_labels(((struct __pyx_obj_6_agros___Geometry__ *)__pyx_v_self), __pyx_v_labels);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6_agros_12__Geometry___38select_labels(struct __pyx_obj_6_agros___Geometry__ *__pyx_v_self, PyObject *__pyx_v_labels) {
  std::vector<int>  __pyx_v_labels_vector;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("select_labels", 0);

  /* "../resources_source/python/pygeometry.pxi":288
 *         labels -- list of indexes (default is [] - select all labels)
 *         """
 *         cdef vector[int] labels_vector = list_to_int_vector(labels)             # <<<<<<<<<<<<<<
 * 
 *         self.thisptr.selectLabels(labels_vector)
 */
  __pyx_v_labels_vector = __pyx_f_6_agros_list_to_int_vector(__pyx_v_labels);

  /* "../resources_source/python/pygeometry.pxi":290
 *         cdef vector[int] labels_vector = list_to_int_vector(labels)
 * 
 *         self.thisptr.selectLabels(labels_vector)             # <<<<<<<<<<<<<<
 * 
 *     def select_node_by_point(self, x, y):
 */
  try {
    __pyx_v_self->thisptr->selectLabels(__pyx_v_labels_vector);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(3, 290, __pyx_L1_error)
  }

  /* "../resources_source/python/pygeometry.pxi":280
 *         self.thisptr.selectEdges(edges_vector)
 * 
 *     def select_labels(self, labels = []):             # <<<<<<<<<<<<<<
 *         """Select labels according to their indexes.
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("_agros.__Geometry__.select_labels", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../resources_source/python/pygeometry.pxi":292
 *         self.thisptr.selectLabels(labels_vector)
 * 
 *     def select_node_by_point(self, x, y):             # <<<<<<<<<<<<<<
 *         """Select the closest node around the point.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6_agros_12__Geometry___41select_node_by_point(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6_agros_12__Geometry___40select_node_by_point[] = "Select the closest node around the point.\n\n        select_node_by_point(x, y)\n\n        Keyword arguments:\n        x -- x or r coordinate of point\n        y -- y or r coordinate of point\n        ";
static PyObject *__pyx_pw_6_agros_12__Geometry___41select_node_by_point(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_x = 0;
  PyObject *__pyx_v_y = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("select_node_by_point (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_x,&__pyx_n_s_y,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_x)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_y)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("select_node_by_point", 1, 2, 2, 1); __PYX_ERR(3, 292, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "select_node_by_point") < 0)) __PYX_ERR(3, 292, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_x = values[0];
    __pyx_v_y = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("select_node_by_point", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(3, 292, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("_agros.__Geometry__.select_node_by_point", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6_agros_12__Geometry___40select_node_by_point(((struct __pyx_obj_6_agros___Geometry__ *)__pyx_v_self), __pyx_v_x, __pyx_v_y);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6_agros_12__Geometry___40select_node_by_point(struct __pyx_obj_6_agros___Geometry__ *__pyx_v_self, PyObject *__pyx_v_x, PyObject *__pyx_v_y) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  double __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("select_node_by_point", 0);

  /* "../resources_source/python/pygeometry.pxi":301
 *         y -- y or r coordinate of point
 *         """
 *         self.thisptr.selectNodeByPoint(x, y)             # <<<<<<<<<<<<<<
 * 
 *     def select_edge_by_point(self, x, y):
 */
  __pyx_t_1 = __pyx_PyFloat_AsDouble(__pyx_v_x); if (unlikely((__pyx_t_1 == (double)-1) && PyErr_Occurred())) __PYX_ERR(3, 301, __pyx_L1_error)
  __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_v_y); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(3, 301, __pyx_L1_error)
  try {
    __pyx_v_self->thisptr->selectNodeByPoint(__pyx_t_1, __pyx_t_2);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(3, 301, __pyx_L1_error)
  }

  /* "../resources_source/python/pygeometry.pxi":292
 *         self.thisptr.selectLabels(labels_vector)
 * 
 *     def select_node_by_point(self, x, y):             # <<<<<<<<<<<<<<
 *         """Select the closest node around the point.
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("_agros.__Geometry__.select_node_by_point", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../resources_source/python/pygeometry.pxi":303
 *         self.thisptr.selectNodeByPoint(x, y)
 * 
 *     def select_edge_by_point(self, x, y):             # <<<<<<<<<<<<<<
 *         """Select the closest edge around the point.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6_agros_12__Geometry___43select_edge_by_point(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6_agros_12__Geometry___42select_edge_by_point[] = "Select the closest edge around the point.\n\n        select_edge_by_point(x, y)\n\n        Keyword arguments:\n        x -- x or r coordinate of point\n        y -- y or r coordinate of point\n        ";
static PyObject *__pyx_pw_6_agros_12__Geometry___43select_edge_by_point(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_x = 0;
  PyObject *__pyx_v_y = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("select_edge_by_point (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_x,&__pyx_n_s_y,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_x)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_y)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("select_edge_by_point", 1, 2, 2, 1); __PYX_ERR(3, 303, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "select_edge_by_point") < 0)) __PYX_ERR(3, 303, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_x = values[0];
    __pyx_v_y = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("select_edge_by_point", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(3, 303, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("_agros.__Geometry__.select_edge_by_point", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6_agros_12__Geometry___42select_edge_by_point(((struct __pyx_obj_6_agros___Geometry__ *)__pyx_v_self), __pyx_v_x, __pyx_v_y);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6_agros_12__Geometry___42select_edge_by_point(struct __pyx_obj_6_agros___Geometry__ *__pyx_v_self, PyObject *__pyx_v_x, PyObject *__pyx_v_y) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  double __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("select_edge_by_point", 0);

  /* "../resources_source/python/pygeometry.pxi":312
 *         y -- y or r coordinate of point
 *         """
 *         self.thisptr.selectEdgeByPoint(x, y)             # <<<<<<<<<<<<<<
 * 
 *     def select_label_by_point(self, x, y):
 */
  __pyx_t_1 = __pyx_PyFloat_AsDouble(__pyx_v_x); if (unlikely((__pyx_t_1 == (double)-1) && PyErr_Occurred())) __PYX_ERR(3, 312, __pyx_L1_error)
  __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_v_y); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(3, 312, __pyx_L1_error)
  try {
    __pyx_v_self->thisptr->selectEdgeByPoint(__pyx_t_1, __pyx_t_2);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(3, 312, __pyx_L1_error)
  }

  /* "../resources_source/python/pygeometry.pxi":303
 *         self.thisptr.selectNodeByPoint(x, y)
 * 
 *     def select_edge_by_point(self, x, y):             # <<<<<<<<<<<<<<
 *         """Select the closest edge around the point.
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("_agros.__Geometry__.select_edge_by_point", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../resources_source/python/pygeometry.pxi":314
 *         self.thisptr.selectEdgeByPoint(x, y)
 * 
 *     def select_label_by_point(self, x, y):             # <<<<<<<<<<<<<<
 *         """Select the closest label around the point.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6_agros_12__Geometry___45select_label_by_point(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6_agros_12__Geometry___44select_label_by_point[] = "Select the closest label around the point.\n\n        select_label_by_point(x, y)\n\n        Keyword arguments:\n        x -- x or r coordinate of point\n        y -- y or r coordinate of point\n        ";
static PyObject *__pyx_pw_6_agros_12__Geometry___45select_label_by_point(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_x = 0;
  PyObject *__pyx_v_y = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("select_label_by_point (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_x,&__pyx_n_s_y,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_x)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_y)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("select_label_by_point", 1, 2, 2, 1); __PYX_ERR(3, 314, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "select_label_by_point") < 0)) __PYX_ERR(3, 314, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_x = values[0];
    __pyx_v_y = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("select_label_by_point", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(3, 314, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("_agros.__Geometry__.select_label_by_point", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6_agros_12__Geometry___44select_label_by_point(((struct __pyx_obj_6_agros___Geometry__ *)__pyx_v_self), __pyx_v_x, __pyx_v_y);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6_agros_12__Geometry___44select_label_by_point(struct __pyx_obj_6_agros___Geometry__ *__pyx_v_self, PyObject *__pyx_v_x, PyObject *__pyx_v_y) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  double __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("select_label_by_point", 0);

  /* "../resources_source/python/pygeometry.pxi":323
 *         y -- y or r coordinate of point
 *         """
 *         self.thisptr.selectLabelByPoint(x, y)             # <<<<<<<<<<<<<<
 * 
 *     def move_selection(self, dx, dy, int copy = False, int withMarkers = True):
 */
  __pyx_t_1 = __pyx_PyFloat_AsDouble(__pyx_v_x); if (unlikely((__pyx_t_1 == (double)-1) && PyErr_Occurred())) __PYX_ERR(3, 323, __pyx_L1_error)
  __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_v_y); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(3, 323, __pyx_L1_error)
  try {
    __pyx_v_self->thisptr->selectLabelByPoint(__pyx_t_1, __pyx_t_2);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(3, 323, __pyx_L1_error)
  }

  /* "../resources_source/python/pygeometry.pxi":314
 *         self.thisptr.selectEdgeByPoint(x, y)
 * 
 *     def select_label_by_point(self, x, y):             # <<<<<<<<<<<<<<
 *         """Select the closest label around the point.
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("_agros.__Geometry__.select_label_by_point", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../resources_source/python/pygeometry.pxi":325
 *         self.thisptr.selectLabelByPoint(x, y)
 * 
 *     def move_selection(self, dx, dy, int copy = False, int withMarkers = True):             # <<<<<<<<<<<<<<
 *         """Move selected object (nodes, edges or labels).
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6_agros_12__Geometry___47move_selection(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6_agros_12__Geometry___46move_selection[] = "Move selected object (nodes, edges or labels).\n\n        move_selection(dx, dy, copy = False, withMarkers = True)\n\n        Keyword arguments:\n        dx -- movement in x axis\n        dy -- movement in y axis\n        copy -- make a copy of moved objects (default is False)\n        withMarkers -- copy with materials or boundary conditions (default is True)\n        ";
static PyObject *__pyx_pw_6_agros_12__Geometry___47move_selection(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_dx = 0;
  PyObject *__pyx_v_dy = 0;
  int __pyx_v_copy;
  int __pyx_v_withMarkers;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("move_selection (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_dx,&__pyx_n_s_dy,&__pyx_n_s_copy,&__pyx_n_s_withMarkers,0};
    PyObject* values[4] = {0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_dx)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_dy)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("move_selection", 0, 2, 4, 1); __PYX_ERR(3, 325, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_copy);
          if (value) { values[2] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_withMarkers);
          if (value) { values[3] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "move_selection") < 0)) __PYX_ERR(3, 325, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_dx = values[0];
    __pyx_v_dy = values[1];
    if (values[2]) {
      __pyx_v_copy = __Pyx_PyInt_As_int(values[2]); if (unlikely((__pyx_v_copy == (int)-1) && PyErr_Occurred())) __PYX_ERR(3, 325, __pyx_L3_error)
    } else {
      __pyx_v_copy = ((int)0);
    }
    if (values[3]) {
      __pyx_v_withMarkers = __Pyx_PyInt_As_int(values[3]); if (unlikely((__pyx_v_withMarkers == (int)-1) && PyErr_Occurred())) __PYX_ERR(3, 325, __pyx_L3_error)
    } else {
      __pyx_v_withMarkers = ((int)1);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("move_selection", 0, 2, 4, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(3, 325, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("_agros.__Geometry__.move_selection", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6_agros_12__Geometry___46move_selection(((struct __pyx_obj_6_agros___Geometry__ *)__pyx_v_self), __pyx_v_dx, __pyx_v_dy, __pyx_v_copy, __pyx_v_withMarkers);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6_agros_12__Geometry___46move_selection(struct __pyx_obj_6_agros___Geometry__ *__pyx_v_self, PyObject *__pyx_v_dx, PyObject *__pyx_v_dy, int __pyx_v_copy, int __pyx_v_withMarkers) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  double __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("move_selection", 0);

  /* "../resources_source/python/pygeometry.pxi":336
 *         withMarkers -- copy with materials or boundary conditions (default is True)
 *         """
 *         self.thisptr.moveSelection(dx, dy, int(copy), int(withMarkers))             # <<<<<<<<<<<<<<
 * 
 *     def rotate_selection(self, x, y, angle, copy = False, int withMarkers = True):
 */
  __pyx_t_1 = __pyx_PyFloat_AsDouble(__pyx_v_dx); if (unlikely((__pyx_t_1 == (double)-1) && PyErr_Occurred())) __PYX_ERR(3, 336, __pyx_L1_error)
  __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_v_dy); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(3, 336, __pyx_L1_error)
  __pyx_v_self->thisptr->moveSelection(__pyx_t_1, __pyx_t_2, ((bool)__pyx_v_copy), ((bool)__pyx_v_withMarkers));

  /* "../resources_source/python/pygeometry.pxi":325
 *         self.thisptr.selectLabelByPoint(x, y)
 * 
 *     def move_selection(self, dx, dy, int copy = False, int withMarkers = True):             # <<<<<<<<<<<<<<
 *         """Move selected object (nodes, edges or labels).
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("_agros.__Geometry__.move_selection", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../resources_source/python/pygeometry.pxi":338
 *         self.thisptr.moveSelection(dx, dy, int(copy), int(withMarkers))
 * 
 *     def rotate_selection(self, x, y, angle, copy = False, int withMarkers = True):             # <<<<<<<<<<<<<<
 *         """Rotate selected object (nodes, edges or labels) around the point.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6_agros_12__Geometry___49rotate_selection(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6_agros_12__Geometry___48rotate_selection[] = "Rotate selected object (nodes, edges or labels) around the point.\n\n        rotate_selection(x, y, angle, copy = False, withMarkers = True)\n\n        Keyword arguments:\n        x -- x or r coordinate of point\n        y -- y or r coordinate of point\n        angle -- angle of rotation\n        copy -- make a copy of moved objects (default is False)\n        withMarkers -- copy with materials or boundary conditions (default is True)\n        ";
static PyObject *__pyx_pw_6_agros_12__Geometry___49rotate_selection(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_x = 0;
  PyObject *__pyx_v_y = 0;
  PyObject *__pyx_v_angle = 0;
  PyObject *__pyx_v_copy = 0;
  int __pyx_v_withMarkers;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("rotate_selection (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_x,&__pyx_n_s_y,&__pyx_n_s_angle,&__pyx_n_s_copy,&__pyx_n_s_withMarkers,0};
    PyObject* values[5] = {0,0,0,0,0};
    values[3] = ((PyObject *)Py_False);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_x)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_y)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("rotate_selection", 0, 3, 5, 1); __PYX_ERR(3, 338, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_angle)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("rotate_selection", 0, 3, 5, 2); __PYX_ERR(3, 338, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_copy);
          if (value) { values[3] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_withMarkers);
          if (value) { values[4] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "rotate_selection") < 0)) __PYX_ERR(3, 338, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_x = values[0];
    __pyx_v_y = values[1];
    __pyx_v_angle = values[2];
    __pyx_v_copy = values[3];
    if (values[4]) {
      __pyx_v_withMarkers = __Pyx_PyInt_As_int(values[4]); if (unlikely((__pyx_v_withMarkers == (int)-1) && PyErr_Occurred())) __PYX_ERR(3, 338, __pyx_L3_error)
    } else {
      __pyx_v_withMarkers = ((int)1);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("rotate_selection", 0, 3, 5, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(3, 338, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("_agros.__Geometry__.rotate_selection", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6_agros_12__Geometry___48rotate_selection(((struct __pyx_obj_6_agros___Geometry__ *)__pyx_v_self), __pyx_v_x, __pyx_v_y, __pyx_v_angle, __pyx_v_copy, __pyx_v_withMarkers);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6_agros_12__Geometry___48rotate_selection(struct __pyx_obj_6_agros___Geometry__ *__pyx_v_self, PyObject *__pyx_v_x, PyObject *__pyx_v_y, PyObject *__pyx_v_angle, PyObject *__pyx_v_copy, int __pyx_v_withMarkers) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  double __pyx_t_2;
  double __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  bool __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("rotate_selection", 0);

  /* "../resources_source/python/pygeometry.pxi":350
 *         withMarkers -- copy with materials or boundary conditions (default is True)
 *         """
 *         self.thisptr.rotateSelection(x, y, angle, int(copy), int(withMarkers))             # <<<<<<<<<<<<<<
 * 
 *     def scale_selection(self, x, y, scale, copy = False, int withMarkers = True):
 */
  __pyx_t_1 = __pyx_PyFloat_AsDouble(__pyx_v_x); if (unlikely((__pyx_t_1 == (double)-1) && PyErr_Occurred())) __PYX_ERR(3, 350, __pyx_L1_error)
  __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_v_y); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(3, 350, __pyx_L1_error)
  __pyx_t_3 = __pyx_PyFloat_AsDouble(__pyx_v_angle); if (unlikely((__pyx_t_3 == (double)-1) && PyErr_Occurred())) __PYX_ERR(3, 350, __pyx_L1_error)
  __pyx_t_4 = __Pyx_PyNumber_Int(__pyx_v_copy); if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 350, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely((__pyx_t_5 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(3, 350, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_v_self->thisptr->rotateSelection(__pyx_t_1, __pyx_t_2, __pyx_t_3, __pyx_t_5, ((bool)__pyx_v_withMarkers));

  /* "../resources_source/python/pygeometry.pxi":338
 *         self.thisptr.moveSelection(dx, dy, int(copy), int(withMarkers))
 * 
 *     def rotate_selection(self, x, y, angle, copy = False, int withMarkers = True):             # <<<<<<<<<<<<<<
 *         """Rotate selected object (nodes, edges or labels) around the point.
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("_agros.__Geometry__.rotate_selection", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../resources_source/python/pygeometry.pxi":352
 *         self.thisptr.rotateSelection(x, y, angle, int(copy), int(withMarkers))
 * 
 *     def scale_selection(self, x, y, scale, copy = False, int withMarkers = True):             # <<<<<<<<<<<<<<
 *         """Scale selected object (nodes, edges or labels).
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6_agros_12__Geometry___51scale_selection(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6_agros_12__Geometry___50scale_selection[] = "Scale selected object (nodes, edges or labels).\n\n        scale_selection(x, y, scale, copy = False, withMarkers = True)\n\n        Keyword arguments:\n        x -- x or r coordinate of point\n        y -- y or r coordinate of point\n        scale -- scale factor\n        copy -- make a copy of moved objects (default is False)\n        withMarkers -- copy with materials or boundary conditions (default is True)\n        ";
static PyObject *__pyx_pw_6_agros_12__Geometry___51scale_selection(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_x = 0;
  PyObject *__pyx_v_y = 0;
  PyObject *__pyx_v_scale = 0;
  PyObject *__pyx_v_copy = 0;
  int __pyx_v_withMarkers;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("scale_selection (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_x,&__pyx_n_s_y,&__pyx_n_s_scale,&__pyx_n_s_copy,&__pyx_n_s_withMarkers,0};
    PyObject* values[5] = {0,0,0,0,0};
    values[3] = ((PyObject *)Py_False);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_x)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_y)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("scale_selection", 0, 3, 5, 1); __PYX_ERR(3, 352, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_scale)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("scale_selection", 0, 3, 5, 2); __PYX_ERR(3, 352, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_copy);
          if (value) { values[3] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_withMarkers);
          if (value) { values[4] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "scale_selection") < 0)) __PYX_ERR(3, 352, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_x = values[0];
    __pyx_v_y = values[1];
    __pyx_v_scale = values[2];
    __pyx_v_copy = values[3];
    if (values[4]) {
      __pyx_v_withMarkers = __Pyx_PyInt_As_int(values[4]); if (unlikely((__pyx_v_withMarkers == (int)-1) && PyErr_Occurred())) __PYX_ERR(3, 352, __pyx_L3_error)
    } else {
      __pyx_v_withMarkers = ((int)1);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("scale_selection", 0, 3, 5, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(3, 352, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("_agros.__Geometry__.scale_selection", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6_agros_12__Geometry___50scale_selection(((struct __pyx_obj_6_agros___Geometry__ *)__pyx_v_self), __pyx_v_x, __pyx_v_y, __pyx_v_scale, __pyx_v_copy, __pyx_v_withMarkers);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6_agros_12__Geometry___50scale_selection(struct __pyx_obj_6_agros___Geometry__ *__pyx_v_self, PyObject *__pyx_v_x, PyObject *__pyx_v_y, PyObject *__pyx_v_scale, PyObject *__pyx_v_copy, int __pyx_v_withMarkers) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  double __pyx_t_2;
  double __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  bool __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("scale_selection", 0);

  /* "../resources_source/python/pygeometry.pxi":364
 *         withMarkers -- copy with materials or boundary conditions (default is True)
 *         """
 *         self.thisptr.scaleSelection(x, y, scale, int(copy), int(withMarkers))             # <<<<<<<<<<<<<<
 * 
 *     def remove_selection(self):
 */
  __pyx_t_1 = __pyx_PyFloat_AsDouble(__pyx_v_x); if (unlikely((__pyx_t_1 == (double)-1) && PyErr_Occurred())) __PYX_ERR(3, 364, __pyx_L1_error)
  __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_v_y); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(3, 364, __pyx_L1_error)
  __pyx_t_3 = __pyx_PyFloat_AsDouble(__pyx_v_scale); if (unlikely((__pyx_t_3 == (double)-1) && PyErr_Occurred())) __PYX_ERR(3, 364, __pyx_L1_error)
  __pyx_t_4 = __Pyx_PyNumber_Int(__pyx_v_copy); if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 364, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely((__pyx_t_5 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(3, 364, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_v_self->thisptr->scaleSelection(__pyx_t_1, __pyx_t_2, __pyx_t_3, __pyx_t_5, ((bool)__pyx_v_withMarkers));

  /* "../resources_source/python/pygeometry.pxi":352
 *         self.thisptr.rotateSelection(x, y, angle, int(copy), int(withMarkers))
 * 
 *     def scale_selection(self, x, y, scale, copy = False, int withMarkers = True):             # <<<<<<<<<<<<<<
 *         """Scale selected object (nodes, edges or labels).
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("_agros.__Geometry__.scale_selection", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../resources_source/python/pygeometry.pxi":366
 *         self.thisptr.scaleSelection(x, y, scale, int(copy), int(withMarkers))
 * 
 *     def remove_selection(self):             # <<<<<<<<<<<<<<
 *         """Remove selected objects (nodes, edges or labels)."""
 *         self.thisptr.removeSelection()
 */

/* Python wrapper */
static PyObject *__pyx_pw_6_agros_12__Geometry___53remove_selection(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_6_agros_12__Geometry___52remove_selection[] = "Remove selected objects (nodes, edges or labels).";
static PyObject *__pyx_pw_6_agros_12__Geometry___53remove_selection(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("remove_selection (wrapper)", 0);
  __pyx_r = __pyx_pf_6_agros_12__Geometry___52remove_selection(((struct __pyx_obj_6_agros___Geometry__ *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6_agros_12__Geometry___52remove_selection(struct __pyx_obj_6_agros___Geometry__ *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("remove_selection", 0);

  /* "../resources_source/python/pygeometry.pxi":368
 *     def remove_selection(self):
 *         """Remove selected objects (nodes, edges or labels)."""
 *         self.thisptr.removeSelection()             # <<<<<<<<<<<<<<
 * 
 *     def select_none(self):
 */
  __pyx_v_self->thisptr->removeSelection();

  /* "../resources_source/python/pygeometry.pxi":366
 *         self.thisptr.scaleSelection(x, y, scale, int(copy), int(withMarkers))
 * 
 *     def remove_selection(self):             # <<<<<<<<<<<<<<
 *         """Remove selected objects (nodes, edges or labels)."""
 *         self.thisptr.removeSelection()
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../resources_source/python/pygeometry.pxi":370
 *         self.thisptr.removeSelection()
 * 
 *     def select_none(self):             # <<<<<<<<<<<<<<
 *         """Unselect all objects (nodes, edges or labels)."""
 *         self.thisptr.selectNone()
 */

/* Python wrapper */
static PyObject *__pyx_pw_6_agros_12__Geometry___55select_none(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_6_agros_12__Geometry___54select_none[] = "Unselect all objects (nodes, edges or labels).";
static PyObject *__pyx_pw_6_agros_12__Geometry___55select_none(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("select_none (wrapper)", 0);
  __pyx_r = __pyx_pf_6_agros_12__Geometry___54select_none(((struct __pyx_obj_6_agros___Geometry__ *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6_agros_12__Geometry___54select_none(struct __pyx_obj_6_agros___Geometry__ *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("select_none", 0);

  /* "../resources_source/python/pygeometry.pxi":372
 *     def select_none(self):
 *         """Unselect all objects (nodes, edges or labels)."""
 *         self.thisptr.selectNone()             # <<<<<<<<<<<<<<
 * 
 *     def export_vtk(self, filename):
 */
  __pyx_v_self->thisptr->selectNone();

  /* "../resources_source/python/pygeometry.pxi":370
 *         self.thisptr.removeSelection()
 * 
 *     def select_none(self):             # <<<<<<<<<<<<<<
 *         """Unselect all objects (nodes, edges or labels)."""
 *         self.thisptr.selectNone()
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../resources_source/python/pygeometry.pxi":374
 *         self.thisptr.selectNone()
 * 
 *     def export_vtk(self, filename):             # <<<<<<<<<<<<<<
 *         """Export geometry in VTK format."""
 *         self.thisptr.exportVTK(filename.encode())
 */

/* Python wrapper */
static PyObject *__pyx_pw_6_agros_12__Geometry___57export_vtk(PyObject *__pyx_v_self, PyObject *__pyx_v_filename); /*proto*/
static char __pyx_doc_6_agros_12__Geometry___56export_vtk[] = "Export geometry in VTK format.";
static PyObject *__pyx_pw_6_agros_12__Geometry___57export_vtk(PyObject *__pyx_v_self, PyObject *__pyx_v_filename) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("export_vtk (wrapper)", 0);
  __pyx_r = __pyx_pf_6_agros_12__Geometry___56export_vtk(((struct __pyx_obj_6_agros___Geometry__ *)__pyx_v_self), ((PyObject *)__pyx_v_filename));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6_agros_12__Geometry___56export_vtk(struct __pyx_obj_6_agros___Geometry__ *__pyx_v_self, PyObject *__pyx_v_filename) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  std::string __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("export_vtk", 0);

  /* "../resources_source/python/pygeometry.pxi":376
 *     def export_vtk(self, filename):
 *         """Export geometry in VTK format."""
 *         self.thisptr.exportVTK(filename.encode())             # <<<<<<<<<<<<<<
 * 
 *     def export_svg(self, filename):
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_filename, __pyx_n_s_encode); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 376, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 376, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = __pyx_convert_string_from_py_std__in_string(__pyx_t_1); if (unlikely(PyErr_Occurred())) __PYX_ERR(3, 376, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_self->thisptr->exportVTK(__pyx_t_4);

  /* "../resources_source/python/pygeometry.pxi":374
 *         self.thisptr.selectNone()
 * 
 *     def export_vtk(self, filename):             # <<<<<<<<<<<<<<
 *         """Export geometry in VTK format."""
 *         self.thisptr.exportVTK(filename.encode())
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("_agros.__Geometry__.export_vtk", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../resources_source/python/pygeometry.pxi":378
 *         self.thisptr.exportVTK(filename.encode())
 * 
 *     def export_svg(self, filename):             # <<<<<<<<<<<<<<
 *         """Export geometry in SVG format."""
 *         self.thisptr.exportSVG(filename.encode())
 */

/* Python wrapper */
static PyObject *__pyx_pw_6_agros_12__Geometry___59export_svg(PyObject *__pyx_v_self, PyObject *__pyx_v_filename); /*proto*/
static char __pyx_doc_6_agros_12__Geometry___58export_svg[] = "Export geometry in SVG format.";
static PyObject *__pyx_pw_6_agros_12__Geometry___59export_svg(PyObject *__pyx_v_self, PyObject *__pyx_v_filename) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("export_svg (wrapper)", 0);
  __pyx_r = __pyx_pf_6_agros_12__Geometry___58export_svg(((struct __pyx_obj_6_agros___Geometry__ *)__pyx_v_self), ((PyObject *)__pyx_v_filename));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6_agros_12__Geometry___58export_svg(struct __pyx_obj_6_agros___Geometry__ *__pyx_v_self, PyObject *__pyx_v_filename) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  std::string __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("export_svg", 0);

  /* "../resources_source/python/pygeometry.pxi":380
 *     def export_svg(self, filename):
 *         """Export geometry in SVG format."""
 *         self.thisptr.exportSVG(filename.encode())             # <<<<<<<<<<<<<<
 * 
 *     def export_svg_image(self):
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_filename, __pyx_n_s_encode); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 380, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 380, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = __pyx_convert_string_from_py_std__in_string(__pyx_t_1); if (unlikely(PyErr_Occurred())) __PYX_ERR(3, 380, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_self->thisptr->exportSVG(__pyx_t_4);

  /* "../resources_source/python/pygeometry.pxi":378
 *         self.thisptr.exportVTK(filename.encode())
 * 
 *     def export_svg(self, filename):             # <<<<<<<<<<<<<<
 *         """Export geometry in SVG format."""
 *         self.thisptr.exportSVG(filename.encode())
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("_agros.__Geometry__.export_svg", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../resources_source/python/pygeometry.pxi":382
 *         self.thisptr.exportSVG(filename.encode())
 * 
 *     def export_svg_image(self):             # <<<<<<<<<<<<<<
 *         """Export geometry in SVG format."""
 *         return self.thisptr.exportSVG().decode()
 */

/* Python wrapper */
static PyObject *__pyx_pw_6_agros_12__Geometry___61export_svg_image(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_6_agros_12__Geometry___60export_svg_image[] = "Export geometry in SVG format.";
static PyObject *__pyx_pw_6_agros_12__Geometry___61export_svg_image(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("export_svg_image (wrapper)", 0);
  __pyx_r = __pyx_pf_6_agros_12__Geometry___60export_svg_image(((struct __pyx_obj_6_agros___Geometry__ *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6_agros_12__Geometry___60export_svg_image(struct __pyx_obj_6_agros___Geometry__ *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("export_svg_image", 0);

  /* "../resources_source/python/pygeometry.pxi":384
 *     def export_svg_image(self):
 *         """Export geometry in SVG format."""
 *         return self.thisptr.exportSVG().decode()             # <<<<<<<<<<<<<<
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_decode_cpp_string(__pyx_v_self->thisptr->exportSVG(), 0, PY_SSIZE_T_MAX, NULL, NULL, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 384, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../resources_source/python/pygeometry.pxi":382
 *         self.thisptr.exportSVG(filename.encode())
 * 
 *     def export_svg_image(self):             # <<<<<<<<<<<<<<
 *         """Export geometry in SVG format."""
 *         return self.thisptr.exportSVG().decode()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("_agros.__Geometry__.export_svg_image", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_6_agros_12__Geometry___63__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_6_agros_12__Geometry___63__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6_agros_12__Geometry___62__reduce_cython__(((struct __pyx_obj_6_agros___Geometry__ *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6_agros_12__Geometry___62__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_6_agros___Geometry__ *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__22, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(2, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("_agros.__Geometry__.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw_6_agros_12__Geometry___65__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_6_agros_12__Geometry___65__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6_agros_12__Geometry___64__setstate_cython__(((struct __pyx_obj_6_agros___Geometry__ *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6_agros_12__Geometry___64__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_6_agros___Geometry__ *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__23, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(2, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("_agros.__Geometry__.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../resources_source/python/pyfield.pxi":88
 *         void addRecipeLocalValue(string &name, string &variable, string &component, double px, double py, int timeStep, int adaptivityStep) except +
 * 
 * cdef map[string, string] get_parameters_map(parameters):             # <<<<<<<<<<<<<<
 *     cdef map[string, string] parameters_map
 *     cdef pair[string, string] parameter
 */

static std::map<std::string,std::string>  __pyx_f_6_agros_get_parameters_map(PyObject *__pyx_v_parameters) {
  std::map<std::string,std::string>  __pyx_v_parameters_map;
  std::pair<std::string,std::string>  __pyx_v_parameter;
  PyObject *__pyx_v_key = NULL;
  PyObject *__pyx_v_val = NULL;
  std::map<std::string,std::string>  __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *(*__pyx_t_3)(PyObject *);
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  int __pyx_t_6;
  int __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  std::string __pyx_t_10;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_parameters_map", 0);

  /* "../resources_source/python/pyfield.pxi":92
 *     cdef pair[string, string] parameter
 * 
 *     for key in parameters:             # <<<<<<<<<<<<<<
 *         val = None
 *         if (isinstance(parameters[key], dict) and
 */
  if (likely(PyList_CheckExact(__pyx_v_parameters)) || PyTuple_CheckExact(__pyx_v_parameters)) {
    __pyx_t_1 = __pyx_v_parameters; __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
    __pyx_t_3 = NULL;
  } else {
    __pyx_t_2 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_v_parameters); if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 92, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_3)) __PYX_ERR(4, 92, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_3)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(4, 92, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(4, 92, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      } else {
        if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(4, 92, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(4, 92, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      }
    } else {
      __pyx_t_4 = __pyx_t_3(__pyx_t_1);
      if (unlikely(!__pyx_t_4)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(4, 92, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_4);
    }
    __Pyx_XDECREF_SET(__pyx_v_key, __pyx_t_4);
    __pyx_t_4 = 0;

    /* "../resources_source/python/pyfield.pxi":93
 * 
 *     for key in parameters:
 *         val = None             # <<<<<<<<<<<<<<
 *         if (isinstance(parameters[key], dict) and
 *             "value" in parameters[key]):
 */
    __Pyx_INCREF(Py_None);
    __Pyx_XDECREF_SET(__pyx_v_val, Py_None);

    /* "../resources_source/python/pyfield.pxi":94
 *     for key in parameters:
 *         val = None
 *         if (isinstance(parameters[key], dict) and             # <<<<<<<<<<<<<<
 *             "value" in parameters[key]):
 *             val = str(parameters[key]["value"])
 */
    __pyx_t_4 = __Pyx_PyObject_GetItem(__pyx_v_parameters, __pyx_v_key); if (unlikely(!__pyx_t_4)) __PYX_ERR(4, 94, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_6 = PyDict_Check(__pyx_t_4); 
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_7 = (__pyx_t_6 != 0);
    if (__pyx_t_7) {
    } else {
      __pyx_t_5 = __pyx_t_7;
      goto __pyx_L6_bool_binop_done;
    }

    /* "../resources_source/python/pyfield.pxi":95
 *         val = None
 *         if (isinstance(parameters[key], dict) and
 *             "value" in parameters[key]):             # <<<<<<<<<<<<<<
 *             val = str(parameters[key]["value"])
 *         else:
 */
    __pyx_t_4 = __Pyx_PyObject_GetItem(__pyx_v_parameters, __pyx_v_key); if (unlikely(!__pyx_t_4)) __PYX_ERR(4, 95, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_7 = (__Pyx_PySequence_ContainsTF(__pyx_n_s_value, __pyx_t_4, Py_EQ)); if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(4, 95, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_6 = (__pyx_t_7 != 0);
    __pyx_t_5 = __pyx_t_6;
    __pyx_L6_bool_binop_done:;

    /* "../resources_source/python/pyfield.pxi":94
 *     for key in parameters:
 *         val = None
 *         if (isinstance(parameters[key], dict) and             # <<<<<<<<<<<<<<
 *             "value" in parameters[key]):
 *             val = str(parameters[key]["value"])
 */
    if (__pyx_t_5) {

      /* "../resources_source/python/pyfield.pxi":96
 *         if (isinstance(parameters[key], dict) and
 *             "value" in parameters[key]):
 *             val = str(parameters[key]["value"])             # <<<<<<<<<<<<<<
 *         else:
 *             val = str(parameters[key])
 */
      __pyx_t_4 = __Pyx_PyObject_GetItem(__pyx_v_parameters, __pyx_v_key); if (unlikely(!__pyx_t_4)) __PYX_ERR(4, 96, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_8 = __Pyx_PyObject_Dict_GetItem(__pyx_t_4, __pyx_n_s_value); if (unlikely(!__pyx_t_8)) __PYX_ERR(4, 96, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_4 = __Pyx_PyObject_CallOneArg(((PyObject *)(&PyString_Type)), __pyx_t_8); if (unlikely(!__pyx_t_4)) __PYX_ERR(4, 96, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_DECREF_SET(__pyx_v_val, __pyx_t_4);
      __pyx_t_4 = 0;

      /* "../resources_source/python/pyfield.pxi":94
 *     for key in parameters:
 *         val = None
 *         if (isinstance(parameters[key], dict) and             # <<<<<<<<<<<<<<
 *             "value" in parameters[key]):
 *             val = str(parameters[key]["value"])
 */
      goto __pyx_L5;
    }

    /* "../resources_source/python/pyfield.pxi":98
 *             val = str(parameters[key]["value"])
 *         else:
 *             val = str(parameters[key])             # <<<<<<<<<<<<<<
 * 
 *         parameter.first = key.encode()
 */
    /*else*/ {
      __pyx_t_4 = __Pyx_PyObject_GetItem(__pyx_v_parameters, __pyx_v_key); if (unlikely(!__pyx_t_4)) __PYX_ERR(4, 98, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_8 = __Pyx_PyObject_CallOneArg(((PyObject *)(&PyString_Type)), __pyx_t_4); if (unlikely(!__pyx_t_8)) __PYX_ERR(4, 98, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_DECREF_SET(__pyx_v_val, __pyx_t_8);
      __pyx_t_8 = 0;
    }
    __pyx_L5:;

    /* "../resources_source/python/pyfield.pxi":100
 *             val = str(parameters[key])
 * 
 *         parameter.first = key.encode()             # <<<<<<<<<<<<<<
 *         parameter.second = val.encode()
 *         parameters_map.insert(parameter)
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_key, __pyx_n_s_encode); if (unlikely(!__pyx_t_4)) __PYX_ERR(4, 100, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_9 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_9)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_9);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    __pyx_t_8 = (__pyx_t_9) ? __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_9) : __Pyx_PyObject_CallNoArg(__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
    if (unlikely(!__pyx_t_8)) __PYX_ERR(4, 100, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_10 = __pyx_convert_string_from_py_std__in_string(__pyx_t_8); if (unlikely(PyErr_Occurred())) __PYX_ERR(4, 100, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __pyx_v_parameter.first = __pyx_t_10;

    /* "../resources_source/python/pyfield.pxi":101
 * 
 *         parameter.first = key.encode()
 *         parameter.second = val.encode()             # <<<<<<<<<<<<<<
 *         parameters_map.insert(parameter)
 * 
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_val, __pyx_n_s_encode); if (unlikely(!__pyx_t_4)) __PYX_ERR(4, 101, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_9 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_9)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_9);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    __pyx_t_8 = (__pyx_t_9) ? __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_9) : __Pyx_PyObject_CallNoArg(__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
    if (unlikely(!__pyx_t_8)) __PYX_ERR(4, 101, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_10 = __pyx_convert_string_from_py_std__in_string(__pyx_t_8); if (unlikely(PyErr_Occurred())) __PYX_ERR(4, 101, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __pyx_v_parameter.second = __pyx_t_10;

    /* "../resources_source/python/pyfield.pxi":102
 *         parameter.first = key.encode()
 *         parameter.second = val.encode()
 *         parameters_map.insert(parameter)             # <<<<<<<<<<<<<<
 * 
 *     return parameters_map
 */
    try {
      __pyx_v_parameters_map.insert(__pyx_v_parameter);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(4, 102, __pyx_L1_error)
    }

    /* "../resources_source/python/pyfield.pxi":92
 *     cdef pair[string, string] parameter
 * 
 *     for key in parameters:             # <<<<<<<<<<<<<<
 *         val = None
 *         if (isinstance(parameters[key], dict) and
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "../resources_source/python/pyfield.pxi":104
 *         parameters_map.insert(parameter)
 * 
 *     return parameters_map             # <<<<<<<<<<<<<<
 * 
 * cdef map[string, string] get_expression_map(parameters):
 */
  __pyx_r = __pyx_v_parameters_map;
  goto __pyx_L0;

  /* "../resources_source/python/pyfield.pxi":88
 *         void addRecipeLocalValue(string &name, string &variable, string &component, double px, double py, int timeStep, int adaptivityStep) except +
 * 
 * cdef map[string, string] get_parameters_map(parameters):             # <<<<<<<<<<<<<<
 *     cdef map[string, string] parameters_map
 *     cdef pair[string, string] parameter
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_WriteUnraisable("_agros.get_parameters_map", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __Pyx_pretend_to_initialize(&__pyx_r);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_key);
  __Pyx_XDECREF(__pyx_v_val);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../resources_source/python/pyfield.pxi":106
 *     return parameters_map
 * 
 * cdef map[string, string] get_expression_map(parameters):             # <<<<<<<<<<<<<<
 *     cdef map[string, string] expression_map
 *     cdef pair[string, string] expression
 */

static std::map<std::string,std::string>  __pyx_f_6_agros_get_expression_map(PyObject *__pyx_v_parameters) {
  std::map<std::string,std::string>  __pyx_v_expression_map;
  std::pair<std::string,std::string>  __pyx_v_expression;
  PyObject *__pyx_v_key = NULL;
  std::map<std::string,std::string>  __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *(*__pyx_t_3)(PyObject *);
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  int __pyx_t_6;
  int __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  std::string __pyx_t_10;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_expression_map", 0);

  /* "../resources_source/python/pyfield.pxi":110
 *     cdef pair[string, string] expression
 * 
 *     for key in parameters:             # <<<<<<<<<<<<<<
 *         if (isinstance(parameters[key], dict) and
 *             "expression" in parameters[key]):
 */
  if (likely(PyList_CheckExact(__pyx_v_parameters)) || PyTuple_CheckExact(__pyx_v_parameters)) {
    __pyx_t_1 = __pyx_v_parameters; __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
    __pyx_t_3 = NULL;
  } else {
    __pyx_t_2 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_v_parameters); if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 110, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_3)) __PYX_ERR(4, 110, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_3)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(4, 110, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(4, 110, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      } else {
        if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(4, 110, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(4, 110, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      }
    } else {
      __pyx_t_4 = __pyx_t_3(__pyx_t_1);
      if (unlikely(!__pyx_t_4)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(4, 110, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_4);
    }
    __Pyx_XDECREF_SET(__pyx_v_key, __pyx_t_4);
    __pyx_t_4 = 0;

    /* "../resources_source/python/pyfield.pxi":111
 * 
 *     for key in parameters:
 *         if (isinstance(parameters[key], dict) and             # <<<<<<<<<<<<<<
 *             "expression" in parameters[key]):
 *             expression.first = key.encode()
 */
    __pyx_t_4 = __Pyx_PyObject_GetItem(__pyx_v_parameters, __pyx_v_key); if (unlikely(!__pyx_t_4)) __PYX_ERR(4, 111, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_6 = PyDict_Check(__pyx_t_4); 
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_7 = (__pyx_t_6 != 0);
    if (__pyx_t_7) {
    } else {
      __pyx_t_5 = __pyx_t_7;
      goto __pyx_L6_bool_binop_done;
    }

    /* "../resources_source/python/pyfield.pxi":112
 *     for key in parameters:
 *         if (isinstance(parameters[key], dict) and
 *             "expression" in parameters[key]):             # <<<<<<<<<<<<<<
 *             expression.first = key.encode()
 *             expression.second = parameters[key]["expression"].encode()
 */
    __pyx_t_4 = __Pyx_PyObject_GetItem(__pyx_v_parameters, __pyx_v_key); if (unlikely(!__pyx_t_4)) __PYX_ERR(4, 112, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_7 = (__Pyx_PySequence_ContainsTF(__pyx_n_s_expression, __pyx_t_4, Py_EQ)); if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(4, 112, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_6 = (__pyx_t_7 != 0);
    __pyx_t_5 = __pyx_t_6;
    __pyx_L6_bool_binop_done:;

    /* "../resources_source/python/pyfield.pxi":111
 * 
 *     for key in parameters:
 *         if (isinstance(parameters[key], dict) and             # <<<<<<<<<<<<<<
 *             "expression" in parameters[key]):
 *             expression.first = key.encode()
 */
    if (__pyx_t_5) {

      /* "../resources_source/python/pyfield.pxi":113
 *         if (isinstance(parameters[key], dict) and
 *             "expression" in parameters[key]):
 *             expression.first = key.encode()             # <<<<<<<<<<<<<<
 *             expression.second = parameters[key]["expression"].encode()
 *             expression_map.insert(expression)
 */
      __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_v_key, __pyx_n_s_encode); if (unlikely(!__pyx_t_8)) __PYX_ERR(4, 113, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __pyx_t_9 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_8))) {
        __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_8);
        if (likely(__pyx_t_9)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
          __Pyx_INCREF(__pyx_t_9);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_8, function);
        }
      }
      __pyx_t_4 = (__pyx_t_9) ? __Pyx_PyObject_CallOneArg(__pyx_t_8, __pyx_t_9) : __Pyx_PyObject_CallNoArg(__pyx_t_8);
      __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
      if (unlikely(!__pyx_t_4)) __PYX_ERR(4, 113, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __pyx_t_10 = __pyx_convert_string_from_py_std__in_string(__pyx_t_4); if (unlikely(PyErr_Occurred())) __PYX_ERR(4, 113, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_v_expression.first = __pyx_t_10;

      /* "../resources_source/python/pyfield.pxi":114
 *             "expression" in parameters[key]):
 *             expression.first = key.encode()
 *             expression.second = parameters[key]["expression"].encode()             # <<<<<<<<<<<<<<
 *             expression_map.insert(expression)
 * 
 */
      __pyx_t_8 = __Pyx_PyObject_GetItem(__pyx_v_parameters, __pyx_v_key); if (unlikely(!__pyx_t_8)) __PYX_ERR(4, 114, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __pyx_t_9 = __Pyx_PyObject_Dict_GetItem(__pyx_t_8, __pyx_n_s_expression); if (unlikely(!__pyx_t_9)) __PYX_ERR(4, 114, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_9, __pyx_n_s_encode); if (unlikely(!__pyx_t_8)) __PYX_ERR(4, 114, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __pyx_t_9 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_8))) {
        __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_8);
        if (likely(__pyx_t_9)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
          __Pyx_INCREF(__pyx_t_9);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_8, function);
        }
      }
      __pyx_t_4 = (__pyx_t_9) ? __Pyx_PyObject_CallOneArg(__pyx_t_8, __pyx_t_9) : __Pyx_PyObject_CallNoArg(__pyx_t_8);
      __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
      if (unlikely(!__pyx_t_4)) __PYX_ERR(4, 114, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __pyx_t_10 = __pyx_convert_string_from_py_std__in_string(__pyx_t_4); if (unlikely(PyErr_Occurred())) __PYX_ERR(4, 114, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_v_expression.second = __pyx_t_10;

      /* "../resources_source/python/pyfield.pxi":115
 *             expression.first = key.encode()
 *             expression.second = parameters[key]["expression"].encode()
 *             expression_map.insert(expression)             # <<<<<<<<<<<<<<
 * 
 *     return expression_map
 */
      try {
        __pyx_v_expression_map.insert(__pyx_v_expression);
      } catch(...) {
        __Pyx_CppExn2PyErr();
        __PYX_ERR(4, 115, __pyx_L1_error)
      }

      /* "../resources_source/python/pyfield.pxi":111
 * 
 *     for key in parameters:
 *         if (isinstance(parameters[key], dict) and             # <<<<<<<<<<<<<<
 *             "expression" in parameters[key]):
 *             expression.first = key.encode()
 */
    }

    /* "../resources_source/python/pyfield.pxi":110
 *     cdef pair[string, string] expression
 * 
 *     for key in parameters:             # <<<<<<<<<<<<<<
 *         if (isinstance(parameters[key], dict) and
 *             "expression" in parameters[key]):
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "../resources_source/python/pyfield.pxi":117
 *             expression_map.insert(expression)
 * 
 *     return expression_map             # <<<<<<<<<<<<<<
 * 
 * cdef map[string, vector[double]] get_nonlin_x_map(parameters):
 */
  __pyx_r = __pyx_v_expression_map;
  goto __pyx_L0;

  /* "../resources_source/python/pyfield.pxi":106
 *     return parameters_map
 * 
 * cdef map[string, string] get_expression_map(parameters):             # <<<<<<<<<<<<<<
 *     cdef map[string, string] expression_map
 *     cdef pair[string, string] expression
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_WriteUnraisable("_agros.get_expression_map", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __Pyx_pretend_to_initialize(&__pyx_r);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_key);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../resources_source/python/pyfield.pxi":119
 *     return expression_map
 * 
 * cdef map[string, vector[double]] get_nonlin_x_map(parameters):             # <<<<<<<<<<<<<<
 *     cdef map[string, vector[double]] nonlin_x_map
 *     cdef pair[string, vector[double]] nonlin_x
 */

static std::map<std::string,std::vector<double> >  __pyx_f_6_agros_get_nonlin_x_map(PyObject *__pyx_v_parameters) {
  std::map<std::string,std::vector<double> >  __pyx_v_nonlin_x_map;
  std::pair<std::string,std::vector<double> >  __pyx_v_nonlin_x;
  std::vector<double>  __pyx_v_x;
  PyObject *__pyx_v_key = NULL;
  PyObject *__pyx_v_value = NULL;
  std::map<std::string,std::vector<double> >  __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *(*__pyx_t_3)(PyObject *);
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  int __pyx_t_6;
  int __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  Py_ssize_t __pyx_t_9;
  PyObject *(*__pyx_t_10)(PyObject *);
  double __pyx_t_11;
  PyObject *__pyx_t_12 = NULL;
  std::string __pyx_t_13;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_nonlin_x_map", 0);

  /* "../resources_source/python/pyfield.pxi":124
 *     cdef vector[double] x
 * 
 *     for key in parameters:             # <<<<<<<<<<<<<<
 *         if (isinstance(parameters[key], dict) and
 *             "x" in parameters[key]):
 */
  if (likely(PyList_CheckExact(__pyx_v_parameters)) || PyTuple_CheckExact(__pyx_v_parameters)) {
    __pyx_t_1 = __pyx_v_parameters; __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
    __pyx_t_3 = NULL;
  } else {
    __pyx_t_2 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_v_parameters); if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 124, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_3)) __PYX_ERR(4, 124, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_3)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(4, 124, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(4, 124, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      } else {
        if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(4, 124, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(4, 124, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      }
    } else {
      __pyx_t_4 = __pyx_t_3(__pyx_t_1);
      if (unlikely(!__pyx_t_4)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(4, 124, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_4);
    }
    __Pyx_XDECREF_SET(__pyx_v_key, __pyx_t_4);
    __pyx_t_4 = 0;

    /* "../resources_source/python/pyfield.pxi":125
 * 
 *     for key in parameters:
 *         if (isinstance(parameters[key], dict) and             # <<<<<<<<<<<<<<
 *             "x" in parameters[key]):
 *             for value in parameters[key]["x"]:
 */
    __pyx_t_4 = __Pyx_PyObject_GetItem(__pyx_v_parameters, __pyx_v_key); if (unlikely(!__pyx_t_4)) __PYX_ERR(4, 125, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_6 = PyDict_Check(__pyx_t_4); 
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_7 = (__pyx_t_6 != 0);
    if (__pyx_t_7) {
    } else {
      __pyx_t_5 = __pyx_t_7;
      goto __pyx_L6_bool_binop_done;
    }

    /* "../resources_source/python/pyfield.pxi":126
 *     for key in parameters:
 *         if (isinstance(parameters[key], dict) and
 *             "x" in parameters[key]):             # <<<<<<<<<<<<<<
 *             for value in parameters[key]["x"]:
 *                 x.push_back(value)
 */
    __pyx_t_4 = __Pyx_PyObject_GetItem(__pyx_v_parameters, __pyx_v_key); if (unlikely(!__pyx_t_4)) __PYX_ERR(4, 126, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_7 = (__Pyx_PySequence_ContainsTF(__pyx_n_s_x, __pyx_t_4, Py_EQ)); if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(4, 126, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_6 = (__pyx_t_7 != 0);
    __pyx_t_5 = __pyx_t_6;
    __pyx_L6_bool_binop_done:;

    /* "../resources_source/python/pyfield.pxi":125
 * 
 *     for key in parameters:
 *         if (isinstance(parameters[key], dict) and             # <<<<<<<<<<<<<<
 *             "x" in parameters[key]):
 *             for value in parameters[key]["x"]:
 */
    if (__pyx_t_5) {

      /* "../resources_source/python/pyfield.pxi":127
 *         if (isinstance(parameters[key], dict) and
 *             "x" in parameters[key]):
 *             for value in parameters[key]["x"]:             # <<<<<<<<<<<<<<
 *                 x.push_back(value)
 * 
 */
      __pyx_t_4 = __Pyx_PyObject_GetItem(__pyx_v_parameters, __pyx_v_key); if (unlikely(!__pyx_t_4)) __PYX_ERR(4, 127, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_8 = __Pyx_PyObject_Dict_GetItem(__pyx_t_4, __pyx_n_s_x); if (unlikely(!__pyx_t_8)) __PYX_ERR(4, 127, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (likely(PyList_CheckExact(__pyx_t_8)) || PyTuple_CheckExact(__pyx_t_8)) {
        __pyx_t_4 = __pyx_t_8; __Pyx_INCREF(__pyx_t_4); __pyx_t_9 = 0;
        __pyx_t_10 = NULL;
      } else {
        __pyx_t_9 = -1; __pyx_t_4 = PyObject_GetIter(__pyx_t_8); if (unlikely(!__pyx_t_4)) __PYX_ERR(4, 127, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __pyx_t_10 = Py_TYPE(__pyx_t_4)->tp_iternext; if (unlikely(!__pyx_t_10)) __PYX_ERR(4, 127, __pyx_L1_error)
      }
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      for (;;) {
        if (likely(!__pyx_t_10)) {
          if (likely(PyList_CheckExact(__pyx_t_4))) {
            if (__pyx_t_9 >= PyList_GET_SIZE(__pyx_t_4)) break;
            #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
            __pyx_t_8 = PyList_GET_ITEM(__pyx_t_4, __pyx_t_9); __Pyx_INCREF(__pyx_t_8); __pyx_t_9++; if (unlikely(0 < 0)) __PYX_ERR(4, 127, __pyx_L1_error)
            #else
            __pyx_t_8 = PySequence_ITEM(__pyx_t_4, __pyx_t_9); __pyx_t_9++; if (unlikely(!__pyx_t_8)) __PYX_ERR(4, 127, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_8);
            #endif
          } else {
            if (__pyx_t_9 >= PyTuple_GET_SIZE(__pyx_t_4)) break;
            #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
            __pyx_t_8 = PyTuple_GET_ITEM(__pyx_t_4, __pyx_t_9); __Pyx_INCREF(__pyx_t_8); __pyx_t_9++; if (unlikely(0 < 0)) __PYX_ERR(4, 127, __pyx_L1_error)
            #else
            __pyx_t_8 = PySequence_ITEM(__pyx_t_4, __pyx_t_9); __pyx_t_9++; if (unlikely(!__pyx_t_8)) __PYX_ERR(4, 127, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_8);
            #endif
          }
        } else {
          __pyx_t_8 = __pyx_t_10(__pyx_t_4);
          if (unlikely(!__pyx_t_8)) {
            PyObject* exc_type = PyErr_Occurred();
            if (exc_type) {
              if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
              else __PYX_ERR(4, 127, __pyx_L1_error)
            }
            break;
          }
          __Pyx_GOTREF(__pyx_t_8);
        }
        __Pyx_XDECREF_SET(__pyx_v_value, __pyx_t_8);
        __pyx_t_8 = 0;

        /* "../resources_source/python/pyfield.pxi":128
 *             "x" in parameters[key]):
 *             for value in parameters[key]["x"]:
 *                 x.push_back(value)             # <<<<<<<<<<<<<<
 * 
 *             nonlin_x.first = key.encode()
 */
        __pyx_t_11 = __pyx_PyFloat_AsDouble(__pyx_v_value); if (unlikely((__pyx_t_11 == (double)-1) && PyErr_Occurred())) __PYX_ERR(4, 128, __pyx_L1_error)
        try {
          __pyx_v_x.push_back(__pyx_t_11);
        } catch(...) {
          __Pyx_CppExn2PyErr();
          __PYX_ERR(4, 128, __pyx_L1_error)
        }

        /* "../resources_source/python/pyfield.pxi":127
 *         if (isinstance(parameters[key], dict) and
 *             "x" in parameters[key]):
 *             for value in parameters[key]["x"]:             # <<<<<<<<<<<<<<
 *                 x.push_back(value)
 * 
 */
      }
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

      /* "../resources_source/python/pyfield.pxi":130
 *                 x.push_back(value)
 * 
 *             nonlin_x.first = key.encode()             # <<<<<<<<<<<<<<
 *             nonlin_x.second = x
 *             nonlin_x_map.insert(nonlin_x)
 */
      __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_v_key, __pyx_n_s_encode); if (unlikely(!__pyx_t_8)) __PYX_ERR(4, 130, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __pyx_t_12 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_8))) {
        __pyx_t_12 = PyMethod_GET_SELF(__pyx_t_8);
        if (likely(__pyx_t_12)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
          __Pyx_INCREF(__pyx_t_12);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_8, function);
        }
      }
      __pyx_t_4 = (__pyx_t_12) ? __Pyx_PyObject_CallOneArg(__pyx_t_8, __pyx_t_12) : __Pyx_PyObject_CallNoArg(__pyx_t_8);
      __Pyx_XDECREF(__pyx_t_12); __pyx_t_12 = 0;
      if (unlikely(!__pyx_t_4)) __PYX_ERR(4, 130, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __pyx_t_13 = __pyx_convert_string_from_py_std__in_string(__pyx_t_4); if (unlikely(PyErr_Occurred())) __PYX_ERR(4, 130, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_v_nonlin_x.first = __pyx_t_13;

      /* "../resources_source/python/pyfield.pxi":131
 * 
 *             nonlin_x.first = key.encode()
 *             nonlin_x.second = x             # <<<<<<<<<<<<<<
 *             nonlin_x_map.insert(nonlin_x)
 *             x.clear()
 */
      __pyx_v_nonlin_x.second = __pyx_v_x;

      /* "../resources_source/python/pyfield.pxi":132
 *             nonlin_x.first = key.encode()
 *             nonlin_x.second = x
 *             nonlin_x_map.insert(nonlin_x)             # <<<<<<<<<<<<<<
 *             x.clear()
 * 
 */
      try {
        __pyx_v_nonlin_x_map.insert(__pyx_v_nonlin_x);
      } catch(...) {
        __Pyx_CppExn2PyErr();
        __PYX_ERR(4, 132, __pyx_L1_error)
      }

      /* "../resources_source/python/pyfield.pxi":133
 *             nonlin_x.second = x
 *             nonlin_x_map.insert(nonlin_x)
 *             x.clear()             # <<<<<<<<<<<<<<
 * 
 *     return nonlin_x_map
 */
      __pyx_v_x.clear();

      /* "../resources_source/python/pyfield.pxi":125
 * 
 *     for key in parameters:
 *         if (isinstance(parameters[key], dict) and             # <<<<<<<<<<<<<<
 *             "x" in parameters[key]):
 *             for value in parameters[key]["x"]:
 */
    }

    /* "../resources_source/python/pyfield.pxi":124
 *     cdef vector[double] x
 * 
 *     for key in parameters:             # <<<<<<<<<<<<<<
 *         if (isinstance(parameters[key], dict) and
 *             "x" in parameters[key]):
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "../resources_source/python/pyfield.pxi":135
 *             x.clear()
 * 
 *     return nonlin_x_map             # <<<<<<<<<<<<<<
 * 
 * cdef map[string, vector[double]] get_nonlin_y_map(parameters):
 */
  __pyx_r = __pyx_v_nonlin_x_map;
  goto __pyx_L0;

  /* "../resources_source/python/pyfield.pxi":119
 *     return expression_map
 * 
 * cdef map[string, vector[double]] get_nonlin_x_map(parameters):             # <<<<<<<<<<<<<<
 *     cdef map[string, vector[double]] nonlin_x_map
 *     cdef pair[string, vector[double]] nonlin_x
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_12);
  __Pyx_WriteUnraisable("_agros.get_nonlin_x_map", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __Pyx_pretend_to_initialize(&__pyx_r);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_key);
  __Pyx_XDECREF(__pyx_v_value);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../resources_source/python/pyfield.pxi":137
 *     return nonlin_x_map
 * 
 * cdef map[string, vector[double]] get_nonlin_y_map(parameters):             # <<<<<<<<<<<<<<
 *     cdef map[string, vector[double]] nonlin_y_map
 *     cdef pair[string, vector[double]] nonlin_y
 */

static std::map<std::string,std::vector<double> >  __pyx_f_6_agros_get_nonlin_y_map(PyObject *__pyx_v_parameters) {
  std::map<std::string,std::vector<double> >  __pyx_v_nonlin_y_map;
  std::pair<std::string,std::vector<double> >  __pyx_v_nonlin_y;
  std::vector<double>  __pyx_v_y;
  PyObject *__pyx_v_key = NULL;
  PyObject *__pyx_v_value = NULL;
  std::map<std::string,std::vector<double> >  __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *(*__pyx_t_3)(PyObject *);
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  int __pyx_t_6;
  int __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  Py_ssize_t __pyx_t_9;
  PyObject *(*__pyx_t_10)(PyObject *);
  double __pyx_t_11;
  PyObject *__pyx_t_12 = NULL;
  std::string __pyx_t_13;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_nonlin_y_map", 0);

  /* "../resources_source/python/pyfield.pxi":142
 *     cdef vector[double] y
 * 
 *     for key in parameters:             # <<<<<<<<<<<<<<
 *         if (isinstance(parameters[key], dict) and
 *             "y" in parameters[key]):
 */
  if (likely(PyList_CheckExact(__pyx_v_parameters)) || PyTuple_CheckExact(__pyx_v_parameters)) {
    __pyx_t_1 = __pyx_v_parameters; __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
    __pyx_t_3 = NULL;
  } else {
    __pyx_t_2 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_v_parameters); if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 142, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_3)) __PYX_ERR(4, 142, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_3)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(4, 142, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(4, 142, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      } else {
        if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(4, 142, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(4, 142, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      }
    } else {
      __pyx_t_4 = __pyx_t_3(__pyx_t_1);
      if (unlikely(!__pyx_t_4)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(4, 142, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_4);
    }
    __Pyx_XDECREF_SET(__pyx_v_key, __pyx_t_4);
    __pyx_t_4 = 0;

    /* "../resources_source/python/pyfield.pxi":143
 * 
 *     for key in parameters:
 *         if (isinstance(parameters[key], dict) and             # <<<<<<<<<<<<<<
 *             "y" in parameters[key]):
 *             for value in parameters[key]["y"]:
 */
    __pyx_t_4 = __Pyx_PyObject_GetItem(__pyx_v_parameters, __pyx_v_key); if (unlikely(!__pyx_t_4)) __PYX_ERR(4, 143, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_6 = PyDict_Check(__pyx_t_4); 
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_7 = (__pyx_t_6 != 0);
    if (__pyx_t_7) {
    } else {
      __pyx_t_5 = __pyx_t_7;
      goto __pyx_L6_bool_binop_done;
    }

    /* "../resources_source/python/pyfield.pxi":144
 *     for key in parameters:
 *         if (isinstance(parameters[key], dict) and
 *             "y" in parameters[key]):             # <<<<<<<<<<<<<<
 *             for value in parameters[key]["y"]:
 *                 y.push_back(value)
 */
    __pyx_t_4 = __Pyx_PyObject_GetItem(__pyx_v_parameters, __pyx_v_key); if (unlikely(!__pyx_t_4)) __PYX_ERR(4, 144, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_7 = (__Pyx_PySequence_ContainsTF(__pyx_n_s_y, __pyx_t_4, Py_EQ)); if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(4, 144, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_6 = (__pyx_t_7 != 0);
    __pyx_t_5 = __pyx_t_6;
    __pyx_L6_bool_binop_done:;

    /* "../resources_source/python/pyfield.pxi":143
 * 
 *     for key in parameters:
 *         if (isinstance(parameters[key], dict) and             # <<<<<<<<<<<<<<
 *             "y" in parameters[key]):
 *             for value in parameters[key]["y"]:
 */
    if (__pyx_t_5) {

      /* "../resources_source/python/pyfield.pxi":145
 *         if (isinstance(parameters[key], dict) and
 *             "y" in parameters[key]):
 *             for value in parameters[key]["y"]:             # <<<<<<<<<<<<<<
 *                 y.push_back(value)
 * 
 */
      __pyx_t_4 = __Pyx_PyObject_GetItem(__pyx_v_parameters, __pyx_v_key); if (unlikely(!__pyx_t_4)) __PYX_ERR(4, 145, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_8 = __Pyx_PyObject_Dict_GetItem(__pyx_t_4, __pyx_n_s_y); if (unlikely(!__pyx_t_8)) __PYX_ERR(4, 145, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (likely(PyList_CheckExact(__pyx_t_8)) || PyTuple_CheckExact(__pyx_t_8)) {
        __pyx_t_4 = __pyx_t_8; __Pyx_INCREF(__pyx_t_4); __pyx_t_9 = 0;
        __pyx_t_10 = NULL;
      } else {
        __pyx_t_9 = -1; __pyx_t_4 = PyObject_GetIter(__pyx_t_8); if (unlikely(!__pyx_t_4)) __PYX_ERR(4, 145, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __pyx_t_10 = Py_TYPE(__pyx_t_4)->tp_iternext; if (unlikely(!__pyx_t_10)) __PYX_ERR(4, 145, __pyx_L1_error)
      }
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      for (;;) {
        if (likely(!__pyx_t_10)) {
          if (likely(PyList_CheckExact(__pyx_t_4))) {
            if (__pyx_t_9 >= PyList_GET_SIZE(__pyx_t_4)) break;
            #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
            __pyx_t_8 = PyList_GET_ITEM(__pyx_t_4, __pyx_t_9); __Pyx_INCREF(__pyx_t_8); __pyx_t_9++; if (unlikely(0 < 0)) __PYX_ERR(4, 145, __pyx_L1_error)
            #else
            __pyx_t_8 = PySequence_ITEM(__pyx_t_4, __pyx_t_9); __pyx_t_9++; if (unlikely(!__pyx_t_8)) __PYX_ERR(4, 145, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_8);
            #endif
          } else {
            if (__pyx_t_9 >= PyTuple_GET_SIZE(__pyx_t_4)) break;
            #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
            __pyx_t_8 = PyTuple_GET_ITEM(__pyx_t_4, __pyx_t_9); __Pyx_INCREF(__pyx_t_8); __pyx_t_9++; if (unlikely(0 < 0)) __PYX_ERR(4, 145, __pyx_L1_error)
            #else
            __pyx_t_8 = PySequence_ITEM(__pyx_t_4, __pyx_t_9); __pyx_t_9++; if (unlikely(!__pyx_t_8)) __PYX_ERR(4, 145, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_8);
            #endif
          }
        } else {
          __pyx_t_8 = __pyx_t_10(__pyx_t_4);
          if (unlikely(!__pyx_t_8)) {
            PyObject* exc_type = PyErr_Occurred();
            if (exc_type) {
              if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
              else __PYX_ERR(4, 145, __pyx_L1_error)
            }
            break;
          }
          __Pyx_GOTREF(__pyx_t_8);
        }
        __Pyx_XDECREF_SET(__pyx_v_value, __pyx_t_8);
        __pyx_t_8 = 0;

        /* "../resources_source/python/pyfield.pxi":146
 *             "y" in parameters[key]):
 *             for value in parameters[key]["y"]:
 *                 y.push_back(value)             # <<<<<<<<<<<<<<
 * 
 *             nonlin_y.first = key.encode()
 */
        __pyx_t_11 = __pyx_PyFloat_AsDouble(__pyx_v_value); if (unlikely((__pyx_t_11 == (double)-1) && PyErr_Occurred())) __PYX_ERR(4, 146, __pyx_L1_error)
        try {
          __pyx_v_y.push_back(__pyx_t_11);
        } catch(...) {
          __Pyx_CppExn2PyErr();
          __PYX_ERR(4, 146, __pyx_L1_error)
        }

        /* "../resources_source/python/pyfield.pxi":145
 *         if (isinstance(parameters[key], dict) and
 *             "y" in parameters[key]):
 *             for value in parameters[key]["y"]:             # <<<<<<<<<<<<<<
 *                 y.push_back(value)
 * 
 */
      }
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

      /* "../resources_source/python/pyfield.pxi":148
 *                 y.push_back(value)
 * 
 *             nonlin_y.first = key.encode()             # <<<<<<<<<<<<<<
 *             nonlin_y.second = y
 *             nonlin_y_map.insert(nonlin_y)
 */
      __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_v_key, __pyx_n_s_encode); if (unlikely(!__pyx_t_8)) __PYX_ERR(4, 148, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __pyx_t_12 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_8))) {
        __pyx_t_12 = PyMethod_GET_SELF(__pyx_t_8);
        if (likely(__pyx_t_12)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
          __Pyx_INCREF(__pyx_t_12);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_8, function);
        }
      }
      __pyx_t_4 = (__pyx_t_12) ? __Pyx_PyObject_CallOneArg(__pyx_t_8, __pyx_t_12) : __Pyx_PyObject_CallNoArg(__pyx_t_8);
      __Pyx_XDECREF(__pyx_t_12); __pyx_t_12 = 0;
      if (unlikely(!__pyx_t_4)) __PYX_ERR(4, 148, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __pyx_t_13 = __pyx_convert_string_from_py_std__in_string(__pyx_t_4); if (unlikely(PyErr_Occurred())) __PYX_ERR(4, 148, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_v_nonlin_y.first = __pyx_t_13;

      /* "../resources_source/python/pyfield.pxi":149
 * 
 *             nonlin_y.first = key.encode()
 *             nonlin_y.second = y             # <<<<<<<<<<<<<<
 *             nonlin_y_map.insert(nonlin_y)
 *             y.clear()
 */
      __pyx_v_nonlin_y.second = __pyx_v_y;

      /* "../resources_source/python/pyfield.pxi":150
 *             nonlin_y.first = key.encode()
 *             nonlin_y.second = y
 *             nonlin_y_map.insert(nonlin_y)             # <<<<<<<<<<<<<<
 *             y.clear()
 * 
 */
      try {
        __pyx_v_nonlin_y_map.insert(__pyx_v_nonlin_y);
      } catch(...) {
        __Pyx_CppExn2PyErr();
        __PYX_ERR(4, 150, __pyx_L1_error)
      }

      /* "../resources_source/python/pyfield.pxi":151
 *             nonlin_y.second = y
 *             nonlin_y_map.insert(nonlin_y)
 *             y.clear()             # <<<<<<<<<<<<<<
 * 
 *     return nonlin_y_map
 */
      __pyx_v_y.clear();

      /* "../resources_source/python/pyfield.pxi":143
 * 
 *     for key in parameters:
 *         if (isinstance(parameters[key], dict) and             # <<<<<<<<<<<<<<
 *             "y" in parameters[key]):
 *             for value in parameters[key]["y"]:
 */
    }

    /* "../resources_source/python/pyfield.pxi":142
 *     cdef vector[double] y
 * 
 *     for key in parameters:             # <<<<<<<<<<<<<<
 *         if (isinstance(parameters[key], dict) and
 *             "y" in parameters[key]):
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "../resources_source/python/pyfield.pxi":153
 *             y.clear()
 * 
 *     return nonlin_y_map             # <<<<<<<<<<<<<<
 * 
 * cdef map[string, map[string, string]] get_settings_map(parameters):
 */
  __pyx_r = __pyx_v_nonlin_y_map;
  goto __pyx_L0;

  /* "../resources_source/python/pyfield.pxi":137
 *     return nonlin_x_map
 * 
 * cdef map[string, vector[double]] get_nonlin_y_map(parameters):             # <<<<<<<<<<<<<<
 *     cdef map[string, vector[double]] nonlin_y_map
 *     cdef pair[string, vector[double]] nonlin_y
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_12);
  __Pyx_WriteUnraisable("_agros.get_nonlin_y_map", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __Pyx_pretend_to_initialize(&__pyx_r);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_key);
  __Pyx_XDECREF(__pyx_v_value);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../resources_source/python/pyfield.pxi":155
 *     return nonlin_y_map
 * 
 * cdef map[string, map[string, string]] get_settings_map(parameters):             # <<<<<<<<<<<<<<
 *     cdef map[string, map[string, string]] settings_map
 *     cdef pair[string, map[string, string]] settings_map_pair
 */

static std::map<std::string,std::map<std::string,std::string> >  __pyx_f_6_agros_get_settings_map(PyObject *__pyx_v_parameters) {
  std::map<std::string,std::map<std::string,std::string> >  __pyx_v_settings_map;
  std::pair<std::string,std::map<std::string,std::string> >  __pyx_v_settings_map_pair;
  std::map<std::string,std::string>  __pyx_v_settings;
  std::pair<std::string,std::string>  __pyx_v_setting;
  PyObject *__pyx_v_key = NULL;
  std::map<std::string,std::map<std::string,std::string> >  __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *(*__pyx_t_3)(PyObject *);
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  int __pyx_t_6;
  std::string __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_settings_map", 0);

  /* "../resources_source/python/pyfield.pxi":161
 *     cdef pair[string, string] setting
 * 
 *     for key in parameters:             # <<<<<<<<<<<<<<
 *         if isinstance(parameters[key], dict):
 *             if ("interpolation" in parameters[key]):
 */
  if (likely(PyList_CheckExact(__pyx_v_parameters)) || PyTuple_CheckExact(__pyx_v_parameters)) {
    __pyx_t_1 = __pyx_v_parameters; __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
    __pyx_t_3 = NULL;
  } else {
    __pyx_t_2 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_v_parameters); if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 161, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_3)) __PYX_ERR(4, 161, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_3)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(4, 161, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(4, 161, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      } else {
        if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(4, 161, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(4, 161, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      }
    } else {
      __pyx_t_4 = __pyx_t_3(__pyx_t_1);
      if (unlikely(!__pyx_t_4)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(4, 161, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_4);
    }
    __Pyx_XDECREF_SET(__pyx_v_key, __pyx_t_4);
    __pyx_t_4 = 0;

    /* "../resources_source/python/pyfield.pxi":162
 * 
 *     for key in parameters:
 *         if isinstance(parameters[key], dict):             # <<<<<<<<<<<<<<
 *             if ("interpolation" in parameters[key]):
 *                 setting.first = b"interpolation"
 */
    __pyx_t_4 = __Pyx_PyObject_GetItem(__pyx_v_parameters, __pyx_v_key); if (unlikely(!__pyx_t_4)) __PYX_ERR(4, 162, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = PyDict_Check(__pyx_t_4); 
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_6 = (__pyx_t_5 != 0);
    if (__pyx_t_6) {

      /* "../resources_source/python/pyfield.pxi":163
 *     for key in parameters:
 *         if isinstance(parameters[key], dict):
 *             if ("interpolation" in parameters[key]):             # <<<<<<<<<<<<<<
 *                 setting.first = b"interpolation"
 *                 setting.second = parameters[key]["interpolation"].encode()
 */
      __pyx_t_4 = __Pyx_PyObject_GetItem(__pyx_v_parameters, __pyx_v_key); if (unlikely(!__pyx_t_4)) __PYX_ERR(4, 163, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_6 = (__Pyx_PySequence_ContainsTF(__pyx_n_s_interpolation, __pyx_t_4, Py_EQ)); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(4, 163, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_5 = (__pyx_t_6 != 0);
      if (__pyx_t_5) {

        /* "../resources_source/python/pyfield.pxi":164
 *         if isinstance(parameters[key], dict):
 *             if ("interpolation" in parameters[key]):
 *                 setting.first = b"interpolation"             # <<<<<<<<<<<<<<
 *                 setting.second = parameters[key]["interpolation"].encode()
 *                 settings.insert(setting)
 */
        __pyx_t_7 = __pyx_convert_string_from_py_std__in_string(__pyx_n_b_interpolation); if (unlikely(PyErr_Occurred())) __PYX_ERR(4, 164, __pyx_L1_error)
        __pyx_v_setting.first = __pyx_t_7;

        /* "../resources_source/python/pyfield.pxi":165
 *             if ("interpolation" in parameters[key]):
 *                 setting.first = b"interpolation"
 *                 setting.second = parameters[key]["interpolation"].encode()             # <<<<<<<<<<<<<<
 *                 settings.insert(setting)
 * 
 */
        __pyx_t_8 = __Pyx_PyObject_GetItem(__pyx_v_parameters, __pyx_v_key); if (unlikely(!__pyx_t_8)) __PYX_ERR(4, 165, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        __pyx_t_9 = __Pyx_PyObject_Dict_GetItem(__pyx_t_8, __pyx_n_s_interpolation); if (unlikely(!__pyx_t_9)) __PYX_ERR(4, 165, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_9);
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_9, __pyx_n_s_encode); if (unlikely(!__pyx_t_8)) __PYX_ERR(4, 165, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        __pyx_t_9 = NULL;
        if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_8))) {
          __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_8);
          if (likely(__pyx_t_9)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
            __Pyx_INCREF(__pyx_t_9);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_8, function);
          }
        }
        __pyx_t_4 = (__pyx_t_9) ? __Pyx_PyObject_CallOneArg(__pyx_t_8, __pyx_t_9) : __Pyx_PyObject_CallNoArg(__pyx_t_8);
        __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
        if (unlikely(!__pyx_t_4)) __PYX_ERR(4, 165, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        __pyx_t_7 = __pyx_convert_string_from_py_std__in_string(__pyx_t_4); if (unlikely(PyErr_Occurred())) __PYX_ERR(4, 165, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __pyx_v_setting.second = __pyx_t_7;

        /* "../resources_source/python/pyfield.pxi":166
 *                 setting.first = b"interpolation"
 *                 setting.second = parameters[key]["interpolation"].encode()
 *                 settings.insert(setting)             # <<<<<<<<<<<<<<
 * 
 *             if ("derivative_at_endpoints" in parameters[key]):
 */
        try {
          __pyx_v_settings.insert(__pyx_v_setting);
        } catch(...) {
          __Pyx_CppExn2PyErr();
          __PYX_ERR(4, 166, __pyx_L1_error)
        }

        /* "../resources_source/python/pyfield.pxi":163
 *     for key in parameters:
 *         if isinstance(parameters[key], dict):
 *             if ("interpolation" in parameters[key]):             # <<<<<<<<<<<<<<
 *                 setting.first = b"interpolation"
 *                 setting.second = parameters[key]["interpolation"].encode()
 */
      }

      /* "../resources_source/python/pyfield.pxi":168
 *                 settings.insert(setting)
 * 
 *             if ("derivative_at_endpoints" in parameters[key]):             # <<<<<<<<<<<<<<
 *                 setting.first = b"derivative_at_endpoints"
 *                 setting.second = parameters[key]["derivative_at_endpoints"].encode()
 */
      __pyx_t_4 = __Pyx_PyObject_GetItem(__pyx_v_parameters, __pyx_v_key); if (unlikely(!__pyx_t_4)) __PYX_ERR(4, 168, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_5 = (__Pyx_PySequence_ContainsTF(__pyx_n_s_derivative_at_endpoints, __pyx_t_4, Py_EQ)); if (unlikely(__pyx_t_5 < 0)) __PYX_ERR(4, 168, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_6 = (__pyx_t_5 != 0);
      if (__pyx_t_6) {

        /* "../resources_source/python/pyfield.pxi":169
 * 
 *             if ("derivative_at_endpoints" in parameters[key]):
 *                 setting.first = b"derivative_at_endpoints"             # <<<<<<<<<<<<<<
 *                 setting.second = parameters[key]["derivative_at_endpoints"].encode()
 *                 settings.insert(setting)
 */
        __pyx_t_7 = __pyx_convert_string_from_py_std__in_string(__pyx_n_b_derivative_at_endpoints); if (unlikely(PyErr_Occurred())) __PYX_ERR(4, 169, __pyx_L1_error)
        __pyx_v_setting.first = __pyx_t_7;

        /* "../resources_source/python/pyfield.pxi":170
 *             if ("derivative_at_endpoints" in parameters[key]):
 *                 setting.first = b"derivative_at_endpoints"
 *                 setting.second = parameters[key]["derivative_at_endpoints"].encode()             # <<<<<<<<<<<<<<
 *                 settings.insert(setting)
 * 
 */
        __pyx_t_8 = __Pyx_PyObject_GetItem(__pyx_v_parameters, __pyx_v_key); if (unlikely(!__pyx_t_8)) __PYX_ERR(4, 170, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        __pyx_t_9 = __Pyx_PyObject_Dict_GetItem(__pyx_t_8, __pyx_n_s_derivative_at_endpoints); if (unlikely(!__pyx_t_9)) __PYX_ERR(4, 170, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_9);
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_9, __pyx_n_s_encode); if (unlikely(!__pyx_t_8)) __PYX_ERR(4, 170, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        __pyx_t_9 = NULL;
        if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_8))) {
          __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_8);
          if (likely(__pyx_t_9)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
            __Pyx_INCREF(__pyx_t_9);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_8, function);
          }
        }
        __pyx_t_4 = (__pyx_t_9) ? __Pyx_PyObject_CallOneArg(__pyx_t_8, __pyx_t_9) : __Pyx_PyObject_CallNoArg(__pyx_t_8);
        __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
        if (unlikely(!__pyx_t_4)) __PYX_ERR(4, 170, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        __pyx_t_7 = __pyx_convert_string_from_py_std__in_string(__pyx_t_4); if (unlikely(PyErr_Occurred())) __PYX_ERR(4, 170, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __pyx_v_setting.second = __pyx_t_7;

        /* "../resources_source/python/pyfield.pxi":171
 *                 setting.first = b"derivative_at_endpoints"
 *                 setting.second = parameters[key]["derivative_at_endpoints"].encode()
 *                 settings.insert(setting)             # <<<<<<<<<<<<<<
 * 
 *             if ("extrapolation" in parameters[key]):
 */
        try {
          __pyx_v_settings.insert(__pyx_v_setting);
        } catch(...) {
          __Pyx_CppExn2PyErr();
          __PYX_ERR(4, 171, __pyx_L1_error)
        }

        /* "../resources_source/python/pyfield.pxi":168
 *                 settings.insert(setting)
 * 
 *             if ("derivative_at_endpoints" in parameters[key]):             # <<<<<<<<<<<<<<
 *                 setting.first = b"derivative_at_endpoints"
 *                 setting.second = parameters[key]["derivative_at_endpoints"].encode()
 */
      }

      /* "../resources_source/python/pyfield.pxi":173
 *                 settings.insert(setting)
 * 
 *             if ("extrapolation" in parameters[key]):             # <<<<<<<<<<<<<<
 *                 setting.first = b"extrapolation"
 *                 setting.second = parameters[key]["extrapolation"].encode()
 */
      __pyx_t_4 = __Pyx_PyObject_GetItem(__pyx_v_parameters, __pyx_v_key); if (unlikely(!__pyx_t_4)) __PYX_ERR(4, 173, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_6 = (__Pyx_PySequence_ContainsTF(__pyx_n_s_extrapolation, __pyx_t_4, Py_EQ)); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(4, 173, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_5 = (__pyx_t_6 != 0);
      if (__pyx_t_5) {

        /* "../resources_source/python/pyfield.pxi":174
 * 
 *             if ("extrapolation" in parameters[key]):
 *                 setting.first = b"extrapolation"             # <<<<<<<<<<<<<<
 *                 setting.second = parameters[key]["extrapolation"].encode()
 *                 settings.insert(setting)
 */
        __pyx_t_7 = __pyx_convert_string_from_py_std__in_string(__pyx_n_b_extrapolation); if (unlikely(PyErr_Occurred())) __PYX_ERR(4, 174, __pyx_L1_error)
        __pyx_v_setting.first = __pyx_t_7;

        /* "../resources_source/python/pyfield.pxi":175
 *             if ("extrapolation" in parameters[key]):
 *                 setting.first = b"extrapolation"
 *                 setting.second = parameters[key]["extrapolation"].encode()             # <<<<<<<<<<<<<<
 *                 settings.insert(setting)
 * 
 */
        __pyx_t_8 = __Pyx_PyObject_GetItem(__pyx_v_parameters, __pyx_v_key); if (unlikely(!__pyx_t_8)) __PYX_ERR(4, 175, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        __pyx_t_9 = __Pyx_PyObject_Dict_GetItem(__pyx_t_8, __pyx_n_s_extrapolation); if (unlikely(!__pyx_t_9)) __PYX_ERR(4, 175, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_9);
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_9, __pyx_n_s_encode); if (unlikely(!__pyx_t_8)) __PYX_ERR(4, 175, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        __pyx_t_9 = NULL;
        if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_8))) {
          __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_8);
          if (likely(__pyx_t_9)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
            __Pyx_INCREF(__pyx_t_9);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_8, function);
          }
        }
        __pyx_t_4 = (__pyx_t_9) ? __Pyx_PyObject_CallOneArg(__pyx_t_8, __pyx_t_9) : __Pyx_PyObject_CallNoArg(__pyx_t_8);
        __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
        if (unlikely(!__pyx_t_4)) __PYX_ERR(4, 175, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        __pyx_t_7 = __pyx_convert_string_from_py_std__in_string(__pyx_t_4); if (unlikely(PyErr_Occurred())) __PYX_ERR(4, 175, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __pyx_v_setting.second = __pyx_t_7;

        /* "../resources_source/python/pyfield.pxi":176
 *                 setting.first = b"extrapolation"
 *                 setting.second = parameters[key]["extrapolation"].encode()
 *                 settings.insert(setting)             # <<<<<<<<<<<<<<
 * 
 *         if (settings.size()):
 */
        try {
          __pyx_v_settings.insert(__pyx_v_setting);
        } catch(...) {
          __Pyx_CppExn2PyErr();
          __PYX_ERR(4, 176, __pyx_L1_error)
        }

        /* "../resources_source/python/pyfield.pxi":173
 *                 settings.insert(setting)
 * 
 *             if ("extrapolation" in parameters[key]):             # <<<<<<<<<<<<<<
 *                 setting.first = b"extrapolation"
 *                 setting.second = parameters[key]["extrapolation"].encode()
 */
      }

      /* "../resources_source/python/pyfield.pxi":162
 * 
 *     for key in parameters:
 *         if isinstance(parameters[key], dict):             # <<<<<<<<<<<<<<
 *             if ("interpolation" in parameters[key]):
 *                 setting.first = b"interpolation"
 */
    }

    /* "../resources_source/python/pyfield.pxi":178
 *                 settings.insert(setting)
 * 
 *         if (settings.size()):             # <<<<<<<<<<<<<<
 *             settings_map_pair.first = key.encode()
 *             settings_map_pair.second = settings
 */
    __pyx_t_5 = (__pyx_v_settings.size() != 0);
    if (__pyx_t_5) {

      /* "../resources_source/python/pyfield.pxi":179
 * 
 *         if (settings.size()):
 *             settings_map_pair.first = key.encode()             # <<<<<<<<<<<<<<
 *             settings_map_pair.second = settings
 *             settings_map.insert(settings_map_pair)
 */
      __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_v_key, __pyx_n_s_encode); if (unlikely(!__pyx_t_8)) __PYX_ERR(4, 179, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __pyx_t_9 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_8))) {
        __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_8);
        if (likely(__pyx_t_9)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
          __Pyx_INCREF(__pyx_t_9);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_8, function);
        }
      }
      __pyx_t_4 = (__pyx_t_9) ? __Pyx_PyObject_CallOneArg(__pyx_t_8, __pyx_t_9) : __Pyx_PyObject_CallNoArg(__pyx_t_8);
      __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
      if (unlikely(!__pyx_t_4)) __PYX_ERR(4, 179, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __pyx_t_7 = __pyx_convert_string_from_py_std__in_string(__pyx_t_4); if (unlikely(PyErr_Occurred())) __PYX_ERR(4, 179, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_v_settings_map_pair.first = __pyx_t_7;

      /* "../resources_source/python/pyfield.pxi":180
 *         if (settings.size()):
 *             settings_map_pair.first = key.encode()
 *             settings_map_pair.second = settings             # <<<<<<<<<<<<<<
 *             settings_map.insert(settings_map_pair)
 * 
 */
      __pyx_v_settings_map_pair.second = __pyx_v_settings;

      /* "../resources_source/python/pyfield.pxi":181
 *             settings_map_pair.first = key.encode()
 *             settings_map_pair.second = settings
 *             settings_map.insert(settings_map_pair)             # <<<<<<<<<<<<<<
 * 
 *             settings.clear()
 */
      try {
        __pyx_v_settings_map.insert(__pyx_v_settings_map_pair);
      } catch(...) {
        __Pyx_CppExn2PyErr();
        __PYX_ERR(4, 181, __pyx_L1_error)
      }

      /* "../resources_source/python/pyfield.pxi":183
 *             settings_map.insert(settings_map_pair)
 * 
 *             settings.clear()             # <<<<<<<<<<<<<<
 * 
 *     return settings_map
 */
      __pyx_v_settings.clear();

      /* "../resources_source/python/pyfield.pxi":178
 *                 settings.insert(setting)
 * 
 *         if (settings.size()):             # <<<<<<<<<<<<<<
 *             settings_map_pair.first = key.encode()
 *             settings_map_pair.second = settings
 */
    }

    /* "../resources_source/python/pyfield.pxi":161
 *     cdef pair[string, string] setting
 * 
 *     for key in parameters:             # <<<<<<<<<<<<<<
 *         if isinstance(parameters[key], dict):
 *             if ("interpolation" in parameters[key]):
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "../resources_source/python/pyfield.pxi":185
 *             settings.clear()
 * 
 *     return settings_map             # <<<<<<<<<<<<<<
 * 
 * cdef class __Field__:
 */
  __pyx_r = __pyx_v_settings_map;
  goto __pyx_L0;

  /* "../resources_source/python/pyfield.pxi":155
 *     return nonlin_y_map
 * 
 * cdef map[string, map[string, string]] get_settings_map(parameters):             # <<<<<<<<<<<<<<
 *     cdef map[string, map[string, string]] settings_map
 *     cdef pair[string, map[string, string]] settings_map_pair
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_WriteUnraisable("_agros.get_settings_map", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __Pyx_pretend_to_initialize(&__pyx_r);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_key);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../resources_source/python/pyfield.pxi":194
 *     cdef object _adaptivity_callback
 * 
 *     def __cinit__(self, field_id):             # <<<<<<<<<<<<<<
 *         self.thisptr = new PyField(field_id.encode())
 *         self.matrix_solver_parameters = __Parameters__(self.__get_matrix_solver_parameters__,
 */

/* Python wrapper */
static int __pyx_pw_6_agros_9__Field___1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_6_agros_9__Field___1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_field_id = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_field_id,0};
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_field_id)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) __PYX_ERR(4, 194, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 1) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
    }
    __pyx_v_field_id = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 1, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(4, 194, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("_agros.__Field__.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6_agros_9__Field_____cinit__(((struct __pyx_obj_6_agros___Field__ *)__pyx_v_self), __pyx_v_field_id);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6_agros_9__Field_____cinit__(struct __pyx_obj_6_agros___Field__ *__pyx_v_self, PyObject *__pyx_v_field_id) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  std::string __pyx_t_4;
  PyField *__pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_t_8;
  PyObject *__pyx_t_9 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "../resources_source/python/pyfield.pxi":195
 * 
 *     def __cinit__(self, field_id):
 *         self.thisptr = new PyField(field_id.encode())             # <<<<<<<<<<<<<<
 *         self.matrix_solver_parameters = __Parameters__(self.__get_matrix_solver_parameters__,
 *                                                        self.__set_matrix_solver_parameters__)
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_field_id, __pyx_n_s_encode); if (unlikely(!__pyx_t_2)) __PYX_ERR(4, 195, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 195, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = __pyx_convert_string_from_py_std__in_string(__pyx_t_1); if (unlikely(PyErr_Occurred())) __PYX_ERR(4, 195, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  try {
    __pyx_t_5 = new PyField(__pyx_t_4);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(4, 195, __pyx_L1_error)
  }
  __pyx_v_self->thisptr = __pyx_t_5;

  /* "../resources_source/python/pyfield.pxi":196
 *     def __cinit__(self, field_id):
 *         self.thisptr = new PyField(field_id.encode())
 *         self.matrix_solver_parameters = __Parameters__(self.__get_matrix_solver_parameters__,             # <<<<<<<<<<<<<<
 *                                                        self.__set_matrix_solver_parameters__)
 *         self.solver_parameters = __Parameters__(self.__get_solver_parameters__,
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_Parameters); if (unlikely(!__pyx_t_2)) __PYX_ERR(4, 196, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_get_matrix_solver_parameters); if (unlikely(!__pyx_t_3)) __PYX_ERR(4, 196, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);

  /* "../resources_source/python/pyfield.pxi":197
 *         self.thisptr = new PyField(field_id.encode())
 *         self.matrix_solver_parameters = __Parameters__(self.__get_matrix_solver_parameters__,
 *                                                        self.__set_matrix_solver_parameters__)             # <<<<<<<<<<<<<<
 *         self.solver_parameters = __Parameters__(self.__get_solver_parameters__,
 *                                                 self.__set_solver_parameters__)
 */
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_set_matrix_solver_parameters); if (unlikely(!__pyx_t_6)) __PYX_ERR(4, 197, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_7 = NULL;
  __pyx_t_8 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_7)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_7);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_8 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[3] = {__pyx_t_7, __pyx_t_3, __pyx_t_6};
    __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_8, 2+__pyx_t_8); if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 196, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[3] = {__pyx_t_7, __pyx_t_3, __pyx_t_6};
    __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_8, 2+__pyx_t_8); if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 196, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  } else
  #endif
  {
    __pyx_t_9 = PyTuple_New(2+__pyx_t_8); if (unlikely(!__pyx_t_9)) __PYX_ERR(4, 196, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    if (__pyx_t_7) {
      __Pyx_GIVEREF(__pyx_t_7); PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_7); __pyx_t_7 = NULL;
    }
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_9, 0+__pyx_t_8, __pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_6);
    PyTuple_SET_ITEM(__pyx_t_9, 1+__pyx_t_8, __pyx_t_6);
    __pyx_t_3 = 0;
    __pyx_t_6 = 0;
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_9, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 196, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "../resources_source/python/pyfield.pxi":196
 *     def __cinit__(self, field_id):
 *         self.thisptr = new PyField(field_id.encode())
 *         self.matrix_solver_parameters = __Parameters__(self.__get_matrix_solver_parameters__,             # <<<<<<<<<<<<<<
 *                                                        self.__set_matrix_solver_parameters__)
 *         self.solver_parameters = __Parameters__(self.__get_solver_parameters__,
 */
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->matrix_solver_parameters);
  __Pyx_DECREF(__pyx_v_self->matrix_solver_parameters);
  __pyx_v_self->matrix_solver_parameters = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "../resources_source/python/pyfield.pxi":198
 *         self.matrix_solver_parameters = __Parameters__(self.__get_matrix_solver_parameters__,
 *                                                        self.__set_matrix_solver_parameters__)
 *         self.solver_parameters = __Parameters__(self.__get_solver_parameters__,             # <<<<<<<<<<<<<<
 *                                                 self.__set_solver_parameters__)
 *         self.adaptivity_parameters = __Parameters__(self.__get_adaptivity_parameters__,
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_Parameters); if (unlikely(!__pyx_t_2)) __PYX_ERR(4, 198, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_9 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_get_solver_parameters); if (unlikely(!__pyx_t_9)) __PYX_ERR(4, 198, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);

  /* "../resources_source/python/pyfield.pxi":199
 *                                                        self.__set_matrix_solver_parameters__)
 *         self.solver_parameters = __Parameters__(self.__get_solver_parameters__,
 *                                                 self.__set_solver_parameters__)             # <<<<<<<<<<<<<<
 *         self.adaptivity_parameters = __Parameters__(self.__get_adaptivity_parameters__,
 *                                                     self.__set_adaptivity_parameters__)
 */
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_set_solver_parameters); if (unlikely(!__pyx_t_6)) __PYX_ERR(4, 199, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_3 = NULL;
  __pyx_t_8 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_8 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[3] = {__pyx_t_3, __pyx_t_9, __pyx_t_6};
    __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_8, 2+__pyx_t_8); if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 198, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[3] = {__pyx_t_3, __pyx_t_9, __pyx_t_6};
    __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_8, 2+__pyx_t_8); if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 198, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  } else
  #endif
  {
    __pyx_t_7 = PyTuple_New(2+__pyx_t_8); if (unlikely(!__pyx_t_7)) __PYX_ERR(4, 198, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    if (__pyx_t_3) {
      __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_3); __pyx_t_3 = NULL;
    }
    __Pyx_GIVEREF(__pyx_t_9);
    PyTuple_SET_ITEM(__pyx_t_7, 0+__pyx_t_8, __pyx_t_9);
    __Pyx_GIVEREF(__pyx_t_6);
    PyTuple_SET_ITEM(__pyx_t_7, 1+__pyx_t_8, __pyx_t_6);
    __pyx_t_9 = 0;
    __pyx_t_6 = 0;
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_7, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 198, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "../resources_source/python/pyfield.pxi":198
 *         self.matrix_solver_parameters = __Parameters__(self.__get_matrix_solver_parameters__,
 *                                                        self.__set_matrix_solver_parameters__)
 *         self.solver_parameters = __Parameters__(self.__get_solver_parameters__,             # <<<<<<<<<<<<<<
 *                                                 self.__set_solver_parameters__)
 *         self.adaptivity_parameters = __Parameters__(self.__get_adaptivity_parameters__,
 */
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->solver_parameters);
  __Pyx_DECREF(__pyx_v_self->solver_parameters);
  __pyx_v_self->solver_parameters = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "../resources_source/python/pyfield.pxi":200
 *         self.solver_parameters = __Parameters__(self.__get_solver_parameters__,
 *                                                 self.__set_solver_parameters__)
 *         self.adaptivity_parameters = __Parameters__(self.__get_adaptivity_parameters__,             # <<<<<<<<<<<<<<
 *                                                     self.__set_adaptivity_parameters__)
 *         self._adaptivity_callback = None
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_Parameters); if (unlikely(!__pyx_t_2)) __PYX_ERR(4, 200, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_7 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_get_adaptivity_parameters); if (unlikely(!__pyx_t_7)) __PYX_ERR(4, 200, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);

  /* "../resources_source/python/pyfield.pxi":201
 *                                                 self.__set_solver_parameters__)
 *         self.adaptivity_parameters = __Parameters__(self.__get_adaptivity_parameters__,
 *                                                     self.__set_adaptivity_parameters__)             # <<<<<<<<<<<<<<
 *         self._adaptivity_callback = None
 * 
 */
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_set_adaptivity_parameters); if (unlikely(!__pyx_t_6)) __PYX_ERR(4, 201, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_9 = NULL;
  __pyx_t_8 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_9)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_9);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_8 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[3] = {__pyx_t_9, __pyx_t_7, __pyx_t_6};
    __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_8, 2+__pyx_t_8); if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 200, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[3] = {__pyx_t_9, __pyx_t_7, __pyx_t_6};
    __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_8, 2+__pyx_t_8); if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 200, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  } else
  #endif
  {
    __pyx_t_3 = PyTuple_New(2+__pyx_t_8); if (unlikely(!__pyx_t_3)) __PYX_ERR(4, 200, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (__pyx_t_9) {
      __Pyx_GIVEREF(__pyx_t_9); PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_9); __pyx_t_9 = NULL;
    }
    __Pyx_GIVEREF(__pyx_t_7);
    PyTuple_SET_ITEM(__pyx_t_3, 0+__pyx_t_8, __pyx_t_7);
    __Pyx_GIVEREF(__pyx_t_6);
    PyTuple_SET_ITEM(__pyx_t_3, 1+__pyx_t_8, __pyx_t_6);
    __pyx_t_7 = 0;
    __pyx_t_6 = 0;
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_3, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 200, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "../resources_source/python/pyfield.pxi":200
 *         self.solver_parameters = __Parameters__(self.__get_solver_parameters__,
 *                                                 self.__set_solver_parameters__)
 *         self.adaptivity_parameters = __Parameters__(self.__get_adaptivity_parameters__,             # <<<<<<<<<<<<<<
 *                                                     self.__set_adaptivity_parameters__)
 *         self._adaptivity_callback = None
 */
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->adaptivity_parameters);
  __Pyx_DECREF(__pyx_v_self->adaptivity_parameters);
  __pyx_v_self->adaptivity_parameters = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "../resources_source/python/pyfield.pxi":202
 *         self.adaptivity_parameters = __Parameters__(self.__get_adaptivity_parameters__,
 *                                                     self.__set_adaptivity_parameters__)
 *         self._adaptivity_callback = None             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(self):
 */
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->_adaptivity_callback);
  __Pyx_DECREF(__pyx_v_self->_adaptivity_callback);
  __pyx_v_self->_adaptivity_callback = Py_None;

  /* "../resources_source/python/pyfield.pxi":194
 *     cdef object _adaptivity_callback
 * 
 *     def __cinit__(self, field_id):             # <<<<<<<<<<<<<<
 *         self.thisptr = new PyField(field_id.encode())
 *         self.matrix_solver_parameters = __Parameters__(self.__get_matrix_solver_parameters__,
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("_agros.__Field__.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../resources_source/python/pyfield.pxi":204
 *         self._adaptivity_callback = None
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.thisptr
 * 
 */

/* Python wrapper */
static void __pyx_pw_6_agros_9__Field___3__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_6_agros_9__Field___3__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_6_agros_9__Field___2__dealloc__(((struct __pyx_obj_6_agros___Field__ *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_6_agros_9__Field___2__dealloc__(struct __pyx_obj_6_agros___Field__ *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "../resources_source/python/pyfield.pxi":205
 * 
 *     def __dealloc__(self):
 *         del self.thisptr             # <<<<<<<<<<<<<<
 * 
 *     # field id
 */
  delete __pyx_v_self->thisptr;

  /* "../resources_source/python/pyfield.pxi":204
 *         self._adaptivity_callback = None
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.thisptr
 * 
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "../resources_source/python/pyfield.pxi":209
 *     # field id
 *     property field_id:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.thisptr.fieldId().decode()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6_agros_9__Field___8field_id_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6_agros_9__Field___8field_id_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6_agros_9__Field___8field_id___get__(((struct __pyx_obj_6_agros___Field__ *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6_agros_9__Field___8field_id___get__(struct __pyx_obj_6_agros___Field__ *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "../resources_source/python/pyfield.pxi":210
 *     property field_id:
 *         def __get__(self):
 *             return self.thisptr.fieldId().decode()             # <<<<<<<<<<<<<<
 * 
 *     # analysis
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_decode_cpp_string(__pyx_v_self->thisptr->fieldId(), 0, PY_SSIZE_T_MAX, NULL, NULL, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 210, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../resources_source/python/pyfield.pxi":209
 *     # field id
 *     property field_id:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.thisptr.fieldId().decode()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("_agros.__Field__.field_id.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../resources_source/python/pyfield.pxi":214
 *     # analysis
 *     property analysis_type:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.thisptr.getAnalysisType().decode()
 *         def __set__(self, analysis):
 */

/* Python wrapper */
static PyObject *__pyx_pw_6_agros_9__Field___13analysis_type_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6_agros_9__Field___13analysis_type_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6_agros_9__Field___13analysis_type___get__(((struct __pyx_obj_6_agros___Field__ *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6_agros_9__Field___13analysis_type___get__(struct __pyx_obj_6_agros___Field__ *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "../resources_source/python/pyfield.pxi":215
 *     property analysis_type:
 *         def __get__(self):
 *             return self.thisptr.getAnalysisType().decode()             # <<<<<<<<<<<<<<
 *         def __set__(self, analysis):
 *             self.thisptr.setAnalysisType(analysis.encode())
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_decode_cpp_string(__pyx_v_self->thisptr->getAnalysisType(), 0, PY_SSIZE_T_MAX, NULL, NULL, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 215, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../resources_source/python/pyfield.pxi":214
 *     # analysis
 *     property analysis_type:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.thisptr.getAnalysisType().decode()
 *         def __set__(self, analysis):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("_agros.__Field__.analysis_type.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../resources_source/python/pyfield.pxi":216
 *         def __get__(self):
 *             return self.thisptr.getAnalysisType().decode()
 *         def __set__(self, analysis):             # <<<<<<<<<<<<<<
 *             self.thisptr.setAnalysisType(analysis.encode())
 * 
 */

/* Python wrapper */
static int __pyx_pw_6_agros_9__Field___13analysis_type_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_analysis); /*proto*/
static int __pyx_pw_6_agros_9__Field___13analysis_type_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_analysis) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6_agros_9__Field___13analysis_type_2__set__(((struct __pyx_obj_6_agros___Field__ *)__pyx_v_self), ((PyObject *)__pyx_v_analysis));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6_agros_9__Field___13analysis_type_2__set__(struct __pyx_obj_6_agros___Field__ *__pyx_v_self, PyObject *__pyx_v_analysis) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  std::string __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "../resources_source/python/pyfield.pxi":217
 *             return self.thisptr.getAnalysisType().decode()
 *         def __set__(self, analysis):
 *             self.thisptr.setAnalysisType(analysis.encode())             # <<<<<<<<<<<<<<
 * 
 *     # solver
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_analysis, __pyx_n_s_encode); if (unlikely(!__pyx_t_2)) __PYX_ERR(4, 217, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 217, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = __pyx_convert_string_from_py_std__in_string(__pyx_t_1); if (unlikely(PyErr_Occurred())) __PYX_ERR(4, 217, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  try {
    __pyx_v_self->thisptr->setAnalysisType(__pyx_t_4);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(4, 217, __pyx_L1_error)
  }

  /* "../resources_source/python/pyfield.pxi":216
 *         def __get__(self):
 *             return self.thisptr.getAnalysisType().decode()
 *         def __set__(self, analysis):             # <<<<<<<<<<<<<<
 *             self.thisptr.setAnalysisType(analysis.encode())
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("_agros.__Field__.analysis_type.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../resources_source/python/pyfield.pxi":221
 *     # solver
 *     property solver:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.thisptr.getLinearityType().decode()
 *         def __set__(self, solver):
 */

/* Python wrapper */
static PyObject *__pyx_pw_6_agros_9__Field___6solver_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6_agros_9__Field___6solver_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6_agros_9__Field___6solver___get__(((struct __pyx_obj_6_agros___Field__ *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6_agros_9__Field___6solver___get__(struct __pyx_obj_6_agros___Field__ *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "../resources_source/python/pyfield.pxi":222
 *     property solver:
 *         def __get__(self):
 *             return self.thisptr.getLinearityType().decode()             # <<<<<<<<<<<<<<
 *         def __set__(self, solver):
 *             self.thisptr.setLinearityType(solver.encode())
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_decode_cpp_string(__pyx_v_self->thisptr->getLinearityType(), 0, PY_SSIZE_T_MAX, NULL, NULL, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 222, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../resources_source/python/pyfield.pxi":221
 *     # solver
 *     property solver:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.thisptr.getLinearityType().decode()
 *         def __set__(self, solver):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("_agros.__Field__.solver.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../resources_source/python/pyfield.pxi":223
 *         def __get__(self):
 *             return self.thisptr.getLinearityType().decode()
 *         def __set__(self, solver):             # <<<<<<<<<<<<<<
 *             self.thisptr.setLinearityType(solver.encode())
 * 
 */

/* Python wrapper */
static int __pyx_pw_6_agros_9__Field___6solver_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_solver); /*proto*/
static int __pyx_pw_6_agros_9__Field___6solver_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_solver) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6_agros_9__Field___6solver_2__set__(((struct __pyx_obj_6_agros___Field__ *)__pyx_v_self), ((PyObject *)__pyx_v_solver));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6_agros_9__Field___6solver_2__set__(struct __pyx_obj_6_agros___Field__ *__pyx_v_self, PyObject *__pyx_v_solver) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  std::string __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "../resources_source/python/pyfield.pxi":224
 *             return self.thisptr.getLinearityType().decode()
 *         def __set__(self, solver):
 *             self.thisptr.setLinearityType(solver.encode())             # <<<<<<<<<<<<<<
 * 
 *     property solver_parameters:
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_solver, __pyx_n_s_encode); if (unlikely(!__pyx_t_2)) __PYX_ERR(4, 224, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 224, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = __pyx_convert_string_from_py_std__in_string(__pyx_t_1); if (unlikely(PyErr_Occurred())) __PYX_ERR(4, 224, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  try {
    __pyx_v_self->thisptr->setLinearityType(__pyx_t_4);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(4, 224, __pyx_L1_error)
  }

  /* "../resources_source/python/pyfield.pxi":223
 *         def __get__(self):
 *             return self.thisptr.getLinearityType().decode()
 *         def __set__(self, solver):             # <<<<<<<<<<<<<<
 *             self.thisptr.setLinearityType(solver.encode())
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("_agros.__Field__.solver.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../resources_source/python/pyfield.pxi":227
 * 
 *     property solver_parameters:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.solver_parameters.get_parameters()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6_agros_9__Field___17solver_parameters_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6_agros_9__Field___17solver_parameters_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6_agros_9__Field___17solver_parameters___get__(((struct __pyx_obj_6_agros___Field__ *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6_agros_9__Field___17solver_parameters___get__(struct __pyx_obj_6_agros___Field__ *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "../resources_source/python/pyfield.pxi":228
 *     property solver_parameters:
 *         def __get__(self):
 *             return self.solver_parameters.get_parameters()             # <<<<<<<<<<<<<<
 * 
 *     property adaptivity_callback:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->solver_parameters, __pyx_n_s_get_parameters); if (unlikely(!__pyx_t_2)) __PYX_ERR(4, 228, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 228, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../resources_source/python/pyfield.pxi":227
 * 
 *     property solver_parameters:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.solver_parameters.get_parameters()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("_agros.__Field__.solver_parameters.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../resources_source/python/pyfield.pxi":231
 * 
 *     property adaptivity_callback:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self._adaptivity_callback
 *         def __set__(self, callback):
 */

/* Python wrapper */
static PyObject *__pyx_pw_6_agros_9__Field___19adaptivity_callback_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6_agros_9__Field___19adaptivity_callback_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6_agros_9__Field___19adaptivity_callback___get__(((struct __pyx_obj_6_agros___Field__ *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6_agros_9__Field___19adaptivity_callback___get__(struct __pyx_obj_6_agros___Field__ *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "../resources_source/python/pyfield.pxi":232
 *     property adaptivity_callback:
 *         def __get__(self):
 *             return self._adaptivity_callback             # <<<<<<<<<<<<<<
 *         def __set__(self, callback):
 *             self._adaptivity_callback = callback
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->_adaptivity_callback);
  __pyx_r = __pyx_v_self->_adaptivity_callback;
  goto __pyx_L0;

  /* "../resources_source/python/pyfield.pxi":231
 * 
 *     property adaptivity_callback:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self._adaptivity_callback
 *         def __set__(self, callback):
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../resources_source/python/pyfield.pxi":233
 *         def __get__(self):
 *             return self._adaptivity_callback
 *         def __set__(self, callback):             # <<<<<<<<<<<<<<
 *             self._adaptivity_callback = callback
 * 
 */

/* Python wrapper */
static int __pyx_pw_6_agros_9__Field___19adaptivity_callback_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_callback); /*proto*/
static int __pyx_pw_6_agros_9__Field___19adaptivity_callback_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_callback) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6_agros_9__Field___19adaptivity_callback_2__set__(((struct __pyx_obj_6_agros___Field__ *)__pyx_v_self), ((PyObject *)__pyx_v_callback));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6_agros_9__Field___19adaptivity_callback_2__set__(struct __pyx_obj_6_agros___Field__ *__pyx_v_self, PyObject *__pyx_v_callback) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "../resources_source/python/pyfield.pxi":234
 *             return self._adaptivity_callback
 *         def __set__(self, callback):
 *             self._adaptivity_callback = callback             # <<<<<<<<<<<<<<
 * 
 *     def __get_solver_parameters__(self):
 */
  __Pyx_INCREF(__pyx_v_callback);
  __Pyx_GIVEREF(__pyx_v_callback);
  __Pyx_GOTREF(__pyx_v_self->_adaptivity_callback);
  __Pyx_DECREF(__pyx_v_self->_adaptivity_callback);
  __pyx_v_self->_adaptivity_callback = __pyx_v_callback;

  /* "../resources_source/python/pyfield.pxi":233
 *         def __get__(self):
 *             return self._adaptivity_callback
 *         def __set__(self, callback):             # <<<<<<<<<<<<<<
 *             self._adaptivity_callback = callback
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../resources_source/python/pyfield.pxi":236
 *             self._adaptivity_callback = callback
 * 
 *     def __get_solver_parameters__(self):             # <<<<<<<<<<<<<<
 *         return {'residual' : self.thisptr.getDoubleParameter(b'NonlinearResidualNorm'),
 *                 'relative_change_of_solutions' : self.thisptr.getDoubleParameter(b'NonlinearRelativeChangeOfSolutions'),
 */

/* Python wrapper */
static PyObject *__pyx_pw_6_agros_9__Field___5__get_solver_parameters__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_6_agros_9__Field___5__get_solver_parameters__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get_solver_parameters__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6_agros_9__Field___4__get_solver_parameters__(((struct __pyx_obj_6_agros___Field__ *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6_agros_9__Field___4__get_solver_parameters__(struct __pyx_obj_6_agros___Field__ *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  std::string __pyx_t_2;
  double __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  bool __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get_solver_parameters__", 0);

  /* "../resources_source/python/pyfield.pxi":237
 * 
 *     def __get_solver_parameters__(self):
 *         return {'residual' : self.thisptr.getDoubleParameter(b'NonlinearResidualNorm'),             # <<<<<<<<<<<<<<
 *                 'relative_change_of_solutions' : self.thisptr.getDoubleParameter(b'NonlinearRelativeChangeOfSolutions'),
 *                 'damping' : self.thisptr.getNonlinearDampingType().decode(),
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyDict_NewPresized(12); if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 237, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_convert_string_from_py_std__in_string(__pyx_n_b_NonlinearResidualNorm); if (unlikely(PyErr_Occurred())) __PYX_ERR(4, 237, __pyx_L1_error)
  try {
    __pyx_t_3 = __pyx_v_self->thisptr->getDoubleParameter(__pyx_t_2);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(4, 237, __pyx_L1_error)
  }
  __pyx_t_4 = PyFloat_FromDouble(__pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(4, 237, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_residual, __pyx_t_4) < 0) __PYX_ERR(4, 237, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "../resources_source/python/pyfield.pxi":238
 *     def __get_solver_parameters__(self):
 *         return {'residual' : self.thisptr.getDoubleParameter(b'NonlinearResidualNorm'),
 *                 'relative_change_of_solutions' : self.thisptr.getDoubleParameter(b'NonlinearRelativeChangeOfSolutions'),             # <<<<<<<<<<<<<<
 *                 'damping' : self.thisptr.getNonlinearDampingType().decode(),
 *                 'damping_factor' : self.thisptr.getDoubleParameter(b'NonlinearDampingCoeff'),
 */
  __pyx_t_2 = __pyx_convert_string_from_py_std__in_string(__pyx_n_b_NonlinearRelativeChangeOfSolutio); if (unlikely(PyErr_Occurred())) __PYX_ERR(4, 238, __pyx_L1_error)
  try {
    __pyx_t_3 = __pyx_v_self->thisptr->getDoubleParameter(__pyx_t_2);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(4, 238, __pyx_L1_error)
  }
  __pyx_t_4 = PyFloat_FromDouble(__pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(4, 238, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_relative_change_of_solutions, __pyx_t_4) < 0) __PYX_ERR(4, 237, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "../resources_source/python/pyfield.pxi":239
 *         return {'residual' : self.thisptr.getDoubleParameter(b'NonlinearResidualNorm'),
 *                 'relative_change_of_solutions' : self.thisptr.getDoubleParameter(b'NonlinearRelativeChangeOfSolutions'),
 *                 'damping' : self.thisptr.getNonlinearDampingType().decode(),             # <<<<<<<<<<<<<<
 *                 'damping_factor' : self.thisptr.getDoubleParameter(b'NonlinearDampingCoeff'),
 *                 'damping_factor_decrease_ratio' : self.thisptr.getDoubleParameter(b'NonlinearDampingFactorDecreaseRatio'),
 */
  __pyx_t_4 = __Pyx_decode_cpp_string(__pyx_v_self->thisptr->getNonlinearDampingType(), 0, PY_SSIZE_T_MAX, NULL, NULL, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(4, 239, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_damping, __pyx_t_4) < 0) __PYX_ERR(4, 237, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "../resources_source/python/pyfield.pxi":240
 *                 'relative_change_of_solutions' : self.thisptr.getDoubleParameter(b'NonlinearRelativeChangeOfSolutions'),
 *                 'damping' : self.thisptr.getNonlinearDampingType().decode(),
 *                 'damping_factor' : self.thisptr.getDoubleParameter(b'NonlinearDampingCoeff'),             # <<<<<<<<<<<<<<
 *                 'damping_factor_decrease_ratio' : self.thisptr.getDoubleParameter(b'NonlinearDampingFactorDecreaseRatio'),
 *                 'damping_factor_increase_steps' : self.thisptr.getIntParameter(b'NonlinearStepsToIncreaseDampingFactor'),
 */
  __pyx_t_2 = __pyx_convert_string_from_py_std__in_string(__pyx_n_b_NonlinearDampingCoeff); if (unlikely(PyErr_Occurred())) __PYX_ERR(4, 240, __pyx_L1_error)
  try {
    __pyx_t_3 = __pyx_v_self->thisptr->getDoubleParameter(__pyx_t_2);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(4, 240, __pyx_L1_error)
  }
  __pyx_t_4 = PyFloat_FromDouble(__pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(4, 240, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_damping_factor, __pyx_t_4) < 0) __PYX_ERR(4, 237, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "../resources_source/python/pyfield.pxi":241
 *                 'damping' : self.thisptr.getNonlinearDampingType().decode(),
 *                 'damping_factor' : self.thisptr.getDoubleParameter(b'NonlinearDampingCoeff'),
 *                 'damping_factor_decrease_ratio' : self.thisptr.getDoubleParameter(b'NonlinearDampingFactorDecreaseRatio'),             # <<<<<<<<<<<<<<
 *                 'damping_factor_increase_steps' : self.thisptr.getIntParameter(b'NonlinearStepsToIncreaseDampingFactor'),
 *                 'jacobian_reuse' : self.thisptr.getBoolParameter(b'NewtonReuseJacobian'),
 */
  __pyx_t_2 = __pyx_convert_string_from_py_std__in_string(__pyx_n_b_NonlinearDampingFactorDecreaseRa); if (unlikely(PyErr_Occurred())) __PYX_ERR(4, 241, __pyx_L1_error)
  try {
    __pyx_t_3 = __pyx_v_self->thisptr->getDoubleParameter(__pyx_t_2);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(4, 241, __pyx_L1_error)
  }
  __pyx_t_4 = PyFloat_FromDouble(__pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(4, 241, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_damping_factor_decrease_ratio, __pyx_t_4) < 0) __PYX_ERR(4, 237, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "../resources_source/python/pyfield.pxi":242
 *                 'damping_factor' : self.thisptr.getDoubleParameter(b'NonlinearDampingCoeff'),
 *                 'damping_factor_decrease_ratio' : self.thisptr.getDoubleParameter(b'NonlinearDampingFactorDecreaseRatio'),
 *                 'damping_factor_increase_steps' : self.thisptr.getIntParameter(b'NonlinearStepsToIncreaseDampingFactor'),             # <<<<<<<<<<<<<<
 *                 'jacobian_reuse' : self.thisptr.getBoolParameter(b'NewtonReuseJacobian'),
 *                 'jacobian_reuse_ratio' : self.thisptr.getDoubleParameter(b'NewtonJacobianReuseRatio'),
 */
  __pyx_t_2 = __pyx_convert_string_from_py_std__in_string(__pyx_n_b_NonlinearStepsToIncreaseDampingF); if (unlikely(PyErr_Occurred())) __PYX_ERR(4, 242, __pyx_L1_error)
  try {
    __pyx_t_5 = __pyx_v_self->thisptr->getIntParameter(__pyx_t_2);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(4, 242, __pyx_L1_error)
  }
  __pyx_t_4 = __Pyx_PyInt_From_int(__pyx_t_5); if (unlikely(!__pyx_t_4)) __PYX_ERR(4, 242, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_damping_factor_increase_steps, __pyx_t_4) < 0) __PYX_ERR(4, 237, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "../resources_source/python/pyfield.pxi":243
 *                 'damping_factor_decrease_ratio' : self.thisptr.getDoubleParameter(b'NonlinearDampingFactorDecreaseRatio'),
 *                 'damping_factor_increase_steps' : self.thisptr.getIntParameter(b'NonlinearStepsToIncreaseDampingFactor'),
 *                 'jacobian_reuse' : self.thisptr.getBoolParameter(b'NewtonReuseJacobian'),             # <<<<<<<<<<<<<<
 *                 'jacobian_reuse_ratio' : self.thisptr.getDoubleParameter(b'NewtonJacobianReuseRatio'),
 *                 'jacobian_reuse_steps' : self.thisptr.getIntParameter(b'NewtonMaxStepsReuseJacobian'),
 */
  __pyx_t_2 = __pyx_convert_string_from_py_std__in_string(__pyx_n_b_NewtonReuseJacobian); if (unlikely(PyErr_Occurred())) __PYX_ERR(4, 243, __pyx_L1_error)
  try {
    __pyx_t_6 = __pyx_v_self->thisptr->getBoolParameter(__pyx_t_2);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(4, 243, __pyx_L1_error)
  }
  __pyx_t_4 = __Pyx_PyBool_FromLong(__pyx_t_6); if (unlikely(!__pyx_t_4)) __PYX_ERR(4, 243, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_jacobian_reuse, __pyx_t_4) < 0) __PYX_ERR(4, 237, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "../resources_source/python/pyfield.pxi":244
 *                 'damping_factor_increase_steps' : self.thisptr.getIntParameter(b'NonlinearStepsToIncreaseDampingFactor'),
 *                 'jacobian_reuse' : self.thisptr.getBoolParameter(b'NewtonReuseJacobian'),
 *                 'jacobian_reuse_ratio' : self.thisptr.getDoubleParameter(b'NewtonJacobianReuseRatio'),             # <<<<<<<<<<<<<<
 *                 'jacobian_reuse_steps' : self.thisptr.getIntParameter(b'NewtonMaxStepsReuseJacobian'),
 *                 'anderson_acceleration' : self.thisptr.getBoolParameter(b'PicardAndersonAcceleration'),
 */
  __pyx_t_2 = __pyx_convert_string_from_py_std__in_string(__pyx_n_b_NewtonJacobianReuseRatio); if (unlikely(PyErr_Occurred())) __PYX_ERR(4, 244, __pyx_L1_error)
  try {
    __pyx_t_3 = __pyx_v_self->thisptr->getDoubleParameter(__pyx_t_2);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(4, 244, __pyx_L1_error)
  }
  __pyx_t_4 = PyFloat_FromDouble(__pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(4, 244, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_jacobian_reuse_ratio, __pyx_t_4) < 0) __PYX_ERR(4, 237, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "../resources_source/python/pyfield.pxi":245
 *                 'jacobian_reuse' : self.thisptr.getBoolParameter(b'NewtonReuseJacobian'),
 *                 'jacobian_reuse_ratio' : self.thisptr.getDoubleParameter(b'NewtonJacobianReuseRatio'),
 *                 'jacobian_reuse_steps' : self.thisptr.getIntParameter(b'NewtonMaxStepsReuseJacobian'),             # <<<<<<<<<<<<<<
 *                 'anderson_acceleration' : self.thisptr.getBoolParameter(b'PicardAndersonAcceleration'),
 *                 'anderson_beta' : self.thisptr.getDoubleParameter(b'PicardAndersonBeta'),
 */
  __pyx_t_2 = __pyx_convert_string_from_py_std__in_string(__pyx_n_b_NewtonMaxStepsReuseJacobian); if (unlikely(PyErr_Occurred())) __PYX_ERR(4, 245, __pyx_L1_error)
  try {
    __pyx_t_5 = __pyx_v_self->thisptr->getIntParameter(__pyx_t_2);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(4, 245, __pyx_L1_error)
  }
  __pyx_t_4 = __Pyx_PyInt_From_int(__pyx_t_5); if (unlikely(!__pyx_t_4)) __PYX_ERR(4, 245, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_jacobian_reuse_steps, __pyx_t_4) < 0) __PYX_ERR(4, 237, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "../resources_source/python/pyfield.pxi":246
 *                 'jacobian_reuse_ratio' : self.thisptr.getDoubleParameter(b'NewtonJacobianReuseRatio'),
 *                 'jacobian_reuse_steps' : self.thisptr.getIntParameter(b'NewtonMaxStepsReuseJacobian'),
 *                 'anderson_acceleration' : self.thisptr.getBoolParameter(b'PicardAndersonAcceleration'),             # <<<<<<<<<<<<<<
 *                 'anderson_beta' : self.thisptr.getDoubleParameter(b'PicardAndersonBeta'),
 *                 'anderson_last_vectors' : self.thisptr.getIntParameter(b'PicardAndersonNumberOfLastVectors')}
 */
  __pyx_t_2 = __pyx_convert_string_from_py_std__in_string(__pyx_n_b_PicardAndersonAcceleration); if (unlikely(PyErr_Occurred())) __PYX_ERR(4, 246, __pyx_L1_error)
  try {
    __pyx_t_6 = __pyx_v_self->thisptr->getBoolParameter(__pyx_t_2);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(4, 246, __pyx_L1_error)
  }
  __pyx_t_4 = __Pyx_PyBool_FromLong(__pyx_t_6); if (unlikely(!__pyx_t_4)) __PYX_ERR(4, 246, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_anderson_acceleration, __pyx_t_4) < 0) __PYX_ERR(4, 237, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "../resources_source/python/pyfield.pxi":247
 *                 'jacobian_reuse_steps' : self.thisptr.getIntParameter(b'NewtonMaxStepsReuseJacobian'),
 *                 'anderson_acceleration' : self.thisptr.getBoolParameter(b'PicardAndersonAcceleration'),
 *                 'anderson_beta' : self.thisptr.getDoubleParameter(b'PicardAndersonBeta'),             # <<<<<<<<<<<<<<
 *                 'anderson_last_vectors' : self.thisptr.getIntParameter(b'PicardAndersonNumberOfLastVectors')}
 * 
 */
  __pyx_t_2 = __pyx_convert_string_from_py_std__in_string(__pyx_n_b_PicardAndersonBeta); if (unlikely(PyErr_Occurred())) __PYX_ERR(4, 247, __pyx_L1_error)
  try {
    __pyx_t_3 = __pyx_v_self->thisptr->getDoubleParameter(__pyx_t_2);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(4, 247, __pyx_L1_error)
  }
  __pyx_t_4 = PyFloat_FromDouble(__pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(4, 247, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_anderson_beta, __pyx_t_4) < 0) __PYX_ERR(4, 237, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "../resources_source/python/pyfield.pxi":248
 *                 'anderson_acceleration' : self.thisptr.getBoolParameter(b'PicardAndersonAcceleration'),
 *                 'anderson_beta' : self.thisptr.getDoubleParameter(b'PicardAndersonBeta'),
 *                 'anderson_last_vectors' : self.thisptr.getIntParameter(b'PicardAndersonNumberOfLastVectors')}             # <<<<<<<<<<<<<<
 * 
 *     def __set_solver_parameters__(self, parameters):
 */
  __pyx_t_2 = __pyx_convert_string_from_py_std__in_string(__pyx_n_b_PicardAndersonNumberOfLastVector); if (unlikely(PyErr_Occurred())) __PYX_ERR(4, 248, __pyx_L1_error)
  try {
    __pyx_t_5 = __pyx_v_self->thisptr->getIntParameter(__pyx_t_2);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(4, 248, __pyx_L1_error)
  }
  __pyx_t_4 = __Pyx_PyInt_From_int(__pyx_t_5); if (unlikely(!__pyx_t_4)) __PYX_ERR(4, 248, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_anderson_last_vectors, __pyx_t_4) < 0) __PYX_ERR(4, 237, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../resources_source/python/pyfield.pxi":236
 *             self._adaptivity_callback = callback
 * 
 *     def __get_solver_parameters__(self):             # <<<<<<<<<<<<<<
 *         return {'residual' : self.thisptr.getDoubleParameter(b'NonlinearResidualNorm'),
 *                 'relative_change_of_solutions' : self.thisptr.getDoubleParameter(b'NonlinearRelativeChangeOfSolutions'),
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("_agros.__Field__.__get_solver_parameters__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../resources_source/python/pyfield.pxi":250
 *                 'anderson_last_vectors' : self.thisptr.getIntParameter(b'PicardAndersonNumberOfLastVectors')}
 * 
 *     def __set_solver_parameters__(self, parameters):             # <<<<<<<<<<<<<<
 *         # residual
 *         positive_value(parameters['residual'], 'residual')
 */

/* Python wrapper */
static PyObject *__pyx_pw_6_agros_9__Field___7__set_solver_parameters__(PyObject *__pyx_v_self, PyObject *__pyx_v_parameters); /*proto*/
static PyObject *__pyx_pw_6_agros_9__Field___7__set_solver_parameters__(PyObject *__pyx_v_self, PyObject *__pyx_v_parameters) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set_solver_parameters__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6_agros_9__Field___6__set_solver_parameters__(((struct __pyx_obj_6_agros___Field__ *)__pyx_v_self), ((PyObject *)__pyx_v_parameters));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6_agros_9__Field___6__set_solver_parameters__(struct __pyx_obj_6_agros___Field__ *__pyx_v_self, PyObject *__pyx_v_parameters) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  double __pyx_t_7;
  std::string __pyx_t_8;
  bool __pyx_t_9;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set_solver_parameters__", 0);

  /* "../resources_source/python/pyfield.pxi":252
 *     def __set_solver_parameters__(self, parameters):
 *         # residual
 *         positive_value(parameters['residual'], 'residual')             # <<<<<<<<<<<<<<
 *         self.thisptr.setParameter(string(b'NonlinearResidualNorm'), <double>parameters['residual'])
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_positive_value); if (unlikely(!__pyx_t_2)) __PYX_ERR(4, 252, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_Dict_GetItem(__pyx_v_parameters, __pyx_n_s_residual); if (unlikely(!__pyx_t_3)) __PYX_ERR(4, 252, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = NULL;
  __pyx_t_5 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_5 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[3] = {__pyx_t_4, __pyx_t_3, __pyx_n_s_residual};
    __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_5, 2+__pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 252, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[3] = {__pyx_t_4, __pyx_t_3, __pyx_n_s_residual};
    __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_5, 2+__pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 252, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else
  #endif
  {
    __pyx_t_6 = PyTuple_New(2+__pyx_t_5); if (unlikely(!__pyx_t_6)) __PYX_ERR(4, 252, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    if (__pyx_t_4) {
      __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_4); __pyx_t_4 = NULL;
    }
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_6, 0+__pyx_t_5, __pyx_t_3);
    __Pyx_INCREF(__pyx_n_s_residual);
    __Pyx_GIVEREF(__pyx_n_s_residual);
    PyTuple_SET_ITEM(__pyx_t_6, 1+__pyx_t_5, __pyx_n_s_residual);
    __pyx_t_3 = 0;
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_6, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 252, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "../resources_source/python/pyfield.pxi":253
 *         # residual
 *         positive_value(parameters['residual'], 'residual')
 *         self.thisptr.setParameter(string(b'NonlinearResidualNorm'), <double>parameters['residual'])             # <<<<<<<<<<<<<<
 * 
 *         # relative change of solutions
 */
  __pyx_t_1 = __Pyx_PyObject_Dict_GetItem(__pyx_v_parameters, __pyx_n_s_residual); if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 253, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_7 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_7 == (double)-1) && PyErr_Occurred())) __PYX_ERR(4, 253, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  try {
    __pyx_v_self->thisptr->setParameter(std::string(((char *)"NonlinearResidualNorm")), ((double)__pyx_t_7));
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(4, 253, __pyx_L1_error)
  }

  /* "../resources_source/python/pyfield.pxi":256
 * 
 *         # relative change of solutions
 *         positive_value(parameters['relative_change_of_solutions'], 'relative_change_of_solutions')             # <<<<<<<<<<<<<<
 *         self.thisptr.setParameter(string(b'NonlinearRelativeChangeOfSolutions'), <double>parameters['relative_change_of_solutions'])
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_positive_value); if (unlikely(!__pyx_t_2)) __PYX_ERR(4, 256, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_6 = __Pyx_PyObject_Dict_GetItem(__pyx_v_parameters, __pyx_n_s_relative_change_of_solutions); if (unlikely(!__pyx_t_6)) __PYX_ERR(4, 256, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_3 = NULL;
  __pyx_t_5 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_5 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[3] = {__pyx_t_3, __pyx_t_6, __pyx_n_s_relative_change_of_solutions};
    __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_5, 2+__pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 256, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[3] = {__pyx_t_3, __pyx_t_6, __pyx_n_s_relative_change_of_solutions};
    __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_5, 2+__pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 256, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  } else
  #endif
  {
    __pyx_t_4 = PyTuple_New(2+__pyx_t_5); if (unlikely(!__pyx_t_4)) __PYX_ERR(4, 256, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    if (__pyx_t_3) {
      __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_3); __pyx_t_3 = NULL;
    }
    __Pyx_GIVEREF(__pyx_t_6);
    PyTuple_SET_ITEM(__pyx_t_4, 0+__pyx_t_5, __pyx_t_6);
    __Pyx_INCREF(__pyx_n_s_relative_change_of_solutions);
    __Pyx_GIVEREF(__pyx_n_s_relative_change_of_solutions);
    PyTuple_SET_ITEM(__pyx_t_4, 1+__pyx_t_5, __pyx_n_s_relative_change_of_solutions);
    __pyx_t_6 = 0;
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_4, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 256, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "../resources_source/python/pyfield.pxi":257
 *         # relative change of solutions
 *         positive_value(parameters['relative_change_of_solutions'], 'relative_change_of_solutions')
 *         self.thisptr.setParameter(string(b'NonlinearRelativeChangeOfSolutions'), <double>parameters['relative_change_of_solutions'])             # <<<<<<<<<<<<<<
 * 
 *         # damping type
 */
  __pyx_t_1 = __Pyx_PyObject_Dict_GetItem(__pyx_v_parameters, __pyx_n_s_relative_change_of_solutions); if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 257, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_7 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_7 == (double)-1) && PyErr_Occurred())) __PYX_ERR(4, 257, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  try {
    __pyx_v_self->thisptr->setParameter(std::string(((char *)"NonlinearRelativeChangeOfSolutions")), ((double)__pyx_t_7));
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(4, 257, __pyx_L1_error)
  }

  /* "../resources_source/python/pyfield.pxi":260
 * 
 *         # damping type
 *         self.thisptr.setNonlinearDampingType(parameters['damping'].encode())             # <<<<<<<<<<<<<<
 * 
 *         # damping factor
 */
  __pyx_t_2 = __Pyx_PyObject_Dict_GetItem(__pyx_v_parameters, __pyx_n_s_damping); if (unlikely(!__pyx_t_2)) __PYX_ERR(4, 260, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_encode); if (unlikely(!__pyx_t_4)) __PYX_ERR(4, 260, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  __pyx_t_1 = (__pyx_t_2) ? __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_2) : __Pyx_PyObject_CallNoArg(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 260, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_8 = __pyx_convert_string_from_py_std__in_string(__pyx_t_1); if (unlikely(PyErr_Occurred())) __PYX_ERR(4, 260, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  try {
    __pyx_v_self->thisptr->setNonlinearDampingType(__pyx_t_8);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(4, 260, __pyx_L1_error)
  }

  /* "../resources_source/python/pyfield.pxi":263
 * 
 *         # damping factor
 *         value_in_range(parameters['damping_factor'], 0.0, 1.0, 'damping_factor')             # <<<<<<<<<<<<<<
 *         self.thisptr.setParameter(string(b'NonlinearDampingCoeff'), <double>parameters['damping_factor'])
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_value_in_range); if (unlikely(!__pyx_t_4)) __PYX_ERR(4, 263, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_2 = __Pyx_PyObject_Dict_GetItem(__pyx_v_parameters, __pyx_n_s_damping_factor); if (unlikely(!__pyx_t_2)) __PYX_ERR(4, 263, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_6 = NULL;
  __pyx_t_5 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_6)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
      __pyx_t_5 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_4)) {
    PyObject *__pyx_temp[5] = {__pyx_t_6, __pyx_t_2, __pyx_float_0_0, __pyx_float_1_0, __pyx_n_s_damping_factor};
    __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_4, __pyx_temp+1-__pyx_t_5, 4+__pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 263, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_4)) {
    PyObject *__pyx_temp[5] = {__pyx_t_6, __pyx_t_2, __pyx_float_0_0, __pyx_float_1_0, __pyx_n_s_damping_factor};
    __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_4, __pyx_temp+1-__pyx_t_5, 4+__pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 263, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  } else
  #endif
  {
    __pyx_t_3 = PyTuple_New(4+__pyx_t_5); if (unlikely(!__pyx_t_3)) __PYX_ERR(4, 263, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (__pyx_t_6) {
      __Pyx_GIVEREF(__pyx_t_6); PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_6); __pyx_t_6 = NULL;
    }
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_3, 0+__pyx_t_5, __pyx_t_2);
    __Pyx_INCREF(__pyx_float_0_0);
    __Pyx_GIVEREF(__pyx_float_0_0);
    PyTuple_SET_ITEM(__pyx_t_3, 1+__pyx_t_5, __pyx_float_0_0);
    __Pyx_INCREF(__pyx_float_1_0);
    __Pyx_GIVEREF(__pyx_float_1_0);
    PyTuple_SET_ITEM(__pyx_t_3, 2+__pyx_t_5, __pyx_float_1_0);
    __Pyx_INCREF(__pyx_n_s_damping_factor);
    __Pyx_GIVEREF(__pyx_n_s_damping_factor);
    PyTuple_SET_ITEM(__pyx_t_3, 3+__pyx_t_5, __pyx_n_s_damping_factor);
    __pyx_t_2 = 0;
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_3, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 263, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "../resources_source/python/pyfield.pxi":264
 *         # damping factor
 *         value_in_range(parameters['damping_factor'], 0.0, 1.0, 'damping_factor')
 *         self.thisptr.setParameter(string(b'NonlinearDampingCoeff'), <double>parameters['damping_factor'])             # <<<<<<<<<<<<<<
 * 
 *         # damping decrese ratio
 */
  __pyx_t_1 = __Pyx_PyObject_Dict_GetItem(__pyx_v_parameters, __pyx_n_s_damping_factor); if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 264, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_7 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_7 == (double)-1) && PyErr_Occurred())) __PYX_ERR(4, 264, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  try {
    __pyx_v_self->thisptr->setParameter(std::string(((char *)"NonlinearDampingCoeff")), ((double)__pyx_t_7));
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(4, 264, __pyx_L1_error)
  }

  /* "../resources_source/python/pyfield.pxi":267
 * 
 *         # damping decrese ratio
 *         self.thisptr.setParameter(string(b'NonlinearDampingFactorDecreaseRatio'), <double>parameters['damping_factor_decrease_ratio'])             # <<<<<<<<<<<<<<
 * 
 *         # damping increase step
 */
  __pyx_t_1 = __Pyx_PyObject_Dict_GetItem(__pyx_v_parameters, __pyx_n_s_damping_factor_decrease_ratio); if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 267, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_7 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_7 == (double)-1) && PyErr_Occurred())) __PYX_ERR(4, 267, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  try {
    __pyx_v_self->thisptr->setParameter(std::string(((char *)"NonlinearDampingFactorDecreaseRatio")), ((double)__pyx_t_7));
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(4, 267, __pyx_L1_error)
  }

  /* "../resources_source/python/pyfield.pxi":270
 * 
 *         # damping increase step
 *         value_in_range(parameters['damping_factor_increase_steps'], 1, 5, 'damping_factor_increase_steps')             # <<<<<<<<<<<<<<
 *         self.thisptr.setParameter(string(b'NonlinearStepsToIncreaseDampingFactor'), <int>parameters['damping_factor_increase_steps'])
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_value_in_range); if (unlikely(!__pyx_t_4)) __PYX_ERR(4, 270, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_3 = __Pyx_PyObject_Dict_GetItem(__pyx_v_parameters, __pyx_n_s_damping_factor_increase_steps); if (unlikely(!__pyx_t_3)) __PYX_ERR(4, 270, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = NULL;
  __pyx_t_5 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
      __pyx_t_5 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_4)) {
    PyObject *__pyx_temp[5] = {__pyx_t_2, __pyx_t_3, __pyx_int_1, __pyx_int_5, __pyx_n_s_damping_factor_increase_steps};
    __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_4, __pyx_temp+1-__pyx_t_5, 4+__pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 270, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_4)) {
    PyObject *__pyx_temp[5] = {__pyx_t_2, __pyx_t_3, __pyx_int_1, __pyx_int_5, __pyx_n_s_damping_factor_increase_steps};
    __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_4, __pyx_temp+1-__pyx_t_5, 4+__pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 270, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else
  #endif
  {
    __pyx_t_6 = PyTuple_New(4+__pyx_t_5); if (unlikely(!__pyx_t_6)) __PYX_ERR(4, 270, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    if (__pyx_t_2) {
      __Pyx_GIVEREF(__pyx_t_2); PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_2); __pyx_t_2 = NULL;
    }
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_6, 0+__pyx_t_5, __pyx_t_3);
    __Pyx_INCREF(__pyx_int_1);
    __Pyx_GIVEREF(__pyx_int_1);
    PyTuple_SET_ITEM(__pyx_t_6, 1+__pyx_t_5, __pyx_int_1);
    __Pyx_INCREF(__pyx_int_5);
    __Pyx_GIVEREF(__pyx_int_5);
    PyTuple_SET_ITEM(__pyx_t_6, 2+__pyx_t_5, __pyx_int_5);
    __Pyx_INCREF(__pyx_n_s_damping_factor_increase_steps);
    __Pyx_GIVEREF(__pyx_n_s_damping_factor_increase_steps);
    PyTuple_SET_ITEM(__pyx_t_6, 3+__pyx_t_5, __pyx_n_s_damping_factor_increase_steps);
    __pyx_t_3 = 0;
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_6, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 270, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  }
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "../resources_source/python/pyfield.pxi":271
 *         # damping increase step
 *         value_in_range(parameters['damping_factor_increase_steps'], 1, 5, 'damping_factor_increase_steps')
 *         self.thisptr.setParameter(string(b'NonlinearStepsToIncreaseDampingFactor'), <int>parameters['damping_factor_increase_steps'])             # <<<<<<<<<<<<<<
 * 
 *         # jacobian reuse
 */
  __pyx_t_1 = __Pyx_PyObject_Dict_GetItem(__pyx_v_parameters, __pyx_n_s_damping_factor_increase_steps); if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 271, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_5 = __Pyx_PyInt_As_int(__pyx_t_1); if (unlikely((__pyx_t_5 == (int)-1) && PyErr_Occurred())) __PYX_ERR(4, 271, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  try {
    __pyx_v_self->thisptr->setParameter(std::string(((char *)"NonlinearStepsToIncreaseDampingFactor")), ((int)__pyx_t_5));
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(4, 271, __pyx_L1_error)
  }

  /* "../resources_source/python/pyfield.pxi":274
 * 
 *         # jacobian reuse
 *         self.thisptr.setParameter(string(b'NewtonReuseJacobian'), <bool>parameters['jacobian_reuse'])             # <<<<<<<<<<<<<<
 * 
 *         # jacobian reuse ratio
 */
  __pyx_t_1 = __Pyx_PyObject_Dict_GetItem(__pyx_v_parameters, __pyx_n_s_jacobian_reuse); if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 274, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_9 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely((__pyx_t_9 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(4, 274, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  try {
    __pyx_v_self->thisptr->setParameter(std::string(((char *)"NewtonReuseJacobian")), ((bool)__pyx_t_9));
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(4, 274, __pyx_L1_error)
  }

  /* "../resources_source/python/pyfield.pxi":277
 * 
 *         # jacobian reuse ratio
 *         self.thisptr.setParameter(string(b'NewtonJacobianReuseRatio'), <double>parameters['jacobian_reuse_ratio'])             # <<<<<<<<<<<<<<
 * 
 *         # jacobian reuse step
 */
  __pyx_t_1 = __Pyx_PyObject_Dict_GetItem(__pyx_v_parameters, __pyx_n_s_jacobian_reuse_ratio); if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 277, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_7 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_7 == (double)-1) && PyErr_Occurred())) __PYX_ERR(4, 277, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  try {
    __pyx_v_self->thisptr->setParameter(std::string(((char *)"NewtonJacobianReuseRatio")), ((double)__pyx_t_7));
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(4, 277, __pyx_L1_error)
  }

  /* "../resources_source/python/pyfield.pxi":280
 * 
 *         # jacobian reuse step
 *         value_in_range(parameters['jacobian_reuse_steps'], 0, 100, 'jacobian_reuse_steps')             # <<<<<<<<<<<<<<
 *         self.thisptr.setParameter(string(b'NewtonMaxStepsReuseJacobian'), <int>parameters['jacobian_reuse_steps'])
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_value_in_range); if (unlikely(!__pyx_t_4)) __PYX_ERR(4, 280, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_6 = __Pyx_PyObject_Dict_GetItem(__pyx_v_parameters, __pyx_n_s_jacobian_reuse_steps); if (unlikely(!__pyx_t_6)) __PYX_ERR(4, 280, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_3 = NULL;
  __pyx_t_5 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
      __pyx_t_5 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_4)) {
    PyObject *__pyx_temp[5] = {__pyx_t_3, __pyx_t_6, __pyx_int_0, __pyx_int_100, __pyx_n_s_jacobian_reuse_steps};
    __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_4, __pyx_temp+1-__pyx_t_5, 4+__pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 280, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_4)) {
    PyObject *__pyx_temp[5] = {__pyx_t_3, __pyx_t_6, __pyx_int_0, __pyx_int_100, __pyx_n_s_jacobian_reuse_steps};
    __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_4, __pyx_temp+1-__pyx_t_5, 4+__pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 280, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  } else
  #endif
  {
    __pyx_t_2 = PyTuple_New(4+__pyx_t_5); if (unlikely(!__pyx_t_2)) __PYX_ERR(4, 280, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    if (__pyx_t_3) {
      __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_3); __pyx_t_3 = NULL;
    }
    __Pyx_GIVEREF(__pyx_t_6);
    PyTuple_SET_ITEM(__pyx_t_2, 0+__pyx_t_5, __pyx_t_6);
    __Pyx_INCREF(__pyx_int_0);
    __Pyx_GIVEREF(__pyx_int_0);
    PyTuple_SET_ITEM(__pyx_t_2, 1+__pyx_t_5, __pyx_int_0);
    __Pyx_INCREF(__pyx_int_100);
    __Pyx_GIVEREF(__pyx_int_100);
    PyTuple_SET_ITEM(__pyx_t_2, 2+__pyx_t_5, __pyx_int_100);
    __Pyx_INCREF(__pyx_n_s_jacobian_reuse_steps);
    __Pyx_GIVEREF(__pyx_n_s_jacobian_reuse_steps);
    PyTuple_SET_ITEM(__pyx_t_2, 3+__pyx_t_5, __pyx_n_s_jacobian_reuse_steps);
    __pyx_t_6 = 0;
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 280, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "../resources_source/python/pyfield.pxi":281
 *         # jacobian reuse step
 *         value_in_range(parameters['jacobian_reuse_steps'], 0, 100, 'jacobian_reuse_steps')
 *         self.thisptr.setParameter(string(b'NewtonMaxStepsReuseJacobian'), <int>parameters['jacobian_reuse_steps'])             # <<<<<<<<<<<<<<
 * 
 *         # Picard solver
 */
  __pyx_t_1 = __Pyx_PyObject_Dict_GetItem(__pyx_v_parameters, __pyx_n_s_jacobian_reuse_steps); if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 281, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_5 = __Pyx_PyInt_As_int(__pyx_t_1); if (unlikely((__pyx_t_5 == (int)-1) && PyErr_Occurred())) __PYX_ERR(4, 281, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  try {
    __pyx_v_self->thisptr->setParameter(std::string(((char *)"NewtonMaxStepsReuseJacobian")), ((int)__pyx_t_5));
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(4, 281, __pyx_L1_error)
  }

  /* "../resources_source/python/pyfield.pxi":284
 * 
 *         # Picard solver
 *         self.thisptr.setParameter(string(b'PicardAndersonAcceleration'), <int>parameters['anderson_acceleration'])             # <<<<<<<<<<<<<<
 *         value_in_range(parameters['anderson_last_vectors'], 1, 100, 'anderson_last_vectors')
 *         self.thisptr.setParameter(string(b'PicardAndersonNumberOfLastVectors'), <int>parameters['anderson_last_vectors'])
 */
  __pyx_t_1 = __Pyx_PyObject_Dict_GetItem(__pyx_v_parameters, __pyx_n_s_anderson_acceleration); if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 284, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_5 = __Pyx_PyInt_As_int(__pyx_t_1); if (unlikely((__pyx_t_5 == (int)-1) && PyErr_Occurred())) __PYX_ERR(4, 284, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  try {
    __pyx_v_self->thisptr->setParameter(std::string(((char *)"PicardAndersonAcceleration")), ((int)__pyx_t_5));
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(4, 284, __pyx_L1_error)
  }

  /* "../resources_source/python/pyfield.pxi":285
 *         # Picard solver
 *         self.thisptr.setParameter(string(b'PicardAndersonAcceleration'), <int>parameters['anderson_acceleration'])
 *         value_in_range(parameters['anderson_last_vectors'], 1, 100, 'anderson_last_vectors')             # <<<<<<<<<<<<<<
 *         self.thisptr.setParameter(string(b'PicardAndersonNumberOfLastVectors'), <int>parameters['anderson_last_vectors'])
 *         value_in_range(parameters['anderson_beta'], 0.0, 1.0, 'anderson_beta')
 */
  __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_value_in_range); if (unlikely(!__pyx_t_4)) __PYX_ERR(4, 285, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_2 = __Pyx_PyObject_Dict_GetItem(__pyx_v_parameters, __pyx_n_s_anderson_last_vectors); if (unlikely(!__pyx_t_2)) __PYX_ERR(4, 285, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_6 = NULL;
  __pyx_t_5 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_6)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
      __pyx_t_5 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_4)) {
    PyObject *__pyx_temp[5] = {__pyx_t_6, __pyx_t_2, __pyx_int_1, __pyx_int_100, __pyx_n_s_anderson_last_vectors};
    __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_4, __pyx_temp+1-__pyx_t_5, 4+__pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 285, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_4)) {
    PyObject *__pyx_temp[5] = {__pyx_t_6, __pyx_t_2, __pyx_int_1, __pyx_int_100, __pyx_n_s_anderson_last_vectors};
    __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_4, __pyx_temp+1-__pyx_t_5, 4+__pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 285, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  } else
  #endif
  {
    __pyx_t_3 = PyTuple_New(4+__pyx_t_5); if (unlikely(!__pyx_t_3)) __PYX_ERR(4, 285, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (__pyx_t_6) {
      __Pyx_GIVEREF(__pyx_t_6); PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_6); __pyx_t_6 = NULL;
    }
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_3, 0+__pyx_t_5, __pyx_t_2);
    __Pyx_INCREF(__pyx_int_1);
    __Pyx_GIVEREF(__pyx_int_1);
    PyTuple_SET_ITEM(__pyx_t_3, 1+__pyx_t_5, __pyx_int_1);
    __Pyx_INCREF(__pyx_int_100);
    __Pyx_GIVEREF(__pyx_int_100);
    PyTuple_SET_ITEM(__pyx_t_3, 2+__pyx_t_5, __pyx_int_100);
    __Pyx_INCREF(__pyx_n_s_anderson_last_vectors);
    __Pyx_GIVEREF(__pyx_n_s_anderson_last_vectors);
    PyTuple_SET_ITEM(__pyx_t_3, 3+__pyx_t_5, __pyx_n_s_anderson_last_vectors);
    __pyx_t_2 = 0;
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_3, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 285, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "../resources_source/python/pyfield.pxi":286
 *         self.thisptr.setParameter(string(b'PicardAndersonAcceleration'), <int>parameters['anderson_acceleration'])
 *         value_in_range(parameters['anderson_last_vectors'], 1, 100, 'anderson_last_vectors')
 *         self.thisptr.setParameter(string(b'PicardAndersonNumberOfLastVectors'), <int>parameters['anderson_last_vectors'])             # <<<<<<<<<<<<<<
 *         value_in_range(parameters['anderson_beta'], 0.0, 1.0, 'anderson_beta')
 *         self.thisptr.setParameter(string(b'PicardAndersonBeta'), <int>parameters['anderson_beta'])
 */
  __pyx_t_1 = __Pyx_PyObject_Dict_GetItem(__pyx_v_parameters, __pyx_n_s_anderson_last_vectors); if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 286, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_5 = __Pyx_PyInt_As_int(__pyx_t_1); if (unlikely((__pyx_t_5 == (int)-1) && PyErr_Occurred())) __PYX_ERR(4, 286, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  try {
    __pyx_v_self->thisptr->setParameter(std::string(((char *)"PicardAndersonNumberOfLastVectors")), ((int)__pyx_t_5));
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(4, 286, __pyx_L1_error)
  }

  /* "../resources_source/python/pyfield.pxi":287
 *         value_in_range(parameters['anderson_last_vectors'], 1, 100, 'anderson_last_vectors')
 *         self.thisptr.setParameter(string(b'PicardAndersonNumberOfLastVectors'), <int>parameters['anderson_last_vectors'])
 *         value_in_range(parameters['anderson_beta'], 0.0, 1.0, 'anderson_beta')             # <<<<<<<<<<<<<<
 *         self.thisptr.setParameter(string(b'PicardAndersonBeta'), <int>parameters['anderson_beta'])
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_value_in_range); if (unlikely(!__pyx_t_4)) __PYX_ERR(4, 287, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_3 = __Pyx_PyObject_Dict_GetItem(__pyx_v_parameters, __pyx_n_s_anderson_beta); if (unlikely(!__pyx_t_3)) __PYX_ERR(4, 287, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = NULL;
  __pyx_t_5 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
      __pyx_t_5 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_4)) {
    PyObject *__pyx_temp[5] = {__pyx_t_2, __pyx_t_3, __pyx_float_0_0, __pyx_float_1_0, __pyx_n_s_anderson_beta};
    __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_4, __pyx_temp+1-__pyx_t_5, 4+__pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 287, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_4)) {
    PyObject *__pyx_temp[5] = {__pyx_t_2, __pyx_t_3, __pyx_float_0_0, __pyx_float_1_0, __pyx_n_s_anderson_beta};
    __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_4, __pyx_temp+1-__pyx_t_5, 4+__pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 287, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else
  #endif
  {
    __pyx_t_6 = PyTuple_New(4+__pyx_t_5); if (unlikely(!__pyx_t_6)) __PYX_ERR(4, 287, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    if (__pyx_t_2) {
      __Pyx_GIVEREF(__pyx_t_2); PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_2); __pyx_t_2 = NULL;
    }
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_6, 0+__pyx_t_5, __pyx_t_3);
    __Pyx_INCREF(__pyx_float_0_0);
    __Pyx_GIVEREF(__pyx_float_0_0);
    PyTuple_SET_ITEM(__pyx_t_6, 1+__pyx_t_5, __pyx_float_0_0);
    __Pyx_INCREF(__pyx_float_1_0);
    __Pyx_GIVEREF(__pyx_float_1_0);
    PyTuple_SET_ITEM(__pyx_t_6, 2+__pyx_t_5, __pyx_float_1_0);
    __Pyx_INCREF(__pyx_n_s_anderson_beta);
    __Pyx_GIVEREF(__pyx_n_s_anderson_beta);
    PyTuple_SET_ITEM(__pyx_t_6, 3+__pyx_t_5, __pyx_n_s_anderson_beta);
    __pyx_t_3 = 0;
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_6, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 287, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  }
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "../resources_source/python/pyfield.pxi":288
 *         self.thisptr.setParameter(string(b'PicardAndersonNumberOfLastVectors'), <int>parameters['anderson_last_vectors'])
 *         value_in_range(parameters['anderson_beta'], 0.0, 1.0, 'anderson_beta')
 *         self.thisptr.setParameter(string(b'PicardAndersonBeta'), <int>parameters['anderson_beta'])             # <<<<<<<<<<<<<<
 * 
 *     # matrix solver
 */
  __pyx_t_1 = __Pyx_PyObject_Dict_GetItem(__pyx_v_parameters, __pyx_n_s_anderson_beta); if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 288, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_5 = __Pyx_PyInt_As_int(__pyx_t_1); if (unlikely((__pyx_t_5 == (int)-1) && PyErr_Occurred())) __PYX_ERR(4, 288, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  try {
    __pyx_v_self->thisptr->setParameter(std::string(((char *)"PicardAndersonBeta")), ((int)__pyx_t_5));
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(4, 288, __pyx_L1_error)
  }

  /* "../resources_source/python/pyfield.pxi":250
 *                 'anderson_last_vectors' : self.thisptr.getIntParameter(b'PicardAndersonNumberOfLastVectors')}
 * 
 *     def __set_solver_parameters__(self, parameters):             # <<<<<<<<<<<<<<
 *         # residual
 *         positive_value(parameters['residual'], 'residual')
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("_agros.__Field__.__set_solver_parameters__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../resources_source/python/pyfield.pxi":292
 *     # matrix solver
 *     property matrix_solver:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.thisptr.getMatrixSolver().decode()
 *         def __set__(self, solver):
 */

/* Python wrapper */
static PyObject *__pyx_pw_6_agros_9__Field___13matrix_solver_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6_agros_9__Field___13matrix_solver_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6_agros_9__Field___13matrix_solver___get__(((struct __pyx_obj_6_agros___Field__ *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6_agros_9__Field___13matrix_solver___get__(struct __pyx_obj_6_agros___Field__ *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "../resources_source/python/pyfield.pxi":293
 *     property matrix_solver:
 *         def __get__(self):
 *             return self.thisptr.getMatrixSolver().decode()             # <<<<<<<<<<<<<<
 *         def __set__(self, solver):
 *             self.thisptr.setMatrixSolver(solver.encode())
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_decode_cpp_string(__pyx_v_self->thisptr->getMatrixSolver(), 0, PY_SSIZE_T_MAX, NULL, NULL, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 293, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../resources_source/python/pyfield.pxi":292
 *     # matrix solver
 *     property matrix_solver:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.thisptr.getMatrixSolver().decode()
 *         def __set__(self, solver):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("_agros.__Field__.matrix_solver.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../resources_source/python/pyfield.pxi":294
 *         def __get__(self):
 *             return self.thisptr.getMatrixSolver().decode()
 *         def __set__(self, solver):             # <<<<<<<<<<<<<<
 *             self.thisptr.setMatrixSolver(solver.encode())
 * 
 */

/* Python wrapper */
static int __pyx_pw_6_agros_9__Field___13matrix_solver_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_solver); /*proto*/
static int __pyx_pw_6_agros_9__Field___13matrix_solver_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_solver) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6_agros_9__Field___13matrix_solver_2__set__(((struct __pyx_obj_6_agros___Field__ *)__pyx_v_self), ((PyObject *)__pyx_v_solver));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6_agros_9__Field___13matrix_solver_2__set__(struct __pyx_obj_6_agros___Field__ *__pyx_v_self, PyObject *__pyx_v_solver) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  std::string __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "../resources_source/python/pyfield.pxi":295
 *             return self.thisptr.getMatrixSolver().decode()
 *         def __set__(self, solver):
 *             self.thisptr.setMatrixSolver(solver.encode())             # <<<<<<<<<<<<<<
 * 
 *     property matrix_solver_parameters:
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_solver, __pyx_n_s_encode); if (unlikely(!__pyx_t_2)) __PYX_ERR(4, 295, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 295, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = __pyx_convert_string_from_py_std__in_string(__pyx_t_1); if (unlikely(PyErr_Occurred())) __PYX_ERR(4, 295, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  try {
    __pyx_v_self->thisptr->setMatrixSolver(__pyx_t_4);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(4, 295, __pyx_L1_error)
  }

  /* "../resources_source/python/pyfield.pxi":294
 *         def __get__(self):
 *             return self.thisptr.getMatrixSolver().decode()
 *         def __set__(self, solver):             # <<<<<<<<<<<<<<
 *             self.thisptr.setMatrixSolver(solver.encode())
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("_agros.__Field__.matrix_solver.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../resources_source/python/pyfield.pxi":298
 * 
 *     property matrix_solver_parameters:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.matrix_solver_parameters.get_parameters()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6_agros_9__Field___24matrix_solver_parameters_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6_agros_9__Field___24matrix_solver_parameters_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6_agros_9__Field___24matrix_solver_parameters___get__(((struct __pyx_obj_6_agros___Field__ *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6_agros_9__Field___24matrix_solver_parameters___get__(struct __pyx_obj_6_agros___Field__ *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "../resources_source/python/pyfield.pxi":299
 *     property matrix_solver_parameters:
 *         def __get__(self):
 *             return self.matrix_solver_parameters.get_parameters()             # <<<<<<<<<<<<<<
 * 
 *     def __get_matrix_solver_parameters__(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->matrix_solver_parameters, __pyx_n_s_get_parameters); if (unlikely(!__pyx_t_2)) __PYX_ERR(4, 299, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 299, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../resources_source/python/pyfield.pxi":298
 * 
 *     property matrix_solver_parameters:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.matrix_solver_parameters.get_parameters()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("_agros.__Field__.matrix_solver_parameters.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../resources_source/python/pyfield.pxi":301
 *             return self.matrix_solver_parameters.get_parameters()
 * 
 *     def __get_matrix_solver_parameters__(self):             # <<<<<<<<<<<<<<
 *         return {'dealii_tolerance' : self.thisptr.getDoubleParameter(b'LinearSolverIterToleranceAbsolute'),
 *                 'dealii_iterations' : self.thisptr.getIntParameter(b'LinearSolverIterIters'),
 */

/* Python wrapper */
static PyObject *__pyx_pw_6_agros_9__Field___9__get_matrix_solver_parameters__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_6_agros_9__Field___9__get_matrix_solver_parameters__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get_matrix_solver_parameters__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6_agros_9__Field___8__get_matrix_solver_parameters__(((struct __pyx_obj_6_agros___Field__ *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6_agros_9__Field___8__get_matrix_solver_parameters__(struct __pyx_obj_6_agros___Field__ *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  std::string __pyx_t_2;
  double __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get_matrix_solver_parameters__", 0);

  /* "../resources_source/python/pyfield.pxi":302
 * 
 *     def __get_matrix_solver_parameters__(self):
 *         return {'dealii_tolerance' : self.thisptr.getDoubleParameter(b'LinearSolverIterToleranceAbsolute'),             # <<<<<<<<<<<<<<
 *                 'dealii_iterations' : self.thisptr.getIntParameter(b'LinearSolverIterIters'),
 *                 'dealii_method' : self.thisptr.getLinearSolverDealIIMethod().decode(),
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyDict_NewPresized(7); if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 302, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_convert_string_from_py_std__in_string(__pyx_n_b_LinearSolverIterToleranceAbsolut); if (unlikely(PyErr_Occurred())) __PYX_ERR(4, 302, __pyx_L1_error)
  try {
    __pyx_t_3 = __pyx_v_self->thisptr->getDoubleParameter(__pyx_t_2);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(4, 302, __pyx_L1_error)
  }
  __pyx_t_4 = PyFloat_FromDouble(__pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(4, 302, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_dealii_tolerance, __pyx_t_4) < 0) __PYX_ERR(4, 302, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "../resources_source/python/pyfield.pxi":303
 *     def __get_matrix_solver_parameters__(self):
 *         return {'dealii_tolerance' : self.thisptr.getDoubleParameter(b'LinearSolverIterToleranceAbsolute'),
 *                 'dealii_iterations' : self.thisptr.getIntParameter(b'LinearSolverIterIters'),             # <<<<<<<<<<<<<<
 *                 'dealii_method' : self.thisptr.getLinearSolverDealIIMethod().decode(),
 *                 'dealii_preconditioner' : self.thisptr.getLinearSolverDealIIPreconditioner().decode(),
 */
  __pyx_t_2 = __pyx_convert_string_from_py_std__in_string(__pyx_n_b_LinearSolverIterIters); if (unlikely(PyErr_Occurred())) __PYX_ERR(4, 303, __pyx_L1_error)
  try {
    __pyx_t_5 = __pyx_v_self->thisptr->getIntParameter(__pyx_t_2);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(4, 303, __pyx_L1_error)
  }
  __pyx_t_4 = __Pyx_PyInt_From_int(__pyx_t_5); if (unlikely(!__pyx_t_4)) __PYX_ERR(4, 303, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_dealii_iterations, __pyx_t_4) < 0) __PYX_ERR(4, 302, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "../resources_source/python/pyfield.pxi":304
 *         return {'dealii_tolerance' : self.thisptr.getDoubleParameter(b'LinearSolverIterToleranceAbsolute'),
 *                 'dealii_iterations' : self.thisptr.getIntParameter(b'LinearSolverIterIters'),
 *                 'dealii_method' : self.thisptr.getLinearSolverDealIIMethod().decode(),             # <<<<<<<<<<<<<<
 *                 'dealii_preconditioner' : self.thisptr.getLinearSolverDealIIPreconditioner().decode(),
 *                 'external_solver' : self.thisptr.getExternalMatrixSolver().decode(),
 */
  __pyx_t_4 = __Pyx_decode_cpp_string(__pyx_v_self->thisptr->getLinearSolverDealIIMethod(), 0, PY_SSIZE_T_MAX, NULL, NULL, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(4, 304, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_dealii_method, __pyx_t_4) < 0) __PYX_ERR(4, 302, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "../resources_source/python/pyfield.pxi":305
 *                 'dealii_iterations' : self.thisptr.getIntParameter(b'LinearSolverIterIters'),
 *                 'dealii_method' : self.thisptr.getLinearSolverDealIIMethod().decode(),
 *                 'dealii_preconditioner' : self.thisptr.getLinearSolverDealIIPreconditioner().decode(),             # <<<<<<<<<<<<<<
 *                 'external_solver' : self.thisptr.getExternalMatrixSolver().decode(),
 *                 'external_method' : self.thisptr.getExternalMatrixSolverMethod().decode(),
 */
  __pyx_t_4 = __Pyx_decode_cpp_string(__pyx_v_self->thisptr->getLinearSolverDealIIPreconditioner(), 0, PY_SSIZE_T_MAX, NULL, NULL, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(4, 305, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_dealii_preconditioner, __pyx_t_4) < 0) __PYX_ERR(4, 302, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "../resources_source/python/pyfield.pxi":306
 *                 'dealii_method' : self.thisptr.getLinearSolverDealIIMethod().decode(),
 *                 'dealii_preconditioner' : self.thisptr.getLinearSolverDealIIPreconditioner().decode(),
 *                 'external_solver' : self.thisptr.getExternalMatrixSolver().decode(),             # <<<<<<<<<<<<<<
 *                 'external_method' : self.thisptr.getExternalMatrixSolverMethod().decode(),
 *                 'external_parameters' : self.thisptr.getExternalMatrixSolverParameters().decode()}
 */
  __pyx_t_4 = __Pyx_decode_cpp_string(__pyx_v_self->thisptr->getExternalMatrixSolver(), 0, PY_SSIZE_T_MAX, NULL, NULL, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(4, 306, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_external_solver, __pyx_t_4) < 0) __PYX_ERR(4, 302, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "../resources_source/python/pyfield.pxi":307
 *                 'dealii_preconditioner' : self.thisptr.getLinearSolverDealIIPreconditioner().decode(),
 *                 'external_solver' : self.thisptr.getExternalMatrixSolver().decode(),
 *                 'external_method' : self.thisptr.getExternalMatrixSolverMethod().decode(),             # <<<<<<<<<<<<<<
 *                 'external_parameters' : self.thisptr.getExternalMatrixSolverParameters().decode()}
 * 
 */
  __pyx_t_4 = __Pyx_decode_cpp_string(__pyx_v_self->thisptr->getExternalMatrixSolverMethod(), 0, PY_SSIZE_T_MAX, NULL, NULL, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(4, 307, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_external_method, __pyx_t_4) < 0) __PYX_ERR(4, 302, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "../resources_source/python/pyfield.pxi":308
 *                 'external_solver' : self.thisptr.getExternalMatrixSolver().decode(),
 *                 'external_method' : self.thisptr.getExternalMatrixSolverMethod().decode(),
 *                 'external_parameters' : self.thisptr.getExternalMatrixSolverParameters().decode()}             # <<<<<<<<<<<<<<
 * 
 *     def __set_matrix_solver_parameters__(self, parameters):
 */
  __pyx_t_4 = __Pyx_decode_cpp_string(__pyx_v_self->thisptr->getExternalMatrixSolverParameters(), 0, PY_SSIZE_T_MAX, NULL, NULL, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(4, 308, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_external_parameters, __pyx_t_4) < 0) __PYX_ERR(4, 302, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../resources_source/python/pyfield.pxi":301
 *             return self.matrix_solver_parameters.get_parameters()
 * 
 *     def __get_matrix_solver_parameters__(self):             # <<<<<<<<<<<<<<
 *         return {'dealii_tolerance' : self.thisptr.getDoubleParameter(b'LinearSolverIterToleranceAbsolute'),
 *                 'dealii_iterations' : self.thisptr.getIntParameter(b'LinearSolverIterIters'),
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("_agros.__Field__.__get_matrix_solver_parameters__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../resources_source/python/pyfield.pxi":310
 *                 'external_parameters' : self.thisptr.getExternalMatrixSolverParameters().decode()}
 * 
 *     def __set_matrix_solver_parameters__(self, parameters):             # <<<<<<<<<<<<<<
 *         # tolerance
 *         positive_value(parameters['dealii_tolerance'], 'dealii_tolerance')
 */

/* Python wrapper */
static PyObject *__pyx_pw_6_agros_9__Field___11__set_matrix_solver_parameters__(PyObject *__pyx_v_self, PyObject *__pyx_v_parameters); /*proto*/
static PyObject *__pyx_pw_6_agros_9__Field___11__set_matrix_solver_parameters__(PyObject *__pyx_v_self, PyObject *__pyx_v_parameters) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set_matrix_solver_parameters__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6_agros_9__Field___10__set_matrix_solver_parameters__(((struct __pyx_obj_6_agros___Field__ *)__pyx_v_self), ((PyObject *)__pyx_v_parameters));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6_agros_9__Field___10__set_matrix_solver_parameters__(struct __pyx_obj_6_agros___Field__ *__pyx_v_self, PyObject *__pyx_v_parameters) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  double __pyx_t_7;
  std::string __pyx_t_8;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set_matrix_solver_parameters__", 0);

  /* "../resources_source/python/pyfield.pxi":312
 *     def __set_matrix_solver_parameters__(self, parameters):
 *         # tolerance
 *         positive_value(parameters['dealii_tolerance'], 'dealii_tolerance')             # <<<<<<<<<<<<<<
 *         self.thisptr.setParameter(string(b'LinearSolverIterToleranceAbsolute'), <double>parameters['dealii_tolerance'])
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_positive_value); if (unlikely(!__pyx_t_2)) __PYX_ERR(4, 312, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_Dict_GetItem(__pyx_v_parameters, __pyx_n_s_dealii_tolerance); if (unlikely(!__pyx_t_3)) __PYX_ERR(4, 312, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = NULL;
  __pyx_t_5 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_5 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[3] = {__pyx_t_4, __pyx_t_3, __pyx_n_s_dealii_tolerance};
    __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_5, 2+__pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 312, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[3] = {__pyx_t_4, __pyx_t_3, __pyx_n_s_dealii_tolerance};
    __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_5, 2+__pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 312, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else
  #endif
  {
    __pyx_t_6 = PyTuple_New(2+__pyx_t_5); if (unlikely(!__pyx_t_6)) __PYX_ERR(4, 312, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    if (__pyx_t_4) {
      __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_4); __pyx_t_4 = NULL;
    }
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_6, 0+__pyx_t_5, __pyx_t_3);
    __Pyx_INCREF(__pyx_n_s_dealii_tolerance);
    __Pyx_GIVEREF(__pyx_n_s_dealii_tolerance);
    PyTuple_SET_ITEM(__pyx_t_6, 1+__pyx_t_5, __pyx_n_s_dealii_tolerance);
    __pyx_t_3 = 0;
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_6, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 312, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "../resources_source/python/pyfield.pxi":313
 *         # tolerance
 *         positive_value(parameters['dealii_tolerance'], 'dealii_tolerance')
 *         self.thisptr.setParameter(string(b'LinearSolverIterToleranceAbsolute'), <double>parameters['dealii_tolerance'])             # <<<<<<<<<<<<<<
 * 
 *         # max iterations
 */
  __pyx_t_1 = __Pyx_PyObject_Dict_GetItem(__pyx_v_parameters, __pyx_n_s_dealii_tolerance); if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 313, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_7 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_7 == (double)-1) && PyErr_Occurred())) __PYX_ERR(4, 313, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  try {
    __pyx_v_self->thisptr->setParameter(std::string(((char *)"LinearSolverIterToleranceAbsolute")), ((double)__pyx_t_7));
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(4, 313, __pyx_L1_error)
  }

  /* "../resources_source/python/pyfield.pxi":316
 * 
 *         # max iterations
 *         value_in_range(parameters['dealii_iterations'], 1, 1e4, 'dealii_iterations')             # <<<<<<<<<<<<<<
 *         self.thisptr.setParameter(string(b'LinearSolverIterIters'), <int>parameters['dealii_iterations'])
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_value_in_range); if (unlikely(!__pyx_t_2)) __PYX_ERR(4, 316, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_6 = __Pyx_PyObject_Dict_GetItem(__pyx_v_parameters, __pyx_n_s_dealii_iterations); if (unlikely(!__pyx_t_6)) __PYX_ERR(4, 316, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_3 = NULL;
  __pyx_t_5 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_5 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[5] = {__pyx_t_3, __pyx_t_6, __pyx_int_1, __pyx_float_1e4, __pyx_n_s_dealii_iterations};
    __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_5, 4+__pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 316, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[5] = {__pyx_t_3, __pyx_t_6, __pyx_int_1, __pyx_float_1e4, __pyx_n_s_dealii_iterations};
    __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_5, 4+__pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 316, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  } else
  #endif
  {
    __pyx_t_4 = PyTuple_New(4+__pyx_t_5); if (unlikely(!__pyx_t_4)) __PYX_ERR(4, 316, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    if (__pyx_t_3) {
      __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_3); __pyx_t_3 = NULL;
    }
    __Pyx_GIVEREF(__pyx_t_6);
    PyTuple_SET_ITEM(__pyx_t_4, 0+__pyx_t_5, __pyx_t_6);
    __Pyx_INCREF(__pyx_int_1);
    __Pyx_GIVEREF(__pyx_int_1);
    PyTuple_SET_ITEM(__pyx_t_4, 1+__pyx_t_5, __pyx_int_1);
    __Pyx_INCREF(__pyx_float_1e4);
    __Pyx_GIVEREF(__pyx_float_1e4);
    PyTuple_SET_ITEM(__pyx_t_4, 2+__pyx_t_5, __pyx_float_1e4);
    __Pyx_INCREF(__pyx_n_s_dealii_iterations);
    __Pyx_GIVEREF(__pyx_n_s_dealii_iterations);
    PyTuple_SET_ITEM(__pyx_t_4, 3+__pyx_t_5, __pyx_n_s_dealii_iterations);
    __pyx_t_6 = 0;
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_4, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 316, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "../resources_source/python/pyfield.pxi":317
 *         # max iterations
 *         value_in_range(parameters['dealii_iterations'], 1, 1e4, 'dealii_iterations')
 *         self.thisptr.setParameter(string(b'LinearSolverIterIters'), <int>parameters['dealii_iterations'])             # <<<<<<<<<<<<<<
 * 
 *         # method, preconditioner
 */
  __pyx_t_1 = __Pyx_PyObject_Dict_GetItem(__pyx_v_parameters, __pyx_n_s_dealii_iterations); if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 317, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_5 = __Pyx_PyInt_As_int(__pyx_t_1); if (unlikely((__pyx_t_5 == (int)-1) && PyErr_Occurred())) __PYX_ERR(4, 317, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  try {
    __pyx_v_self->thisptr->setParameter(std::string(((char *)"LinearSolverIterIters")), ((int)__pyx_t_5));
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(4, 317, __pyx_L1_error)
  }

  /* "../resources_source/python/pyfield.pxi":320
 * 
 *         # method, preconditioner
 *         self.thisptr.setLinearSolverDealIIMethod(parameters['dealii_method'].encode())             # <<<<<<<<<<<<<<
 *         self.thisptr.setLinearSolverDealIIPreconditioner(parameters['dealii_preconditioner'].encode())
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_Dict_GetItem(__pyx_v_parameters, __pyx_n_s_dealii_method); if (unlikely(!__pyx_t_2)) __PYX_ERR(4, 320, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_encode); if (unlikely(!__pyx_t_4)) __PYX_ERR(4, 320, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  __pyx_t_1 = (__pyx_t_2) ? __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_2) : __Pyx_PyObject_CallNoArg(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 320, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_8 = __pyx_convert_string_from_py_std__in_string(__pyx_t_1); if (unlikely(PyErr_Occurred())) __PYX_ERR(4, 320, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  try {
    __pyx_v_self->thisptr->setLinearSolverDealIIMethod(__pyx_t_8);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(4, 320, __pyx_L1_error)
  }

  /* "../resources_source/python/pyfield.pxi":321
 *         # method, preconditioner
 *         self.thisptr.setLinearSolverDealIIMethod(parameters['dealii_method'].encode())
 *         self.thisptr.setLinearSolverDealIIPreconditioner(parameters['dealii_preconditioner'].encode())             # <<<<<<<<<<<<<<
 * 
 *         # external solver
 */
  __pyx_t_4 = __Pyx_PyObject_Dict_GetItem(__pyx_v_parameters, __pyx_n_s_dealii_preconditioner); if (unlikely(!__pyx_t_4)) __PYX_ERR(4, 321, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_encode); if (unlikely(!__pyx_t_2)) __PYX_ERR(4, 321, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_4) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_4) : __Pyx_PyObject_CallNoArg(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 321, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_8 = __pyx_convert_string_from_py_std__in_string(__pyx_t_1); if (unlikely(PyErr_Occurred())) __PYX_ERR(4, 321, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  try {
    __pyx_v_self->thisptr->setLinearSolverDealIIPreconditioner(__pyx_t_8);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(4, 321, __pyx_L1_error)
  }

  /* "../resources_source/python/pyfield.pxi":324
 * 
 *         # external solver
 *         self.thisptr.setExternalMatrixSolver(parameters['external_solver'].encode())             # <<<<<<<<<<<<<<
 *         self.thisptr.setParameter(string(b'LinearSolverExternalCommandMethod'), <string>parameters['external_method'].encode())
 *         self.thisptr.setParameter(string(b'LinearSolverExternalCommandParameters'), <string>parameters['external_parameters'].encode())
 */
  __pyx_t_2 = __Pyx_PyObject_Dict_GetItem(__pyx_v_parameters, __pyx_n_s_external_solver); if (unlikely(!__pyx_t_2)) __PYX_ERR(4, 324, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_encode); if (unlikely(!__pyx_t_4)) __PYX_ERR(4, 324, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  __pyx_t_1 = (__pyx_t_2) ? __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_2) : __Pyx_PyObject_CallNoArg(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 324, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_8 = __pyx_convert_string_from_py_std__in_string(__pyx_t_1); if (unlikely(PyErr_Occurred())) __PYX_ERR(4, 324, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  try {
    __pyx_v_self->thisptr->setExternalMatrixSolver(__pyx_t_8);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(4, 324, __pyx_L1_error)
  }

  /* "../resources_source/python/pyfield.pxi":325
 *         # external solver
 *         self.thisptr.setExternalMatrixSolver(parameters['external_solver'].encode())
 *         self.thisptr.setParameter(string(b'LinearSolverExternalCommandMethod'), <string>parameters['external_method'].encode())             # <<<<<<<<<<<<<<
 *         self.thisptr.setParameter(string(b'LinearSolverExternalCommandParameters'), <string>parameters['external_parameters'].encode())
 * 
 */
  __pyx_t_4 = __Pyx_PyObject_Dict_GetItem(__pyx_v_parameters, __pyx_n_s_external_method); if (unlikely(!__pyx_t_4)) __PYX_ERR(4, 325, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_encode); if (unlikely(!__pyx_t_2)) __PYX_ERR(4, 325, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_4) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_4) : __Pyx_PyObject_CallNoArg(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 325, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_8 = __pyx_convert_string_from_py_std__in_string(__pyx_t_1); if (unlikely(PyErr_Occurred())) __PYX_ERR(4, 325, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  try {
    __pyx_v_self->thisptr->setParameter(std::string(((char *)"LinearSolverExternalCommandMethod")), ((std::string)__pyx_t_8));
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(4, 325, __pyx_L1_error)
  }

  /* "../resources_source/python/pyfield.pxi":326
 *         self.thisptr.setExternalMatrixSolver(parameters['external_solver'].encode())
 *         self.thisptr.setParameter(string(b'LinearSolverExternalCommandMethod'), <string>parameters['external_method'].encode())
 *         self.thisptr.setParameter(string(b'LinearSolverExternalCommandParameters'), <string>parameters['external_parameters'].encode())             # <<<<<<<<<<<<<<
 * 
 *     # refinements
 */
  __pyx_t_2 = __Pyx_PyObject_Dict_GetItem(__pyx_v_parameters, __pyx_n_s_external_parameters); if (unlikely(!__pyx_t_2)) __PYX_ERR(4, 326, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_encode); if (unlikely(!__pyx_t_4)) __PYX_ERR(4, 326, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  __pyx_t_1 = (__pyx_t_2) ? __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_2) : __Pyx_PyObject_CallNoArg(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 326, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_8 = __pyx_convert_string_from_py_std__in_string(__pyx_t_1); if (unlikely(PyErr_Occurred())) __PYX_ERR(4, 326, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  try {
    __pyx_v_self->thisptr->setParameter(std::string(((char *)"LinearSolverExternalCommandParameters")), ((std::string)__pyx_t_8));
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(4, 326, __pyx_L1_error)
  }

  /* "../resources_source/python/pyfield.pxi":310
 *                 'external_parameters' : self.thisptr.getExternalMatrixSolverParameters().decode()}
 * 
 *     def __set_matrix_solver_parameters__(self, parameters):             # <<<<<<<<<<<<<<
 *         # tolerance
 *         positive_value(parameters['dealii_tolerance'], 'dealii_tolerance')
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("_agros.__Field__.__set_matrix_solver_parameters__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../resources_source/python/pyfield.pxi":330
 *     # refinements
 *     property number_of_refinements:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.thisptr.getNumberOfRefinements()
 *         def __set__(self, refinements):
 */

/* Python wrapper */
static PyObject *__pyx_pw_6_agros_9__Field___21number_of_refinements_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6_agros_9__Field___21number_of_refinements_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6_agros_9__Field___21number_of_refinements___get__(((struct __pyx_obj_6_agros___Field__ *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6_agros_9__Field___21number_of_refinements___get__(struct __pyx_obj_6_agros___Field__ *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "../resources_source/python/pyfield.pxi":331
 *     property number_of_refinements:
 *         def __get__(self):
 *             return self.thisptr.getNumberOfRefinements()             # <<<<<<<<<<<<<<
 *         def __set__(self, refinements):
 *             self.thisptr.setNumberOfRefinements(refinements)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->thisptr->getNumberOfRefinements()); if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 331, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../resources_source/python/pyfield.pxi":330
 *     # refinements
 *     property number_of_refinements:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.thisptr.getNumberOfRefinements()
 *         def __set__(self, refinements):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("_agros.__Field__.number_of_refinements.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../resources_source/python/pyfield.pxi":332
 *         def __get__(self):
 *             return self.thisptr.getNumberOfRefinements()
 *         def __set__(self, refinements):             # <<<<<<<<<<<<<<
 *             self.thisptr.setNumberOfRefinements(refinements)
 * 
 */

/* Python wrapper */
static int __pyx_pw_6_agros_9__Field___21number_of_refinements_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_refinements); /*proto*/
static int __pyx_pw_6_agros_9__Field___21number_of_refinements_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_refinements) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6_agros_9__Field___21number_of_refinements_2__set__(((struct __pyx_obj_6_agros___Field__ *)__pyx_v_self), ((PyObject *)__pyx_v_refinements));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6_agros_9__Field___21number_of_refinements_2__set__(struct __pyx_obj_6_agros___Field__ *__pyx_v_self, PyObject *__pyx_v_refinements) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "../resources_source/python/pyfield.pxi":333
 *             return self.thisptr.getNumberOfRefinements()
 *         def __set__(self, refinements):
 *             self.thisptr.setNumberOfRefinements(refinements)             # <<<<<<<<<<<<<<
 * 
 *     # order
 */
  __pyx_t_1 = __Pyx_PyInt_As_int(__pyx_v_refinements); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) __PYX_ERR(4, 333, __pyx_L1_error)
  try {
    __pyx_v_self->thisptr->setNumberOfRefinements(__pyx_t_1);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(4, 333, __pyx_L1_error)
  }

  /* "../resources_source/python/pyfield.pxi":332
 *         def __get__(self):
 *             return self.thisptr.getNumberOfRefinements()
 *         def __set__(self, refinements):             # <<<<<<<<<<<<<<
 *             self.thisptr.setNumberOfRefinements(refinements)
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("_agros.__Field__.number_of_refinements.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../resources_source/python/pyfield.pxi":337
 *     # order
 *     property polynomial_order:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.thisptr.getPolynomialOrder()
 *         def __set__(self, order):
 */

/* Python wrapper */
static PyObject *__pyx_pw_6_agros_9__Field___16polynomial_order_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6_agros_9__Field___16polynomial_order_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6_agros_9__Field___16polynomial_order___get__(((struct __pyx_obj_6_agros___Field__ *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6_agros_9__Field___16polynomial_order___get__(struct __pyx_obj_6_agros___Field__ *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "../resources_source/python/pyfield.pxi":338
 *     property polynomial_order:
 *         def __get__(self):
 *             return self.thisptr.getPolynomialOrder()             # <<<<<<<<<<<<<<
 *         def __set__(self, order):
 *             self.thisptr.setPolynomialOrder(order)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->thisptr->getPolynomialOrder()); if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 338, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../resources_source/python/pyfield.pxi":337
 *     # order
 *     property polynomial_order:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.thisptr.getPolynomialOrder()
 *         def __set__(self, order):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("_agros.__Field__.polynomial_order.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../resources_source/python/pyfield.pxi":339
 *         def __get__(self):
 *             return self.thisptr.getPolynomialOrder()
 *         def __set__(self, order):             # <<<<<<<<<<<<<<
 *             self.thisptr.setPolynomialOrder(order)
 * 
 */

/* Python wrapper */
static int __pyx_pw_6_agros_9__Field___16polynomial_order_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_order); /*proto*/
static int __pyx_pw_6_agros_9__Field___16polynomial_order_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_order) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6_agros_9__Field___16polynomial_order_2__set__(((struct __pyx_obj_6_agros___Field__ *)__pyx_v_self), ((PyObject *)__pyx_v_order));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6_agros_9__Field___16polynomial_order_2__set__(struct __pyx_obj_6_agros___Field__ *__pyx_v_self, PyObject *__pyx_v_order) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "../resources_source/python/pyfield.pxi":340
 *             return self.thisptr.getPolynomialOrder()
 *         def __set__(self, order):
 *             self.thisptr.setPolynomialOrder(order)             # <<<<<<<<<<<<<<
 * 
 *     # adaptivity
 */
  __pyx_t_1 = __Pyx_PyInt_As_int(__pyx_v_order); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) __PYX_ERR(4, 340, __pyx_L1_error)
  try {
    __pyx_v_self->thisptr->setPolynomialOrder(__pyx_t_1);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(4, 340, __pyx_L1_error)
  }

  /* "../resources_source/python/pyfield.pxi":339
 *         def __get__(self):
 *             return self.thisptr.getPolynomialOrder()
 *         def __set__(self, order):             # <<<<<<<<<<<<<<
 *             self.thisptr.setPolynomialOrder(order)
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("_agros.__Field__.polynomial_order.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../resources_source/python/pyfield.pxi":344
 *     # adaptivity
 *     property adaptivity_type:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.thisptr.getAdaptivityType().decode()
 *         def __set__(self, adaptivity_type):
 */

/* Python wrapper */
static PyObject *__pyx_pw_6_agros_9__Field___15adaptivity_type_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6_agros_9__Field___15adaptivity_type_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6_agros_9__Field___15adaptivity_type___get__(((struct __pyx_obj_6_agros___Field__ *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6_agros_9__Field___15adaptivity_type___get__(struct __pyx_obj_6_agros___Field__ *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "../resources_source/python/pyfield.pxi":345
 *     property adaptivity_type:
 *         def __get__(self):
 *             return self.thisptr.getAdaptivityType().decode()             # <<<<<<<<<<<<<<
 *         def __set__(self, adaptivity_type):
 *             self.thisptr.setAdaptivityType(adaptivity_type.encode())
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_decode_cpp_string(__pyx_v_self->thisptr->getAdaptivityType(), 0, PY_SSIZE_T_MAX, NULL, NULL, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 345, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../resources_source/python/pyfield.pxi":344
 *     # adaptivity
 *     property adaptivity_type:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.thisptr.getAdaptivityType().decode()
 *         def __set__(self, adaptivity_type):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("_agros.__Field__.adaptivity_type.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../resources_source/python/pyfield.pxi":346
 *         def __get__(self):
 *             return self.thisptr.getAdaptivityType().decode()
 *         def __set__(self, adaptivity_type):             # <<<<<<<<<<<<<<
 *             self.thisptr.setAdaptivityType(adaptivity_type.encode())
 * 
 */

/* Python wrapper */
static int __pyx_pw_6_agros_9__Field___15adaptivity_type_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_adaptivity_type); /*proto*/
static int __pyx_pw_6_agros_9__Field___15adaptivity_type_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_adaptivity_type) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6_agros_9__Field___15adaptivity_type_2__set__(((struct __pyx_obj_6_agros___Field__ *)__pyx_v_self), ((PyObject *)__pyx_v_adaptivity_type));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6_agros_9__Field___15adaptivity_type_2__set__(struct __pyx_obj_6_agros___Field__ *__pyx_v_self, PyObject *__pyx_v_adaptivity_type) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  std::string __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "../resources_source/python/pyfield.pxi":347
 *             return self.thisptr.getAdaptivityType().decode()
 *         def __set__(self, adaptivity_type):
 *             self.thisptr.setAdaptivityType(adaptivity_type.encode())             # <<<<<<<<<<<<<<
 * 
 *     property adaptivity_parameters:
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_adaptivity_type, __pyx_n_s_encode); if (unlikely(!__pyx_t_2)) __PYX_ERR(4, 347, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 347, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = __pyx_convert_string_from_py_std__in_string(__pyx_t_1); if (unlikely(PyErr_Occurred())) __PYX_ERR(4, 347, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  try {
    __pyx_v_self->thisptr->setAdaptivityType(__pyx_t_4);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(4, 347, __pyx_L1_error)
  }

  /* "../resources_source/python/pyfield.pxi":346
 *         def __get__(self):
 *             return self.thisptr.getAdaptivityType().decode()
 *         def __set__(self, adaptivity_type):             # <<<<<<<<<<<<<<
 *             self.thisptr.setAdaptivityType(adaptivity_type.encode())
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("_agros.__Field__.adaptivity_type.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../resources_source/python/pyfield.pxi":350
 * 
 *     property adaptivity_parameters:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.adaptivity_parameters.get_parameters()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6_agros_9__Field___21adaptivity_parameters_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6_agros_9__Field___21adaptivity_parameters_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6_agros_9__Field___21adaptivity_parameters___get__(((struct __pyx_obj_6_agros___Field__ *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6_agros_9__Field___21adaptivity_parameters___get__(struct __pyx_obj_6_agros___Field__ *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "../resources_source/python/pyfield.pxi":351
 *     property adaptivity_parameters:
 *         def __get__(self):
 *             return self.adaptivity_parameters.get_parameters()             # <<<<<<<<<<<<<<
 * 
 *     def __get_adaptivity_parameters__(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->adaptivity_parameters, __pyx_n_s_get_parameters); if (unlikely(!__pyx_t_2)) __PYX_ERR(4, 351, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 351, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../resources_source/python/pyfield.pxi":350
 * 
 *     property adaptivity_parameters:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.adaptivity_parameters.get_parameters()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("_agros.__Field__.adaptivity_parameters.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../resources_source/python/pyfield.pxi":353
 *             return self.adaptivity_parameters.get_parameters()
 * 
 *     def __get_adaptivity_parameters__(self):             # <<<<<<<<<<<<<<
 *         return {'tolerance' : self.thisptr.getDoubleParameter(b'AdaptivityTolerance'),
 *                 'steps' : self.thisptr.getIntParameter(b'AdaptivitySteps'),
 */

/* Python wrapper */
static PyObject *__pyx_pw_6_agros_9__Field___13__get_adaptivity_parameters__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_6_agros_9__Field___13__get_adaptivity_parameters__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get_adaptivity_parameters__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6_agros_9__Field___12__get_adaptivity_parameters__(((struct __pyx_obj_6_agros___Field__ *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6_agros_9__Field___12__get_adaptivity_parameters__(struct __pyx_obj_6_agros___Field__ *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  std::string __pyx_t_2;
  double __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get_adaptivity_parameters__", 0);

  /* "../resources_source/python/pyfield.pxi":354
 * 
 *     def __get_adaptivity_parameters__(self):
 *         return {'tolerance' : self.thisptr.getDoubleParameter(b'AdaptivityTolerance'),             # <<<<<<<<<<<<<<
 *                 'steps' : self.thisptr.getIntParameter(b'AdaptivitySteps'),
 *                 'estimator' : self.thisptr.getAdaptivityEstimator().decode(),
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyDict_NewPresized(9); if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 354, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_convert_string_from_py_std__in_string(__pyx_n_b_AdaptivityTolerance); if (unlikely(PyErr_Occurred())) __PYX_ERR(4, 354, __pyx_L1_error)
  try {
    __pyx_t_3 = __pyx_v_self->thisptr->getDoubleParameter(__pyx_t_2);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(4, 354, __pyx_L1_error)
  }
  __pyx_t_4 = PyFloat_FromDouble(__pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(4, 354, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_tolerance, __pyx_t_4) < 0) __PYX_ERR(4, 354, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "../resources_source/python/pyfield.pxi":355
 *     def __get_adaptivity_parameters__(self):
 *         return {'tolerance' : self.thisptr.getDoubleParameter(b'AdaptivityTolerance'),
 *                 'steps' : self.thisptr.getIntParameter(b'AdaptivitySteps'),             # <<<<<<<<<<<<<<
 *                 'estimator' : self.thisptr.getAdaptivityEstimator().decode(),
 *                 'strategy' : self.thisptr.getAdaptivityStrategy().decode(),
 */
  __pyx_t_2 = __pyx_convert_string_from_py_std__in_string(__pyx_n_b_AdaptivitySteps); if (unlikely(PyErr_Occurred())) __PYX_ERR(4, 355, __pyx_L1_error)
  try {
    __pyx_t_5 = __pyx_v_self->thisptr->getIntParameter(__pyx_t_2);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(4, 355, __pyx_L1_error)
  }
  __pyx_t_4 = __Pyx_PyInt_From_int(__pyx_t_5); if (unlikely(!__pyx_t_4)) __PYX_ERR(4, 355, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_steps, __pyx_t_4) < 0) __PYX_ERR(4, 354, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "../resources_source/python/pyfield.pxi":356
 *         return {'tolerance' : self.thisptr.getDoubleParameter(b'AdaptivityTolerance'),
 *                 'steps' : self.thisptr.getIntParameter(b'AdaptivitySteps'),
 *                 'estimator' : self.thisptr.getAdaptivityEstimator().decode(),             # <<<<<<<<<<<<<<
 *                 'strategy' : self.thisptr.getAdaptivityStrategy().decode(),
 *                 'strategy_hp' : self.thisptr.getAdaptivityStrategyHP().decode(),
 */
  __pyx_t_4 = __Pyx_decode_cpp_string(__pyx_v_self->thisptr->getAdaptivityEstimator(), 0, PY_SSIZE_T_MAX, NULL, NULL, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(4, 356, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_estimator, __pyx_t_4) < 0) __PYX_ERR(4, 354, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "../resources_source/python/pyfield.pxi":357
 *                 'steps' : self.thisptr.getIntParameter(b'AdaptivitySteps'),
 *                 'estimator' : self.thisptr.getAdaptivityEstimator().decode(),
 *                 'strategy' : self.thisptr.getAdaptivityStrategy().decode(),             # <<<<<<<<<<<<<<
 *                 'strategy_hp' : self.thisptr.getAdaptivityStrategyHP().decode(),
 *                 'fine_percentage' : self.thisptr.getIntParameter(b'AdaptivityFinePercentage'),
 */
  __pyx_t_4 = __Pyx_decode_cpp_string(__pyx_v_self->thisptr->getAdaptivityStrategy(), 0, PY_SSIZE_T_MAX, NULL, NULL, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(4, 357, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_strategy, __pyx_t_4) < 0) __PYX_ERR(4, 354, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "../resources_source/python/pyfield.pxi":358
 *                 'estimator' : self.thisptr.getAdaptivityEstimator().decode(),
 *                 'strategy' : self.thisptr.getAdaptivityStrategy().decode(),
 *                 'strategy_hp' : self.thisptr.getAdaptivityStrategyHP().decode(),             # <<<<<<<<<<<<<<
 *                 'fine_percentage' : self.thisptr.getIntParameter(b'AdaptivityFinePercentage'),
 *                 'coarse_percentage' : self.thisptr.getIntParameter(b'AdaptivityCoarsePercentage'),
 */
  __pyx_t_4 = __Pyx_decode_cpp_string(__pyx_v_self->thisptr->getAdaptivityStrategyHP(), 0, PY_SSIZE_T_MAX, NULL, NULL, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(4, 358, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_strategy_hp, __pyx_t_4) < 0) __PYX_ERR(4, 354, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "../resources_source/python/pyfield.pxi":359
 *                 'strategy' : self.thisptr.getAdaptivityStrategy().decode(),
 *                 'strategy_hp' : self.thisptr.getAdaptivityStrategyHP().decode(),
 *                 'fine_percentage' : self.thisptr.getIntParameter(b'AdaptivityFinePercentage'),             # <<<<<<<<<<<<<<
 *                 'coarse_percentage' : self.thisptr.getIntParameter(b'AdaptivityCoarsePercentage'),
 *                 'transient_back_steps' : self.thisptr.getIntParameter(b'AdaptivityTransientBackSteps'),
 */
  __pyx_t_2 = __pyx_convert_string_from_py_std__in_string(__pyx_n_b_AdaptivityFinePercentage); if (unlikely(PyErr_Occurred())) __PYX_ERR(4, 359, __pyx_L1_error)
  try {
    __pyx_t_5 = __pyx_v_self->thisptr->getIntParameter(__pyx_t_2);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(4, 359, __pyx_L1_error)
  }
  __pyx_t_4 = __Pyx_PyInt_From_int(__pyx_t_5); if (unlikely(!__pyx_t_4)) __PYX_ERR(4, 359, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_fine_percentage, __pyx_t_4) < 0) __PYX_ERR(4, 354, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "../resources_source/python/pyfield.pxi":360
 *                 'strategy_hp' : self.thisptr.getAdaptivityStrategyHP().decode(),
 *                 'fine_percentage' : self.thisptr.getIntParameter(b'AdaptivityFinePercentage'),
 *                 'coarse_percentage' : self.thisptr.getIntParameter(b'AdaptivityCoarsePercentage'),             # <<<<<<<<<<<<<<
 *                 'transient_back_steps' : self.thisptr.getIntParameter(b'AdaptivityTransientBackSteps'),
 *                 'transient_redone_steps' : self.thisptr.getIntParameter(b'AdaptivityTransientRedoneEach')}
 */
  __pyx_t_2 = __pyx_convert_string_from_py_std__in_string(__pyx_n_b_AdaptivityCoarsePercentage); if (unlikely(PyErr_Occurred())) __PYX_ERR(4, 360, __pyx_L1_error)
  try {
    __pyx_t_5 = __pyx_v_self->thisptr->getIntParameter(__pyx_t_2);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(4, 360, __pyx_L1_error)
  }
  __pyx_t_4 = __Pyx_PyInt_From_int(__pyx_t_5); if (unlikely(!__pyx_t_4)) __PYX_ERR(4, 360, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_coarse_percentage, __pyx_t_4) < 0) __PYX_ERR(4, 354, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "../resources_source/python/pyfield.pxi":361
 *                 'fine_percentage' : self.thisptr.getIntParameter(b'AdaptivityFinePercentage'),
 *                 'coarse_percentage' : self.thisptr.getIntParameter(b'AdaptivityCoarsePercentage'),
 *                 'transient_back_steps' : self.thisptr.getIntParameter(b'AdaptivityTransientBackSteps'),             # <<<<<<<<<<<<<<
 *                 'transient_redone_steps' : self.thisptr.getIntParameter(b'AdaptivityTransientRedoneEach')}
 * 
 */
  __pyx_t_2 = __pyx_convert_string_from_py_std__in_string(__pyx_n_b_AdaptivityTransientBackSteps); if (unlikely(PyErr_Occurred())) __PYX_ERR(4, 361, __pyx_L1_error)
  try {
    __pyx_t_5 = __pyx_v_self->thisptr->getIntParameter(__pyx_t_2);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(4, 361, __pyx_L1_error)
  }
  __pyx_t_4 = __Pyx_PyInt_From_int(__pyx_t_5); if (unlikely(!__pyx_t_4)) __PYX_ERR(4, 361, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_transient_back_steps, __pyx_t_4) < 0) __PYX_ERR(4, 354, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "../resources_source/python/pyfield.pxi":362
 *                 'coarse_percentage' : self.thisptr.getIntParameter(b'AdaptivityCoarsePercentage'),
 *                 'transient_back_steps' : self.thisptr.getIntParameter(b'AdaptivityTransientBackSteps'),
 *                 'transient_redone_steps' : self.thisptr.getIntParameter(b'AdaptivityTransientRedoneEach')}             # <<<<<<<<<<<<<<
 * 
 *     def __set_adaptivity_parameters__(self, parameters):
 */
  __pyx_t_2 = __pyx_convert_string_from_py_std__in_string(__pyx_n_b_AdaptivityTransientRedoneEach); if (unlikely(PyErr_Occurred())) __PYX_ERR(4, 362, __pyx_L1_error)
  try {
    __pyx_t_5 = __pyx_v_self->thisptr->getIntParameter(__pyx_t_2);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(4, 362, __pyx_L1_error)
  }
  __pyx_t_4 = __Pyx_PyInt_From_int(__pyx_t_5); if (unlikely(!__pyx_t_4)) __PYX_ERR(4, 362, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_transient_redone_steps, __pyx_t_4) < 0) __PYX_ERR(4, 354, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../resources_source/python/pyfield.pxi":353
 *             return self.adaptivity_parameters.get_parameters()
 * 
 *     def __get_adaptivity_parameters__(self):             # <<<<<<<<<<<<<<
 *         return {'tolerance' : self.thisptr.getDoubleParameter(b'AdaptivityTolerance'),
 *                 'steps' : self.thisptr.getIntParameter(b'AdaptivitySteps'),
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("_agros.__Field__.__get_adaptivity_parameters__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../resources_source/python/pyfield.pxi":364
 *                 'transient_redone_steps' : self.thisptr.getIntParameter(b'AdaptivityTransientRedoneEach')}
 * 
 *     def __set_adaptivity_parameters__(self, parameters):             # <<<<<<<<<<<<<<
 *         # tolerance
 *         positive_value(parameters['tolerance'], 'tolerance')
 */

/* Python wrapper */
static PyObject *__pyx_pw_6_agros_9__Field___15__set_adaptivity_parameters__(PyObject *__pyx_v_self, PyObject *__pyx_v_parameters); /*proto*/
static PyObject *__pyx_pw_6_agros_9__Field___15__set_adaptivity_parameters__(PyObject *__pyx_v_self, PyObject *__pyx_v_parameters) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set_adaptivity_parameters__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6_agros_9__Field___14__set_adaptivity_parameters__(((struct __pyx_obj_6_agros___Field__ *)__pyx_v_self), ((PyObject *)__pyx_v_parameters));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6_agros_9__Field___14__set_adaptivity_parameters__(struct __pyx_obj_6_agros___Field__ *__pyx_v_self, PyObject *__pyx_v_parameters) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  double __pyx_t_7;
  std::string __pyx_t_8;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set_adaptivity_parameters__", 0);

  /* "../resources_source/python/pyfield.pxi":366
 *     def __set_adaptivity_parameters__(self, parameters):
 *         # tolerance
 *         positive_value(parameters['tolerance'], 'tolerance')             # <<<<<<<<<<<<<<
 *         self.thisptr.setParameter(string(b'AdaptivityTolerance'), <double>parameters['tolerance'])
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_positive_value); if (unlikely(!__pyx_t_2)) __PYX_ERR(4, 366, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_Dict_GetItem(__pyx_v_parameters, __pyx_n_s_tolerance); if (unlikely(!__pyx_t_3)) __PYX_ERR(4, 366, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = NULL;
  __pyx_t_5 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_5 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[3] = {__pyx_t_4, __pyx_t_3, __pyx_n_s_tolerance};
    __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_5, 2+__pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 366, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[3] = {__pyx_t_4, __pyx_t_3, __pyx_n_s_tolerance};
    __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_5, 2+__pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 366, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else
  #endif
  {
    __pyx_t_6 = PyTuple_New(2+__pyx_t_5); if (unlikely(!__pyx_t_6)) __PYX_ERR(4, 366, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    if (__pyx_t_4) {
      __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_4); __pyx_t_4 = NULL;
    }
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_6, 0+__pyx_t_5, __pyx_t_3);
    __Pyx_INCREF(__pyx_n_s_tolerance);
    __Pyx_GIVEREF(__pyx_n_s_tolerance);
    PyTuple_SET_ITEM(__pyx_t_6, 1+__pyx_t_5, __pyx_n_s_tolerance);
    __pyx_t_3 = 0;
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_6, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 366, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "../resources_source/python/pyfield.pxi":367
 *         # tolerance
 *         positive_value(parameters['tolerance'], 'tolerance')
 *         self.thisptr.setParameter(string(b'AdaptivityTolerance'), <double>parameters['tolerance'])             # <<<<<<<<<<<<<<
 * 
 *         # steps
 */
  __pyx_t_1 = __Pyx_PyObject_Dict_GetItem(__pyx_v_parameters, __pyx_n_s_tolerance); if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 367, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_7 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_7 == (double)-1) && PyErr_Occurred())) __PYX_ERR(4, 367, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  try {
    __pyx_v_self->thisptr->setParameter(std::string(((char *)"AdaptivityTolerance")), ((double)__pyx_t_7));
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(4, 367, __pyx_L1_error)
  }

  /* "../resources_source/python/pyfield.pxi":370
 * 
 *         # steps
 *         value_in_range(parameters['steps'], 1, 100, 'steps')             # <<<<<<<<<<<<<<
 *         self.thisptr.setParameter(string(b'AdaptivitySteps'), <int>parameters['steps'])
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_value_in_range); if (unlikely(!__pyx_t_2)) __PYX_ERR(4, 370, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_6 = __Pyx_PyObject_Dict_GetItem(__pyx_v_parameters, __pyx_n_s_steps); if (unlikely(!__pyx_t_6)) __PYX_ERR(4, 370, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_3 = NULL;
  __pyx_t_5 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_5 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[5] = {__pyx_t_3, __pyx_t_6, __pyx_int_1, __pyx_int_100, __pyx_n_s_steps};
    __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_5, 4+__pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 370, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[5] = {__pyx_t_3, __pyx_t_6, __pyx_int_1, __pyx_int_100, __pyx_n_s_steps};
    __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_5, 4+__pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 370, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  } else
  #endif
  {
    __pyx_t_4 = PyTuple_New(4+__pyx_t_5); if (unlikely(!__pyx_t_4)) __PYX_ERR(4, 370, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    if (__pyx_t_3) {
      __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_3); __pyx_t_3 = NULL;
    }
    __Pyx_GIVEREF(__pyx_t_6);
    PyTuple_SET_ITEM(__pyx_t_4, 0+__pyx_t_5, __pyx_t_6);
    __Pyx_INCREF(__pyx_int_1);
    __Pyx_GIVEREF(__pyx_int_1);
    PyTuple_SET_ITEM(__pyx_t_4, 1+__pyx_t_5, __pyx_int_1);
    __Pyx_INCREF(__pyx_int_100);
    __Pyx_GIVEREF(__pyx_int_100);
    PyTuple_SET_ITEM(__pyx_t_4, 2+__pyx_t_5, __pyx_int_100);
    __Pyx_INCREF(__pyx_n_s_steps);
    __Pyx_GIVEREF(__pyx_n_s_steps);
    PyTuple_SET_ITEM(__pyx_t_4, 3+__pyx_t_5, __pyx_n_s_steps);
    __pyx_t_6 = 0;
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_4, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 370, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "../resources_source/python/pyfield.pxi":371
 *         # steps
 *         value_in_range(parameters['steps'], 1, 100, 'steps')
 *         self.thisptr.setParameter(string(b'AdaptivitySteps'), <int>parameters['steps'])             # <<<<<<<<<<<<<<
 * 
 *         # estimator
 */
  __pyx_t_1 = __Pyx_PyObject_Dict_GetItem(__pyx_v_parameters, __pyx_n_s_steps); if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 371, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_5 = __Pyx_PyInt_As_int(__pyx_t_1); if (unlikely((__pyx_t_5 == (int)-1) && PyErr_Occurred())) __PYX_ERR(4, 371, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  try {
    __pyx_v_self->thisptr->setParameter(std::string(((char *)"AdaptivitySteps")), ((int)__pyx_t_5));
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(4, 371, __pyx_L1_error)
  }

  /* "../resources_source/python/pyfield.pxi":374
 * 
 *         # estimator
 *         self.thisptr.setAdaptivityEstimator(parameters['estimator'].encode())             # <<<<<<<<<<<<<<
 * 
 *         # strategy
 */
  __pyx_t_2 = __Pyx_PyObject_Dict_GetItem(__pyx_v_parameters, __pyx_n_s_estimator); if (unlikely(!__pyx_t_2)) __PYX_ERR(4, 374, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_encode); if (unlikely(!__pyx_t_4)) __PYX_ERR(4, 374, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  __pyx_t_1 = (__pyx_t_2) ? __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_2) : __Pyx_PyObject_CallNoArg(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 374, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_8 = __pyx_convert_string_from_py_std__in_string(__pyx_t_1); if (unlikely(PyErr_Occurred())) __PYX_ERR(4, 374, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  try {
    __pyx_v_self->thisptr->setAdaptivityEstimator(__pyx_t_8);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(4, 374, __pyx_L1_error)
  }

  /* "../resources_source/python/pyfield.pxi":377
 * 
 *         # strategy
 *         self.thisptr.setAdaptivityStrategy(parameters['strategy'].encode())             # <<<<<<<<<<<<<<
 * 
 *         # strategy hp
 */
  __pyx_t_4 = __Pyx_PyObject_Dict_GetItem(__pyx_v_parameters, __pyx_n_s_strategy); if (unlikely(!__pyx_t_4)) __PYX_ERR(4, 377, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_encode); if (unlikely(!__pyx_t_2)) __PYX_ERR(4, 377, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_4) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_4) : __Pyx_PyObject_CallNoArg(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 377, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_8 = __pyx_convert_string_from_py_std__in_string(__pyx_t_1); if (unlikely(PyErr_Occurred())) __PYX_ERR(4, 377, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  try {
    __pyx_v_self->thisptr->setAdaptivityStrategy(__pyx_t_8);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(4, 377, __pyx_L1_error)
  }

  /* "../resources_source/python/pyfield.pxi":380
 * 
 *         # strategy hp
 *         self.thisptr.setAdaptivityStrategyHP(parameters['strategy_hp'].encode())             # <<<<<<<<<<<<<<
 * 
 *         # coarse percentage
 */
  __pyx_t_2 = __Pyx_PyObject_Dict_GetItem(__pyx_v_parameters, __pyx_n_s_strategy_hp); if (unlikely(!__pyx_t_2)) __PYX_ERR(4, 380, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_encode); if (unlikely(!__pyx_t_4)) __PYX_ERR(4, 380, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  __pyx_t_1 = (__pyx_t_2) ? __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_2) : __Pyx_PyObject_CallNoArg(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 380, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_8 = __pyx_convert_string_from_py_std__in_string(__pyx_t_1); if (unlikely(PyErr_Occurred())) __PYX_ERR(4, 380, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  try {
    __pyx_v_self->thisptr->setAdaptivityStrategyHP(__pyx_t_8);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(4, 380, __pyx_L1_error)
  }

  /* "../resources_source/python/pyfield.pxi":383
 * 
 *         # coarse percentage
 *         value_in_range(parameters['coarse_percentage'], 0, 100, 'coarse_percentage')             # <<<<<<<<<<<<<<
 *         self.thisptr.setParameter(string(b'AdaptivityCoarsePercentage'), <int>parameters['coarse_percentage'])
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_value_in_range); if (unlikely(!__pyx_t_4)) __PYX_ERR(4, 383, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_2 = __Pyx_PyObject_Dict_GetItem(__pyx_v_parameters, __pyx_n_s_coarse_percentage); if (unlikely(!__pyx_t_2)) __PYX_ERR(4, 383, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_6 = NULL;
  __pyx_t_5 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_6)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
      __pyx_t_5 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_4)) {
    PyObject *__pyx_temp[5] = {__pyx_t_6, __pyx_t_2, __pyx_int_0, __pyx_int_100, __pyx_n_s_coarse_percentage};
    __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_4, __pyx_temp+1-__pyx_t_5, 4+__pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 383, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_4)) {
    PyObject *__pyx_temp[5] = {__pyx_t_6, __pyx_t_2, __pyx_int_0, __pyx_int_100, __pyx_n_s_coarse_percentage};
    __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_4, __pyx_temp+1-__pyx_t_5, 4+__pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 383, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  } else
  #endif
  {
    __pyx_t_3 = PyTuple_New(4+__pyx_t_5); if (unlikely(!__pyx_t_3)) __PYX_ERR(4, 383, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (__pyx_t_6) {
      __Pyx_GIVEREF(__pyx_t_6); PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_6); __pyx_t_6 = NULL;
    }
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_3, 0+__pyx_t_5, __pyx_t_2);
    __Pyx_INCREF(__pyx_int_0);
    __Pyx_GIVEREF(__pyx_int_0);
    PyTuple_SET_ITEM(__pyx_t_3, 1+__pyx_t_5, __pyx_int_0);
    __Pyx_INCREF(__pyx_int_100);
    __Pyx_GIVEREF(__pyx_int_100);
    PyTuple_SET_ITEM(__pyx_t_3, 2+__pyx_t_5, __pyx_int_100);
    __Pyx_INCREF(__pyx_n_s_coarse_percentage);
    __Pyx_GIVEREF(__pyx_n_s_coarse_percentage);
    PyTuple_SET_ITEM(__pyx_t_3, 3+__pyx_t_5, __pyx_n_s_coarse_percentage);
    __pyx_t_2 = 0;
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_3, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 383, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "../resources_source/python/pyfield.pxi":384
 *         # coarse percentage
 *         value_in_range(parameters['coarse_percentage'], 0, 100, 'coarse_percentage')
 *         self.thisptr.setParameter(string(b'AdaptivityCoarsePercentage'), <int>parameters['coarse_percentage'])             # <<<<<<<<<<<<<<
 * 
 *         # fine percentage
 */
  __pyx_t_1 = __Pyx_PyObject_Dict_GetItem(__pyx_v_parameters, __pyx_n_s_coarse_percentage); if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 384, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_5 = __Pyx_PyInt_As_int(__pyx_t_1); if (unlikely((__pyx_t_5 == (int)-1) && PyErr_Occurred())) __PYX_ERR(4, 384, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  try {
    __pyx_v_self->thisptr->setParameter(std::string(((char *)"AdaptivityCoarsePercentage")), ((int)__pyx_t_5));
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(4, 384, __pyx_L1_error)
  }

  /* "../resources_source/python/pyfield.pxi":387
 * 
 *         # fine percentage
 *         value_in_range(parameters['fine_percentage'], 0, 100, 'fine_percentage')             # <<<<<<<<<<<<<<
 *         self.thisptr.setParameter(string(b'AdaptivityFinePercentage'), <int>parameters['fine_percentage'])
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_value_in_range); if (unlikely(!__pyx_t_4)) __PYX_ERR(4, 387, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_3 = __Pyx_PyObject_Dict_GetItem(__pyx_v_parameters, __pyx_n_s_fine_percentage); if (unlikely(!__pyx_t_3)) __PYX_ERR(4, 387, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = NULL;
  __pyx_t_5 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
      __pyx_t_5 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_4)) {
    PyObject *__pyx_temp[5] = {__pyx_t_2, __pyx_t_3, __pyx_int_0, __pyx_int_100, __pyx_n_s_fine_percentage};
    __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_4, __pyx_temp+1-__pyx_t_5, 4+__pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 387, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_4)) {
    PyObject *__pyx_temp[5] = {__pyx_t_2, __pyx_t_3, __pyx_int_0, __pyx_int_100, __pyx_n_s_fine_percentage};
    __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_4, __pyx_temp+1-__pyx_t_5, 4+__pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 387, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else
  #endif
  {
    __pyx_t_6 = PyTuple_New(4+__pyx_t_5); if (unlikely(!__pyx_t_6)) __PYX_ERR(4, 387, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    if (__pyx_t_2) {
      __Pyx_GIVEREF(__pyx_t_2); PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_2); __pyx_t_2 = NULL;
    }
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_6, 0+__pyx_t_5, __pyx_t_3);
    __Pyx_INCREF(__pyx_int_0);
    __Pyx_GIVEREF(__pyx_int_0);
    PyTuple_SET_ITEM(__pyx_t_6, 1+__pyx_t_5, __pyx_int_0);
    __Pyx_INCREF(__pyx_int_100);
    __Pyx_GIVEREF(__pyx_int_100);
    PyTuple_SET_ITEM(__pyx_t_6, 2+__pyx_t_5, __pyx_int_100);
    __Pyx_INCREF(__pyx_n_s_fine_percentage);
    __Pyx_GIVEREF(__pyx_n_s_fine_percentage);
    PyTuple_SET_ITEM(__pyx_t_6, 3+__pyx_t_5, __pyx_n_s_fine_percentage);
    __pyx_t_3 = 0;
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_6, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 387, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  }
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "../resources_source/python/pyfield.pxi":388
 *         # fine percentage
 *         value_in_range(parameters['fine_percentage'], 0, 100, 'fine_percentage')
 *         self.thisptr.setParameter(string(b'AdaptivityFinePercentage'), <int>parameters['fine_percentage'])             # <<<<<<<<<<<<<<
 * 
 *         # back steps
 */
  __pyx_t_1 = __Pyx_PyObject_Dict_GetItem(__pyx_v_parameters, __pyx_n_s_fine_percentage); if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 388, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_5 = __Pyx_PyInt_As_int(__pyx_t_1); if (unlikely((__pyx_t_5 == (int)-1) && PyErr_Occurred())) __PYX_ERR(4, 388, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  try {
    __pyx_v_self->thisptr->setParameter(std::string(((char *)"AdaptivityFinePercentage")), ((int)__pyx_t_5));
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(4, 388, __pyx_L1_error)
  }

  /* "../resources_source/python/pyfield.pxi":391
 * 
 *         # back steps
 *         value_in_range(parameters['transient_back_steps'], 0, 100, 'transient_back_steps')             # <<<<<<<<<<<<<<
 *         self.thisptr.setParameter(string(b'AdaptivityTransientBackSteps'), <int>parameters['transient_back_steps'])
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_value_in_range); if (unlikely(!__pyx_t_4)) __PYX_ERR(4, 391, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_6 = __Pyx_PyObject_Dict_GetItem(__pyx_v_parameters, __pyx_n_s_transient_back_steps); if (unlikely(!__pyx_t_6)) __PYX_ERR(4, 391, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_3 = NULL;
  __pyx_t_5 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
      __pyx_t_5 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_4)) {
    PyObject *__pyx_temp[5] = {__pyx_t_3, __pyx_t_6, __pyx_int_0, __pyx_int_100, __pyx_n_s_transient_back_steps};
    __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_4, __pyx_temp+1-__pyx_t_5, 4+__pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 391, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_4)) {
    PyObject *__pyx_temp[5] = {__pyx_t_3, __pyx_t_6, __pyx_int_0, __pyx_int_100, __pyx_n_s_transient_back_steps};
    __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_4, __pyx_temp+1-__pyx_t_5, 4+__pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 391, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  } else
  #endif
  {
    __pyx_t_2 = PyTuple_New(4+__pyx_t_5); if (unlikely(!__pyx_t_2)) __PYX_ERR(4, 391, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    if (__pyx_t_3) {
      __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_3); __pyx_t_3 = NULL;
    }
    __Pyx_GIVEREF(__pyx_t_6);
    PyTuple_SET_ITEM(__pyx_t_2, 0+__pyx_t_5, __pyx_t_6);
    __Pyx_INCREF(__pyx_int_0);
    __Pyx_GIVEREF(__pyx_int_0);
    PyTuple_SET_ITEM(__pyx_t_2, 1+__pyx_t_5, __pyx_int_0);
    __Pyx_INCREF(__pyx_int_100);
    __Pyx_GIVEREF(__pyx_int_100);
    PyTuple_SET_ITEM(__pyx_t_2, 2+__pyx_t_5, __pyx_int_100);
    __Pyx_INCREF(__pyx_n_s_transient_back_steps);
    __Pyx_GIVEREF(__pyx_n_s_transient_back_steps);
    PyTuple_SET_ITEM(__pyx_t_2, 3+__pyx_t_5, __pyx_n_s_transient_back_steps);
    __pyx_t_6 = 0;
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 391, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "../resources_source/python/pyfield.pxi":392
 *         # back steps
 *         value_in_range(parameters['transient_back_steps'], 0, 100, 'transient_back_steps')
 *         self.thisptr.setParameter(string(b'AdaptivityTransientBackSteps'), <int>parameters['transient_back_steps'])             # <<<<<<<<<<<<<<
 * 
 *         # redone steps
 */
  __pyx_t_1 = __Pyx_PyObject_Dict_GetItem(__pyx_v_parameters, __pyx_n_s_transient_back_steps); if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 392, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_5 = __Pyx_PyInt_As_int(__pyx_t_1); if (unlikely((__pyx_t_5 == (int)-1) && PyErr_Occurred())) __PYX_ERR(4, 392, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  try {
    __pyx_v_self->thisptr->setParameter(std::string(((char *)"AdaptivityTransientBackSteps")), ((int)__pyx_t_5));
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(4, 392, __pyx_L1_error)
  }

  /* "../resources_source/python/pyfield.pxi":395
 * 
 *         # redone steps
 *         value_in_range(parameters['transient_redone_steps'], 1, 100, 'transient_redone_steps')             # <<<<<<<<<<<<<<
 *         self.thisptr.setParameter(string(b'AdaptivityTransientRedoneEach'), <int>parameters['transient_redone_steps'])
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_value_in_range); if (unlikely(!__pyx_t_4)) __PYX_ERR(4, 395, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_2 = __Pyx_PyObject_Dict_GetItem(__pyx_v_parameters, __pyx_n_s_transient_redone_steps); if (unlikely(!__pyx_t_2)) __PYX_ERR(4, 395, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_6 = NULL;
  __pyx_t_5 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_6)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
      __pyx_t_5 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_4)) {
    PyObject *__pyx_temp[5] = {__pyx_t_6, __pyx_t_2, __pyx_int_1, __pyx_int_100, __pyx_n_s_transient_redone_steps};
    __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_4, __pyx_temp+1-__pyx_t_5, 4+__pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 395, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_4)) {
    PyObject *__pyx_temp[5] = {__pyx_t_6, __pyx_t_2, __pyx_int_1, __pyx_int_100, __pyx_n_s_transient_redone_steps};
    __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_4, __pyx_temp+1-__pyx_t_5, 4+__pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 395, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  } else
  #endif
  {
    __pyx_t_3 = PyTuple_New(4+__pyx_t_5); if (unlikely(!__pyx_t_3)) __PYX_ERR(4, 395, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (__pyx_t_6) {
      __Pyx_GIVEREF(__pyx_t_6); PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_6); __pyx_t_6 = NULL;
    }
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_3, 0+__pyx_t_5, __pyx_t_2);
    __Pyx_INCREF(__pyx_int_1);
    __Pyx_GIVEREF(__pyx_int_1);
    PyTuple_SET_ITEM(__pyx_t_3, 1+__pyx_t_5, __pyx_int_1);
    __Pyx_INCREF(__pyx_int_100);
    __Pyx_GIVEREF(__pyx_int_100);
    PyTuple_SET_ITEM(__pyx_t_3, 2+__pyx_t_5, __pyx_int_100);
    __Pyx_INCREF(__pyx_n_s_transient_redone_steps);
    __Pyx_GIVEREF(__pyx_n_s_transient_redone_steps);
    PyTuple_SET_ITEM(__pyx_t_3, 3+__pyx_t_5, __pyx_n_s_transient_redone_steps);
    __pyx_t_2 = 0;
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_3, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 395, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "../resources_source/python/pyfield.pxi":396
 *         # redone steps
 *         value_in_range(parameters['transient_redone_steps'], 1, 100, 'transient_redone_steps')
 *         self.thisptr.setParameter(string(b'AdaptivityTransientRedoneEach'), <int>parameters['transient_redone_steps'])             # <<<<<<<<<<<<<<
 * 
 *     # initial condition
 */
  __pyx_t_1 = __Pyx_PyObject_Dict_GetItem(__pyx_v_parameters, __pyx_n_s_transient_redone_steps); if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 396, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_5 = __Pyx_PyInt_As_int(__pyx_t_1); if (unlikely((__pyx_t_5 == (int)-1) && PyErr_Occurred())) __PYX_ERR(4, 396, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  try {
    __pyx_v_self->thisptr->setParameter(std::string(((char *)"AdaptivityTransientRedoneEach")), ((int)__pyx_t_5));
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(4, 396, __pyx_L1_error)
  }

  /* "../resources_source/python/pyfield.pxi":364
 *                 'transient_redone_steps' : self.thisptr.getIntParameter(b'AdaptivityTransientRedoneEach')}
 * 
 *     def __set_adaptivity_parameters__(self, parameters):             # <<<<<<<<<<<<<<
 *         # tolerance
 *         positive_value(parameters['tolerance'], 'tolerance')
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("_agros.__Field__.__set_adaptivity_parameters__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../resources_source/python/pyfield.pxi":400
 *     # initial condition
 *     property transient_initial_condition:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.thisptr.getInitialCondition()
 *         def __set__(self, condition):
 */

/* Python wrapper */
static PyObject *__pyx_pw_6_agros_9__Field___27transient_initial_condition_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6_agros_9__Field___27transient_initial_condition_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6_agros_9__Field___27transient_initial_condition___get__(((struct __pyx_obj_6_agros___Field__ *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6_agros_9__Field___27transient_initial_condition___get__(struct __pyx_obj_6_agros___Field__ *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "../resources_source/python/pyfield.pxi":401
 *     property transient_initial_condition:
 *         def __get__(self):
 *             return self.thisptr.getInitialCondition()             # <<<<<<<<<<<<<<
 *         def __set__(self, condition):
 *             self.thisptr.setInitialCondition(condition)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->thisptr->getInitialCondition()); if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 401, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../resources_source/python/pyfield.pxi":400
 *     # initial condition
 *     property transient_initial_condition:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.thisptr.getInitialCondition()
 *         def __set__(self, condition):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("_agros.__Field__.transient_initial_condition.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../resources_source/python/pyfield.pxi":402
 *         def __get__(self):
 *             return self.thisptr.getInitialCondition()
 *         def __set__(self, condition):             # <<<<<<<<<<<<<<
 *             self.thisptr.setInitialCondition(condition)
 * 
 */

/* Python wrapper */
static int __pyx_pw_6_agros_9__Field___27transient_initial_condition_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_condition); /*proto*/
static int __pyx_pw_6_agros_9__Field___27transient_initial_condition_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_condition) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6_agros_9__Field___27transient_initial_condition_2__set__(((struct __pyx_obj_6_agros___Field__ *)__pyx_v_self), ((PyObject *)__pyx_v_condition));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6_agros_9__Field___27transient_initial_condition_2__set__(struct __pyx_obj_6_agros___Field__ *__pyx_v_self, PyObject *__pyx_v_condition) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "../resources_source/python/pyfield.pxi":403
 *             return self.thisptr.getInitialCondition()
 *         def __set__(self, condition):
 *             self.thisptr.setInitialCondition(condition)             # <<<<<<<<<<<<<<
 * 
 *     # time skip
 */
  __pyx_t_1 = __pyx_PyFloat_AsDouble(__pyx_v_condition); if (unlikely((__pyx_t_1 == (double)-1) && PyErr_Occurred())) __PYX_ERR(4, 403, __pyx_L1_error)
  try {
    __pyx_v_self->thisptr->setInitialCondition(__pyx_t_1);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(4, 403, __pyx_L1_error)
  }

  /* "../resources_source/python/pyfield.pxi":402
 *         def __get__(self):
 *             return self.thisptr.getInitialCondition()
 *         def __set__(self, condition):             # <<<<<<<<<<<<<<
 *             self.thisptr.setInitialCondition(condition)
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("_agros.__Field__.transient_initial_condition.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../resources_source/python/pyfield.pxi":407
 *     # time skip
 *     property transient_time_skip:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.thisptr.getTimeSkip()
 *         def __set__(self, skip):
 */

/* Python wrapper */
static PyObject *__pyx_pw_6_agros_9__Field___19transient_time_skip_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6_agros_9__Field___19transient_time_skip_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6_agros_9__Field___19transient_time_skip___get__(((struct __pyx_obj_6_agros___Field__ *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6_agros_9__Field___19transient_time_skip___get__(struct __pyx_obj_6_agros___Field__ *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "../resources_source/python/pyfield.pxi":408
 *     property transient_time_skip:
 *         def __get__(self):
 *             return self.thisptr.getTimeSkip()             # <<<<<<<<<<<<<<
 *         def __set__(self, skip):
 *             self.thisptr.setTimeSkip(skip)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->thisptr->getTimeSkip()); if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 408, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../resources_source/python/pyfield.pxi":407
 *     # time skip
 *     property transient_time_skip:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.thisptr.getTimeSkip()
 *         def __set__(self, skip):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("_agros.__Field__.transient_time_skip.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../resources_source/python/pyfield.pxi":409
 *         def __get__(self):
 *             return self.thisptr.getTimeSkip()
 *         def __set__(self, skip):             # <<<<<<<<<<<<<<
 *             self.thisptr.setTimeSkip(skip)
 * 
 */

/* Python wrapper */
static int __pyx_pw_6_agros_9__Field___19transient_time_skip_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_skip); /*proto*/
static int __pyx_pw_6_agros_9__Field___19transient_time_skip_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_skip) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6_agros_9__Field___19transient_time_skip_2__set__(((struct __pyx_obj_6_agros___Field__ *)__pyx_v_self), ((PyObject *)__pyx_v_skip));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6_agros_9__Field___19transient_time_skip_2__set__(struct __pyx_obj_6_agros___Field__ *__pyx_v_self, PyObject *__pyx_v_skip) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "../resources_source/python/pyfield.pxi":410
 *             return self.thisptr.getTimeSkip()
 *         def __set__(self, skip):
 *             self.thisptr.setTimeSkip(skip)             # <<<<<<<<<<<<<<
 * 
 *     # boundaries
 */
  __pyx_t_1 = __pyx_PyFloat_AsDouble(__pyx_v_skip); if (unlikely((__pyx_t_1 == (double)-1) && PyErr_Occurred())) __PYX_ERR(4, 410, __pyx_L1_error)
  try {
    __pyx_v_self->thisptr->setTimeSkip(__pyx_t_1);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(4, 410, __pyx_L1_error)
  }

  /* "../resources_source/python/pyfield.pxi":409
 *         def __get__(self):
 *             return self.thisptr.getTimeSkip()
 *         def __set__(self, skip):             # <<<<<<<<<<<<<<
 *             self.thisptr.setTimeSkip(skip)
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("_agros.__Field__.transient_time_skip.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../resources_source/python/pyfield.pxi":413
 * 
 *     # boundaries
 *     def add_boundary(self, name, type, parameters = {}):             # <<<<<<<<<<<<<<
 *         """Add new boundary condition.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6_agros_9__Field___17add_boundary(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6_agros_9__Field___16add_boundary[] = "Add new boundary condition.\n\n        add_boundary(name, type, parameters = {})\n\n        Keyword arguments:\n        name -- boundary condition name\n        type -- boundary contition type\n        parameters -- dict of boundary condition parameters (default is {})\n        ";
static PyObject *__pyx_pw_6_agros_9__Field___17add_boundary(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_name = 0;
  PyObject *__pyx_v_type = 0;
  PyObject *__pyx_v_parameters = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("add_boundary (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_name,&__pyx_n_s_type,&__pyx_n_s_parameters,0};
    PyObject* values[3] = {0,0,0};
    values[2] = __pyx_k__24;
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_name)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_type)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("add_boundary", 0, 2, 3, 1); __PYX_ERR(4, 413, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_parameters);
          if (value) { values[2] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "add_boundary") < 0)) __PYX_ERR(4, 413, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_name = values[0];
    __pyx_v_type = values[1];
    __pyx_v_parameters = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("add_boundary", 0, 2, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(4, 413, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("_agros.__Field__.add_boundary", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6_agros_9__Field___16add_boundary(((struct __pyx_obj_6_agros___Field__ *)__pyx_v_self), __pyx_v_name, __pyx_v_type, __pyx_v_parameters);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6_agros_9__Field___16add_boundary(struct __pyx_obj_6_agros___Field__ *__pyx_v_self, PyObject *__pyx_v_name, PyObject *__pyx_v_type, PyObject *__pyx_v_parameters) {
  std::map<std::string,std::string>  __pyx_v_parameters_map;
  std::map<std::string,std::string>  __pyx_v_expression_map;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  std::string __pyx_t_4;
  std::string __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("add_boundary", 0);

  /* "../resources_source/python/pyfield.pxi":423
 *         parameters -- dict of boundary condition parameters (default is {})
 *         """
 *         cdef map[string, string] parameters_map = get_parameters_map(parameters)             # <<<<<<<<<<<<<<
 *         cdef map[string, string] expression_map = get_expression_map(parameters)
 * 
 */
  __pyx_v_parameters_map = __pyx_f_6_agros_get_parameters_map(__pyx_v_parameters);

  /* "../resources_source/python/pyfield.pxi":424
 *         """
 *         cdef map[string, string] parameters_map = get_parameters_map(parameters)
 *         cdef map[string, string] expression_map = get_expression_map(parameters)             # <<<<<<<<<<<<<<
 * 
 *         self.thisptr.addBoundary(name.encode(), type.encode(), parameters_map, expression_map)
 */
  __pyx_v_expression_map = __pyx_f_6_agros_get_expression_map(__pyx_v_parameters);

  /* "../resources_source/python/pyfield.pxi":426
 *         cdef map[string, string] expression_map = get_expression_map(parameters)
 * 
 *         self.thisptr.addBoundary(name.encode(), type.encode(), parameters_map, expression_map)             # <<<<<<<<<<<<<<
 * 
 *     def modify_boundary(self, name, type = "", parameters = {}):
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_name, __pyx_n_s_encode); if (unlikely(!__pyx_t_2)) __PYX_ERR(4, 426, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 426, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = __pyx_convert_string_from_py_std__in_string(__pyx_t_1); if (unlikely(PyErr_Occurred())) __PYX_ERR(4, 426, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_type, __pyx_n_s_encode); if (unlikely(!__pyx_t_2)) __PYX_ERR(4, 426, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 426, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_5 = __pyx_convert_string_from_py_std__in_string(__pyx_t_1); if (unlikely(PyErr_Occurred())) __PYX_ERR(4, 426, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  try {
    __pyx_v_self->thisptr->addBoundary(__pyx_t_4, __pyx_t_5, __pyx_v_parameters_map, __pyx_v_expression_map);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(4, 426, __pyx_L1_error)
  }

  /* "../resources_source/python/pyfield.pxi":413
 * 
 *     # boundaries
 *     def add_boundary(self, name, type, parameters = {}):             # <<<<<<<<<<<<<<
 *         """Add new boundary condition.
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("_agros.__Field__.add_boundary", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../resources_source/python/pyfield.pxi":428
 *         self.thisptr.addBoundary(name.encode(), type.encode(), parameters_map, expression_map)
 * 
 *     def modify_boundary(self, name, type = "", parameters = {}):             # <<<<<<<<<<<<<<
 *         """Modify existing boundary condition.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6_agros_9__Field___19modify_boundary(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6_agros_9__Field___18modify_boundary[] = "Modify existing boundary condition.\n\n        modify_boundary(name, type = \"\", parameters = {})\n\n        Keyword arguments:\n        name -- boundary condition name\n        type -- boundary contition type (default is \"\")\n        parameters -- dict of boundary condition parameters (default is {})\n        ";
static PyObject *__pyx_pw_6_agros_9__Field___19modify_boundary(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_name = 0;
  PyObject *__pyx_v_type = 0;
  PyObject *__pyx_v_parameters = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("modify_boundary (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_name,&__pyx_n_s_type,&__pyx_n_s_parameters,0};
    PyObject* values[3] = {0,0,0};
    values[1] = ((PyObject *)__pyx_kp_s__25);
    values[2] = __pyx_k__26;
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_name)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_type);
          if (value) { values[1] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_parameters);
          if (value) { values[2] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "modify_boundary") < 0)) __PYX_ERR(4, 428, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_name = values[0];
    __pyx_v_type = values[1];
    __pyx_v_parameters = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("modify_boundary", 0, 1, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(4, 428, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("_agros.__Field__.modify_boundary", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6_agros_9__Field___18modify_boundary(((struct __pyx_obj_6_agros___Field__ *)__pyx_v_self), __pyx_v_name, __pyx_v_type, __pyx_v_parameters);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6_agros_9__Field___18modify_boundary(struct __pyx_obj_6_agros___Field__ *__pyx_v_self, PyObject *__pyx_v_name, PyObject *__pyx_v_type, PyObject *__pyx_v_parameters) {
  std::map<std::string,std::string>  __pyx_v_parameters_map;
  std::map<std::string,std::string>  __pyx_v_expression_map;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  std::string __pyx_t_4;
  std::string __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("modify_boundary", 0);

  /* "../resources_source/python/pyfield.pxi":438
 *         parameters -- dict of boundary condition parameters (default is {})
 *         """
 *         cdef map[string, string] parameters_map = get_parameters_map(parameters)             # <<<<<<<<<<<<<<
 *         cdef map[string, string] expression_map = get_expression_map(parameters)
 * 
 */
  __pyx_v_parameters_map = __pyx_f_6_agros_get_parameters_map(__pyx_v_parameters);

  /* "../resources_source/python/pyfield.pxi":439
 *         """
 *         cdef map[string, string] parameters_map = get_parameters_map(parameters)
 *         cdef map[string, string] expression_map = get_expression_map(parameters)             # <<<<<<<<<<<<<<
 * 
 *         self.thisptr.modifyBoundary(name.encode(), type.encode(), parameters_map, expression_map)
 */
  __pyx_v_expression_map = __pyx_f_6_agros_get_expression_map(__pyx_v_parameters);

  /* "../resources_source/python/pyfield.pxi":441
 *         cdef map[string, string] expression_map = get_expression_map(parameters)
 * 
 *         self.thisptr.modifyBoundary(name.encode(), type.encode(), parameters_map, expression_map)             # <<<<<<<<<<<<<<
 * 
 *     def remove_boundary(self, name):
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_name, __pyx_n_s_encode); if (unlikely(!__pyx_t_2)) __PYX_ERR(4, 441, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 441, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = __pyx_convert_string_from_py_std__in_string(__pyx_t_1); if (unlikely(PyErr_Occurred())) __PYX_ERR(4, 441, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_type, __pyx_n_s_encode); if (unlikely(!__pyx_t_2)) __PYX_ERR(4, 441, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 441, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_5 = __pyx_convert_string_from_py_std__in_string(__pyx_t_1); if (unlikely(PyErr_Occurred())) __PYX_ERR(4, 441, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  try {
    __pyx_v_self->thisptr->modifyBoundary(__pyx_t_4, __pyx_t_5, __pyx_v_parameters_map, __pyx_v_expression_map);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(4, 441, __pyx_L1_error)
  }

  /* "../resources_source/python/pyfield.pxi":428
 *         self.thisptr.addBoundary(name.encode(), type.encode(), parameters_map, expression_map)
 * 
 *     def modify_boundary(self, name, type = "", parameters = {}):             # <<<<<<<<<<<<<<
 *         """Modify existing boundary condition.
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("_agros.__Field__.modify_boundary", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../resources_source/python/pyfield.pxi":443
 *         self.thisptr.modifyBoundary(name.encode(), type.encode(), parameters_map, expression_map)
 * 
 *     def remove_boundary(self, name):             # <<<<<<<<<<<<<<
 *         """Remove existing boundary condition.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6_agros_9__Field___21remove_boundary(PyObject *__pyx_v_self, PyObject *__pyx_v_name); /*proto*/
static char __pyx_doc_6_agros_9__Field___20remove_boundary[] = "Remove existing boundary condition.\n\n        remove_boundary(name)\n\n        Keyword arguments:\n        name -- boundary condition name\n        ";
static PyObject *__pyx_pw_6_agros_9__Field___21remove_boundary(PyObject *__pyx_v_self, PyObject *__pyx_v_name) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("remove_boundary (wrapper)", 0);
  __pyx_r = __pyx_pf_6_agros_9__Field___20remove_boundary(((struct __pyx_obj_6_agros___Field__ *)__pyx_v_self), ((PyObject *)__pyx_v_name));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6_agros_9__Field___20remove_boundary(struct __pyx_obj_6_agros___Field__ *__pyx_v_self, PyObject *__pyx_v_name) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  std::string __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("remove_boundary", 0);

  /* "../resources_source/python/pyfield.pxi":451
 *         name -- boundary condition name
 *         """
 *         self.thisptr.removeBoundary(name.encode())             # <<<<<<<<<<<<<<
 * 
 *     # materials
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_name, __pyx_n_s_encode); if (unlikely(!__pyx_t_2)) __PYX_ERR(4, 451, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 451, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = __pyx_convert_string_from_py_std__in_string(__pyx_t_1); if (unlikely(PyErr_Occurred())) __PYX_ERR(4, 451, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  try {
    __pyx_v_self->thisptr->removeBoundary(__pyx_t_4);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(4, 451, __pyx_L1_error)
  }

  /* "../resources_source/python/pyfield.pxi":443
 *         self.thisptr.modifyBoundary(name.encode(), type.encode(), parameters_map, expression_map)
 * 
 *     def remove_boundary(self, name):             # <<<<<<<<<<<<<<
 *         """Remove existing boundary condition.
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("_agros.__Field__.remove_boundary", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../resources_source/python/pyfield.pxi":454
 * 
 *     # materials
 *     def add_material(self, name, parameters = {}):             # <<<<<<<<<<<<<<
 *         """Add new material.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6_agros_9__Field___23add_material(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6_agros_9__Field___22add_material[] = "Add new material.\n\n        add_material(name, type, parameters = {})\n\n        Keyword arguments:\n        name -- material name\n        type -- material type\n        parameters -- dict of material parameters (default is {})\n        ";
static PyObject *__pyx_pw_6_agros_9__Field___23add_material(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_name = 0;
  PyObject *__pyx_v_parameters = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("add_material (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_name,&__pyx_n_s_parameters,0};
    PyObject* values[2] = {0,0};
    values[1] = __pyx_k__27;
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_name)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_parameters);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "add_material") < 0)) __PYX_ERR(4, 454, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_name = values[0];
    __pyx_v_parameters = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("add_material", 0, 1, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(4, 454, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("_agros.__Field__.add_material", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6_agros_9__Field___22add_material(((struct __pyx_obj_6_agros___Field__ *)__pyx_v_self), __pyx_v_name, __pyx_v_parameters);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6_agros_9__Field___22add_material(struct __pyx_obj_6_agros___Field__ *__pyx_v_self, PyObject *__pyx_v_name, PyObject *__pyx_v_parameters) {
  std::map<std::string,std::string>  __pyx_v_parameters_map;
  std::map<std::string,std::string>  __pyx_v_expression_map;
  std::map<std::string,std::vector<double> >  __pyx_v_nonlin_x_map;
  std::map<std::string,std::vector<double> >  __pyx_v_nonlin_y_map;
  std::map<std::string,std::map<std::string,std::string> >  __pyx_v_settings_map;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  std::string __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("add_material", 0);

  /* "../resources_source/python/pyfield.pxi":464
 *         parameters -- dict of material parameters (default is {})
 *         """
 *         cdef map[string, string] parameters_map = get_parameters_map(parameters)             # <<<<<<<<<<<<<<
 *         cdef map[string, string] expression_map = get_expression_map(parameters)
 *         cdef map[string, vector[double]] nonlin_x_map = get_nonlin_x_map(parameters)
 */
  __pyx_v_parameters_map = __pyx_f_6_agros_get_parameters_map(__pyx_v_parameters);

  /* "../resources_source/python/pyfield.pxi":465
 *         """
 *         cdef map[string, string] parameters_map = get_parameters_map(parameters)
 *         cdef map[string, string] expression_map = get_expression_map(parameters)             # <<<<<<<<<<<<<<
 *         cdef map[string, vector[double]] nonlin_x_map = get_nonlin_x_map(parameters)
 *         cdef map[string, vector[double]] nonlin_y_map = get_nonlin_y_map(parameters)
 */
  __pyx_v_expression_map = __pyx_f_6_agros_get_expression_map(__pyx_v_parameters);

  /* "../resources_source/python/pyfield.pxi":466
 *         cdef map[string, string] parameters_map = get_parameters_map(parameters)
 *         cdef map[string, string] expression_map = get_expression_map(parameters)
 *         cdef map[string, vector[double]] nonlin_x_map = get_nonlin_x_map(parameters)             # <<<<<<<<<<<<<<
 *         cdef map[string, vector[double]] nonlin_y_map = get_nonlin_y_map(parameters)
 *         cdef map[string, map[string, string]] settings_map = get_settings_map(parameters)
 */
  __pyx_v_nonlin_x_map = __pyx_f_6_agros_get_nonlin_x_map(__pyx_v_parameters);

  /* "../resources_source/python/pyfield.pxi":467
 *         cdef map[string, string] expression_map = get_expression_map(parameters)
 *         cdef map[string, vector[double]] nonlin_x_map = get_nonlin_x_map(parameters)
 *         cdef map[string, vector[double]] nonlin_y_map = get_nonlin_y_map(parameters)             # <<<<<<<<<<<<<<
 *         cdef map[string, map[string, string]] settings_map = get_settings_map(parameters)
 * 
 */
  __pyx_v_nonlin_y_map = __pyx_f_6_agros_get_nonlin_y_map(__pyx_v_parameters);

  /* "../resources_source/python/pyfield.pxi":468
 *         cdef map[string, vector[double]] nonlin_x_map = get_nonlin_x_map(parameters)
 *         cdef map[string, vector[double]] nonlin_y_map = get_nonlin_y_map(parameters)
 *         cdef map[string, map[string, string]] settings_map = get_settings_map(parameters)             # <<<<<<<<<<<<<<
 * 
 *         self.thisptr.addMaterial(name.encode(), parameters_map, expression_map, nonlin_x_map, nonlin_y_map, settings_map)
 */
  __pyx_v_settings_map = __pyx_f_6_agros_get_settings_map(__pyx_v_parameters);

  /* "../resources_source/python/pyfield.pxi":470
 *         cdef map[string, map[string, string]] settings_map = get_settings_map(parameters)
 * 
 *         self.thisptr.addMaterial(name.encode(), parameters_map, expression_map, nonlin_x_map, nonlin_y_map, settings_map)             # <<<<<<<<<<<<<<
 * 
 *     def modify_material(self, name, parameters = {}):
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_name, __pyx_n_s_encode); if (unlikely(!__pyx_t_2)) __PYX_ERR(4, 470, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 470, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = __pyx_convert_string_from_py_std__in_string(__pyx_t_1); if (unlikely(PyErr_Occurred())) __PYX_ERR(4, 470, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  try {
    __pyx_v_self->thisptr->addMaterial(__pyx_t_4, __pyx_v_parameters_map, __pyx_v_expression_map, __pyx_v_nonlin_x_map, __pyx_v_nonlin_y_map, __pyx_v_settings_map);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(4, 470, __pyx_L1_error)
  }

  /* "../resources_source/python/pyfield.pxi":454
 * 
 *     # materials
 *     def add_material(self, name, parameters = {}):             # <<<<<<<<<<<<<<
 *         """Add new material.
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("_agros.__Field__.add_material", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../resources_source/python/pyfield.pxi":472
 *         self.thisptr.addMaterial(name.encode(), parameters_map, expression_map, nonlin_x_map, nonlin_y_map, settings_map)
 * 
 *     def modify_material(self, name, parameters = {}):             # <<<<<<<<<<<<<<
 *         """Modify existing material.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6_agros_9__Field___25modify_material(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6_agros_9__Field___24modify_material[] = "Modify existing material.\n\n        modify_material(name, type = \"\", parameters = {})\n\n        Keyword arguments:\n        name -- material name\n        type -- material type (default is {})\n        parameters -- dict of material parameters (default is {})\n        ";
static PyObject *__pyx_pw_6_agros_9__Field___25modify_material(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_name = 0;
  PyObject *__pyx_v_parameters = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("modify_material (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_name,&__pyx_n_s_parameters,0};
    PyObject* values[2] = {0,0};
    values[1] = __pyx_k__28;
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_name)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_parameters);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "modify_material") < 0)) __PYX_ERR(4, 472, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_name = values[0];
    __pyx_v_parameters = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("modify_material", 0, 1, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(4, 472, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("_agros.__Field__.modify_material", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6_agros_9__Field___24modify_material(((struct __pyx_obj_6_agros___Field__ *)__pyx_v_self), __pyx_v_name, __pyx_v_parameters);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6_agros_9__Field___24modify_material(struct __pyx_obj_6_agros___Field__ *__pyx_v_self, PyObject *__pyx_v_name, PyObject *__pyx_v_parameters) {
  std::map<std::string,std::string>  __pyx_v_parameters_map;
  std::map<std::string,std::string>  __pyx_v_expression_map;
  std::map<std::string,std::vector<double> >  __pyx_v_nonlin_x_map;
  std::map<std::string,std::vector<double> >  __pyx_v_nonlin_y_map;
  std::map<std::string,std::map<std::string,std::string> >  __pyx_v_settings_map;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  std::string __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("modify_material", 0);

  /* "../resources_source/python/pyfield.pxi":482
 *         parameters -- dict of material parameters (default is {})
 *         """
 *         cdef map[string, string] parameters_map = get_parameters_map(parameters)             # <<<<<<<<<<<<<<
 *         cdef map[string, string] expression_map = get_expression_map(parameters)
 *         cdef map[string, vector[double]] nonlin_x_map = get_nonlin_x_map(parameters)
 */
  __pyx_v_parameters_map = __pyx_f_6_agros_get_parameters_map(__pyx_v_parameters);

  /* "../resources_source/python/pyfield.pxi":483
 *         """
 *         cdef map[string, string] parameters_map = get_parameters_map(parameters)
 *         cdef map[string, string] expression_map = get_expression_map(parameters)             # <<<<<<<<<<<<<<
 *         cdef map[string, vector[double]] nonlin_x_map = get_nonlin_x_map(parameters)
 *         cdef map[string, vector[double]] nonlin_y_map = get_nonlin_y_map(parameters)
 */
  __pyx_v_expression_map = __pyx_f_6_agros_get_expression_map(__pyx_v_parameters);

  /* "../resources_source/python/pyfield.pxi":484
 *         cdef map[string, string] parameters_map = get_parameters_map(parameters)
 *         cdef map[string, string] expression_map = get_expression_map(parameters)
 *         cdef map[string, vector[double]] nonlin_x_map = get_nonlin_x_map(parameters)             # <<<<<<<<<<<<<<
 *         cdef map[string, vector[double]] nonlin_y_map = get_nonlin_y_map(parameters)
 *         cdef map[string, map[string, string]] settings_map = get_settings_map(parameters)
 */
  __pyx_v_nonlin_x_map = __pyx_f_6_agros_get_nonlin_x_map(__pyx_v_parameters);

  /* "../resources_source/python/pyfield.pxi":485
 *         cdef map[string, string] expression_map = get_expression_map(parameters)
 *         cdef map[string, vector[double]] nonlin_x_map = get_nonlin_x_map(parameters)
 *         cdef map[string, vector[double]] nonlin_y_map = get_nonlin_y_map(parameters)             # <<<<<<<<<<<<<<
 *         cdef map[string, map[string, string]] settings_map = get_settings_map(parameters)
 * 
 */
  __pyx_v_nonlin_y_map = __pyx_f_6_agros_get_nonlin_y_map(__pyx_v_parameters);

  /* "../resources_source/python/pyfield.pxi":486
 *         cdef map[string, vector[double]] nonlin_x_map = get_nonlin_x_map(parameters)
 *         cdef map[string, vector[double]] nonlin_y_map = get_nonlin_y_map(parameters)
 *         cdef map[string, map[string, string]] settings_map = get_settings_map(parameters)             # <<<<<<<<<<<<<<
 * 
 *         self.thisptr.modifyMaterial(name.encode(), parameters_map, expression_map, nonlin_x_map, nonlin_y_map, settings_map)
 */
  __pyx_v_settings_map = __pyx_f_6_agros_get_settings_map(__pyx_v_parameters);

  /* "../resources_source/python/pyfield.pxi":488
 *         cdef map[string, map[string, string]] settings_map = get_settings_map(parameters)
 * 
 *         self.thisptr.modifyMaterial(name.encode(), parameters_map, expression_map, nonlin_x_map, nonlin_y_map, settings_map)             # <<<<<<<<<<<<<<
 * 
 *     def remove_material(self, name):
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_name, __pyx_n_s_encode); if (unlikely(!__pyx_t_2)) __PYX_ERR(4, 488, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 488, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = __pyx_convert_string_from_py_std__in_string(__pyx_t_1); if (unlikely(PyErr_Occurred())) __PYX_ERR(4, 488, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  try {
    __pyx_v_self->thisptr->modifyMaterial(__pyx_t_4, __pyx_v_parameters_map, __pyx_v_expression_map, __pyx_v_nonlin_x_map, __pyx_v_nonlin_y_map, __pyx_v_settings_map);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(4, 488, __pyx_L1_error)
  }

  /* "../resources_source/python/pyfield.pxi":472
 *         self.thisptr.addMaterial(name.encode(), parameters_map, expression_map, nonlin_x_map, nonlin_y_map, settings_map)
 * 
 *     def modify_material(self, name, parameters = {}):             # <<<<<<<<<<<<<<
 *         """Modify existing material.
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("_agros.__Field__.modify_material", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../resources_source/python/pyfield.pxi":490
 *         self.thisptr.modifyMaterial(name.encode(), parameters_map, expression_map, nonlin_x_map, nonlin_y_map, settings_map)
 * 
 *     def remove_material(self, name):             # <<<<<<<<<<<<<<
 *         """Remove existing material.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6_agros_9__Field___27remove_material(PyObject *__pyx_v_self, PyObject *__pyx_v_name); /*proto*/
static char __pyx_doc_6_agros_9__Field___26remove_material[] = "Remove existing material.\n\n        remove_material(name, type parameters = {})\n\n        Keyword arguments:\n        name -- material name\n        ";
static PyObject *__pyx_pw_6_agros_9__Field___27remove_material(PyObject *__pyx_v_self, PyObject *__pyx_v_name) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("remove_material (wrapper)", 0);
  __pyx_r = __pyx_pf_6_agros_9__Field___26remove_material(((struct __pyx_obj_6_agros___Field__ *)__pyx_v_self), ((PyObject *)__pyx_v_name));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6_agros_9__Field___26remove_material(struct __pyx_obj_6_agros___Field__ *__pyx_v_self, PyObject *__pyx_v_name) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  std::string __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("remove_material", 0);

  /* "../resources_source/python/pyfield.pxi":498
 *         name -- material name
 *         """
 *         self.thisptr.removeMaterial(name.encode())             # <<<<<<<<<<<<<<
 * 
 *     # recipes
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_name, __pyx_n_s_encode); if (unlikely(!__pyx_t_2)) __PYX_ERR(4, 498, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 498, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = __pyx_convert_string_from_py_std__in_string(__pyx_t_1); if (unlikely(PyErr_Occurred())) __PYX_ERR(4, 498, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  try {
    __pyx_v_self->thisptr->removeMaterial(__pyx_t_4);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(4, 498, __pyx_L1_error)
  }

  /* "../resources_source/python/pyfield.pxi":490
 *         self.thisptr.modifyMaterial(name.encode(), parameters_map, expression_map, nonlin_x_map, nonlin_y_map, settings_map)
 * 
 *     def remove_material(self, name):             # <<<<<<<<<<<<<<
 *         """Remove existing material.
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("_agros.__Field__.remove_material", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../resources_source/python/pyfield.pxi":501
 * 
 *     # recipes
 *     def add_recipe_volume_integral(self, name, variable, labels = [], time_step = -1, adaptivity_step = -1):             # <<<<<<<<<<<<<<
 *         cdef vector[int] labels_vector
 *         for index in labels:
 */

/* Python wrapper */
static PyObject *__pyx_pw_6_agros_9__Field___29add_recipe_volume_integral(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_6_agros_9__Field___29add_recipe_volume_integral(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_name = 0;
  PyObject *__pyx_v_variable = 0;
  PyObject *__pyx_v_labels = 0;
  PyObject *__pyx_v_time_step = 0;
  PyObject *__pyx_v_adaptivity_step = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("add_recipe_volume_integral (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_name,&__pyx_n_s_variable,&__pyx_n_s_labels,&__pyx_n_s_time_step,&__pyx_n_s_adaptivity_step,0};
    PyObject* values[5] = {0,0,0,0,0};
    values[2] = __pyx_k__29;
    values[3] = ((PyObject *)__pyx_int_neg_1);
    values[4] = ((PyObject *)__pyx_int_neg_1);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_name)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_variable)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("add_recipe_volume_integral", 0, 2, 5, 1); __PYX_ERR(4, 501, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_labels);
          if (value) { values[2] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_time_step);
          if (value) { values[3] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_adaptivity_step);
          if (value) { values[4] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "add_recipe_volume_integral") < 0)) __PYX_ERR(4, 501, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_name = values[0];
    __pyx_v_variable = values[1];
    __pyx_v_labels = values[2];
    __pyx_v_time_step = values[3];
    __pyx_v_adaptivity_step = values[4];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("add_recipe_volume_integral", 0, 2, 5, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(4, 501, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("_agros.__Field__.add_recipe_volume_integral", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6_agros_9__Field___28add_recipe_volume_integral(((struct __pyx_obj_6_agros___Field__ *)__pyx_v_self), __pyx_v_name, __pyx_v_variable, __pyx_v_labels, __pyx_v_time_step, __pyx_v_adaptivity_step);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6_agros_9__Field___28add_recipe_volume_integral(struct __pyx_obj_6_agros___Field__ *__pyx_v_self, PyObject *__pyx_v_name, PyObject *__pyx_v_variable, PyObject *__pyx_v_labels, PyObject *__pyx_v_time_step, PyObject *__pyx_v_adaptivity_step) {
  std::vector<int>  __pyx_v_labels_vector;
  PyObject *__pyx_v_index = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *(*__pyx_t_3)(PyObject *);
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  std::string __pyx_t_7;
  std::string __pyx_t_8;
  int __pyx_t_9;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("add_recipe_volume_integral", 0);

  /* "../resources_source/python/pyfield.pxi":503
 *     def add_recipe_volume_integral(self, name, variable, labels = [], time_step = -1, adaptivity_step = -1):
 *         cdef vector[int] labels_vector
 *         for index in labels:             # <<<<<<<<<<<<<<
 *             labels_vector.push_back(index)
 * 
 */
  if (likely(PyList_CheckExact(__pyx_v_labels)) || PyTuple_CheckExact(__pyx_v_labels)) {
    __pyx_t_1 = __pyx_v_labels; __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
    __pyx_t_3 = NULL;
  } else {
    __pyx_t_2 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_v_labels); if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 503, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_3)) __PYX_ERR(4, 503, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_3)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(4, 503, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(4, 503, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      } else {
        if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(4, 503, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(4, 503, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      }
    } else {
      __pyx_t_4 = __pyx_t_3(__pyx_t_1);
      if (unlikely(!__pyx_t_4)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(4, 503, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_4);
    }
    __Pyx_XDECREF_SET(__pyx_v_index, __pyx_t_4);
    __pyx_t_4 = 0;

    /* "../resources_source/python/pyfield.pxi":504
 *         cdef vector[int] labels_vector
 *         for index in labels:
 *             labels_vector.push_back(index)             # <<<<<<<<<<<<<<
 * 
 *         self.thisptr.addRecipeVolumeIntegral(name.encode(), variable.encode(), labels_vector, time_step, adaptivity_step)
 */
    __pyx_t_5 = __Pyx_PyInt_As_int(__pyx_v_index); if (unlikely((__pyx_t_5 == (int)-1) && PyErr_Occurred())) __PYX_ERR(4, 504, __pyx_L1_error)
    try {
      __pyx_v_labels_vector.push_back(__pyx_t_5);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(4, 504, __pyx_L1_error)
    }

    /* "../resources_source/python/pyfield.pxi":503
 *     def add_recipe_volume_integral(self, name, variable, labels = [], time_step = -1, adaptivity_step = -1):
 *         cdef vector[int] labels_vector
 *         for index in labels:             # <<<<<<<<<<<<<<
 *             labels_vector.push_back(index)
 * 
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "../resources_source/python/pyfield.pxi":506
 *             labels_vector.push_back(index)
 * 
 *         self.thisptr.addRecipeVolumeIntegral(name.encode(), variable.encode(), labels_vector, time_step, adaptivity_step)             # <<<<<<<<<<<<<<
 * 
 *     def add_recipe_surface_integral(self, name, variable, edges = [], time_step = -1, adaptivity_step = -1):
 */
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_name, __pyx_n_s_encode); if (unlikely(!__pyx_t_4)) __PYX_ERR(4, 506, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_6 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_6)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  __pyx_t_1 = (__pyx_t_6) ? __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_6) : __Pyx_PyObject_CallNoArg(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 506, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_7 = __pyx_convert_string_from_py_std__in_string(__pyx_t_1); if (unlikely(PyErr_Occurred())) __PYX_ERR(4, 506, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_variable, __pyx_n_s_encode); if (unlikely(!__pyx_t_4)) __PYX_ERR(4, 506, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_6 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_6)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  __pyx_t_1 = (__pyx_t_6) ? __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_6) : __Pyx_PyObject_CallNoArg(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 506, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_8 = __pyx_convert_string_from_py_std__in_string(__pyx_t_1); if (unlikely(PyErr_Occurred())) __PYX_ERR(4, 506, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_5 = __Pyx_PyInt_As_int(__pyx_v_time_step); if (unlikely((__pyx_t_5 == (int)-1) && PyErr_Occurred())) __PYX_ERR(4, 506, __pyx_L1_error)
  __pyx_t_9 = __Pyx_PyInt_As_int(__pyx_v_adaptivity_step); if (unlikely((__pyx_t_9 == (int)-1) && PyErr_Occurred())) __PYX_ERR(4, 506, __pyx_L1_error)
  try {
    __pyx_v_self->thisptr->addRecipeVolumeIntegral(__pyx_t_7, __pyx_t_8, __pyx_v_labels_vector, __pyx_t_5, __pyx_t_9);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(4, 506, __pyx_L1_error)
  }

  /* "../resources_source/python/pyfield.pxi":501
 * 
 *     # recipes
 *     def add_recipe_volume_integral(self, name, variable, labels = [], time_step = -1, adaptivity_step = -1):             # <<<<<<<<<<<<<<
 *         cdef vector[int] labels_vector
 *         for index in labels:
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("_agros.__Field__.add_recipe_volume_integral", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_index);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../resources_source/python/pyfield.pxi":508
 *         self.thisptr.addRecipeVolumeIntegral(name.encode(), variable.encode(), labels_vector, time_step, adaptivity_step)
 * 
 *     def add_recipe_surface_integral(self, name, variable, edges = [], time_step = -1, adaptivity_step = -1):             # <<<<<<<<<<<<<<
 *         cdef vector[int] edges_vector
 *         for index in edges:
 */

/* Python wrapper */
static PyObject *__pyx_pw_6_agros_9__Field___31add_recipe_surface_integral(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_6_agros_9__Field___31add_recipe_surface_integral(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_name = 0;
  PyObject *__pyx_v_variable = 0;
  PyObject *__pyx_v_edges = 0;
  PyObject *__pyx_v_time_step = 0;
  PyObject *__pyx_v_adaptivity_step = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("add_recipe_surface_integral (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_name,&__pyx_n_s_variable,&__pyx_n_s_edges,&__pyx_n_s_time_step,&__pyx_n_s_adaptivity_step,0};
    PyObject* values[5] = {0,0,0,0,0};
    values[2] = __pyx_k__30;
    values[3] = ((PyObject *)__pyx_int_neg_1);
    values[4] = ((PyObject *)__pyx_int_neg_1);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_name)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_variable)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("add_recipe_surface_integral", 0, 2, 5, 1); __PYX_ERR(4, 508, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_edges);
          if (value) { values[2] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_time_step);
          if (value) { values[3] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_adaptivity_step);
          if (value) { values[4] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "add_recipe_surface_integral") < 0)) __PYX_ERR(4, 508, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_name = values[0];
    __pyx_v_variable = values[1];
    __pyx_v_edges = values[2];
    __pyx_v_time_step = values[3];
    __pyx_v_adaptivity_step = values[4];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("add_recipe_surface_integral", 0, 2, 5, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(4, 508, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("_agros.__Field__.add_recipe_surface_integral", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6_agros_9__Field___30add_recipe_surface_integral(((struct __pyx_obj_6_agros___Field__ *)__pyx_v_self), __pyx_v_name, __pyx_v_variable, __pyx_v_edges, __pyx_v_time_step, __pyx_v_adaptivity_step);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6_agros_9__Field___30add_recipe_surface_integral(struct __pyx_obj_6_agros___Field__ *__pyx_v_self, PyObject *__pyx_v_name, PyObject *__pyx_v_variable, PyObject *__pyx_v_edges, PyObject *__pyx_v_time_step, PyObject *__pyx_v_adaptivity_step) {
  std::vector<int>  __pyx_v_edges_vector;
  PyObject *__pyx_v_index = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *(*__pyx_t_3)(PyObject *);
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  std::string __pyx_t_7;
  std::string __pyx_t_8;
  int __pyx_t_9;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("add_recipe_surface_integral", 0);

  /* "../resources_source/python/pyfield.pxi":510
 *     def add_recipe_surface_integral(self, name, variable, edges = [], time_step = -1, adaptivity_step = -1):
 *         cdef vector[int] edges_vector
 *         for index in edges:             # <<<<<<<<<<<<<<
 *             edges_vector.push_back(index)
 * 
 */
  if (likely(PyList_CheckExact(__pyx_v_edges)) || PyTuple_CheckExact(__pyx_v_edges)) {
    __pyx_t_1 = __pyx_v_edges; __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
    __pyx_t_3 = NULL;
  } else {
    __pyx_t_2 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_v_edges); if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 510, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_3)) __PYX_ERR(4, 510, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_3)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(4, 510, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(4, 510, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      } else {
        if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(4, 510, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(4, 510, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      }
    } else {
      __pyx_t_4 = __pyx_t_3(__pyx_t_1);
      if (unlikely(!__pyx_t_4)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(4, 510, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_4);
    }
    __Pyx_XDECREF_SET(__pyx_v_index, __pyx_t_4);
    __pyx_t_4 = 0;

    /* "../resources_source/python/pyfield.pxi":511
 *         cdef vector[int] edges_vector
 *         for index in edges:
 *             edges_vector.push_back(index)             # <<<<<<<<<<<<<<
 * 
 *         self.thisptr.addRecipeSurfaceIntegral(name.encode(), variable.encode(), edges_vector, time_step, adaptivity_step)
 */
    __pyx_t_5 = __Pyx_PyInt_As_int(__pyx_v_index); if (unlikely((__pyx_t_5 == (int)-1) && PyErr_Occurred())) __PYX_ERR(4, 511, __pyx_L1_error)
    try {
      __pyx_v_edges_vector.push_back(__pyx_t_5);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(4, 511, __pyx_L1_error)
    }

    /* "../resources_source/python/pyfield.pxi":510
 *     def add_recipe_surface_integral(self, name, variable, edges = [], time_step = -1, adaptivity_step = -1):
 *         cdef vector[int] edges_vector
 *         for index in edges:             # <<<<<<<<<<<<<<
 *             edges_vector.push_back(index)
 * 
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "../resources_source/python/pyfield.pxi":513
 *             edges_vector.push_back(index)
 * 
 *         self.thisptr.addRecipeSurfaceIntegral(name.encode(), variable.encode(), edges_vector, time_step, adaptivity_step)             # <<<<<<<<<<<<<<
 * 
 *     def add_recipe_local_value(self, name, variable, component, x, y, time_step = -1, adaptivity_step = -1):
 */
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_name, __pyx_n_s_encode); if (unlikely(!__pyx_t_4)) __PYX_ERR(4, 513, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_6 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_6)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  __pyx_t_1 = (__pyx_t_6) ? __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_6) : __Pyx_PyObject_CallNoArg(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 513, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_7 = __pyx_convert_string_from_py_std__in_string(__pyx_t_1); if (unlikely(PyErr_Occurred())) __PYX_ERR(4, 513, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_variable, __pyx_n_s_encode); if (unlikely(!__pyx_t_4)) __PYX_ERR(4, 513, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_6 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_6)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  __pyx_t_1 = (__pyx_t_6) ? __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_6) : __Pyx_PyObject_CallNoArg(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 513, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_8 = __pyx_convert_string_from_py_std__in_string(__pyx_t_1); if (unlikely(PyErr_Occurred())) __PYX_ERR(4, 513, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_5 = __Pyx_PyInt_As_int(__pyx_v_time_step); if (unlikely((__pyx_t_5 == (int)-1) && PyErr_Occurred())) __PYX_ERR(4, 513, __pyx_L1_error)
  __pyx_t_9 = __Pyx_PyInt_As_int(__pyx_v_adaptivity_step); if (unlikely((__pyx_t_9 == (int)-1) && PyErr_Occurred())) __PYX_ERR(4, 513, __pyx_L1_error)
  try {
    __pyx_v_self->thisptr->addRecipeSurfaceIntegral(__pyx_t_7, __pyx_t_8, __pyx_v_edges_vector, __pyx_t_5, __pyx_t_9);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(4, 513, __pyx_L1_error)
  }

  /* "../resources_source/python/pyfield.pxi":508
 *         self.thisptr.addRecipeVolumeIntegral(name.encode(), variable.encode(), labels_vector, time_step, adaptivity_step)
 * 
 *     def add_recipe_surface_integral(self, name, variable, edges = [], time_step = -1, adaptivity_step = -1):             # <<<<<<<<<<<<<<
 *         cdef vector[int] edges_vector
 *         for index in edges:
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("_agros.__Field__.add_recipe_surface_integral", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_index);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../resources_source/python/pyfield.pxi":515
 *         self.thisptr.addRecipeSurfaceIntegral(name.encode(), variable.encode(), edges_vector, time_step, adaptivity_step)
 * 
 *     def add_recipe_local_value(self, name, variable, component, x, y, time_step = -1, adaptivity_step = -1):             # <<<<<<<<<<<<<<
 *         self.thisptr.addRecipeLocalValue(name.encode(), variable.encode(), component.encode(), x, y, time_step, adaptivity_step)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6_agros_9__Field___33add_recipe_local_value(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_6_agros_9__Field___33add_recipe_local_value(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_name = 0;
  PyObject *__pyx_v_variable = 0;
  PyObject *__pyx_v_component = 0;
  PyObject *__pyx_v_x = 0;
  PyObject *__pyx_v_y = 0;
  PyObject *__pyx_v_time_step = 0;
  PyObject *__pyx_v_adaptivity_step = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("add_recipe_local_value (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_name,&__pyx_n_s_variable,&__pyx_n_s_component,&__pyx_n_s_x,&__pyx_n_s_y,&__pyx_n_s_time_step,&__pyx_n_s_adaptivity_step,0};
    PyObject* values[7] = {0,0,0,0,0,0,0};
    values[5] = ((PyObject *)__pyx_int_neg_1);
    values[6] = ((PyObject *)__pyx_int_neg_1);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_name)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_variable)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("add_recipe_local_value", 0, 5, 7, 1); __PYX_ERR(4, 515, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_component)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("add_recipe_local_value", 0, 5, 7, 2); __PYX_ERR(4, 515, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_x)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("add_recipe_local_value", 0, 5, 7, 3); __PYX_ERR(4, 515, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (likely((values[4] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_y)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("add_recipe_local_value", 0, 5, 7, 4); __PYX_ERR(4, 515, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_time_step);
          if (value) { values[5] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  6:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_adaptivity_step);
          if (value) { values[6] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "add_recipe_local_value") < 0)) __PYX_ERR(4, 515, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_name = values[0];
    __pyx_v_variable = values[1];
    __pyx_v_component = values[2];
    __pyx_v_x = values[3];
    __pyx_v_y = values[4];
    __pyx_v_time_step = values[5];
    __pyx_v_adaptivity_step = values[6];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("add_recipe_local_value", 0, 5, 7, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(4, 515, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("_agros.__Field__.add_recipe_local_value", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6_agros_9__Field___32add_recipe_local_value(((struct __pyx_obj_6_agros___Field__ *)__pyx_v_self), __pyx_v_name, __pyx_v_variable, __pyx_v_component, __pyx_v_x, __pyx_v_y, __pyx_v_time_step, __pyx_v_adaptivity_step);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6_agros_9__Field___32add_recipe_local_value(struct __pyx_obj_6_agros___Field__ *__pyx_v_self, PyObject *__pyx_v_name, PyObject *__pyx_v_variable, PyObject *__pyx_v_component, PyObject *__pyx_v_x, PyObject *__pyx_v_y, PyObject *__pyx_v_time_step, PyObject *__pyx_v_adaptivity_step) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  std::string __pyx_t_4;
  std::string __pyx_t_5;
  std::string __pyx_t_6;
  double __pyx_t_7;
  double __pyx_t_8;
  int __pyx_t_9;
  int __pyx_t_10;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("add_recipe_local_value", 0);

  /* "../resources_source/python/pyfield.pxi":516
 * 
 *     def add_recipe_local_value(self, name, variable, component, x, y, time_step = -1, adaptivity_step = -1):
 *         self.thisptr.addRecipeLocalValue(name.encode(), variable.encode(), component.encode(), x, y, time_step, adaptivity_step)             # <<<<<<<<<<<<<<
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_name, __pyx_n_s_encode); if (unlikely(!__pyx_t_2)) __PYX_ERR(4, 516, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 516, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = __pyx_convert_string_from_py_std__in_string(__pyx_t_1); if (unlikely(PyErr_Occurred())) __PYX_ERR(4, 516, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_variable, __pyx_n_s_encode); if (unlikely(!__pyx_t_2)) __PYX_ERR(4, 516, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 516, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_5 = __pyx_convert_string_from_py_std__in_string(__pyx_t_1); if (unlikely(PyErr_Occurred())) __PYX_ERR(4, 516, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_component, __pyx_n_s_encode); if (unlikely(!__pyx_t_2)) __PYX_ERR(4, 516, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 516, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_6 = __pyx_convert_string_from_py_std__in_string(__pyx_t_1); if (unlikely(PyErr_Occurred())) __PYX_ERR(4, 516, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_7 = __pyx_PyFloat_AsDouble(__pyx_v_x); if (unlikely((__pyx_t_7 == (double)-1) && PyErr_Occurred())) __PYX_ERR(4, 516, __pyx_L1_error)
  __pyx_t_8 = __pyx_PyFloat_AsDouble(__pyx_v_y); if (unlikely((__pyx_t_8 == (double)-1) && PyErr_Occurred())) __PYX_ERR(4, 516, __pyx_L1_error)
  __pyx_t_9 = __Pyx_PyInt_As_int(__pyx_v_time_step); if (unlikely((__pyx_t_9 == (int)-1) && PyErr_Occurred())) __PYX_ERR(4, 516, __pyx_L1_error)
  __pyx_t_10 = __Pyx_PyInt_As_int(__pyx_v_adaptivity_step); if (unlikely((__pyx_t_10 == (int)-1) && PyErr_Occurred())) __PYX_ERR(4, 516, __pyx_L1_error)
  try {
    __pyx_v_self->thisptr->addRecipeLocalValue(__pyx_t_4, __pyx_t_5, __pyx_t_6, __pyx_t_7, __pyx_t_8, __pyx_t_9, __pyx_t_10);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(4, 516, __pyx_L1_error)
  }

  /* "../resources_source/python/pyfield.pxi":515
 *         self.thisptr.addRecipeSurfaceIntegral(name.encode(), variable.encode(), edges_vector, time_step, adaptivity_step)
 * 
 *     def add_recipe_local_value(self, name, variable, component, x, y, time_step = -1, adaptivity_step = -1):             # <<<<<<<<<<<<<<
 *         self.thisptr.addRecipeLocalValue(name.encode(), variable.encode(), component.encode(), x, y, time_step, adaptivity_step)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("_agros.__Field__.add_recipe_local_value", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_6_agros_9__Field___35__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_6_agros_9__Field___35__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6_agros_9__Field___34__reduce_cython__(((struct __pyx_obj_6_agros___Field__ *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6_agros_9__Field___34__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_6_agros___Field__ *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__31, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(2, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("_agros.__Field__.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw_6_agros_9__Field___37__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_6_agros_9__Field___37__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6_agros_9__Field___36__setstate_cython__(((struct __pyx_obj_6_agros___Field__ *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6_agros_9__Field___36__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_6_agros___Field__ *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__32, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(2, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("_agros.__Field__.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../resources_source/python/pyproblem.pxi":53
 *     cdef object _geometry
 * 
 *     def __cinit__(self, clear = False):             # <<<<<<<<<<<<<<
 *         self._problem = new PyProblem(clear)
 *         #self._time_callback = None
 */

/* Python wrapper */
static int __pyx_pw_6_agros_11__Problem___1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_6_agros_11__Problem___1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_clear = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_clear,0};
    PyObject* values[1] = {0};
    values[0] = ((PyObject *)Py_False);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_clear);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) __PYX_ERR(0, 53, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_clear = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 53, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("_agros.__Problem__.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6_agros_11__Problem_____cinit__(((struct __pyx_obj_6_agros___Problem__ *)__pyx_v_self), __pyx_v_clear);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6_agros_11__Problem_____cinit__(struct __pyx_obj_6_agros___Problem__ *__pyx_v_self, PyObject *__pyx_v_clear) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  bool __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "../resources_source/python/pyproblem.pxi":54
 * 
 *     def __cinit__(self, clear = False):
 *         self._problem = new PyProblem(clear)             # <<<<<<<<<<<<<<
 *         #self._time_callback = None
 *         self._parameters = __Parameters__(self.__get_parameters__,
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_clear); if (unlikely((__pyx_t_1 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 54, __pyx_L1_error)
  __pyx_v_self->_problem = new PyProblem(__pyx_t_1);

  /* "../resources_source/python/pyproblem.pxi":56
 *         self._problem = new PyProblem(clear)
 *         #self._time_callback = None
 *         self._parameters = __Parameters__(self.__get_parameters__,             # <<<<<<<<<<<<<<
 *                                           self.__set_parameters__,
 *                                           False)
 */
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_Parameters); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 56, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_get_parameters_2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 56, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);

  /* "../resources_source/python/pyproblem.pxi":57
 *         #self._time_callback = None
 *         self._parameters = __Parameters__(self.__get_parameters__,
 *                                           self.__set_parameters__,             # <<<<<<<<<<<<<<
 *                                           False)
 *         self._fields = dict()
 */
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_set_parameters); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 57, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);

  /* "../resources_source/python/pyproblem.pxi":58
 *         self._parameters = __Parameters__(self.__get_parameters__,
 *                                           self.__set_parameters__,
 *                                           False)             # <<<<<<<<<<<<<<
 *         self._fields = dict()
 *         self._geometry = __Geometry__()
 */
  __pyx_t_6 = NULL;
  __pyx_t_7 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_6)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_7 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_3)) {
    PyObject *__pyx_temp[4] = {__pyx_t_6, __pyx_t_4, __pyx_t_5, Py_False};
    __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_7, 3+__pyx_t_7); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 56, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
    PyObject *__pyx_temp[4] = {__pyx_t_6, __pyx_t_4, __pyx_t_5, Py_False};
    __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_7, 3+__pyx_t_7); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 56, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  } else
  #endif
  {
    __pyx_t_8 = PyTuple_New(3+__pyx_t_7); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 56, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    if (__pyx_t_6) {
      __Pyx_GIVEREF(__pyx_t_6); PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_6); __pyx_t_6 = NULL;
    }
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_8, 0+__pyx_t_7, __pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_8, 1+__pyx_t_7, __pyx_t_5);
    __Pyx_INCREF(Py_False);
    __Pyx_GIVEREF(Py_False);
    PyTuple_SET_ITEM(__pyx_t_8, 2+__pyx_t_7, Py_False);
    __pyx_t_4 = 0;
    __pyx_t_5 = 0;
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_8, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 56, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "../resources_source/python/pyproblem.pxi":56
 *         self._problem = new PyProblem(clear)
 *         #self._time_callback = None
 *         self._parameters = __Parameters__(self.__get_parameters__,             # <<<<<<<<<<<<<<
 *                                           self.__set_parameters__,
 *                                           False)
 */
  __Pyx_GIVEREF(__pyx_t_2);
  __Pyx_GOTREF(__pyx_v_self->_parameters);
  __Pyx_DECREF(__pyx_v_self->_parameters);
  __pyx_v_self->_parameters = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "../resources_source/python/pyproblem.pxi":59
 *                                           self.__set_parameters__,
 *                                           False)
 *         self._fields = dict()             # <<<<<<<<<<<<<<
 *         self._geometry = __Geometry__()
 * 
 */
  __pyx_t_2 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 59, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __Pyx_GOTREF(__pyx_v_self->_fields);
  __Pyx_DECREF(__pyx_v_self->_fields);
  __pyx_v_self->_fields = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "../resources_source/python/pyproblem.pxi":60
 *                                           False)
 *         self._fields = dict()
 *         self._geometry = __Geometry__()             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(self):
 */
  __pyx_t_2 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_6_agros___Geometry__)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 60, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __Pyx_GOTREF(__pyx_v_self->_geometry);
  __Pyx_DECREF(__pyx_v_self->_geometry);
  __pyx_v_self->_geometry = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "../resources_source/python/pyproblem.pxi":53
 *     cdef object _geometry
 * 
 *     def __cinit__(self, clear = False):             # <<<<<<<<<<<<<<
 *         self._problem = new PyProblem(clear)
 *         #self._time_callback = None
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("_agros.__Problem__.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../resources_source/python/pyproblem.pxi":62
 *         self._geometry = __Geometry__()
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self._problem
 * 
 */

/* Python wrapper */
static void __pyx_pw_6_agros_11__Problem___3__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_6_agros_11__Problem___3__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_6_agros_11__Problem___2__dealloc__(((struct __pyx_obj_6_agros___Problem__ *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_6_agros_11__Problem___2__dealloc__(struct __pyx_obj_6_agros___Problem__ *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "../resources_source/python/pyproblem.pxi":63
 * 
 *     def __dealloc__(self):
 *         del self._problem             # <<<<<<<<<<<<<<
 * 
 *     def clear(self):
 */
  delete __pyx_v_self->_problem;

  /* "../resources_source/python/pyproblem.pxi":62
 *         self._geometry = __Geometry__()
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self._problem
 * 
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "../resources_source/python/pyproblem.pxi":65
 *         del self._problem
 * 
 *     def clear(self):             # <<<<<<<<<<<<<<
 *         """Clear problem."""
 *         self._problem.clear()
 */

/* Python wrapper */
static PyObject *__pyx_pw_6_agros_11__Problem___5clear(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_6_agros_11__Problem___4clear[] = "Clear problem.";
static PyObject *__pyx_pw_6_agros_11__Problem___5clear(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("clear (wrapper)", 0);
  __pyx_r = __pyx_pf_6_agros_11__Problem___4clear(((struct __pyx_obj_6_agros___Problem__ *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6_agros_11__Problem___4clear(struct __pyx_obj_6_agros___Problem__ *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("clear", 0);

  /* "../resources_source/python/pyproblem.pxi":67
 *     def clear(self):
 *         """Clear problem."""
 *         self._problem.clear()             # <<<<<<<<<<<<<<
 *         #self._time_callback = None
 *         self._parameters.clear()
 */
  __pyx_v_self->_problem->clear();

  /* "../resources_source/python/pyproblem.pxi":69
 *         self._problem.clear()
 *         #self._time_callback = None
 *         self._parameters.clear()             # <<<<<<<<<<<<<<
 *         self._fields.clear()
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->_parameters, __pyx_n_s_clear); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 69, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 69, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "../resources_source/python/pyproblem.pxi":70
 *         #self._time_callback = None
 *         self._parameters.clear()
 *         self._fields.clear()             # <<<<<<<<<<<<<<
 * 
 *     def field(self, field_id):
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->_fields, __pyx_n_s_clear); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 70, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 70, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "../resources_source/python/pyproblem.pxi":65
 *         del self._problem
 * 
 *     def clear(self):             # <<<<<<<<<<<<<<
 *         """Clear problem."""
 *         self._problem.clear()
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("_agros.__Problem__.clear", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../resources_source/python/pyproblem.pxi":72
 *         self._fields.clear()
 * 
 *     def field(self, field_id):             # <<<<<<<<<<<<<<
 *         """Add new field to problem and return Field() object.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6_agros_11__Problem___7field(PyObject *__pyx_v_self, PyObject *__pyx_v_field_id); /*proto*/
static char __pyx_doc_6_agros_11__Problem___6field[] = "Add new field to problem and return Field() object.\n\n        field(field_id)\n\n        Keyword arguments:\n        field_id -- field keyword \n        ";
static PyObject *__pyx_pw_6_agros_11__Problem___7field(PyObject *__pyx_v_self, PyObject *__pyx_v_field_id) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("field (wrapper)", 0);
  __pyx_r = __pyx_pf_6_agros_11__Problem___6field(((struct __pyx_obj_6_agros___Problem__ *)__pyx_v_self), ((PyObject *)__pyx_v_field_id));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6_agros_11__Problem___6field(struct __pyx_obj_6_agros___Problem__ *__pyx_v_self, PyObject *__pyx_v_field_id) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("field", 0);

  /* "../resources_source/python/pyproblem.pxi":80
 *         field_id -- field keyword
 *         """
 *         if (not field_id in self._fields):             # <<<<<<<<<<<<<<
 *             self._fields[field_id] = __Field__(field_id)
 *         return self._fields[field_id]
 */
  __pyx_t_1 = (__Pyx_PySequence_ContainsTF(__pyx_v_field_id, __pyx_v_self->_fields, Py_NE)); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 80, __pyx_L1_error)
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "../resources_source/python/pyproblem.pxi":81
 *         """
 *         if (not field_id in self._fields):
 *             self._fields[field_id] = __Field__(field_id)             # <<<<<<<<<<<<<<
 *         return self._fields[field_id]
 * 
 */
    __pyx_t_3 = __Pyx_PyObject_CallOneArg(((PyObject *)__pyx_ptype_6_agros___Field__), __pyx_v_field_id); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 81, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (unlikely(PyObject_SetItem(__pyx_v_self->_fields, __pyx_v_field_id, __pyx_t_3) < 0)) __PYX_ERR(0, 81, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "../resources_source/python/pyproblem.pxi":80
 *         field_id -- field keyword
 *         """
 *         if (not field_id in self._fields):             # <<<<<<<<<<<<<<
 *             self._fields[field_id] = __Field__(field_id)
 *         return self._fields[field_id]
 */
  }

  /* "../resources_source/python/pyproblem.pxi":82
 *         if (not field_id in self._fields):
 *             self._fields[field_id] = __Field__(field_id)
 *         return self._fields[field_id]             # <<<<<<<<<<<<<<
 * 
 *     def __remove_field__(self, field_id):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_3 = __Pyx_PyObject_GetItem(__pyx_v_self->_fields, __pyx_v_field_id); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 82, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "../resources_source/python/pyproblem.pxi":72
 *         self._fields.clear()
 * 
 *     def field(self, field_id):             # <<<<<<<<<<<<<<
 *         """Add new field to problem and return Field() object.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("_agros.__Problem__.field", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../resources_source/python/pyproblem.pxi":84
 *         return self._fields[field_id]
 * 
 *     def __remove_field__(self, field_id):             # <<<<<<<<<<<<<<
 *         if (field_id in self._fields):
 *             del self._fields[field_id]
 */

/* Python wrapper */
static PyObject *__pyx_pw_6_agros_11__Problem___9__remove_field__(PyObject *__pyx_v_self, PyObject *__pyx_v_field_id); /*proto*/
static PyObject *__pyx_pw_6_agros_11__Problem___9__remove_field__(PyObject *__pyx_v_self, PyObject *__pyx_v_field_id) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__remove_field__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6_agros_11__Problem___8__remove_field__(((struct __pyx_obj_6_agros___Problem__ *)__pyx_v_self), ((PyObject *)__pyx_v_field_id));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6_agros_11__Problem___8__remove_field__(struct __pyx_obj_6_agros___Problem__ *__pyx_v_self, PyObject *__pyx_v_field_id) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__remove_field__", 0);

  /* "../resources_source/python/pyproblem.pxi":85
 * 
 *     def __remove_field__(self, field_id):
 *         if (field_id in self._fields):             # <<<<<<<<<<<<<<
 *             del self._fields[field_id]
 * 
 */
  __pyx_t_1 = (__Pyx_PySequence_ContainsTF(__pyx_v_field_id, __pyx_v_self->_fields, Py_EQ)); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 85, __pyx_L1_error)
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "../resources_source/python/pyproblem.pxi":86
 *     def __remove_field__(self, field_id):
 *         if (field_id in self._fields):
 *             del self._fields[field_id]             # <<<<<<<<<<<<<<
 * 
 *     def geometry(self):
 */
    if (unlikely(PyObject_DelItem(__pyx_v_self->_fields, __pyx_v_field_id) < 0)) __PYX_ERR(0, 86, __pyx_L1_error)

    /* "../resources_source/python/pyproblem.pxi":85
 * 
 *     def __remove_field__(self, field_id):
 *         if (field_id in self._fields):             # <<<<<<<<<<<<<<
 *             del self._fields[field_id]
 * 
 */
  }

  /* "../resources_source/python/pyproblem.pxi":84
 *         return self._fields[field_id]
 * 
 *     def __remove_field__(self, field_id):             # <<<<<<<<<<<<<<
 *         if (field_id in self._fields):
 *             del self._fields[field_id]
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("_agros.__Problem__.__remove_field__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../resources_source/python/pyproblem.pxi":88
 *             del self._fields[field_id]
 * 
 *     def geometry(self):             # <<<<<<<<<<<<<<
 *         """Get geometry object."""
 *         return self._geometry
 */

/* Python wrapper */
static PyObject *__pyx_pw_6_agros_11__Problem___11geometry(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_6_agros_11__Problem___10geometry[] = "Get geometry object.";
static PyObject *__pyx_pw_6_agros_11__Problem___11geometry(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("geometry (wrapper)", 0);
  __pyx_r = __pyx_pf_6_agros_11__Problem___10geometry(((struct __pyx_obj_6_agros___Problem__ *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6_agros_11__Problem___10geometry(struct __pyx_obj_6_agros___Problem__ *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("geometry", 0);

  /* "../resources_source/python/pyproblem.pxi":90
 *     def geometry(self):
 *         """Get geometry object."""
 *         return self._geometry             # <<<<<<<<<<<<<<
 * 
 *     def computation(self, new_computation = True):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->_geometry);
  __pyx_r = __pyx_v_self->_geometry;
  goto __pyx_L0;

  /* "../resources_source/python/pyproblem.pxi":88
 *             del self._fields[field_id]
 * 
 *     def geometry(self):             # <<<<<<<<<<<<<<
 *         """Get geometry object."""
 *         return self._geometry
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../resources_source/python/pyproblem.pxi":92
 *         return self._geometry
 * 
 *     def computation(self, new_computation = True):             # <<<<<<<<<<<<<<
 *         """Create and return new Computation() object.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6_agros_11__Problem___13computation(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6_agros_11__Problem___12computation[] = "Create and return new Computation() object.\n\n        computation(new_computation)\n\n        Keyword arguments:\n        new_computation -- create new computation (True or False)\n        ";
static PyObject *__pyx_pw_6_agros_11__Problem___13computation(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_new_computation = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("computation (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_new_computation,0};
    PyObject* values[1] = {0};
    values[0] = ((PyObject *)Py_True);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_new_computation);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "computation") < 0)) __PYX_ERR(0, 92, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_new_computation = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("computation", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 92, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("_agros.__Problem__.computation", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6_agros_11__Problem___12computation(((struct __pyx_obj_6_agros___Problem__ *)__pyx_v_self), __pyx_v_new_computation);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6_agros_11__Problem___12computation(CYTHON_UNUSED struct __pyx_obj_6_agros___Problem__ *__pyx_v_self, PyObject *__pyx_v_new_computation) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("computation", 0);

  /* "../resources_source/python/pyproblem.pxi":100
 *         new_computation -- create new computation (True or False)
 *         """
 *         return __Computation__(new_computation)             # <<<<<<<<<<<<<<
 * 
 *     # parameters
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_CallOneArg(((PyObject *)__pyx_ptype_6_agros___Computation__), __pyx_v_new_computation); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 100, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../resources_source/python/pyproblem.pxi":92
 *         return self._geometry
 * 
 *     def computation(self, new_computation = True):             # <<<<<<<<<<<<<<
 *         """Create and return new Computation() object.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("_agros.__Problem__.computation", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../resources_source/python/pyproblem.pxi":104
 *     # parameters
 *     property parameters:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self._parameters.get_parameters()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6_agros_11__Problem___10parameters_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6_agros_11__Problem___10parameters_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6_agros_11__Problem___10parameters___get__(((struct __pyx_obj_6_agros___Problem__ *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6_agros_11__Problem___10parameters___get__(struct __pyx_obj_6_agros___Problem__ *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "../resources_source/python/pyproblem.pxi":105
 *     property parameters:
 *         def __get__(self):
 *             return self._parameters.get_parameters()             # <<<<<<<<<<<<<<
 * 
 *     def __get_parameters__(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->_parameters, __pyx_n_s_get_parameters); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 105, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 105, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../resources_source/python/pyproblem.pxi":104
 *     # parameters
 *     property parameters:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self._parameters.get_parameters()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("_agros.__Problem__.parameters.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../resources_source/python/pyproblem.pxi":107
 *             return self._parameters.get_parameters()
 * 
 *     def __get_parameters__(self):             # <<<<<<<<<<<<<<
 *         cdef vector[string] parameters_vector
 *         self._problem.getParameters(parameters_vector)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6_agros_11__Problem___15__get_parameters__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_6_agros_11__Problem___15__get_parameters__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get_parameters__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6_agros_11__Problem___14__get_parameters__(((struct __pyx_obj_6_agros___Problem__ *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6_agros_11__Problem___14__get_parameters__(struct __pyx_obj_6_agros___Problem__ *__pyx_v_self) {
  std::vector<std::string>  __pyx_v_parameters_vector;
  PyObject *__pyx_v_parameters = NULL;
  std::vector<std::string> ::size_type __pyx_v_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  std::vector<std::string> ::size_type __pyx_t_2;
  std::vector<std::string> ::size_type __pyx_t_3;
  std::vector<std::string> ::size_type __pyx_t_4;
  double __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get_parameters__", 0);

  /* "../resources_source/python/pyproblem.pxi":109
 *     def __get_parameters__(self):
 *         cdef vector[string] parameters_vector
 *         self._problem.getParameters(parameters_vector)             # <<<<<<<<<<<<<<
 * 
 *         parameters = dict()
 */
  __pyx_v_self->_problem->getParameters(__pyx_v_parameters_vector);

  /* "../resources_source/python/pyproblem.pxi":111
 *         self._problem.getParameters(parameters_vector)
 * 
 *         parameters = dict()             # <<<<<<<<<<<<<<
 *         for i in range(parameters_vector.size()):
 *             parameters[(<string>parameters_vector[i]).decode()] = self._problem.getParameter(parameters_vector[i])
 */
  __pyx_t_1 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 111, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_parameters = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "../resources_source/python/pyproblem.pxi":112
 * 
 *         parameters = dict()
 *         for i in range(parameters_vector.size()):             # <<<<<<<<<<<<<<
 *             parameters[(<string>parameters_vector[i]).decode()] = self._problem.getParameter(parameters_vector[i])
 * 
 */
  __pyx_t_2 = __pyx_v_parameters_vector.size();
  __pyx_t_3 = __pyx_t_2;
  for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
    __pyx_v_i = __pyx_t_4;

    /* "../resources_source/python/pyproblem.pxi":113
 *         parameters = dict()
 *         for i in range(parameters_vector.size()):
 *             parameters[(<string>parameters_vector[i]).decode()] = self._problem.getParameter(parameters_vector[i])             # <<<<<<<<<<<<<<
 * 
 *         return parameters
 */
    try {
      __pyx_t_5 = __pyx_v_self->_problem->getParameter((__pyx_v_parameters_vector[__pyx_v_i]));
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 113, __pyx_L1_error)
    }
    __pyx_t_1 = PyFloat_FromDouble(__pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 113, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_6 = __Pyx_decode_cpp_string(((std::string)(__pyx_v_parameters_vector[__pyx_v_i])), 0, PY_SSIZE_T_MAX, NULL, NULL, NULL); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 113, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    if (unlikely(PyDict_SetItem(__pyx_v_parameters, __pyx_t_6, __pyx_t_1) < 0)) __PYX_ERR(0, 113, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "../resources_source/python/pyproblem.pxi":115
 *             parameters[(<string>parameters_vector[i]).decode()] = self._problem.getParameter(parameters_vector[i])
 * 
 *         return parameters             # <<<<<<<<<<<<<<
 * 
 *     def __set_parameters__(self, parameters):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_parameters);
  __pyx_r = __pyx_v_parameters;
  goto __pyx_L0;

  /* "../resources_source/python/pyproblem.pxi":107
 *             return self._parameters.get_parameters()
 * 
 *     def __get_parameters__(self):             # <<<<<<<<<<<<<<
 *         cdef vector[string] parameters_vector
 *         self._problem.getParameters(parameters_vector)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("_agros.__Problem__.__get_parameters__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_parameters);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../resources_source/python/pyproblem.pxi":117
 *         return parameters
 * 
 *     def __set_parameters__(self, parameters):             # <<<<<<<<<<<<<<
 *         for key in parameters:
 *             self._problem.setParameter(key.encode(), <double>parameters[key])
 */

/* Python wrapper */
static PyObject *__pyx_pw_6_agros_11__Problem___17__set_parameters__(PyObject *__pyx_v_self, PyObject *__pyx_v_parameters); /*proto*/
static PyObject *__pyx_pw_6_agros_11__Problem___17__set_parameters__(PyObject *__pyx_v_self, PyObject *__pyx_v_parameters) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set_parameters__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6_agros_11__Problem___16__set_parameters__(((struct __pyx_obj_6_agros___Problem__ *)__pyx_v_self), ((PyObject *)__pyx_v_parameters));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6_agros_11__Problem___16__set_parameters__(struct __pyx_obj_6_agros___Problem__ *__pyx_v_self, PyObject *__pyx_v_parameters) {
  PyObject *__pyx_v_key = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *(*__pyx_t_3)(PyObject *);
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  std::string __pyx_t_7;
  double __pyx_t_8;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set_parameters__", 0);

  /* "../resources_source/python/pyproblem.pxi":118
 * 
 *     def __set_parameters__(self, parameters):
 *         for key in parameters:             # <<<<<<<<<<<<<<
 *             self._problem.setParameter(key.encode(), <double>parameters[key])
 * 
 */
  if (likely(PyList_CheckExact(__pyx_v_parameters)) || PyTuple_CheckExact(__pyx_v_parameters)) {
    __pyx_t_1 = __pyx_v_parameters; __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
    __pyx_t_3 = NULL;
  } else {
    __pyx_t_2 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_v_parameters); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 118, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 118, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_3)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(0, 118, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 118, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      } else {
        if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(0, 118, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 118, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      }
    } else {
      __pyx_t_4 = __pyx_t_3(__pyx_t_1);
      if (unlikely(!__pyx_t_4)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 118, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_4);
    }
    __Pyx_XDECREF_SET(__pyx_v_key, __pyx_t_4);
    __pyx_t_4 = 0;

    /* "../resources_source/python/pyproblem.pxi":119
 *     def __set_parameters__(self, parameters):
 *         for key in parameters:
 *             self._problem.setParameter(key.encode(), <double>parameters[key])             # <<<<<<<<<<<<<<
 * 
 *     # coordinate type
 */
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_key, __pyx_n_s_encode); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 119, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_5);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_5, function);
      }
    }
    __pyx_t_4 = (__pyx_t_6) ? __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_6) : __Pyx_PyObject_CallNoArg(__pyx_t_5);
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 119, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_7 = __pyx_convert_string_from_py_std__in_string(__pyx_t_4); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 119, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_PyObject_GetItem(__pyx_v_parameters, __pyx_v_key); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 119, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_8 = __pyx_PyFloat_AsDouble(__pyx_t_4); if (unlikely((__pyx_t_8 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 119, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_v_self->_problem->setParameter(__pyx_t_7, ((double)__pyx_t_8));

    /* "../resources_source/python/pyproblem.pxi":118
 * 
 *     def __set_parameters__(self, parameters):
 *         for key in parameters:             # <<<<<<<<<<<<<<
 *             self._problem.setParameter(key.encode(), <double>parameters[key])
 * 
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "../resources_source/python/pyproblem.pxi":117
 *         return parameters
 * 
 *     def __set_parameters__(self, parameters):             # <<<<<<<<<<<<<<
 *         for key in parameters:
 *             self._problem.setParameter(key.encode(), <double>parameters[key])
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("_agros.__Problem__.__set_parameters__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_key);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../resources_source/python/pyproblem.pxi":123
 *     # coordinate type
 *     coordinate_type = property(_get_coordinate_type, _set_coordinate_type)
 *     def _get_coordinate_type(self):             # <<<<<<<<<<<<<<
 *         return self._problem.getCoordinateType().decode()
 *     def _set_coordinate_type(self, coordinate_type):
 */

/* Python wrapper */
static PyObject *__pyx_pw_6_agros_11__Problem___19_get_coordinate_type(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_6_agros_11__Problem___19_get_coordinate_type(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_get_coordinate_type (wrapper)", 0);
  __pyx_r = __pyx_pf_6_agros_11__Problem___18_get_coordinate_type(((struct __pyx_obj_6_agros___Problem__ *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6_agros_11__Problem___18_get_coordinate_type(struct __pyx_obj_6_agros___Problem__ *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_get_coordinate_type", 0);

  /* "../resources_source/python/pyproblem.pxi":124
 *     coordinate_type = property(_get_coordinate_type, _set_coordinate_type)
 *     def _get_coordinate_type(self):
 *         return self._problem.getCoordinateType().decode()             # <<<<<<<<<<<<<<
 *     def _set_coordinate_type(self, coordinate_type):
 *         self._problem.setCoordinateType(coordinate_type.encode())
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_decode_cpp_string(__pyx_v_self->_problem->getCoordinateType(), 0, PY_SSIZE_T_MAX, NULL, NULL, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 124, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../resources_source/python/pyproblem.pxi":123
 *     # coordinate type
 *     coordinate_type = property(_get_coordinate_type, _set_coordinate_type)
 *     def _get_coordinate_type(self):             # <<<<<<<<<<<<<<
 *         return self._problem.getCoordinateType().decode()
 *     def _set_coordinate_type(self, coordinate_type):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("_agros.__Problem__._get_coordinate_type", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../resources_source/python/pyproblem.pxi":125
 *     def _get_coordinate_type(self):
 *         return self._problem.getCoordinateType().decode()
 *     def _set_coordinate_type(self, coordinate_type):             # <<<<<<<<<<<<<<
 *         self._problem.setCoordinateType(coordinate_type.encode())
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6_agros_11__Problem___21_set_coordinate_type(PyObject *__pyx_v_self, PyObject *__pyx_v_coordinate_type); /*proto*/
static PyObject *__pyx_pw_6_agros_11__Problem___21_set_coordinate_type(PyObject *__pyx_v_self, PyObject *__pyx_v_coordinate_type) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_set_coordinate_type (wrapper)", 0);
  __pyx_r = __pyx_pf_6_agros_11__Problem___20_set_coordinate_type(((struct __pyx_obj_6_agros___Problem__ *)__pyx_v_self), ((PyObject *)__pyx_v_coordinate_type));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6_agros_11__Problem___20_set_coordinate_type(struct __pyx_obj_6_agros___Problem__ *__pyx_v_self, PyObject *__pyx_v_coordinate_type) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  std::string __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_set_coordinate_type", 0);

  /* "../resources_source/python/pyproblem.pxi":126
 *         return self._problem.getCoordinateType().decode()
 *     def _set_coordinate_type(self, coordinate_type):
 *         self._problem.setCoordinateType(coordinate_type.encode())             # <<<<<<<<<<<<<<
 * 
 *     # mesh type
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_coordinate_type, __pyx_n_s_encode); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 126, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 126, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = __pyx_convert_string_from_py_std__in_string(__pyx_t_1); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 126, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  try {
    __pyx_v_self->_problem->setCoordinateType(__pyx_t_4);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 126, __pyx_L1_error)
  }

  /* "../resources_source/python/pyproblem.pxi":125
 *     def _get_coordinate_type(self):
 *         return self._problem.getCoordinateType().decode()
 *     def _set_coordinate_type(self, coordinate_type):             # <<<<<<<<<<<<<<
 *         self._problem.setCoordinateType(coordinate_type.encode())
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("_agros.__Problem__._set_coordinate_type", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../resources_source/python/pyproblem.pxi":130
 *     # mesh type
 *     mesh_type = property(_get_mesh_type, _set_mesh_type)
 *     def _get_mesh_type(self):             # <<<<<<<<<<<<<<
 *         return self._problem.getMeshType().decode()
 *     def _set_mesh_type(self, mesh_type):
 */

/* Python wrapper */
static PyObject *__pyx_pw_6_agros_11__Problem___23_get_mesh_type(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_6_agros_11__Problem___23_get_mesh_type(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_get_mesh_type (wrapper)", 0);
  __pyx_r = __pyx_pf_6_agros_11__Problem___22_get_mesh_type(((struct __pyx_obj_6_agros___Problem__ *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6_agros_11__Problem___22_get_mesh_type(struct __pyx_obj_6_agros___Problem__ *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_get_mesh_type", 0);

  /* "../resources_source/python/pyproblem.pxi":131
 *     mesh_type = property(_get_mesh_type, _set_mesh_type)
 *     def _get_mesh_type(self):
 *         return self._problem.getMeshType().decode()             # <<<<<<<<<<<<<<
 *     def _set_mesh_type(self, mesh_type):
 *         self._problem.setMeshType(mesh_type.encode())
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_decode_cpp_string(__pyx_v_self->_problem->getMeshType(), 0, PY_SSIZE_T_MAX, NULL, NULL, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 131, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../resources_source/python/pyproblem.pxi":130
 *     # mesh type
 *     mesh_type = property(_get_mesh_type, _set_mesh_type)
 *     def _get_mesh_type(self):             # <<<<<<<<<<<<<<
 *         return self._problem.getMeshType().decode()
 *     def _set_mesh_type(self, mesh_type):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("_agros.__Problem__._get_mesh_type", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../resources_source/python/pyproblem.pxi":132
 *     def _get_mesh_type(self):
 *         return self._problem.getMeshType().decode()
 *     def _set_mesh_type(self, mesh_type):             # <<<<<<<<<<<<<<
 *         self._problem.setMeshType(mesh_type.encode())
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6_agros_11__Problem___25_set_mesh_type(PyObject *__pyx_v_self, PyObject *__pyx_v_mesh_type); /*proto*/
static PyObject *__pyx_pw_6_agros_11__Problem___25_set_mesh_type(PyObject *__pyx_v_self, PyObject *__pyx_v_mesh_type) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_set_mesh_type (wrapper)", 0);
  __pyx_r = __pyx_pf_6_agros_11__Problem___24_set_mesh_type(((struct __pyx_obj_6_agros___Problem__ *)__pyx_v_self), ((PyObject *)__pyx_v_mesh_type));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6_agros_11__Problem___24_set_mesh_type(struct __pyx_obj_6_agros___Problem__ *__pyx_v_self, PyObject *__pyx_v_mesh_type) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  std::string __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_set_mesh_type", 0);

  /* "../resources_source/python/pyproblem.pxi":133
 *         return self._problem.getMeshType().decode()
 *     def _set_mesh_type(self, mesh_type):
 *         self._problem.setMeshType(mesh_type.encode())             # <<<<<<<<<<<<<<
 * 
 *     # frequency
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_mesh_type, __pyx_n_s_encode); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 133, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 133, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = __pyx_convert_string_from_py_std__in_string(__pyx_t_1); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 133, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  try {
    __pyx_v_self->_problem->setMeshType(__pyx_t_4);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 133, __pyx_L1_error)
  }

  /* "../resources_source/python/pyproblem.pxi":132
 *     def _get_mesh_type(self):
 *         return self._problem.getMeshType().decode()
 *     def _set_mesh_type(self, mesh_type):             # <<<<<<<<<<<<<<
 *         self._problem.setMeshType(mesh_type.encode())
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("_agros.__Problem__._set_mesh_type", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../resources_source/python/pyproblem.pxi":137
 *     # frequency
 *     frequency = property(_get_frequency, _set_frequency)
 *     def _get_frequency(self):             # <<<<<<<<<<<<<<
 *             return self._problem.getFrequency()
 *     def _set_frequency(self, frequency):
 */

/* Python wrapper */
static PyObject *__pyx_pw_6_agros_11__Problem___27_get_frequency(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_6_agros_11__Problem___27_get_frequency(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_get_frequency (wrapper)", 0);
  __pyx_r = __pyx_pf_6_agros_11__Problem___26_get_frequency(((struct __pyx_obj_6_agros___Problem__ *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6_agros_11__Problem___26_get_frequency(struct __pyx_obj_6_agros___Problem__ *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_get_frequency", 0);

  /* "../resources_source/python/pyproblem.pxi":138
 *     frequency = property(_get_frequency, _set_frequency)
 *     def _get_frequency(self):
 *             return self._problem.getFrequency()             # <<<<<<<<<<<<<<
 *     def _set_frequency(self, frequency):
 *         self._problem.setFrequency(frequency)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->_problem->getFrequency()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 138, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../resources_source/python/pyproblem.pxi":137
 *     # frequency
 *     frequency = property(_get_frequency, _set_frequency)
 *     def _get_frequency(self):             # <<<<<<<<<<<<<<
 *             return self._problem.getFrequency()
 *     def _set_frequency(self, frequency):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("_agros.__Problem__._get_frequency", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../resources_source/python/pyproblem.pxi":139
 *     def _get_frequency(self):
 *             return self._problem.getFrequency()
 *     def _set_frequency(self, frequency):             # <<<<<<<<<<<<<<
 *         self._problem.setFrequency(frequency)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6_agros_11__Problem___29_set_frequency(PyObject *__pyx_v_self, PyObject *__pyx_v_frequency); /*proto*/
static PyObject *__pyx_pw_6_agros_11__Problem___29_set_frequency(PyObject *__pyx_v_self, PyObject *__pyx_v_frequency) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_set_frequency (wrapper)", 0);
  __pyx_r = __pyx_pf_6_agros_11__Problem___28_set_frequency(((struct __pyx_obj_6_agros___Problem__ *)__pyx_v_self), ((PyObject *)__pyx_v_frequency));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6_agros_11__Problem___28_set_frequency(struct __pyx_obj_6_agros___Problem__ *__pyx_v_self, PyObject *__pyx_v_frequency) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_set_frequency", 0);

  /* "../resources_source/python/pyproblem.pxi":140
 *             return self._problem.getFrequency()
 *     def _set_frequency(self, frequency):
 *         self._problem.setFrequency(frequency)             # <<<<<<<<<<<<<<
 * 
 *     # time step method
 */
  __pyx_t_1 = __pyx_PyFloat_AsDouble(__pyx_v_frequency); if (unlikely((__pyx_t_1 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 140, __pyx_L1_error)
  try {
    __pyx_v_self->_problem->setFrequency(__pyx_t_1);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 140, __pyx_L1_error)
  }

  /* "../resources_source/python/pyproblem.pxi":139
 *     def _get_frequency(self):
 *             return self._problem.getFrequency()
 *     def _set_frequency(self, frequency):             # <<<<<<<<<<<<<<
 *         self._problem.setFrequency(frequency)
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("_agros.__Problem__._set_frequency", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../resources_source/python/pyproblem.pxi":144
 *     # time step method
 *     time_step_method = property(_get_time_step_method, _set_time_step_method)
 *     def _get_time_step_method(self):             # <<<<<<<<<<<<<<
 *         return self._problem.getTimeStepMethod().decode()
 *     def _set_time_step_method(self, time_step_method):
 */

/* Python wrapper */
static PyObject *__pyx_pw_6_agros_11__Problem___31_get_time_step_method(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_6_agros_11__Problem___31_get_time_step_method(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_get_time_step_method (wrapper)", 0);
  __pyx_r = __pyx_pf_6_agros_11__Problem___30_get_time_step_method(((struct __pyx_obj_6_agros___Problem__ *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6_agros_11__Problem___30_get_time_step_method(struct __pyx_obj_6_agros___Problem__ *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_get_time_step_method", 0);

  /* "../resources_source/python/pyproblem.pxi":145
 *     time_step_method = property(_get_time_step_method, _set_time_step_method)
 *     def _get_time_step_method(self):
 *         return self._problem.getTimeStepMethod().decode()             # <<<<<<<<<<<<<<
 *     def _set_time_step_method(self, time_step_method):
 *             self._problem.setTimeStepMethod(time_step_method.encode())
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_decode_cpp_string(__pyx_v_self->_problem->getTimeStepMethod(), 0, PY_SSIZE_T_MAX, NULL, NULL, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 145, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../resources_source/python/pyproblem.pxi":144
 *     # time step method
 *     time_step_method = property(_get_time_step_method, _set_time_step_method)
 *     def _get_time_step_method(self):             # <<<<<<<<<<<<<<
 *         return self._problem.getTimeStepMethod().decode()
 *     def _set_time_step_method(self, time_step_method):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("_agros.__Problem__._get_time_step_method", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../resources_source/python/pyproblem.pxi":146
 *     def _get_time_step_method(self):
 *         return self._problem.getTimeStepMethod().decode()
 *     def _set_time_step_method(self, time_step_method):             # <<<<<<<<<<<<<<
 *             self._problem.setTimeStepMethod(time_step_method.encode())
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6_agros_11__Problem___33_set_time_step_method(PyObject *__pyx_v_self, PyObject *__pyx_v_time_step_method); /*proto*/
static PyObject *__pyx_pw_6_agros_11__Problem___33_set_time_step_method(PyObject *__pyx_v_self, PyObject *__pyx_v_time_step_method) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_set_time_step_method (wrapper)", 0);
  __pyx_r = __pyx_pf_6_agros_11__Problem___32_set_time_step_method(((struct __pyx_obj_6_agros___Problem__ *)__pyx_v_self), ((PyObject *)__pyx_v_time_step_method));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6_agros_11__Problem___32_set_time_step_method(struct __pyx_obj_6_agros___Problem__ *__pyx_v_self, PyObject *__pyx_v_time_step_method) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  std::string __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_set_time_step_method", 0);

  /* "../resources_source/python/pyproblem.pxi":147
 *         return self._problem.getTimeStepMethod().decode()
 *     def _set_time_step_method(self, time_step_method):
 *             self._problem.setTimeStepMethod(time_step_method.encode())             # <<<<<<<<<<<<<<
 * 
 *     # time method order
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_time_step_method, __pyx_n_s_encode); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 147, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 147, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = __pyx_convert_string_from_py_std__in_string(__pyx_t_1); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 147, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  try {
    __pyx_v_self->_problem->setTimeStepMethod(__pyx_t_4);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 147, __pyx_L1_error)
  }

  /* "../resources_source/python/pyproblem.pxi":146
 *     def _get_time_step_method(self):
 *         return self._problem.getTimeStepMethod().decode()
 *     def _set_time_step_method(self, time_step_method):             # <<<<<<<<<<<<<<
 *             self._problem.setTimeStepMethod(time_step_method.encode())
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("_agros.__Problem__._set_time_step_method", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../resources_source/python/pyproblem.pxi":151
 *     # time method order
 *     time_method_order = property(_get_time_method_order, _set_time_method_order)
 *     def _get_time_method_order(self):             # <<<<<<<<<<<<<<
 *         return self._problem.getTimeMethodOrder()
 *     def _set_time_method_order(self, time_method_order):
 */

/* Python wrapper */
static PyObject *__pyx_pw_6_agros_11__Problem___35_get_time_method_order(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_6_agros_11__Problem___35_get_time_method_order(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_get_time_method_order (wrapper)", 0);
  __pyx_r = __pyx_pf_6_agros_11__Problem___34_get_time_method_order(((struct __pyx_obj_6_agros___Problem__ *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6_agros_11__Problem___34_get_time_method_order(struct __pyx_obj_6_agros___Problem__ *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_get_time_method_order", 0);

  /* "../resources_source/python/pyproblem.pxi":152
 *     time_method_order = property(_get_time_method_order, _set_time_method_order)
 *     def _get_time_method_order(self):
 *         return self._problem.getTimeMethodOrder()             # <<<<<<<<<<<<<<
 *     def _set_time_method_order(self, time_method_order):
 *             self._problem.setTimeMethodOrder(time_method_order)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->_problem->getTimeMethodOrder()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 152, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../resources_source/python/pyproblem.pxi":151
 *     # time method order
 *     time_method_order = property(_get_time_method_order, _set_time_method_order)
 *     def _get_time_method_order(self):             # <<<<<<<<<<<<<<
 *         return self._problem.getTimeMethodOrder()
 *     def _set_time_method_order(self, time_method_order):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("_agros.__Problem__._get_time_method_order", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../resources_source/python/pyproblem.pxi":153
 *     def _get_time_method_order(self):
 *         return self._problem.getTimeMethodOrder()
 *     def _set_time_method_order(self, time_method_order):             # <<<<<<<<<<<<<<
 *             self._problem.setTimeMethodOrder(time_method_order)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6_agros_11__Problem___37_set_time_method_order(PyObject *__pyx_v_self, PyObject *__pyx_v_time_method_order); /*proto*/
static PyObject *__pyx_pw_6_agros_11__Problem___37_set_time_method_order(PyObject *__pyx_v_self, PyObject *__pyx_v_time_method_order) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_set_time_method_order (wrapper)", 0);
  __pyx_r = __pyx_pf_6_agros_11__Problem___36_set_time_method_order(((struct __pyx_obj_6_agros___Problem__ *)__pyx_v_self), ((PyObject *)__pyx_v_time_method_order));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6_agros_11__Problem___36_set_time_method_order(struct __pyx_obj_6_agros___Problem__ *__pyx_v_self, PyObject *__pyx_v_time_method_order) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_set_time_method_order", 0);

  /* "../resources_source/python/pyproblem.pxi":154
 *         return self._problem.getTimeMethodOrder()
 *     def _set_time_method_order(self, time_method_order):
 *             self._problem.setTimeMethodOrder(time_method_order)             # <<<<<<<<<<<<<<
 * 
 *     # time method tolerance
 */
  __pyx_t_1 = __Pyx_PyInt_As_int(__pyx_v_time_method_order); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 154, __pyx_L1_error)
  try {
    __pyx_v_self->_problem->setTimeMethodOrder(__pyx_t_1);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 154, __pyx_L1_error)
  }

  /* "../resources_source/python/pyproblem.pxi":153
 *     def _get_time_method_order(self):
 *         return self._problem.getTimeMethodOrder()
 *     def _set_time_method_order(self, time_method_order):             # <<<<<<<<<<<<<<
 *             self._problem.setTimeMethodOrder(time_method_order)
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("_agros.__Problem__._set_time_method_order", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../resources_source/python/pyproblem.pxi":158
 *     # time method tolerance
 *     time_method_tolerance = property(_get_time_method_tolerance, _set_time_method_tolerance)
 *     def _get_time_method_tolerance(self):             # <<<<<<<<<<<<<<
 *         return self._problem.getTimeMethodTolerance()
 *     def _set_time_method_tolerance(self, time_method_tolerance):
 */

/* Python wrapper */
static PyObject *__pyx_pw_6_agros_11__Problem___39_get_time_method_tolerance(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_6_agros_11__Problem___39_get_time_method_tolerance(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_get_time_method_tolerance (wrapper)", 0);
  __pyx_r = __pyx_pf_6_agros_11__Problem___38_get_time_method_tolerance(((struct __pyx_obj_6_agros___Problem__ *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6_agros_11__Problem___38_get_time_method_tolerance(struct __pyx_obj_6_agros___Problem__ *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_get_time_method_tolerance", 0);

  /* "../resources_source/python/pyproblem.pxi":159
 *     time_method_tolerance = property(_get_time_method_tolerance, _set_time_method_tolerance)
 *     def _get_time_method_tolerance(self):
 *         return self._problem.getTimeMethodTolerance()             # <<<<<<<<<<<<<<
 *     def _set_time_method_tolerance(self, time_method_tolerance):
 *             self._problem.setTimeMethodTolerance(time_method_tolerance)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->_problem->getTimeMethodTolerance()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 159, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../resources_source/python/pyproblem.pxi":158
 *     # time method tolerance
 *     time_method_tolerance = property(_get_time_method_tolerance, _set_time_method_tolerance)
 *     def _get_time_method_tolerance(self):             # <<<<<<<<<<<<<<
 *         return self._problem.getTimeMethodTolerance()
 *     def _set_time_method_tolerance(self, time_method_tolerance):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("_agros.__Problem__._get_time_method_tolerance", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../resources_source/python/pyproblem.pxi":160
 *     def _get_time_method_tolerance(self):
 *         return self._problem.getTimeMethodTolerance()
 *     def _set_time_method_tolerance(self, time_method_tolerance):             # <<<<<<<<<<<<<<
 *             self._problem.setTimeMethodTolerance(time_method_tolerance)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6_agros_11__Problem___41_set_time_method_tolerance(PyObject *__pyx_v_self, PyObject *__pyx_v_time_method_tolerance); /*proto*/
static PyObject *__pyx_pw_6_agros_11__Problem___41_set_time_method_tolerance(PyObject *__pyx_v_self, PyObject *__pyx_v_time_method_tolerance) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_set_time_method_tolerance (wrapper)", 0);
  __pyx_r = __pyx_pf_6_agros_11__Problem___40_set_time_method_tolerance(((struct __pyx_obj_6_agros___Problem__ *)__pyx_v_self), ((PyObject *)__pyx_v_time_method_tolerance));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6_agros_11__Problem___40_set_time_method_tolerance(struct __pyx_obj_6_agros___Problem__ *__pyx_v_self, PyObject *__pyx_v_time_method_tolerance) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_set_time_method_tolerance", 0);

  /* "../resources_source/python/pyproblem.pxi":161
 *         return self._problem.getTimeMethodTolerance()
 *     def _set_time_method_tolerance(self, time_method_tolerance):
 *             self._problem.setTimeMethodTolerance(time_method_tolerance)             # <<<<<<<<<<<<<<
 * 
 *     # time total
 */
  __pyx_t_1 = __pyx_PyFloat_AsDouble(__pyx_v_time_method_tolerance); if (unlikely((__pyx_t_1 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 161, __pyx_L1_error)
  try {
    __pyx_v_self->_problem->setTimeMethodTolerance(__pyx_t_1);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 161, __pyx_L1_error)
  }

  /* "../resources_source/python/pyproblem.pxi":160
 *     def _get_time_method_tolerance(self):
 *         return self._problem.getTimeMethodTolerance()
 *     def _set_time_method_tolerance(self, time_method_tolerance):             # <<<<<<<<<<<<<<
 *             self._problem.setTimeMethodTolerance(time_method_tolerance)
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("_agros.__Problem__._set_time_method_tolerance", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../resources_source/python/pyproblem.pxi":165
 *     # time total
 *     time_total = property(_get_time_total, _set_time_total)
 *     def _get_time_total(self):             # <<<<<<<<<<<<<<
 *         return self._problem.getTimeTotal()
 *     def _set_time_total(self, time_total):
 */

/* Python wrapper */
static PyObject *__pyx_pw_6_agros_11__Problem___43_get_time_total(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_6_agros_11__Problem___43_get_time_total(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_get_time_total (wrapper)", 0);
  __pyx_r = __pyx_pf_6_agros_11__Problem___42_get_time_total(((struct __pyx_obj_6_agros___Problem__ *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6_agros_11__Problem___42_get_time_total(struct __pyx_obj_6_agros___Problem__ *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_get_time_total", 0);

  /* "../resources_source/python/pyproblem.pxi":166
 *     time_total = property(_get_time_total, _set_time_total)
 *     def _get_time_total(self):
 *         return self._problem.getTimeTotal()             # <<<<<<<<<<<<<<
 *     def _set_time_total(self, time_total):
 *             self._problem.setTimeTotal(time_total)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->_problem->getTimeTotal()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 166, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../resources_source/python/pyproblem.pxi":165
 *     # time total
 *     time_total = property(_get_time_total, _set_time_total)
 *     def _get_time_total(self):             # <<<<<<<<<<<<<<
 *         return self._problem.getTimeTotal()
 *     def _set_time_total(self, time_total):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("_agros.__Problem__._get_time_total", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../resources_source/python/pyproblem.pxi":167
 *     def _get_time_total(self):
 *         return self._problem.getTimeTotal()
 *     def _set_time_total(self, time_total):             # <<<<<<<<<<<<<<
 *             self._problem.setTimeTotal(time_total)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6_agros_11__Problem___45_set_time_total(PyObject *__pyx_v_self, PyObject *__pyx_v_time_total); /*proto*/
static PyObject *__pyx_pw_6_agros_11__Problem___45_set_time_total(PyObject *__pyx_v_self, PyObject *__pyx_v_time_total) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_set_time_total (wrapper)", 0);
  __pyx_r = __pyx_pf_6_agros_11__Problem___44_set_time_total(((struct __pyx_obj_6_agros___Problem__ *)__pyx_v_self), ((PyObject *)__pyx_v_time_total));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6_agros_11__Problem___44_set_time_total(struct __pyx_obj_6_agros___Problem__ *__pyx_v_self, PyObject *__pyx_v_time_total) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_set_time_total", 0);

  /* "../resources_source/python/pyproblem.pxi":168
 *         return self._problem.getTimeTotal()
 *     def _set_time_total(self, time_total):
 *             self._problem.setTimeTotal(time_total)             # <<<<<<<<<<<<<<
 * 
 *     # time steps
 */
  __pyx_t_1 = __pyx_PyFloat_AsDouble(__pyx_v_time_total); if (unlikely((__pyx_t_1 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 168, __pyx_L1_error)
  try {
    __pyx_v_self->_problem->setTimeTotal(__pyx_t_1);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 168, __pyx_L1_error)
  }

  /* "../resources_source/python/pyproblem.pxi":167
 *     def _get_time_total(self):
 *         return self._problem.getTimeTotal()
 *     def _set_time_total(self, time_total):             # <<<<<<<<<<<<<<
 *             self._problem.setTimeTotal(time_total)
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("_agros.__Problem__._set_time_total", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../resources_source/python/pyproblem.pxi":172
 *     # time steps
 *     time_steps = property(_get_time_steps, _set_time_steps)
 *     def _get_time_steps(self):             # <<<<<<<<<<<<<<
 *         return self._problem.getNumConstantTimeSteps()
 *     def _set_time_steps(self, time_steps):
 */

/* Python wrapper */
static PyObject *__pyx_pw_6_agros_11__Problem___47_get_time_steps(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_6_agros_11__Problem___47_get_time_steps(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_get_time_steps (wrapper)", 0);
  __pyx_r = __pyx_pf_6_agros_11__Problem___46_get_time_steps(((struct __pyx_obj_6_agros___Problem__ *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6_agros_11__Problem___46_get_time_steps(struct __pyx_obj_6_agros___Problem__ *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_get_time_steps", 0);

  /* "../resources_source/python/pyproblem.pxi":173
 *     time_steps = property(_get_time_steps, _set_time_steps)
 *     def _get_time_steps(self):
 *         return self._problem.getNumConstantTimeSteps()             # <<<<<<<<<<<<<<
 *     def _set_time_steps(self, time_steps):
 *             self._problem.setNumConstantTimeSteps(time_steps)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->_problem->getNumConstantTimeSteps()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 173, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../resources_source/python/pyproblem.pxi":172
 *     # time steps
 *     time_steps = property(_get_time_steps, _set_time_steps)
 *     def _get_time_steps(self):             # <<<<<<<<<<<<<<
 *         return self._problem.getNumConstantTimeSteps()
 *     def _set_time_steps(self, time_steps):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("_agros.__Problem__._get_time_steps", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../resources_source/python/pyproblem.pxi":174
 *     def _get_time_steps(self):
 *         return self._problem.getNumConstantTimeSteps()
 *     def _set_time_steps(self, time_steps):             # <<<<<<<<<<<<<<
 *             self._problem.setNumConstantTimeSteps(time_steps)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6_agros_11__Problem___49_set_time_steps(PyObject *__pyx_v_self, PyObject *__pyx_v_time_steps); /*proto*/
static PyObject *__pyx_pw_6_agros_11__Problem___49_set_time_steps(PyObject *__pyx_v_self, PyObject *__pyx_v_time_steps) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_set_time_steps (wrapper)", 0);
  __pyx_r = __pyx_pf_6_agros_11__Problem___48_set_time_steps(((struct __pyx_obj_6_agros___Problem__ *)__pyx_v_self), ((PyObject *)__pyx_v_time_steps));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6_agros_11__Problem___48_set_time_steps(struct __pyx_obj_6_agros___Problem__ *__pyx_v_self, PyObject *__pyx_v_time_steps) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_set_time_steps", 0);

  /* "../resources_source/python/pyproblem.pxi":175
 *         return self._problem.getNumConstantTimeSteps()
 *     def _set_time_steps(self, time_steps):
 *             self._problem.setNumConstantTimeSteps(time_steps)             # <<<<<<<<<<<<<<
 * 
 *     # initial time step
 */
  __pyx_t_1 = __Pyx_PyInt_As_int(__pyx_v_time_steps); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 175, __pyx_L1_error)
  try {
    __pyx_v_self->_problem->setNumConstantTimeSteps(__pyx_t_1);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 175, __pyx_L1_error)
  }

  /* "../resources_source/python/pyproblem.pxi":174
 *     def _get_time_steps(self):
 *         return self._problem.getNumConstantTimeSteps()
 *     def _set_time_steps(self, time_steps):             # <<<<<<<<<<<<<<
 *             self._problem.setNumConstantTimeSteps(time_steps)
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("_agros.__Problem__._set_time_steps", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../resources_source/python/pyproblem.pxi":179
 *     # initial time step
 *     initial_time_step = property(_get_initial_time_step, _set_initial_time_step)
 *     def _get_initial_time_step(self):             # <<<<<<<<<<<<<<
 *         return self._problem.getInitialTimeStep()
 *     def _set_initial_time_step(self, initial_time_step):
 */

/* Python wrapper */
static PyObject *__pyx_pw_6_agros_11__Problem___51_get_initial_time_step(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_6_agros_11__Problem___51_get_initial_time_step(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_get_initial_time_step (wrapper)", 0);
  __pyx_r = __pyx_pf_6_agros_11__Problem___50_get_initial_time_step(((struct __pyx_obj_6_agros___Problem__ *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6_agros_11__Problem___50_get_initial_time_step(struct __pyx_obj_6_agros___Problem__ *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_get_initial_time_step", 0);

  /* "../resources_source/python/pyproblem.pxi":180
 *     initial_time_step = property(_get_initial_time_step, _set_initial_time_step)
 *     def _get_initial_time_step(self):
 *         return self._problem.getInitialTimeStep()             # <<<<<<<<<<<<<<
 *     def _set_initial_time_step(self, initial_time_step):
 *             self._problem.setInitialTimeStep(initial_time_step)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->_problem->getInitialTimeStep()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 180, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../resources_source/python/pyproblem.pxi":179
 *     # initial time step
 *     initial_time_step = property(_get_initial_time_step, _set_initial_time_step)
 *     def _get_initial_time_step(self):             # <<<<<<<<<<<<<<
 *         return self._problem.getInitialTimeStep()
 *     def _set_initial_time_step(self, initial_time_step):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("_agros.__Problem__._get_initial_time_step", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../resources_source/python/pyproblem.pxi":181
 *     def _get_initial_time_step(self):
 *         return self._problem.getInitialTimeStep()
 *     def _set_initial_time_step(self, initial_time_step):             # <<<<<<<<<<<<<<
 *             self._problem.setInitialTimeStep(initial_time_step)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6_agros_11__Problem___53_set_initial_time_step(PyObject *__pyx_v_self, PyObject *__pyx_v_initial_time_step); /*proto*/
static PyObject *__pyx_pw_6_agros_11__Problem___53_set_initial_time_step(PyObject *__pyx_v_self, PyObject *__pyx_v_initial_time_step) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_set_initial_time_step (wrapper)", 0);
  __pyx_r = __pyx_pf_6_agros_11__Problem___52_set_initial_time_step(((struct __pyx_obj_6_agros___Problem__ *)__pyx_v_self), ((PyObject *)__pyx_v_initial_time_step));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6_agros_11__Problem___52_set_initial_time_step(struct __pyx_obj_6_agros___Problem__ *__pyx_v_self, PyObject *__pyx_v_initial_time_step) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_set_initial_time_step", 0);

  /* "../resources_source/python/pyproblem.pxi":182
 *         return self._problem.getInitialTimeStep()
 *     def _set_initial_time_step(self, initial_time_step):
 *             self._problem.setInitialTimeStep(initial_time_step)             # <<<<<<<<<<<<<<
 * 
 *     # time callback
 */
  __pyx_t_1 = __pyx_PyFloat_AsDouble(__pyx_v_initial_time_step); if (unlikely((__pyx_t_1 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 182, __pyx_L1_error)
  try {
    __pyx_v_self->_problem->setInitialTimeStep(__pyx_t_1);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 182, __pyx_L1_error)
  }

  /* "../resources_source/python/pyproblem.pxi":181
 *     def _get_initial_time_step(self):
 *         return self._problem.getInitialTimeStep()
 *     def _set_initial_time_step(self, initial_time_step):             # <<<<<<<<<<<<<<
 *             self._problem.setInitialTimeStep(initial_time_step)
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("_agros.__Problem__._set_initial_time_step", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../resources_source/python/pyproblem.pxi":193
 *     """
 * 
 *     def get_coupling_type(self, source_field, target_field):             # <<<<<<<<<<<<<<
 *         """Return type of coupling.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6_agros_11__Problem___55get_coupling_type(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6_agros_11__Problem___54get_coupling_type[] = "Return type of coupling.\n\n        get_coupling_type(source_field, target_field)\n\n        Keyword arguments:\n        source_field -- source field id\n        target_field -- target field id\n        ";
static PyObject *__pyx_pw_6_agros_11__Problem___55get_coupling_type(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_source_field = 0;
  PyObject *__pyx_v_target_field = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_coupling_type (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_source_field,&__pyx_n_s_target_field,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_source_field)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_target_field)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("get_coupling_type", 1, 2, 2, 1); __PYX_ERR(0, 193, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "get_coupling_type") < 0)) __PYX_ERR(0, 193, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_source_field = values[0];
    __pyx_v_target_field = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("get_coupling_type", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 193, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("_agros.__Problem__.get_coupling_type", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6_agros_11__Problem___54get_coupling_type(((struct __pyx_obj_6_agros___Problem__ *)__pyx_v_self), __pyx_v_source_field, __pyx_v_target_field);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6_agros_11__Problem___54get_coupling_type(struct __pyx_obj_6_agros___Problem__ *__pyx_v_self, PyObject *__pyx_v_source_field, PyObject *__pyx_v_target_field) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  std::string __pyx_t_4;
  std::string __pyx_t_5;
  std::string __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_coupling_type", 0);

  /* "../resources_source/python/pyproblem.pxi":202
 *         target_field -- target field id
 *         """
 *         return self._problem.getCouplingType(source_field.encode(), target_field.encode()).decode()             # <<<<<<<<<<<<<<
 * 
 *     def set_coupling_type(self, source_field, target_field, type):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_source_field, __pyx_n_s_encode); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 202, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 202, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = __pyx_convert_string_from_py_std__in_string(__pyx_t_1); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 202, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_target_field, __pyx_n_s_encode); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 202, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 202, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_5 = __pyx_convert_string_from_py_std__in_string(__pyx_t_1); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 202, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  try {
    __pyx_t_6 = __pyx_v_self->_problem->getCouplingType(__pyx_t_4, __pyx_t_5);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 202, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_decode_cpp_string(__pyx_t_6, 0, PY_SSIZE_T_MAX, NULL, NULL, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 202, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../resources_source/python/pyproblem.pxi":193
 *     """
 * 
 *     def get_coupling_type(self, source_field, target_field):             # <<<<<<<<<<<<<<
 *         """Return type of coupling.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("_agros.__Problem__.get_coupling_type", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../resources_source/python/pyproblem.pxi":204
 *         return self._problem.getCouplingType(source_field.encode(), target_field.encode()).decode()
 * 
 *     def set_coupling_type(self, source_field, target_field, type):             # <<<<<<<<<<<<<<
 *         """Set type of coupling.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6_agros_11__Problem___57set_coupling_type(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6_agros_11__Problem___56set_coupling_type[] = "Set type of coupling.\n\n        set_coupling_type(source_field, target_field, type)\n\n        Keyword arguments:\n        source_field -- source field id\n        target_field -- target field id\n        type -- coupling type\n        ";
static PyObject *__pyx_pw_6_agros_11__Problem___57set_coupling_type(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_source_field = 0;
  PyObject *__pyx_v_target_field = 0;
  PyObject *__pyx_v_type = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_coupling_type (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_source_field,&__pyx_n_s_target_field,&__pyx_n_s_type,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_source_field)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_target_field)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("set_coupling_type", 1, 3, 3, 1); __PYX_ERR(0, 204, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_type)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("set_coupling_type", 1, 3, 3, 2); __PYX_ERR(0, 204, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "set_coupling_type") < 0)) __PYX_ERR(0, 204, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_source_field = values[0];
    __pyx_v_target_field = values[1];
    __pyx_v_type = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("set_coupling_type", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 204, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("_agros.__Problem__.set_coupling_type", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6_agros_11__Problem___56set_coupling_type(((struct __pyx_obj_6_agros___Problem__ *)__pyx_v_self), __pyx_v_source_field, __pyx_v_target_field, __pyx_v_type);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6_agros_11__Problem___56set_coupling_type(struct __pyx_obj_6_agros___Problem__ *__pyx_v_self, PyObject *__pyx_v_source_field, PyObject *__pyx_v_target_field, PyObject *__pyx_v_type) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  std::string __pyx_t_4;
  std::string __pyx_t_5;
  std::string __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("set_coupling_type", 0);

  /* "../resources_source/python/pyproblem.pxi":214
 *         type -- coupling type
 *         """
 *         self._problem.setCouplingType(source_field.encode(), target_field.encode(), type.encode())             # <<<<<<<<<<<<<<
 * 
 *     def add_study(self, type):
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_source_field, __pyx_n_s_encode); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 214, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 214, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = __pyx_convert_string_from_py_std__in_string(__pyx_t_1); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 214, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_target_field, __pyx_n_s_encode); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 214, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 214, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_5 = __pyx_convert_string_from_py_std__in_string(__pyx_t_1); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 214, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_type, __pyx_n_s_encode); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 214, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 214, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_6 = __pyx_convert_string_from_py_std__in_string(__pyx_t_1); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 214, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  try {
    __pyx_v_self->_problem->setCouplingType(__pyx_t_4, __pyx_t_5, __pyx_t_6);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 214, __pyx_L1_error)
  }

  /* "../resources_source/python/pyproblem.pxi":204
 *         return self._problem.getCouplingType(source_field.encode(), target_field.encode()).decode()
 * 
 *     def set_coupling_type(self, source_field, target_field, type):             # <<<<<<<<<<<<<<
 *         """Set type of coupling.
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("_agros.__Problem__.set_coupling_type", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../resources_source/python/pyproblem.pxi":216
 *         self._problem.setCouplingType(source_field.encode(), target_field.encode(), type.encode())
 * 
 *     def add_study(self, type):             # <<<<<<<<<<<<<<
 *         """Add new Study to Problem.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6_agros_11__Problem___59add_study(PyObject *__pyx_v_self, PyObject *__pyx_v_type); /*proto*/
static char __pyx_doc_6_agros_11__Problem___58add_study[] = "Add new Study to Problem.\n\n        add_study(type)\n\n        Keyword arguments:\n        type -- type keyword\n        ";
static PyObject *__pyx_pw_6_agros_11__Problem___59add_study(PyObject *__pyx_v_self, PyObject *__pyx_v_type) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("add_study (wrapper)", 0);
  __pyx_r = __pyx_pf_6_agros_11__Problem___58add_study(((struct __pyx_obj_6_agros___Problem__ *)__pyx_v_self), ((PyObject *)__pyx_v_type));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6_agros_11__Problem___58add_study(CYTHON_UNUSED struct __pyx_obj_6_agros___Problem__ *__pyx_v_self, PyObject *__pyx_v_type) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("add_study", 0);

  /* "../resources_source/python/pyproblem.pxi":225
 *         """
 * 
 *         if (type == "bayesopt"):             # <<<<<<<<<<<<<<
 *             return __StudyBayesOpt__()
 *         elif (type == "nlopt"):
 */
  __pyx_t_1 = (__Pyx_PyString_Equals(__pyx_v_type, __pyx_n_s_bayesopt, Py_EQ)); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 225, __pyx_L1_error)
  if (__pyx_t_1) {

    /* "../resources_source/python/pyproblem.pxi":226
 * 
 *         if (type == "bayesopt"):
 *             return __StudyBayesOpt__()             # <<<<<<<<<<<<<<
 *         elif (type == "nlopt"):
 *             return __StudyNLopt__()
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_6_agros___StudyBayesOpt__)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 226, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;

    /* "../resources_source/python/pyproblem.pxi":225
 *         """
 * 
 *         if (type == "bayesopt"):             # <<<<<<<<<<<<<<
 *             return __StudyBayesOpt__()
 *         elif (type == "nlopt"):
 */
  }

  /* "../resources_source/python/pyproblem.pxi":227
 *         if (type == "bayesopt"):
 *             return __StudyBayesOpt__()
 *         elif (type == "nlopt"):             # <<<<<<<<<<<<<<
 *             return __StudyNLopt__()
 *         elif (type == "nsga2"):
 */
  __pyx_t_1 = (__Pyx_PyString_Equals(__pyx_v_type, __pyx_n_s_nlopt, Py_EQ)); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 227, __pyx_L1_error)
  if (__pyx_t_1) {

    /* "../resources_source/python/pyproblem.pxi":228
 *             return __StudyBayesOpt__()
 *         elif (type == "nlopt"):
 *             return __StudyNLopt__()             # <<<<<<<<<<<<<<
 *         elif (type == "nsga2"):
 *             return __StudyNSGA2__()
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_6_agros___StudyNLopt__)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 228, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;

    /* "../resources_source/python/pyproblem.pxi":227
 *         if (type == "bayesopt"):
 *             return __StudyBayesOpt__()
 *         elif (type == "nlopt"):             # <<<<<<<<<<<<<<
 *             return __StudyNLopt__()
 *         elif (type == "nsga2"):
 */
  }

  /* "../resources_source/python/pyproblem.pxi":229
 *         elif (type == "nlopt"):
 *             return __StudyNLopt__()
 *         elif (type == "nsga2"):             # <<<<<<<<<<<<<<
 *             return __StudyNSGA2__()
 *         elif (type == "sweep"):
 */
  __pyx_t_1 = (__Pyx_PyString_Equals(__pyx_v_type, __pyx_n_s_nsga2, Py_EQ)); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 229, __pyx_L1_error)
  if (__pyx_t_1) {

    /* "../resources_source/python/pyproblem.pxi":230
 *             return __StudyNLopt__()
 *         elif (type == "nsga2"):
 *             return __StudyNSGA2__()             # <<<<<<<<<<<<<<
 *         elif (type == "sweep"):
 *             return __StudySweep__()
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_6_agros___StudyNSGA2__)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 230, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;

    /* "../resources_source/python/pyproblem.pxi":229
 *         elif (type == "nlopt"):
 *             return __StudyNLopt__()
 *         elif (type == "nsga2"):             # <<<<<<<<<<<<<<
 *             return __StudyNSGA2__()
 *         elif (type == "sweep"):
 */
  }

  /* "../resources_source/python/pyproblem.pxi":231
 *         elif (type == "nsga2"):
 *             return __StudyNSGA2__()
 *         elif (type == "sweep"):             # <<<<<<<<<<<<<<
 *             return __StudySweep__()
 * 
 */
  __pyx_t_1 = (__Pyx_PyString_Equals(__pyx_v_type, __pyx_n_s_sweep, Py_EQ)); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 231, __pyx_L1_error)
  if (__pyx_t_1) {

    /* "../resources_source/python/pyproblem.pxi":232
 *             return __StudyNSGA2__()
 *         elif (type == "sweep"):
 *             return __StudySweep__()             # <<<<<<<<<<<<<<
 * 
 *         raise TypeError("Study type is not supported.")
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_6_agros___StudySweep__)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 232, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;

    /* "../resources_source/python/pyproblem.pxi":231
 *         elif (type == "nsga2"):
 *             return __StudyNSGA2__()
 *         elif (type == "sweep"):             # <<<<<<<<<<<<<<
 *             return __StudySweep__()
 * 
 */
  }

  /* "../resources_source/python/pyproblem.pxi":234
 *             return __StudySweep__()
 * 
 *         raise TypeError("Study type is not supported.")             # <<<<<<<<<<<<<<
 * 
 *     def study(self, index):
 */
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__33, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 234, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_Raise(__pyx_t_2, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __PYX_ERR(0, 234, __pyx_L1_error)

  /* "../resources_source/python/pyproblem.pxi":216
 *         self._problem.setCouplingType(source_field.encode(), target_field.encode(), type.encode())
 * 
 *     def add_study(self, type):             # <<<<<<<<<<<<<<
 *         """Add new Study to Problem.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("_agros.__Problem__.add_study", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../resources_source/python/pyproblem.pxi":236
 *         raise TypeError("Study type is not supported.")
 * 
 *     def study(self, index):             # <<<<<<<<<<<<<<
 *         """get Study by index.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6_agros_11__Problem___61study(PyObject *__pyx_v_self, PyObject *__pyx_v_index); /*proto*/
static char __pyx_doc_6_agros_11__Problem___60study[] = "get Study by index.\n\n        study(index)\n\n        Keyword arguments:\n        index -- index\n        ";
static PyObject *__pyx_pw_6_agros_11__Problem___61study(PyObject *__pyx_v_self, PyObject *__pyx_v_index) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("study (wrapper)", 0);
  __pyx_r = __pyx_pf_6_agros_11__Problem___60study(((struct __pyx_obj_6_agros___Problem__ *)__pyx_v_self), ((PyObject *)__pyx_v_index));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6_agros_11__Problem___60study(struct __pyx_obj_6_agros___Problem__ *__pyx_v_self, PyObject *__pyx_v_index) {
  PyObject *__pyx_v_type = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  std::string __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("study", 0);

  /* "../resources_source/python/pyproblem.pxi":245
 *         """
 * 
 *         type = self._problem.typeOfStudyAtIndex(index).decode()             # <<<<<<<<<<<<<<
 * 
 *         if (type == "bayesopt"):
 */
  __pyx_t_1 = __Pyx_PyInt_As_int(__pyx_v_index); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 245, __pyx_L1_error)
  try {
    __pyx_t_2 = __pyx_v_self->_problem->typeOfStudyAtIndex(__pyx_t_1);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 245, __pyx_L1_error)
  }
  __pyx_t_3 = __Pyx_decode_cpp_string(__pyx_t_2, 0, PY_SSIZE_T_MAX, NULL, NULL, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 245, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_v_type = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "../resources_source/python/pyproblem.pxi":247
 *         type = self._problem.typeOfStudyAtIndex(index).decode()
 * 
 *         if (type == "bayesopt"):             # <<<<<<<<<<<<<<
 *             return __StudyBayesOpt__(index)
 *         elif (type == "nlopt"):
 */
  __pyx_t_4 = (__Pyx_PyString_Equals(__pyx_v_type, __pyx_n_s_bayesopt, Py_EQ)); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(0, 247, __pyx_L1_error)
  if (__pyx_t_4) {

    /* "../resources_source/python/pyproblem.pxi":248
 * 
 *         if (type == "bayesopt"):
 *             return __StudyBayesOpt__(index)             # <<<<<<<<<<<<<<
 *         elif (type == "nlopt"):
 *             return __StudyNLopt__(index)
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_3 = __Pyx_PyObject_CallOneArg(((PyObject *)__pyx_ptype_6_agros___StudyBayesOpt__), __pyx_v_index); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 248, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;

    /* "../resources_source/python/pyproblem.pxi":247
 *         type = self._problem.typeOfStudyAtIndex(index).decode()
 * 
 *         if (type == "bayesopt"):             # <<<<<<<<<<<<<<
 *             return __StudyBayesOpt__(index)
 *         elif (type == "nlopt"):
 */
  }

  /* "../resources_source/python/pyproblem.pxi":249
 *         if (type == "bayesopt"):
 *             return __StudyBayesOpt__(index)
 *         elif (type == "nlopt"):             # <<<<<<<<<<<<<<
 *             return __StudyNLopt__(index)
 *         elif (type == "nsga2"):
 */
  __pyx_t_4 = (__Pyx_PyString_Equals(__pyx_v_type, __pyx_n_s_nlopt, Py_EQ)); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(0, 249, __pyx_L1_error)
  if (__pyx_t_4) {

    /* "../resources_source/python/pyproblem.pxi":250
 *             return __StudyBayesOpt__(index)
 *         elif (type == "nlopt"):
 *             return __StudyNLopt__(index)             # <<<<<<<<<<<<<<
 *         elif (type == "nsga2"):
 *             return __StudyNSGA2__(index)
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_3 = __Pyx_PyObject_CallOneArg(((PyObject *)__pyx_ptype_6_agros___StudyNLopt__), __pyx_v_index); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 250, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;

    /* "../resources_source/python/pyproblem.pxi":249
 *         if (type == "bayesopt"):
 *             return __StudyBayesOpt__(index)
 *         elif (type == "nlopt"):             # <<<<<<<<<<<<<<
 *             return __StudyNLopt__(index)
 *         elif (type == "nsga2"):
 */
  }

  /* "../resources_source/python/pyproblem.pxi":251
 *         elif (type == "nlopt"):
 *             return __StudyNLopt__(index)
 *         elif (type == "nsga2"):             # <<<<<<<<<<<<<<
 *             return __StudyNSGA2__(index)
 *         elif (type == "sweep"):
 */
  __pyx_t_4 = (__Pyx_PyString_Equals(__pyx_v_type, __pyx_n_s_nsga2, Py_EQ)); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(0, 251, __pyx_L1_error)
  if (__pyx_t_4) {

    /* "../resources_source/python/pyproblem.pxi":252
 *             return __StudyNLopt__(index)
 *         elif (type == "nsga2"):
 *             return __StudyNSGA2__(index)             # <<<<<<<<<<<<<<
 *         elif (type == "sweep"):
 *             return __StudySweep__(index)
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_3 = __Pyx_PyObject_CallOneArg(((PyObject *)__pyx_ptype_6_agros___StudyNSGA2__), __pyx_v_index); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 252, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;

    /* "../resources_source/python/pyproblem.pxi":251
 *         elif (type == "nlopt"):
 *             return __StudyNLopt__(index)
 *         elif (type == "nsga2"):             # <<<<<<<<<<<<<<
 *             return __StudyNSGA2__(index)
 *         elif (type == "sweep"):
 */
  }

  /* "../resources_source/python/pyproblem.pxi":253
 *         elif (type == "nsga2"):
 *             return __StudyNSGA2__(index)
 *         elif (type == "sweep"):             # <<<<<<<<<<<<<<
 *             return __StudySweep__(index)
 * 
 */
  __pyx_t_4 = (__Pyx_PyString_Equals(__pyx_v_type, __pyx_n_s_sweep, Py_EQ)); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(0, 253, __pyx_L1_error)
  if (__pyx_t_4) {

    /* "../resources_source/python/pyproblem.pxi":254
 *             return __StudyNSGA2__(index)
 *         elif (type == "sweep"):
 *             return __StudySweep__(index)             # <<<<<<<<<<<<<<
 * 
 *         raise TypeError("Study type is not supported.")
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_3 = __Pyx_PyObject_CallOneArg(((PyObject *)__pyx_ptype_6_agros___StudySweep__), __pyx_v_index); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 254, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;

    /* "../resources_source/python/pyproblem.pxi":253
 *         elif (type == "nsga2"):
 *             return __StudyNSGA2__(index)
 *         elif (type == "sweep"):             # <<<<<<<<<<<<<<
 *             return __StudySweep__(index)
 * 
 */
  }

  /* "../resources_source/python/pyproblem.pxi":256
 *             return __StudySweep__(index)
 * 
 *         raise TypeError("Study type is not supported.")             # <<<<<<<<<<<<<<
 * 
 *     def load(self, fn):
 */
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__33, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 256, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_Raise(__pyx_t_3, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __PYX_ERR(0, 256, __pyx_L1_error)

  /* "../resources_source/python/pyproblem.pxi":236
 *         raise TypeError("Study type is not supported.")
 * 
 *     def study(self, index):             # <<<<<<<<<<<<<<
 *         """get Study by index.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("_agros.__Problem__.study", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_type);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../resources_source/python/pyproblem.pxi":258
 *         raise TypeError("Study type is not supported.")
 * 
 *     def load(self, fn):             # <<<<<<<<<<<<<<
 *         """Load Problem.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6_agros_11__Problem___63load(PyObject *__pyx_v_self, PyObject *__pyx_v_fn); /*proto*/
static char __pyx_doc_6_agros_11__Problem___62load[] = "Load Problem.\n\n        load(fn)\n\n        Keyword arguments:\n        fn -- filename\n        ";
static PyObject *__pyx_pw_6_agros_11__Problem___63load(PyObject *__pyx_v_self, PyObject *__pyx_v_fn) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("load (wrapper)", 0);
  __pyx_r = __pyx_pf_6_agros_11__Problem___62load(((struct __pyx_obj_6_agros___Problem__ *)__pyx_v_self), ((PyObject *)__pyx_v_fn));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6_agros_11__Problem___62load(struct __pyx_obj_6_agros___Problem__ *__pyx_v_self, PyObject *__pyx_v_fn) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  std::string __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("load", 0);

  /* "../resources_source/python/pyproblem.pxi":267
 *         """
 * 
 *         self._problem.load(fn.encode())             # <<<<<<<<<<<<<<
 * 
 *     def save(self, fn):
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_fn, __pyx_n_s_encode); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 267, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 267, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = __pyx_convert_string_from_py_std__in_string(__pyx_t_1); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 267, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  try {
    __pyx_v_self->_problem->load(__pyx_t_4);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 267, __pyx_L1_error)
  }

  /* "../resources_source/python/pyproblem.pxi":258
 *         raise TypeError("Study type is not supported.")
 * 
 *     def load(self, fn):             # <<<<<<<<<<<<<<
 *         """Load Problem.
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("_agros.__Problem__.load", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../resources_source/python/pyproblem.pxi":269
 *         self._problem.load(fn.encode())
 * 
 *     def save(self, fn):             # <<<<<<<<<<<<<<
 *         """Save Problem.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6_agros_11__Problem___65save(PyObject *__pyx_v_self, PyObject *__pyx_v_fn); /*proto*/
static char __pyx_doc_6_agros_11__Problem___64save[] = "Save Problem.\n\n        save(fn)\n\n        Keyword arguments:\n        fn -- filename\n        ";
static PyObject *__pyx_pw_6_agros_11__Problem___65save(PyObject *__pyx_v_self, PyObject *__pyx_v_fn) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("save (wrapper)", 0);
  __pyx_r = __pyx_pf_6_agros_11__Problem___64save(((struct __pyx_obj_6_agros___Problem__ *)__pyx_v_self), ((PyObject *)__pyx_v_fn));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6_agros_11__Problem___64save(struct __pyx_obj_6_agros___Problem__ *__pyx_v_self, PyObject *__pyx_v_fn) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  std::string __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("save", 0);

  /* "../resources_source/python/pyproblem.pxi":278
 *         """
 * 
 *         self._problem.save(fn.encode())             # <<<<<<<<<<<<<<
 * 
 * __problem__ = __Problem__()
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_fn, __pyx_n_s_encode); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 278, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 278, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = __pyx_convert_string_from_py_std__in_string(__pyx_t_1); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 278, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  try {
    __pyx_v_self->_problem->save(__pyx_t_4);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 278, __pyx_L1_error)
  }

  /* "../resources_source/python/pyproblem.pxi":269
 *         self._problem.load(fn.encode())
 * 
 *     def save(self, fn):             # <<<<<<<<<<<<<<
 *         """Save Problem.
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("_agros.__Problem__.save", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_6_agros_11__Problem___67__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_6_agros_11__Problem___67__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6_agros_11__Problem___66__reduce_cython__(((struct __pyx_obj_6_agros___Problem__ *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6_agros_11__Problem___66__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_6_agros___Problem__ *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__34, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(2, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("_agros.__Problem__.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw_6_agros_11__Problem___69__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_6_agros_11__Problem___69__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6_agros_11__Problem___68__setstate_cython__(((struct __pyx_obj_6_agros___Problem__ *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6_agros_11__Problem___68__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_6_agros___Problem__ *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__35, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(2, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("_agros.__Problem__.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../resources_source/python/pyproblem.pxi":281
 * 
 * __problem__ = __Problem__()
 * def problem(clear = False):             # <<<<<<<<<<<<<<
 *     if (clear):
 *         __problem__.clear()
 */

/* Python wrapper */
static PyObject *__pyx_pw_6_agros_7problem(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_6_agros_7problem = {"problem", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6_agros_7problem, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_6_agros_7problem(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_clear = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("problem (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_clear,0};
    PyObject* values[1] = {0};
    values[0] = ((PyObject *)Py_False);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_clear);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "problem") < 0)) __PYX_ERR(0, 281, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_clear = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("problem", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 281, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("_agros.problem", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6_agros_6problem(__pyx_self, __pyx_v_clear);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6_agros_6problem(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_clear) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("problem", 0);

  /* "../resources_source/python/pyproblem.pxi":282
 * __problem__ = __Problem__()
 * def problem(clear = False):
 *     if (clear):             # <<<<<<<<<<<<<<
 *         __problem__.clear()
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_clear); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 282, __pyx_L1_error)
  if (__pyx_t_1) {

    /* "../resources_source/python/pyproblem.pxi":283
 * def problem(clear = False):
 *     if (clear):
 *         __problem__.clear()             # <<<<<<<<<<<<<<
 * 
 *     return __problem__
 */
    __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_problem); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 283, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_clear); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 283, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_3)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_3);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    __pyx_t_2 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 283, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "../resources_source/python/pyproblem.pxi":282
 * __problem__ = __Problem__()
 * def problem(clear = False):
 *     if (clear):             # <<<<<<<<<<<<<<
 *         __problem__.clear()
 * 
 */
  }

  /* "../resources_source/python/pyproblem.pxi":285
 *         __problem__.clear()
 * 
 *     return __problem__             # <<<<<<<<<<<<<<
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_problem); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 285, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "../resources_source/python/pyproblem.pxi":281
 * 
 * __problem__ = __Problem__()
 * def problem(clear = False):             # <<<<<<<<<<<<<<
 *     if (clear):
 *         __problem__.clear()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("_agros.problem", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../resources_source/python/pycomputation.pxi":37
 *     cdef object results
 * 
 *     def __cinit__(self, new_computation=True, computation = None):             # <<<<<<<<<<<<<<
 *         if not computation:
 *             self._computation = new PyComputation(<bool> new_computation)
 */

/* Python wrapper */
static int __pyx_pw_6_agros_15__Computation___1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_6_agros_15__Computation___1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_new_computation = 0;
  PyObject *__pyx_v_computation = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_new_computation,&__pyx_n_s_computation,0};
    PyObject* values[2] = {0,0};
    values[0] = ((PyObject *)Py_True);
    values[1] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_new_computation);
          if (value) { values[0] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_computation);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) __PYX_ERR(5, 37, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_new_computation = values[0];
    __pyx_v_computation = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 0, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(5, 37, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("_agros.__Computation__.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6_agros_15__Computation_____cinit__(((struct __pyx_obj_6_agros___Computation__ *)__pyx_v_self), __pyx_v_new_computation, __pyx_v_computation);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6_agros_15__Computation_____cinit__(struct __pyx_obj_6_agros___Computation__ *__pyx_v_self, PyObject *__pyx_v_new_computation, PyObject *__pyx_v_computation) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  bool __pyx_t_3;
  PyComputation *__pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  std::string __pyx_t_8;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  int __pyx_t_11;
  PyObject *__pyx_t_12 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "../resources_source/python/pycomputation.pxi":38
 * 
 *     def __cinit__(self, new_computation=True, computation = None):
 *         if not computation:             # <<<<<<<<<<<<<<
 *             self._computation = new PyComputation(<bool> new_computation)
 *         elif isinstance(computation, str):
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_computation); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(5, 38, __pyx_L1_error)
  __pyx_t_2 = ((!__pyx_t_1) != 0);
  if (__pyx_t_2) {

    /* "../resources_source/python/pycomputation.pxi":39
 *     def __cinit__(self, new_computation=True, computation = None):
 *         if not computation:
 *             self._computation = new PyComputation(<bool> new_computation)             # <<<<<<<<<<<<<<
 *         elif isinstance(computation, str):
 *             self._computation = new PyComputation(<string> computation.encode())
 */
    __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_v_new_computation); if (unlikely((__pyx_t_3 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(5, 39, __pyx_L1_error)
    __pyx_t_4 = new PyComputation(((bool)__pyx_t_3)); 
    __pyx_v_self->_computation = __pyx_t_4;

    /* "../resources_source/python/pycomputation.pxi":38
 * 
 *     def __cinit__(self, new_computation=True, computation = None):
 *         if not computation:             # <<<<<<<<<<<<<<
 *             self._computation = new PyComputation(<bool> new_computation)
 *         elif isinstance(computation, str):
 */
    goto __pyx_L3;
  }

  /* "../resources_source/python/pycomputation.pxi":40
 *         if not computation:
 *             self._computation = new PyComputation(<bool> new_computation)
 *         elif isinstance(computation, str):             # <<<<<<<<<<<<<<
 *             self._computation = new PyComputation(<string> computation.encode())
 *         else:
 */
  __pyx_t_2 = PyString_Check(__pyx_v_computation); 
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (likely(__pyx_t_1)) {

    /* "../resources_source/python/pycomputation.pxi":41
 *             self._computation = new PyComputation(<bool> new_computation)
 *         elif isinstance(computation, str):
 *             self._computation = new PyComputation(<string> computation.encode())             # <<<<<<<<<<<<<<
 *         else:
 *             raise TypeError("Parameter type is not supported.")
 */
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_computation, __pyx_n_s_encode); if (unlikely(!__pyx_t_6)) __PYX_ERR(5, 41, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_7 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_6))) {
      __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_6);
      if (likely(__pyx_t_7)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
        __Pyx_INCREF(__pyx_t_7);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_6, function);
      }
    }
    __pyx_t_5 = (__pyx_t_7) ? __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_t_7) : __Pyx_PyObject_CallNoArg(__pyx_t_6);
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    if (unlikely(!__pyx_t_5)) __PYX_ERR(5, 41, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_8 = __pyx_convert_string_from_py_std__in_string(__pyx_t_5); if (unlikely(PyErr_Occurred())) __PYX_ERR(5, 41, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    try {
      __pyx_t_4 = new PyComputation(((std::string)__pyx_t_8));
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(5, 41, __pyx_L1_error)
    }
    __pyx_v_self->_computation = __pyx_t_4;

    /* "../resources_source/python/pycomputation.pxi":40
 *         if not computation:
 *             self._computation = new PyComputation(<bool> new_computation)
 *         elif isinstance(computation, str):             # <<<<<<<<<<<<<<
 *             self._computation = new PyComputation(<string> computation.encode())
 *         else:
 */
    goto __pyx_L3;
  }

  /* "../resources_source/python/pycomputation.pxi":43
 *             self._computation = new PyComputation(<string> computation.encode())
 *         else:
 *             raise TypeError("Parameter type is not supported.")             # <<<<<<<<<<<<<<
 * 
 *         self._solutions = dict()
 */
  /*else*/ {
    __pyx_t_5 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__36, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(5, 43, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_Raise(__pyx_t_5, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __PYX_ERR(5, 43, __pyx_L1_error)
  }
  __pyx_L3:;

  /* "../resources_source/python/pycomputation.pxi":45
 *             raise TypeError("Parameter type is not supported.")
 * 
 *         self._solutions = dict()             # <<<<<<<<<<<<<<
 *         self.parameters = __Parameters__(self.__get_parameters__,
 *                                          self.__unauthorized__, False)
 */
  __pyx_t_5 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_5)) __PYX_ERR(5, 45, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_5);
  __Pyx_GOTREF(__pyx_v_self->_solutions);
  __Pyx_DECREF(__pyx_v_self->_solutions);
  __pyx_v_self->_solutions = __pyx_t_5;
  __pyx_t_5 = 0;

  /* "../resources_source/python/pycomputation.pxi":46
 * 
 *         self._solutions = dict()
 *         self.parameters = __Parameters__(self.__get_parameters__,             # <<<<<<<<<<<<<<
 *                                          self.__unauthorized__, False)
 *         self.results = __Parameters__(self.__get_results__,
 */
  __Pyx_GetModuleGlobalName(__pyx_t_6, __pyx_n_s_Parameters); if (unlikely(!__pyx_t_6)) __PYX_ERR(5, 46, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_7 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_get_parameters_2); if (unlikely(!__pyx_t_7)) __PYX_ERR(5, 46, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);

  /* "../resources_source/python/pycomputation.pxi":47
 *         self._solutions = dict()
 *         self.parameters = __Parameters__(self.__get_parameters__,
 *                                          self.__unauthorized__, False)             # <<<<<<<<<<<<<<
 *         self.results = __Parameters__(self.__get_results__,
 *                                       self.__set_results__, False)
 */
  __pyx_t_9 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_unauthorized); if (unlikely(!__pyx_t_9)) __PYX_ERR(5, 47, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __pyx_t_10 = NULL;
  __pyx_t_11 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_6))) {
    __pyx_t_10 = PyMethod_GET_SELF(__pyx_t_6);
    if (likely(__pyx_t_10)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
      __Pyx_INCREF(__pyx_t_10);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_6, function);
      __pyx_t_11 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_6)) {
    PyObject *__pyx_temp[4] = {__pyx_t_10, __pyx_t_7, __pyx_t_9, Py_False};
    __pyx_t_5 = __Pyx_PyFunction_FastCall(__pyx_t_6, __pyx_temp+1-__pyx_t_11, 3+__pyx_t_11); if (unlikely(!__pyx_t_5)) __PYX_ERR(5, 46, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_6)) {
    PyObject *__pyx_temp[4] = {__pyx_t_10, __pyx_t_7, __pyx_t_9, Py_False};
    __pyx_t_5 = __Pyx_PyCFunction_FastCall(__pyx_t_6, __pyx_temp+1-__pyx_t_11, 3+__pyx_t_11); if (unlikely(!__pyx_t_5)) __PYX_ERR(5, 46, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  } else
  #endif
  {
    __pyx_t_12 = PyTuple_New(3+__pyx_t_11); if (unlikely(!__pyx_t_12)) __PYX_ERR(5, 46, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_12);
    if (__pyx_t_10) {
      __Pyx_GIVEREF(__pyx_t_10); PyTuple_SET_ITEM(__pyx_t_12, 0, __pyx_t_10); __pyx_t_10 = NULL;
    }
    __Pyx_GIVEREF(__pyx_t_7);
    PyTuple_SET_ITEM(__pyx_t_12, 0+__pyx_t_11, __pyx_t_7);
    __Pyx_GIVEREF(__pyx_t_9);
    PyTuple_SET_ITEM(__pyx_t_12, 1+__pyx_t_11, __pyx_t_9);
    __Pyx_INCREF(Py_False);
    __Pyx_GIVEREF(Py_False);
    PyTuple_SET_ITEM(__pyx_t_12, 2+__pyx_t_11, Py_False);
    __pyx_t_7 = 0;
    __pyx_t_9 = 0;
    __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_t_12, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(5, 46, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
  }
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

  /* "../resources_source/python/pycomputation.pxi":46
 * 
 *         self._solutions = dict()
 *         self.parameters = __Parameters__(self.__get_parameters__,             # <<<<<<<<<<<<<<
 *                                          self.__unauthorized__, False)
 *         self.results = __Parameters__(self.__get_results__,
 */
  __Pyx_GIVEREF(__pyx_t_5);
  __Pyx_GOTREF(__pyx_v_self->parameters);
  __Pyx_DECREF(__pyx_v_self->parameters);
  __pyx_v_self->parameters = __pyx_t_5;
  __pyx_t_5 = 0;

  /* "../resources_source/python/pycomputation.pxi":48
 *         self.parameters = __Parameters__(self.__get_parameters__,
 *                                          self.__unauthorized__, False)
 *         self.results = __Parameters__(self.__get_results__,             # <<<<<<<<<<<<<<
 *                                       self.__set_results__, False)
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_6, __pyx_n_s_Parameters); if (unlikely(!__pyx_t_6)) __PYX_ERR(5, 48, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_12 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_get_results); if (unlikely(!__pyx_t_12)) __PYX_ERR(5, 48, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_12);

  /* "../resources_source/python/pycomputation.pxi":49
 *                                          self.__unauthorized__, False)
 *         self.results = __Parameters__(self.__get_results__,
 *                                       self.__set_results__, False)             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(self):
 */
  __pyx_t_9 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_set_results); if (unlikely(!__pyx_t_9)) __PYX_ERR(5, 49, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __pyx_t_7 = NULL;
  __pyx_t_11 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_6))) {
    __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_6);
    if (likely(__pyx_t_7)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
      __Pyx_INCREF(__pyx_t_7);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_6, function);
      __pyx_t_11 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_6)) {
    PyObject *__pyx_temp[4] = {__pyx_t_7, __pyx_t_12, __pyx_t_9, Py_False};
    __pyx_t_5 = __Pyx_PyFunction_FastCall(__pyx_t_6, __pyx_temp+1-__pyx_t_11, 3+__pyx_t_11); if (unlikely(!__pyx_t_5)) __PYX_ERR(5, 48, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_6)) {
    PyObject *__pyx_temp[4] = {__pyx_t_7, __pyx_t_12, __pyx_t_9, Py_False};
    __pyx_t_5 = __Pyx_PyCFunction_FastCall(__pyx_t_6, __pyx_temp+1-__pyx_t_11, 3+__pyx_t_11); if (unlikely(!__pyx_t_5)) __PYX_ERR(5, 48, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  } else
  #endif
  {
    __pyx_t_10 = PyTuple_New(3+__pyx_t_11); if (unlikely(!__pyx_t_10)) __PYX_ERR(5, 48, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    if (__pyx_t_7) {
      __Pyx_GIVEREF(__pyx_t_7); PyTuple_SET_ITEM(__pyx_t_10, 0, __pyx_t_7); __pyx_t_7 = NULL;
    }
    __Pyx_GIVEREF(__pyx_t_12);
    PyTuple_SET_ITEM(__pyx_t_10, 0+__pyx_t_11, __pyx_t_12);
    __Pyx_GIVEREF(__pyx_t_9);
    PyTuple_SET_ITEM(__pyx_t_10, 1+__pyx_t_11, __pyx_t_9);
    __Pyx_INCREF(Py_False);
    __Pyx_GIVEREF(Py_False);
    PyTuple_SET_ITEM(__pyx_t_10, 2+__pyx_t_11, Py_False);
    __pyx_t_12 = 0;
    __pyx_t_9 = 0;
    __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_t_10, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(5, 48, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
  }
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

  /* "../resources_source/python/pycomputation.pxi":48
 *         self.parameters = __Parameters__(self.__get_parameters__,
 *                                          self.__unauthorized__, False)
 *         self.results = __Parameters__(self.__get_results__,             # <<<<<<<<<<<<<<
 *                                       self.__set_results__, False)
 * 
 */
  __Pyx_GIVEREF(__pyx_t_5);
  __Pyx_GOTREF(__pyx_v_self->results);
  __Pyx_DECREF(__pyx_v_self->results);
  __pyx_v_self->results = __pyx_t_5;
  __pyx_t_5 = 0;

  /* "../resources_source/python/pycomputation.pxi":37
 *     cdef object results
 * 
 *     def __cinit__(self, new_computation=True, computation = None):             # <<<<<<<<<<<<<<
 *         if not computation:
 *             self._computation = new PyComputation(<bool> new_computation)
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_XDECREF(__pyx_t_12);
  __Pyx_AddTraceback("_agros.__Computation__.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../resources_source/python/pycomputation.pxi":51
 *                                       self.__set_results__, False)
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self._computation
 * 
 */

/* Python wrapper */
static void __pyx_pw_6_agros_15__Computation___3__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_6_agros_15__Computation___3__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_6_agros_15__Computation___2__dealloc__(((struct __pyx_obj_6_agros___Computation__ *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_6_agros_15__Computation___2__dealloc__(struct __pyx_obj_6_agros___Computation__ *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "../resources_source/python/pycomputation.pxi":52
 * 
 *     def __dealloc__(self):
 *         del self._computation             # <<<<<<<<<<<<<<
 * 
 *     def __unauthorized__(self, value = None):
 */
  delete __pyx_v_self->_computation;

  /* "../resources_source/python/pycomputation.pxi":51
 *                                       self.__set_results__, False)
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self._computation
 * 
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "../resources_source/python/pycomputation.pxi":54
 *         del self._computation
 * 
 *     def __unauthorized__(self, value = None):             # <<<<<<<<<<<<<<
 *         raise Exception("Value can not be changed.")
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6_agros_15__Computation___5__unauthorized__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_6_agros_15__Computation___5__unauthorized__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  CYTHON_UNUSED PyObject *__pyx_v_value = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__unauthorized__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_value,0};
    PyObject* values[1] = {0};
    values[0] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_value);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__unauthorized__") < 0)) __PYX_ERR(5, 54, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_value = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__unauthorized__", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(5, 54, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("_agros.__Computation__.__unauthorized__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6_agros_15__Computation___4__unauthorized__(((struct __pyx_obj_6_agros___Computation__ *)__pyx_v_self), __pyx_v_value);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6_agros_15__Computation___4__unauthorized__(CYTHON_UNUSED struct __pyx_obj_6_agros___Computation__ *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_value) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__unauthorized__", 0);

  /* "../resources_source/python/pycomputation.pxi":55
 * 
 *     def __unauthorized__(self, value = None):
 *         raise Exception("Value can not be changed.")             # <<<<<<<<<<<<<<
 * 
 *     def clear(self):
 */
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])), __pyx_tuple__37, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 55, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(5, 55, __pyx_L1_error)

  /* "../resources_source/python/pycomputation.pxi":54
 *         del self._computation
 * 
 *     def __unauthorized__(self, value = None):             # <<<<<<<<<<<<<<
 *         raise Exception("Value can not be changed.")
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("_agros.__Computation__.__unauthorized__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../resources_source/python/pycomputation.pxi":57
 *         raise Exception("Value can not be changed.")
 * 
 *     def clear(self):             # <<<<<<<<<<<<<<
 *         """Clear solution."""
 *         self._computation.clear()
 */

/* Python wrapper */
static PyObject *__pyx_pw_6_agros_15__Computation___7clear(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_6_agros_15__Computation___6clear[] = "Clear solution.";
static PyObject *__pyx_pw_6_agros_15__Computation___7clear(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("clear (wrapper)", 0);
  __pyx_r = __pyx_pf_6_agros_15__Computation___6clear(((struct __pyx_obj_6_agros___Computation__ *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6_agros_15__Computation___6clear(struct __pyx_obj_6_agros___Computation__ *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("clear", 0);

  /* "../resources_source/python/pycomputation.pxi":59
 *     def clear(self):
 *         """Clear solution."""
 *         self._computation.clear()             # <<<<<<<<<<<<<<
 * 
 *     def solve(self):
 */
  try {
    __pyx_v_self->_computation->clear();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(5, 59, __pyx_L1_error)
  }

  /* "../resources_source/python/pycomputation.pxi":57
 *         raise Exception("Value can not be changed.")
 * 
 *     def clear(self):             # <<<<<<<<<<<<<<
 *         """Clear solution."""
 *         self._computation.clear()
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("_agros.__Computation__.clear", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../resources_source/python/pycomputation.pxi":61
 *         self._computation.clear()
 * 
 *     def solve(self):             # <<<<<<<<<<<<<<
 *         """Solve problem."""
 *         self._computation.solve()
 */

/* Python wrapper */
static PyObject *__pyx_pw_6_agros_15__Computation___9solve(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_6_agros_15__Computation___8solve[] = "Solve problem.";
static PyObject *__pyx_pw_6_agros_15__Computation___9solve(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("solve (wrapper)", 0);
  __pyx_r = __pyx_pf_6_agros_15__Computation___8solve(((struct __pyx_obj_6_agros___Computation__ *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6_agros_15__Computation___8solve(struct __pyx_obj_6_agros___Computation__ *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("solve", 0);

  /* "../resources_source/python/pycomputation.pxi":63
 *     def solve(self):
 *         """Solve problem."""
 *         self._computation.solve()             # <<<<<<<<<<<<<<
 * 
 *     def solution(self, field_id):
 */
  try {
    __pyx_v_self->_computation->solve();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(5, 63, __pyx_L1_error)
  }

  /* "../resources_source/python/pycomputation.pxi":61
 *         self._computation.clear()
 * 
 *     def solve(self):             # <<<<<<<<<<<<<<
 *         """Solve problem."""
 *         self._computation.solve()
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("_agros.__Computation__.solve", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../resources_source/python/pycomputation.pxi":65
 *         self._computation.solve()
 * 
 *     def solution(self, field_id):             # <<<<<<<<<<<<<<
 *         """Add new solution to Computation.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6_agros_15__Computation___11solution(PyObject *__pyx_v_self, PyObject *__pyx_v_field_id); /*proto*/
static char __pyx_doc_6_agros_15__Computation___10solution[] = "Add new solution to Computation.\n\n        solution(field_id)\n\n        Keyword arguments:\n        field_id -- field keyword \n        ";
static PyObject *__pyx_pw_6_agros_15__Computation___11solution(PyObject *__pyx_v_self, PyObject *__pyx_v_field_id) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("solution (wrapper)", 0);
  __pyx_r = __pyx_pf_6_agros_15__Computation___10solution(((struct __pyx_obj_6_agros___Computation__ *)__pyx_v_self), ((PyObject *)__pyx_v_field_id));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6_agros_15__Computation___10solution(struct __pyx_obj_6_agros___Computation__ *__pyx_v_self, PyObject *__pyx_v_field_id) {
  struct __pyx_obj_6_agros___Solution__ *__pyx_v_solution = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  std::string __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("solution", 0);

  /* "../resources_source/python/pycomputation.pxi":73
 *         field_id -- field keyword
 *         """
 *         if (not field_id in self._solutions):             # <<<<<<<<<<<<<<
 *             solution = __Solution__()
 *             solution._solution.setComputation(self._computation, field_id.encode())
 */
  __pyx_t_1 = (__Pyx_PySequence_ContainsTF(__pyx_v_field_id, __pyx_v_self->_solutions, Py_NE)); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(5, 73, __pyx_L1_error)
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "../resources_source/python/pycomputation.pxi":74
 *         """
 *         if (not field_id in self._solutions):
 *             solution = __Solution__()             # <<<<<<<<<<<<<<
 *             solution._solution.setComputation(self._computation, field_id.encode())
 *             self._solutions[field_id] = solution
 */
    __pyx_t_3 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_6_agros___Solution__)); if (unlikely(!__pyx_t_3)) __PYX_ERR(5, 74, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_v_solution = ((struct __pyx_obj_6_agros___Solution__ *)__pyx_t_3);
    __pyx_t_3 = 0;

    /* "../resources_source/python/pycomputation.pxi":75
 *         if (not field_id in self._solutions):
 *             solution = __Solution__()
 *             solution._solution.setComputation(self._computation, field_id.encode())             # <<<<<<<<<<<<<<
 *             self._solutions[field_id] = solution
 * 
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_field_id, __pyx_n_s_encode); if (unlikely(!__pyx_t_4)) __PYX_ERR(5, 75, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    __pyx_t_3 = (__pyx_t_5) ? __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_5) : __Pyx_PyObject_CallNoArg(__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(5, 75, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_6 = __pyx_convert_string_from_py_std__in_string(__pyx_t_3); if (unlikely(PyErr_Occurred())) __PYX_ERR(5, 75, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    try {
      __pyx_v_solution->_solution->setComputation(__pyx_v_self->_computation, __pyx_t_6);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(5, 75, __pyx_L1_error)
    }

    /* "../resources_source/python/pycomputation.pxi":76
 *             solution = __Solution__()
 *             solution._solution.setComputation(self._computation, field_id.encode())
 *             self._solutions[field_id] = solution             # <<<<<<<<<<<<<<
 * 
 *         return self._solutions[field_id]
 */
    if (unlikely(PyObject_SetItem(__pyx_v_self->_solutions, __pyx_v_field_id, ((PyObject *)__pyx_v_solution)) < 0)) __PYX_ERR(5, 76, __pyx_L1_error)

    /* "../resources_source/python/pycomputation.pxi":73
 *         field_id -- field keyword
 *         """
 *         if (not field_id in self._solutions):             # <<<<<<<<<<<<<<
 *             solution = __Solution__()
 *             solution._solution.setComputation(self._computation, field_id.encode())
 */
  }

  /* "../resources_source/python/pycomputation.pxi":78
 *             self._solutions[field_id] = solution
 * 
 *         return self._solutions[field_id]             # <<<<<<<<<<<<<<
 * 
 *     def particle_tracing(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_3 = __Pyx_PyObject_GetItem(__pyx_v_self->_solutions, __pyx_v_field_id); if (unlikely(!__pyx_t_3)) __PYX_ERR(5, 78, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "../resources_source/python/pycomputation.pxi":65
 *         self._computation.solve()
 * 
 *     def solution(self, field_id):             # <<<<<<<<<<<<<<
 *         """Add new solution to Computation.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("_agros.__Computation__.solution", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_solution);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../resources_source/python/pycomputation.pxi":80
 *         return self._solutions[field_id]
 * 
 *     def particle_tracing(self):             # <<<<<<<<<<<<<<
 *         """Create and return new object of ParticleTracing class."""
 *         tracing = __ParticleTracing__()
 */

/* Python wrapper */
static PyObject *__pyx_pw_6_agros_15__Computation___13particle_tracing(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_6_agros_15__Computation___12particle_tracing[] = "Create and return new object of ParticleTracing class.";
static PyObject *__pyx_pw_6_agros_15__Computation___13particle_tracing(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("particle_tracing (wrapper)", 0);
  __pyx_r = __pyx_pf_6_agros_15__Computation___12particle_tracing(((struct __pyx_obj_6_agros___Computation__ *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6_agros_15__Computation___12particle_tracing(struct __pyx_obj_6_agros___Computation__ *__pyx_v_self) {
  struct __pyx_obj_6_agros___ParticleTracing__ *__pyx_v_tracing = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("particle_tracing", 0);

  /* "../resources_source/python/pycomputation.pxi":82
 *     def particle_tracing(self):
 *         """Create and return new object of ParticleTracing class."""
 *         tracing = __ParticleTracing__()             # <<<<<<<<<<<<<<
 *         tracing._tracing.setComputation(self._computation)
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_6_agros___ParticleTracing__)); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 82, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_tracing = ((struct __pyx_obj_6_agros___ParticleTracing__ *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "../resources_source/python/pycomputation.pxi":83
 *         """Create and return new object of ParticleTracing class."""
 *         tracing = __ParticleTracing__()
 *         tracing._tracing.setComputation(self._computation)             # <<<<<<<<<<<<<<
 * 
 *         return tracing
 */
  __pyx_v_tracing->_tracing->setComputation(__pyx_v_self->_computation);

  /* "../resources_source/python/pycomputation.pxi":85
 *         tracing._tracing.setComputation(self._computation)
 * 
 *         return tracing             # <<<<<<<<<<<<<<
 * 
 *     def elapsed_time(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_tracing));
  __pyx_r = ((PyObject *)__pyx_v_tracing);
  goto __pyx_L0;

  /* "../resources_source/python/pycomputation.pxi":80
 *         return self._solutions[field_id]
 * 
 *     def particle_tracing(self):             # <<<<<<<<<<<<<<
 *         """Create and return new object of ParticleTracing class."""
 *         tracing = __ParticleTracing__()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("_agros.__Computation__.particle_tracing", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_tracing);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../resources_source/python/pycomputation.pxi":87
 *         return tracing
 * 
 *     def elapsed_time(self):             # <<<<<<<<<<<<<<
 *         """Return elapsed time in seconds."""
 *         return self._computation.timeElapsed()
 */

/* Python wrapper */
static PyObject *__pyx_pw_6_agros_15__Computation___15elapsed_time(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_6_agros_15__Computation___14elapsed_time[] = "Return elapsed time in seconds.";
static PyObject *__pyx_pw_6_agros_15__Computation___15elapsed_time(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("elapsed_time (wrapper)", 0);
  __pyx_r = __pyx_pf_6_agros_15__Computation___14elapsed_time(((struct __pyx_obj_6_agros___Computation__ *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6_agros_15__Computation___14elapsed_time(struct __pyx_obj_6_agros___Computation__ *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("elapsed_time", 0);

  /* "../resources_source/python/pycomputation.pxi":89
 *     def elapsed_time(self):
 *         """Return elapsed time in seconds."""
 *         return self._computation.timeElapsed()             # <<<<<<<<<<<<<<
 * 
 *     def time_steps_length(self):
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = __pyx_v_self->_computation->timeElapsed();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(5, 89, __pyx_L1_error)
  }
  __pyx_t_2 = PyFloat_FromDouble(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(5, 89, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "../resources_source/python/pycomputation.pxi":87
 *         return tracing
 * 
 *     def elapsed_time(self):             # <<<<<<<<<<<<<<
 *         """Return elapsed time in seconds."""
 *         return self._computation.timeElapsed()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("_agros.__Computation__.elapsed_time", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../resources_source/python/pycomputation.pxi":91
 *         return self._computation.timeElapsed()
 * 
 *     def time_steps_length(self):             # <<<<<<<<<<<<<<
 *         """Return a list of time steps length."""
 *         cdef vector[double] steps_vector
 */

/* Python wrapper */
static PyObject *__pyx_pw_6_agros_15__Computation___17time_steps_length(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_6_agros_15__Computation___16time_steps_length[] = "Return a list of time steps length.";
static PyObject *__pyx_pw_6_agros_15__Computation___17time_steps_length(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("time_steps_length (wrapper)", 0);
  __pyx_r = __pyx_pf_6_agros_15__Computation___16time_steps_length(((struct __pyx_obj_6_agros___Computation__ *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6_agros_15__Computation___16time_steps_length(struct __pyx_obj_6_agros___Computation__ *__pyx_v_self) {
  std::vector<double>  __pyx_v_steps_vector;
  PyObject *__pyx_v_steps = NULL;
  std::vector<double> ::size_type __pyx_v_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  std::vector<double> ::size_type __pyx_t_2;
  std::vector<double> ::size_type __pyx_t_3;
  std::vector<double> ::size_type __pyx_t_4;
  int __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("time_steps_length", 0);

  /* "../resources_source/python/pycomputation.pxi":94
 *         """Return a list of time steps length."""
 *         cdef vector[double] steps_vector
 *         self._computation.timeStepsLength(steps_vector)             # <<<<<<<<<<<<<<
 * 
 *         steps = list()
 */
  try {
    __pyx_v_self->_computation->timeStepsLength(__pyx_v_steps_vector);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(5, 94, __pyx_L1_error)
  }

  /* "../resources_source/python/pycomputation.pxi":96
 *         self._computation.timeStepsLength(steps_vector)
 * 
 *         steps = list()             # <<<<<<<<<<<<<<
 *         for i in range(steps_vector.size()):
 *             steps.append(steps_vector[i])
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 96, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_steps = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "../resources_source/python/pycomputation.pxi":97
 * 
 *         steps = list()
 *         for i in range(steps_vector.size()):             # <<<<<<<<<<<<<<
 *             steps.append(steps_vector[i])
 *         return steps
 */
  __pyx_t_2 = __pyx_v_steps_vector.size();
  __pyx_t_3 = __pyx_t_2;
  for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
    __pyx_v_i = __pyx_t_4;

    /* "../resources_source/python/pycomputation.pxi":98
 *         steps = list()
 *         for i in range(steps_vector.size()):
 *             steps.append(steps_vector[i])             # <<<<<<<<<<<<<<
 *         return steps
 * 
 */
    __pyx_t_1 = PyFloat_FromDouble((__pyx_v_steps_vector[__pyx_v_i])); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 98, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_5 = __Pyx_PyList_Append(__pyx_v_steps, __pyx_t_1); if (unlikely(__pyx_t_5 == ((int)-1))) __PYX_ERR(5, 98, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "../resources_source/python/pycomputation.pxi":99
 *         for i in range(steps_vector.size()):
 *             steps.append(steps_vector[i])
 *         return steps             # <<<<<<<<<<<<<<
 * 
 *     def time_steps_total(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_steps);
  __pyx_r = __pyx_v_steps;
  goto __pyx_L0;

  /* "../resources_source/python/pycomputation.pxi":91
 *         return self._computation.timeElapsed()
 * 
 *     def time_steps_length(self):             # <<<<<<<<<<<<<<
 *         """Return a list of time steps length."""
 *         cdef vector[double] steps_vector
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("_agros.__Computation__.time_steps_length", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_steps);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../resources_source/python/pycomputation.pxi":101
 *         return steps
 * 
 *     def time_steps_total(self):             # <<<<<<<<<<<<<<
 *         """Return a list of time steps."""
 *         cdef vector[double] times_vector
 */

/* Python wrapper */
static PyObject *__pyx_pw_6_agros_15__Computation___19time_steps_total(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_6_agros_15__Computation___18time_steps_total[] = "Return a list of time steps.";
static PyObject *__pyx_pw_6_agros_15__Computation___19time_steps_total(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("time_steps_total (wrapper)", 0);
  __pyx_r = __pyx_pf_6_agros_15__Computation___18time_steps_total(((struct __pyx_obj_6_agros___Computation__ *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6_agros_15__Computation___18time_steps_total(struct __pyx_obj_6_agros___Computation__ *__pyx_v_self) {
  std::vector<double>  __pyx_v_times_vector;
  PyObject *__pyx_v_times = NULL;
  std::vector<double> ::size_type __pyx_v_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  std::vector<double> ::size_type __pyx_t_2;
  std::vector<double> ::size_type __pyx_t_3;
  std::vector<double> ::size_type __pyx_t_4;
  int __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("time_steps_total", 0);

  /* "../resources_source/python/pycomputation.pxi":104
 *         """Return a list of time steps."""
 *         cdef vector[double] times_vector
 *         self._computation.timeStepsTimes(times_vector)             # <<<<<<<<<<<<<<
 * 
 *         times = list()
 */
  try {
    __pyx_v_self->_computation->timeStepsTimes(__pyx_v_times_vector);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(5, 104, __pyx_L1_error)
  }

  /* "../resources_source/python/pycomputation.pxi":106
 *         self._computation.timeStepsTimes(times_vector)
 * 
 *         times = list()             # <<<<<<<<<<<<<<
 *         for i in range(times_vector.size()):
 *             times.append(times_vector[i])
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 106, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_times = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "../resources_source/python/pycomputation.pxi":107
 * 
 *         times = list()
 *         for i in range(times_vector.size()):             # <<<<<<<<<<<<<<
 *             times.append(times_vector[i])
 *         return times
 */
  __pyx_t_2 = __pyx_v_times_vector.size();
  __pyx_t_3 = __pyx_t_2;
  for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
    __pyx_v_i = __pyx_t_4;

    /* "../resources_source/python/pycomputation.pxi":108
 *         times = list()
 *         for i in range(times_vector.size()):
 *             times.append(times_vector[i])             # <<<<<<<<<<<<<<
 *         return times
 * 
 */
    __pyx_t_1 = PyFloat_FromDouble((__pyx_v_times_vector[__pyx_v_i])); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 108, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_5 = __Pyx_PyList_Append(__pyx_v_times, __pyx_t_1); if (unlikely(__pyx_t_5 == ((int)-1))) __PYX_ERR(5, 108, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "../resources_source/python/pycomputation.pxi":109
 *         for i in range(times_vector.size()):
 *             times.append(times_vector[i])
 *         return times             # <<<<<<<<<<<<<<
 * 
 *     # results
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_times);
  __pyx_r = __pyx_v_times;
  goto __pyx_L0;

  /* "../resources_source/python/pycomputation.pxi":101
 *         return steps
 * 
 *     def time_steps_total(self):             # <<<<<<<<<<<<<<
 *         """Return a list of time steps."""
 *         cdef vector[double] times_vector
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("_agros.__Computation__.time_steps_total", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_times);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../resources_source/python/pycomputation.pxi":113
 *     # results
 *     property results:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.results.get_parameters()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6_agros_15__Computation___7results_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6_agros_15__Computation___7results_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6_agros_15__Computation___7results___get__(((struct __pyx_obj_6_agros___Computation__ *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6_agros_15__Computation___7results___get__(struct __pyx_obj_6_agros___Computation__ *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "../resources_source/python/pycomputation.pxi":114
 *     property results:
 *         def __get__(self):
 *             return self.results.get_parameters()             # <<<<<<<<<<<<<<
 * 
 *     def __get_results__(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->results, __pyx_n_s_get_parameters); if (unlikely(!__pyx_t_2)) __PYX_ERR(5, 114, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 114, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../resources_source/python/pycomputation.pxi":113
 *     # results
 *     property results:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.results.get_parameters()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("_agros.__Computation__.results.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../resources_source/python/pycomputation.pxi":116
 *             return self.results.get_parameters()
 * 
 *     def __get_results__(self):             # <<<<<<<<<<<<<<
 *         cdef vector[string] results_vector
 *         self._computation.getResults(results_vector)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6_agros_15__Computation___21__get_results__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_6_agros_15__Computation___21__get_results__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get_results__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6_agros_15__Computation___20__get_results__(((struct __pyx_obj_6_agros___Computation__ *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6_agros_15__Computation___20__get_results__(struct __pyx_obj_6_agros___Computation__ *__pyx_v_self) {
  std::vector<std::string>  __pyx_v_results_vector;
  PyObject *__pyx_v_results = NULL;
  std::vector<std::string> ::size_type __pyx_v_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  std::vector<std::string> ::size_type __pyx_t_2;
  std::vector<std::string> ::size_type __pyx_t_3;
  std::vector<std::string> ::size_type __pyx_t_4;
  double __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get_results__", 0);

  /* "../resources_source/python/pycomputation.pxi":118
 *     def __get_results__(self):
 *         cdef vector[string] results_vector
 *         self._computation.getResults(results_vector)             # <<<<<<<<<<<<<<
 * 
 *         results = dict()
 */
  __pyx_v_self->_computation->getResults(__pyx_v_results_vector);

  /* "../resources_source/python/pycomputation.pxi":120
 *         self._computation.getResults(results_vector)
 * 
 *         results = dict()             # <<<<<<<<<<<<<<
 *         for i in range(results_vector.size()):
 *             results[(<string>results_vector[i]).decode()] = self._computation.getResult(results_vector[i])
 */
  __pyx_t_1 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 120, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_results = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "../resources_source/python/pycomputation.pxi":121
 * 
 *         results = dict()
 *         for i in range(results_vector.size()):             # <<<<<<<<<<<<<<
 *             results[(<string>results_vector[i]).decode()] = self._computation.getResult(results_vector[i])
 *         return results
 */
  __pyx_t_2 = __pyx_v_results_vector.size();
  __pyx_t_3 = __pyx_t_2;
  for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
    __pyx_v_i = __pyx_t_4;

    /* "../resources_source/python/pycomputation.pxi":122
 *         results = dict()
 *         for i in range(results_vector.size()):
 *             results[(<string>results_vector[i]).decode()] = self._computation.getResult(results_vector[i])             # <<<<<<<<<<<<<<
 *         return results
 *     def __set_results__(self, results):
 */
    try {
      __pyx_t_5 = __pyx_v_self->_computation->getResult((__pyx_v_results_vector[__pyx_v_i]));
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(5, 122, __pyx_L1_error)
    }
    __pyx_t_1 = PyFloat_FromDouble(__pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 122, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_6 = __Pyx_decode_cpp_string(((std::string)(__pyx_v_results_vector[__pyx_v_i])), 0, PY_SSIZE_T_MAX, NULL, NULL, NULL); if (unlikely(!__pyx_t_6)) __PYX_ERR(5, 122, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    if (unlikely(PyDict_SetItem(__pyx_v_results, __pyx_t_6, __pyx_t_1) < 0)) __PYX_ERR(5, 122, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "../resources_source/python/pycomputation.pxi":123
 *         for i in range(results_vector.size()):
 *             results[(<string>results_vector[i]).decode()] = self._computation.getResult(results_vector[i])
 *         return results             # <<<<<<<<<<<<<<
 *     def __set_results__(self, results):
 *         for key in results:
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_results);
  __pyx_r = __pyx_v_results;
  goto __pyx_L0;

  /* "../resources_source/python/pycomputation.pxi":116
 *             return self.results.get_parameters()
 * 
 *     def __get_results__(self):             # <<<<<<<<<<<<<<
 *         cdef vector[string] results_vector
 *         self._computation.getResults(results_vector)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("_agros.__Computation__.__get_results__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_results);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../resources_source/python/pycomputation.pxi":124
 *             results[(<string>results_vector[i]).decode()] = self._computation.getResult(results_vector[i])
 *         return results
 *     def __set_results__(self, results):             # <<<<<<<<<<<<<<
 *         for key in results:
 *             self._computation.setResult(key.encode(), <double>results[key])
 */

/* Python wrapper */
static PyObject *__pyx_pw_6_agros_15__Computation___23__set_results__(PyObject *__pyx_v_self, PyObject *__pyx_v_results); /*proto*/
static PyObject *__pyx_pw_6_agros_15__Computation___23__set_results__(PyObject *__pyx_v_self, PyObject *__pyx_v_results) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set_results__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6_agros_15__Computation___22__set_results__(((struct __pyx_obj_6_agros___Computation__ *)__pyx_v_self), ((PyObject *)__pyx_v_results));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6_agros_15__Computation___22__set_results__(struct __pyx_obj_6_agros___Computation__ *__pyx_v_self, PyObject *__pyx_v_results) {
  PyObject *__pyx_v_key = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *(*__pyx_t_3)(PyObject *);
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  std::string __pyx_t_7;
  double __pyx_t_8;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set_results__", 0);

  /* "../resources_source/python/pycomputation.pxi":125
 *         return results
 *     def __set_results__(self, results):
 *         for key in results:             # <<<<<<<<<<<<<<
 *             self._computation.setResult(key.encode(), <double>results[key])
 * 
 */
  if (likely(PyList_CheckExact(__pyx_v_results)) || PyTuple_CheckExact(__pyx_v_results)) {
    __pyx_t_1 = __pyx_v_results; __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
    __pyx_t_3 = NULL;
  } else {
    __pyx_t_2 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_v_results); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 125, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_3)) __PYX_ERR(5, 125, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_3)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(5, 125, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(5, 125, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      } else {
        if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(5, 125, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(5, 125, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      }
    } else {
      __pyx_t_4 = __pyx_t_3(__pyx_t_1);
      if (unlikely(!__pyx_t_4)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(5, 125, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_4);
    }
    __Pyx_XDECREF_SET(__pyx_v_key, __pyx_t_4);
    __pyx_t_4 = 0;

    /* "../resources_source/python/pycomputation.pxi":126
 *     def __set_results__(self, results):
 *         for key in results:
 *             self._computation.setResult(key.encode(), <double>results[key])             # <<<<<<<<<<<<<<
 * 
 *     # parameters
 */
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_key, __pyx_n_s_encode); if (unlikely(!__pyx_t_5)) __PYX_ERR(5, 126, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_5);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_5, function);
      }
    }
    __pyx_t_4 = (__pyx_t_6) ? __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_6) : __Pyx_PyObject_CallNoArg(__pyx_t_5);
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (unlikely(!__pyx_t_4)) __PYX_ERR(5, 126, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_7 = __pyx_convert_string_from_py_std__in_string(__pyx_t_4); if (unlikely(PyErr_Occurred())) __PYX_ERR(5, 126, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_PyObject_GetItem(__pyx_v_results, __pyx_v_key); if (unlikely(!__pyx_t_4)) __PYX_ERR(5, 126, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_8 = __pyx_PyFloat_AsDouble(__pyx_t_4); if (unlikely((__pyx_t_8 == (double)-1) && PyErr_Occurred())) __PYX_ERR(5, 126, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_v_self->_computation->setResult(__pyx_t_7, ((double)__pyx_t_8));

    /* "../resources_source/python/pycomputation.pxi":125
 *         return results
 *     def __set_results__(self, results):
 *         for key in results:             # <<<<<<<<<<<<<<
 *             self._computation.setResult(key.encode(), <double>results[key])
 * 
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "../resources_source/python/pycomputation.pxi":124
 *             results[(<string>results_vector[i]).decode()] = self._computation.getResult(results_vector[i])
 *         return results
 *     def __set_results__(self, results):             # <<<<<<<<<<<<<<
 *         for key in results:
 *             self._computation.setResult(key.encode(), <double>results[key])
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("_agros.__Computation__.__set_results__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_key);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../resources_source/python/pycomputation.pxi":130
 *     # parameters
 *     property parameters:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.parameters.get_parameters()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6_agros_15__Computation___10parameters_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6_agros_15__Computation___10parameters_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6_agros_15__Computation___10parameters___get__(((struct __pyx_obj_6_agros___Computation__ *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6_agros_15__Computation___10parameters___get__(struct __pyx_obj_6_agros___Computation__ *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "../resources_source/python/pycomputation.pxi":131
 *     property parameters:
 *         def __get__(self):
 *             return self.parameters.get_parameters()             # <<<<<<<<<<<<<<
 * 
 *     def __get_parameters__(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->parameters, __pyx_n_s_get_parameters); if (unlikely(!__pyx_t_2)) __PYX_ERR(5, 131, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 131, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../resources_source/python/pycomputation.pxi":130
 *     # parameters
 *     property parameters:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.parameters.get_parameters()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("_agros.__Computation__.parameters.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../resources_source/python/pycomputation.pxi":133
 *             return self.parameters.get_parameters()
 * 
 *     def __get_parameters__(self):             # <<<<<<<<<<<<<<
 *         cdef vector[string] parameters_vector
 *         self._computation.getParameters(parameters_vector)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6_agros_15__Computation___25__get_parameters__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_6_agros_15__Computation___25__get_parameters__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get_parameters__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6_agros_15__Computation___24__get_parameters__(((struct __pyx_obj_6_agros___Computation__ *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6_agros_15__Computation___24__get_parameters__(struct __pyx_obj_6_agros___Computation__ *__pyx_v_self) {
  std::vector<std::string>  __pyx_v_parameters_vector;
  PyObject *__pyx_v_parameters = NULL;
  std::vector<std::string> ::size_type __pyx_v_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  std::vector<std::string> ::size_type __pyx_t_2;
  std::vector<std::string> ::size_type __pyx_t_3;
  std::vector<std::string> ::size_type __pyx_t_4;
  double __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get_parameters__", 0);

  /* "../resources_source/python/pycomputation.pxi":135
 *     def __get_parameters__(self):
 *         cdef vector[string] parameters_vector
 *         self._computation.getParameters(parameters_vector)             # <<<<<<<<<<<<<<
 * 
 *         parameters = dict()
 */
  __pyx_v_self->_computation->getParameters(__pyx_v_parameters_vector);

  /* "../resources_source/python/pycomputation.pxi":137
 *         self._computation.getParameters(parameters_vector)
 * 
 *         parameters = dict()             # <<<<<<<<<<<<<<
 *         for i in range(parameters_vector.size()):
 *             parameters[(<string>parameters_vector[i]).decode()] = self._computation.getParameter(parameters_vector[i])
 */
  __pyx_t_1 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 137, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_parameters = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "../resources_source/python/pycomputation.pxi":138
 * 
 *         parameters = dict()
 *         for i in range(parameters_vector.size()):             # <<<<<<<<<<<<<<
 *             parameters[(<string>parameters_vector[i]).decode()] = self._computation.getParameter(parameters_vector[i])
 *         return parameters
 */
  __pyx_t_2 = __pyx_v_parameters_vector.size();
  __pyx_t_3 = __pyx_t_2;
  for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
    __pyx_v_i = __pyx_t_4;

    /* "../resources_source/python/pycomputation.pxi":139
 *         parameters = dict()
 *         for i in range(parameters_vector.size()):
 *             parameters[(<string>parameters_vector[i]).decode()] = self._computation.getParameter(parameters_vector[i])             # <<<<<<<<<<<<<<
 *         return parameters
 * 
 */
    try {
      __pyx_t_5 = __pyx_v_self->_computation->getParameter((__pyx_v_parameters_vector[__pyx_v_i]));
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(5, 139, __pyx_L1_error)
    }
    __pyx_t_1 = PyFloat_FromDouble(__pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 139, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_6 = __Pyx_decode_cpp_string(((std::string)(__pyx_v_parameters_vector[__pyx_v_i])), 0, PY_SSIZE_T_MAX, NULL, NULL, NULL); if (unlikely(!__pyx_t_6)) __PYX_ERR(5, 139, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    if (unlikely(PyDict_SetItem(__pyx_v_parameters, __pyx_t_6, __pyx_t_1) < 0)) __PYX_ERR(5, 139, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "../resources_source/python/pycomputation.pxi":140
 *         for i in range(parameters_vector.size()):
 *             parameters[(<string>parameters_vector[i]).decode()] = self._computation.getParameter(parameters_vector[i])
 *         return parameters             # <<<<<<<<<<<<<<
 * 
 *     # coordinate type
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_parameters);
  __pyx_r = __pyx_v_parameters;
  goto __pyx_L0;

  /* "../resources_source/python/pycomputation.pxi":133
 *             return self.parameters.get_parameters()
 * 
 *     def __get_parameters__(self):             # <<<<<<<<<<<<<<
 *         cdef vector[string] parameters_vector
 *         self._computation.getParameters(parameters_vector)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("_agros.__Computation__.__get_parameters__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_parameters);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../resources_source/python/pycomputation.pxi":144
 *     # coordinate type
 *     coordinate_type = property(_get_coordinate_type, __unauthorized__)
 *     def _get_coordinate_type(self):             # <<<<<<<<<<<<<<
 *         return self._computation.getCoordinateType().decode()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6_agros_15__Computation___27_get_coordinate_type(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_6_agros_15__Computation___27_get_coordinate_type(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_get_coordinate_type (wrapper)", 0);
  __pyx_r = __pyx_pf_6_agros_15__Computation___26_get_coordinate_type(((struct __pyx_obj_6_agros___Computation__ *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6_agros_15__Computation___26_get_coordinate_type(struct __pyx_obj_6_agros___Computation__ *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_get_coordinate_type", 0);

  /* "../resources_source/python/pycomputation.pxi":145
 *     coordinate_type = property(_get_coordinate_type, __unauthorized__)
 *     def _get_coordinate_type(self):
 *         return self._computation.getCoordinateType().decode()             # <<<<<<<<<<<<<<
 * 
 *     # mesh type
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_decode_cpp_string(__pyx_v_self->_computation->getCoordinateType(), 0, PY_SSIZE_T_MAX, NULL, NULL, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 145, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../resources_source/python/pycomputation.pxi":144
 *     # coordinate type
 *     coordinate_type = property(_get_coordinate_type, __unauthorized__)
 *     def _get_coordinate_type(self):             # <<<<<<<<<<<<<<
 *         return self._computation.getCoordinateType().decode()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("_agros.__Computation__._get_coordinate_type", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../resources_source/python/pycomputation.pxi":149
 *     # mesh type
 *     mesh_type = property(_get_mesh_type, __unauthorized__)
 *     def _get_mesh_type(self):             # <<<<<<<<<<<<<<
 *             return self._computation.getMeshType().decode()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6_agros_15__Computation___29_get_mesh_type(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_6_agros_15__Computation___29_get_mesh_type(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_get_mesh_type (wrapper)", 0);
  __pyx_r = __pyx_pf_6_agros_15__Computation___28_get_mesh_type(((struct __pyx_obj_6_agros___Computation__ *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6_agros_15__Computation___28_get_mesh_type(struct __pyx_obj_6_agros___Computation__ *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_get_mesh_type", 0);

  /* "../resources_source/python/pycomputation.pxi":150
 *     mesh_type = property(_get_mesh_type, __unauthorized__)
 *     def _get_mesh_type(self):
 *             return self._computation.getMeshType().decode()             # <<<<<<<<<<<<<<
 * 
 *     # frequency
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_decode_cpp_string(__pyx_v_self->_computation->getMeshType(), 0, PY_SSIZE_T_MAX, NULL, NULL, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 150, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../resources_source/python/pycomputation.pxi":149
 *     # mesh type
 *     mesh_type = property(_get_mesh_type, __unauthorized__)
 *     def _get_mesh_type(self):             # <<<<<<<<<<<<<<
 *             return self._computation.getMeshType().decode()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("_agros.__Computation__._get_mesh_type", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../resources_source/python/pycomputation.pxi":154
 *     # frequency
 *     frequency = property(_get_frequency, __unauthorized__)
 *     def _get_frequency(self):             # <<<<<<<<<<<<<<
 *             return self._computation.getFrequency()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6_agros_15__Computation___31_get_frequency(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_6_agros_15__Computation___31_get_frequency(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_get_frequency (wrapper)", 0);
  __pyx_r = __pyx_pf_6_agros_15__Computation___30_get_frequency(((struct __pyx_obj_6_agros___Computation__ *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6_agros_15__Computation___30_get_frequency(struct __pyx_obj_6_agros___Computation__ *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_get_frequency", 0);

  /* "../resources_source/python/pycomputation.pxi":155
 *     frequency = property(_get_frequency, __unauthorized__)
 *     def _get_frequency(self):
 *             return self._computation.getFrequency()             # <<<<<<<<<<<<<<
 * 
 *     # time step method
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->_computation->getFrequency()); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 155, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../resources_source/python/pycomputation.pxi":154
 *     # frequency
 *     frequency = property(_get_frequency, __unauthorized__)
 *     def _get_frequency(self):             # <<<<<<<<<<<<<<
 *             return self._computation.getFrequency()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("_agros.__Computation__._get_frequency", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../resources_source/python/pycomputation.pxi":159
 *     # time step method
 *     time_step_method = property(_get_time_step_method, __unauthorized__)
 *     def _get_time_step_method(self):             # <<<<<<<<<<<<<<
 *             return self._computation.getTimeStepMethod().decode()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6_agros_15__Computation___33_get_time_step_method(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_6_agros_15__Computation___33_get_time_step_method(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_get_time_step_method (wrapper)", 0);
  __pyx_r = __pyx_pf_6_agros_15__Computation___32_get_time_step_method(((struct __pyx_obj_6_agros___Computation__ *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6_agros_15__Computation___32_get_time_step_method(struct __pyx_obj_6_agros___Computation__ *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_get_time_step_method", 0);

  /* "../resources_source/python/pycomputation.pxi":160
 *     time_step_method = property(_get_time_step_method, __unauthorized__)
 *     def _get_time_step_method(self):
 *             return self._computation.getTimeStepMethod().decode()             # <<<<<<<<<<<<<<
 * 
 *     # time method order
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_decode_cpp_string(__pyx_v_self->_computation->getTimeStepMethod(), 0, PY_SSIZE_T_MAX, NULL, NULL, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 160, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../resources_source/python/pycomputation.pxi":159
 *     # time step method
 *     time_step_method = property(_get_time_step_method, __unauthorized__)
 *     def _get_time_step_method(self):             # <<<<<<<<<<<<<<
 *             return self._computation.getTimeStepMethod().decode()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("_agros.__Computation__._get_time_step_method", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../resources_source/python/pycomputation.pxi":164
 *     # time method order
 *     time_method_order = property(_get_time_method_order, __unauthorized__)
 *     def _get_time_method_order(self):             # <<<<<<<<<<<<<<
 *             return self._computation.getTimeMethodOrder()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6_agros_15__Computation___35_get_time_method_order(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_6_agros_15__Computation___35_get_time_method_order(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_get_time_method_order (wrapper)", 0);
  __pyx_r = __pyx_pf_6_agros_15__Computation___34_get_time_method_order(((struct __pyx_obj_6_agros___Computation__ *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6_agros_15__Computation___34_get_time_method_order(struct __pyx_obj_6_agros___Computation__ *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_get_time_method_order", 0);

  /* "../resources_source/python/pycomputation.pxi":165
 *     time_method_order = property(_get_time_method_order, __unauthorized__)
 *     def _get_time_method_order(self):
 *             return self._computation.getTimeMethodOrder()             # <<<<<<<<<<<<<<
 * 
 *     # time method tolerance
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->_computation->getTimeMethodOrder()); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 165, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../resources_source/python/pycomputation.pxi":164
 *     # time method order
 *     time_method_order = property(_get_time_method_order, __unauthorized__)
 *     def _get_time_method_order(self):             # <<<<<<<<<<<<<<
 *             return self._computation.getTimeMethodOrder()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("_agros.__Computation__._get_time_method_order", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../resources_source/python/pycomputation.pxi":169
 *     # time method tolerance
 *     time_method_tolerance = property(_get_time_method_tolerance, __unauthorized__)
 *     def _get_time_method_tolerance(self):             # <<<<<<<<<<<<<<
 *             return self._computation.getTimeMethodTolerance()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6_agros_15__Computation___37_get_time_method_tolerance(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_6_agros_15__Computation___37_get_time_method_tolerance(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_get_time_method_tolerance (wrapper)", 0);
  __pyx_r = __pyx_pf_6_agros_15__Computation___36_get_time_method_tolerance(((struct __pyx_obj_6_agros___Computation__ *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6_agros_15__Computation___36_get_time_method_tolerance(struct __pyx_obj_6_agros___Computation__ *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_get_time_method_tolerance", 0);

  /* "../resources_source/python/pycomputation.pxi":170
 *     time_method_tolerance = property(_get_time_method_tolerance, __unauthorized__)
 *     def _get_time_method_tolerance(self):
 *             return self._computation.getTimeMethodTolerance()             # <<<<<<<<<<<<<<
 * 
 *     # time total
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->_computation->getTimeMethodTolerance()); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 170, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../resources_source/python/pycomputation.pxi":169
 *     # time method tolerance
 *     time_method_tolerance = property(_get_time_method_tolerance, __unauthorized__)
 *     def _get_time_method_tolerance(self):             # <<<<<<<<<<<<<<
 *             return self._computation.getTimeMethodTolerance()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("_agros.__Computation__._get_time_method_tolerance", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../resources_source/python/pycomputation.pxi":174
 *     # time total
 *     time_total = property(_get_time_total, __unauthorized__)
 *     def _get_time_total(self):             # <<<<<<<<<<<<<<
 *             return self._computation.getTimeTotal()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6_agros_15__Computation___39_get_time_total(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_6_agros_15__Computation___39_get_time_total(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_get_time_total (wrapper)", 0);
  __pyx_r = __pyx_pf_6_agros_15__Computation___38_get_time_total(((struct __pyx_obj_6_agros___Computation__ *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6_agros_15__Computation___38_get_time_total(struct __pyx_obj_6_agros___Computation__ *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_get_time_total", 0);

  /* "../resources_source/python/pycomputation.pxi":175
 *     time_total = property(_get_time_total, __unauthorized__)
 *     def _get_time_total(self):
 *             return self._computation.getTimeTotal()             # <<<<<<<<<<<<<<
 * 
 *     # time steps
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->_computation->getTimeTotal()); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 175, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../resources_source/python/pycomputation.pxi":174
 *     # time total
 *     time_total = property(_get_time_total, __unauthorized__)
 *     def _get_time_total(self):             # <<<<<<<<<<<<<<
 *             return self._computation.getTimeTotal()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("_agros.__Computation__._get_time_total", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../resources_source/python/pycomputation.pxi":179
 *     # time steps
 *     time_steps = property(_get_time_steps, __unauthorized__)
 *     def _get_time_steps(self):             # <<<<<<<<<<<<<<
 *             return self._computation.getNumConstantTimeSteps()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6_agros_15__Computation___41_get_time_steps(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_6_agros_15__Computation___41_get_time_steps(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_get_time_steps (wrapper)", 0);
  __pyx_r = __pyx_pf_6_agros_15__Computation___40_get_time_steps(((struct __pyx_obj_6_agros___Computation__ *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6_agros_15__Computation___40_get_time_steps(struct __pyx_obj_6_agros___Computation__ *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_get_time_steps", 0);

  /* "../resources_source/python/pycomputation.pxi":180
 *     time_steps = property(_get_time_steps, __unauthorized__)
 *     def _get_time_steps(self):
 *             return self._computation.getNumConstantTimeSteps()             # <<<<<<<<<<<<<<
 * 
 *     # initial time step
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->_computation->getNumConstantTimeSteps()); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 180, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../resources_source/python/pycomputation.pxi":179
 *     # time steps
 *     time_steps = property(_get_time_steps, __unauthorized__)
 *     def _get_time_steps(self):             # <<<<<<<<<<<<<<
 *             return self._computation.getNumConstantTimeSteps()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("_agros.__Computation__._get_time_steps", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../resources_source/python/pycomputation.pxi":184
 *     # initial time step
 *     initial_time_step = property(_get_initial_time_step, __unauthorized__)
 *     def _get_initial_time_step(self):             # <<<<<<<<<<<<<<
 *             return self._computation.getInitialTimeStep()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6_agros_15__Computation___43_get_initial_time_step(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_6_agros_15__Computation___43_get_initial_time_step(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_get_initial_time_step (wrapper)", 0);
  __pyx_r = __pyx_pf_6_agros_15__Computation___42_get_initial_time_step(((struct __pyx_obj_6_agros___Computation__ *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6_agros_15__Computation___42_get_initial_time_step(struct __pyx_obj_6_agros___Computation__ *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_get_initial_time_step", 0);

  /* "../resources_source/python/pycomputation.pxi":185
 *     initial_time_step = property(_get_initial_time_step, __unauthorized__)
 *     def _get_initial_time_step(self):
 *             return self._computation.getInitialTimeStep()             # <<<<<<<<<<<<<<
 * 
 *     def get_coupling_type(self, source_field, target_field):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->_computation->getInitialTimeStep()); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 185, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../resources_source/python/pycomputation.pxi":184
 *     # initial time step
 *     initial_time_step = property(_get_initial_time_step, __unauthorized__)
 *     def _get_initial_time_step(self):             # <<<<<<<<<<<<<<
 *             return self._computation.getInitialTimeStep()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("_agros.__Computation__._get_initial_time_step", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../resources_source/python/pycomputation.pxi":187
 *             return self._computation.getInitialTimeStep()
 * 
 *     def get_coupling_type(self, source_field, target_field):             # <<<<<<<<<<<<<<
 *         """Return type of coupling.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6_agros_15__Computation___45get_coupling_type(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6_agros_15__Computation___44get_coupling_type[] = "Return type of coupling.\n\n        get_coupling_type(source_field, target_field)\n\n        Keyword arguments:\n        source_field -- source field id\n        target_field -- target field id\n        ";
static PyObject *__pyx_pw_6_agros_15__Computation___45get_coupling_type(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_source_field = 0;
  PyObject *__pyx_v_target_field = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_coupling_type (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_source_field,&__pyx_n_s_target_field,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_source_field)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_target_field)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("get_coupling_type", 1, 2, 2, 1); __PYX_ERR(5, 187, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "get_coupling_type") < 0)) __PYX_ERR(5, 187, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_source_field = values[0];
    __pyx_v_target_field = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("get_coupling_type", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(5, 187, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("_agros.__Computation__.get_coupling_type", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6_agros_15__Computation___44get_coupling_type(((struct __pyx_obj_6_agros___Computation__ *)__pyx_v_self), __pyx_v_source_field, __pyx_v_target_field);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6_agros_15__Computation___44get_coupling_type(struct __pyx_obj_6_agros___Computation__ *__pyx_v_self, PyObject *__pyx_v_source_field, PyObject *__pyx_v_target_field) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  std::string __pyx_t_4;
  std::string __pyx_t_5;
  std::string __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_coupling_type", 0);

  /* "../resources_source/python/pycomputation.pxi":196
 *         target_field -- target field id
 *         """
 *         return self._computation.getCouplingType(source_field.encode(), target_field.encode()).decode()             # <<<<<<<<<<<<<<
 * 
 * def computation(computation):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_source_field, __pyx_n_s_encode); if (unlikely(!__pyx_t_2)) __PYX_ERR(5, 196, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 196, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = __pyx_convert_string_from_py_std__in_string(__pyx_t_1); if (unlikely(PyErr_Occurred())) __PYX_ERR(5, 196, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_target_field, __pyx_n_s_encode); if (unlikely(!__pyx_t_2)) __PYX_ERR(5, 196, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 196, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_5 = __pyx_convert_string_from_py_std__in_string(__pyx_t_1); if (unlikely(PyErr_Occurred())) __PYX_ERR(5, 196, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  try {
    __pyx_t_6 = __pyx_v_self->_computation->getCouplingType(__pyx_t_4, __pyx_t_5);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(5, 196, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_decode_cpp_string(__pyx_t_6, 0, PY_SSIZE_T_MAX, NULL, NULL, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 196, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../resources_source/python/pycomputation.pxi":187
 *             return self._computation.getInitialTimeStep()
 * 
 *     def get_coupling_type(self, source_field, target_field):             # <<<<<<<<<<<<<<
 *         """Return type of coupling.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("_agros.__Computation__.get_coupling_type", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_6_agros_15__Computation___47__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_6_agros_15__Computation___47__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6_agros_15__Computation___46__reduce_cython__(((struct __pyx_obj_6_agros___Computation__ *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6_agros_15__Computation___46__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_6_agros___Computation__ *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__38, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(2, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("_agros.__Computation__.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw_6_agros_15__Computation___49__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_6_agros_15__Computation___49__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6_agros_15__Computation___48__setstate_cython__(((struct __pyx_obj_6_agros___Computation__ *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6_agros_15__Computation___48__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_6_agros___Computation__ *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__39, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(2, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("_agros.__Computation__.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../resources_source/python/pycomputation.pxi":198
 *         return self._computation.getCouplingType(source_field.encode(), target_field.encode()).decode()
 * 
 * def computation(computation):             # <<<<<<<<<<<<<<
 *     return __Computation__(computation=computation)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6_agros_9computation(PyObject *__pyx_self, PyObject *__pyx_v_computation); /*proto*/
static PyMethodDef __pyx_mdef_6_agros_9computation = {"computation", (PyCFunction)__pyx_pw_6_agros_9computation, METH_O, 0};
static PyObject *__pyx_pw_6_agros_9computation(PyObject *__pyx_self, PyObject *__pyx_v_computation) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("computation (wrapper)", 0);
  __pyx_r = __pyx_pf_6_agros_8computation(__pyx_self, ((PyObject *)__pyx_v_computation));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6_agros_8computation(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_computation) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("computation", 0);

  /* "../resources_source/python/pycomputation.pxi":199
 * 
 * def computation(computation):
 *     return __Computation__(computation=computation)             # <<<<<<<<<<<<<<
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 199, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_computation, __pyx_v_computation) < 0) __PYX_ERR(5, 199, __pyx_L1_error)
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_6_agros___Computation__), __pyx_empty_tuple, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(5, 199, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "../resources_source/python/pycomputation.pxi":198
 *         return self._computation.getCouplingType(source_field.encode(), target_field.encode()).decode()
 * 
 * def computation(computation):             # <<<<<<<<<<<<<<
 *     return __Computation__(computation=computation)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("_agros.computation", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../resources_source/python/pysolution.pxi":30
 *     cdef PySolution *_solution
 * 
 *     def __cinit__(self):             # <<<<<<<<<<<<<<
 *         self._solution = new PySolution()
 * 
 */

/* Python wrapper */
static int __pyx_pw_6_agros_12__Solution___1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_6_agros_12__Solution___1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__cinit__", 0))) return -1;
  __pyx_r = __pyx_pf_6_agros_12__Solution_____cinit__(((struct __pyx_obj_6_agros___Solution__ *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6_agros_12__Solution_____cinit__(struct __pyx_obj_6_agros___Solution__ *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "../resources_source/python/pysolution.pxi":31
 * 
 *     def __cinit__(self):
 *         self._solution = new PySolution()             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(self):
 */
  __pyx_v_self->_solution = new PySolution();

  /* "../resources_source/python/pysolution.pxi":30
 *     cdef PySolution *_solution
 * 
 *     def __cinit__(self):             # <<<<<<<<<<<<<<
 *         self._solution = new PySolution()
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../resources_source/python/pysolution.pxi":33
 *         self._solution = new PySolution()
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self._solution
 * 
 */

/* Python wrapper */
static void __pyx_pw_6_agros_12__Solution___3__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_6_agros_12__Solution___3__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_6_agros_12__Solution___2__dealloc__(((struct __pyx_obj_6_agros___Solution__ *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_6_agros_12__Solution___2__dealloc__(struct __pyx_obj_6_agros___Solution__ *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "../resources_source/python/pysolution.pxi":34
 * 
 *     def __dealloc__(self):
 *         del self._solution             # <<<<<<<<<<<<<<
 * 
 *     # local values
 */
  delete __pyx_v_self->_solution;

  /* "../resources_source/python/pysolution.pxi":33
 *         self._solution = new PySolution()
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self._solution
 * 
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "../resources_source/python/pysolution.pxi":37
 * 
 *     # local values
 *     def local_values(self, x, y, time_step = None, adaptivity_step = None):             # <<<<<<<<<<<<<<
 *         """Compute local values in point and return dictionary with results.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6_agros_12__Solution___5local_values(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6_agros_12__Solution___4local_values[] = "Compute local values in point and return dictionary with results.\n\n        local_values(x, y, time_step = None, adaptivity_step = None)\n\n        Keyword arguments:\n        x -- x or r coordinate of point\n        y -- y or z coordinate of point\n        time_step -- time step (default is None - use last time step)\n        adaptivity_step -- adaptivity step (default is None - use adaptive step)        \n        ";
static PyObject *__pyx_pw_6_agros_12__Solution___5local_values(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_x = 0;
  PyObject *__pyx_v_y = 0;
  PyObject *__pyx_v_time_step = 0;
  PyObject *__pyx_v_adaptivity_step = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("local_values (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_x,&__pyx_n_s_y,&__pyx_n_s_time_step,&__pyx_n_s_adaptivity_step,0};
    PyObject* values[4] = {0,0,0,0};
    values[2] = ((PyObject *)Py_None);
    values[3] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_x)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_y)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("local_values", 0, 2, 4, 1); __PYX_ERR(6, 37, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_time_step);
          if (value) { values[2] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_adaptivity_step);
          if (value) { values[3] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "local_values") < 0)) __PYX_ERR(6, 37, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_x = values[0];
    __pyx_v_y = values[1];
    __pyx_v_time_step = values[2];
    __pyx_v_adaptivity_step = values[3];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("local_values", 0, 2, 4, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(6, 37, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("_agros.__Solution__.local_values", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6_agros_12__Solution___4local_values(((struct __pyx_obj_6_agros___Solution__ *)__pyx_v_self), __pyx_v_x, __pyx_v_y, __pyx_v_time_step, __pyx_v_adaptivity_step);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6_agros_12__Solution___4local_values(struct __pyx_obj_6_agros___Solution__ *__pyx_v_self, PyObject *__pyx_v_x, PyObject *__pyx_v_y, PyObject *__pyx_v_time_step, PyObject *__pyx_v_adaptivity_step) {
  PyObject *__pyx_v_out = NULL;
  std::map<std::string,double>  __pyx_v_results;
  std::map<std::string,double> ::iterator __pyx_v_it;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  double __pyx_t_2;
  double __pyx_t_3;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  int __pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("local_values", 0);

  /* "../resources_source/python/pysolution.pxi":48
 *         adaptivity_step -- adaptivity step (default is None - use adaptive step)
 *         """
 *         out = dict()             # <<<<<<<<<<<<<<
 *         cdef map[string, double] results
 * 
 */
  __pyx_t_1 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(6, 48, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_out = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "../resources_source/python/pysolution.pxi":51
 *         cdef map[string, double] results
 * 
 *         self._solution.localValues(x, y,             # <<<<<<<<<<<<<<
 *                                    int(-1 if time_step is None else time_step),
 *                                    int(-1 if adaptivity_step is None else adaptivity_step),
 */
  __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_v_x); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(6, 51, __pyx_L1_error)
  __pyx_t_3 = __pyx_PyFloat_AsDouble(__pyx_v_y); if (unlikely((__pyx_t_3 == (double)-1) && PyErr_Occurred())) __PYX_ERR(6, 51, __pyx_L1_error)

  /* "../resources_source/python/pysolution.pxi":52
 * 
 *         self._solution.localValues(x, y,
 *                                    int(-1 if time_step is None else time_step),             # <<<<<<<<<<<<<<
 *                                    int(-1 if adaptivity_step is None else adaptivity_step),
 *                                    results)
 */
  __pyx_t_4 = (__pyx_v_time_step == Py_None);
  if ((__pyx_t_4 != 0)) {
    __Pyx_INCREF(__pyx_int_neg_1);
    __pyx_t_1 = __pyx_int_neg_1;
  } else {
    __Pyx_INCREF(__pyx_v_time_step);
    __pyx_t_1 = __pyx_v_time_step;
  }
  __pyx_t_5 = __Pyx_PyNumber_Int(__pyx_t_1); if (unlikely(!__pyx_t_5)) __PYX_ERR(6, 52, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_6 = __Pyx_PyInt_As_int(__pyx_t_5); if (unlikely((__pyx_t_6 == (int)-1) && PyErr_Occurred())) __PYX_ERR(6, 52, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "../resources_source/python/pysolution.pxi":53
 *         self._solution.localValues(x, y,
 *                                    int(-1 if time_step is None else time_step),
 *                                    int(-1 if adaptivity_step is None else adaptivity_step),             # <<<<<<<<<<<<<<
 *                                    results)
 * 
 */
  __pyx_t_4 = (__pyx_v_adaptivity_step == Py_None);
  if ((__pyx_t_4 != 0)) {
    __Pyx_INCREF(__pyx_int_neg_1);
    __pyx_t_5 = __pyx_int_neg_1;
  } else {
    __Pyx_INCREF(__pyx_v_adaptivity_step);
    __pyx_t_5 = __pyx_v_adaptivity_step;
  }
  __pyx_t_1 = __Pyx_PyNumber_Int(__pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(6, 53, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_7 = __Pyx_PyInt_As_int(__pyx_t_1); if (unlikely((__pyx_t_7 == (int)-1) && PyErr_Occurred())) __PYX_ERR(6, 53, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "../resources_source/python/pysolution.pxi":51
 *         cdef map[string, double] results
 * 
 *         self._solution.localValues(x, y,             # <<<<<<<<<<<<<<
 *                                    int(-1 if time_step is None else time_step),
 *                                    int(-1 if adaptivity_step is None else adaptivity_step),
 */
  try {
    __pyx_v_self->_solution->localValues(__pyx_t_2, __pyx_t_3, __pyx_t_6, __pyx_t_7, __pyx_v_results);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(6, 51, __pyx_L1_error)
  }

  /* "../resources_source/python/pysolution.pxi":56
 *                                    results)
 * 
 *         it = results.begin()             # <<<<<<<<<<<<<<
 *         while it != results.end():
 *             out[deref(it).first.decode()] = deref(it).second
 */
  __pyx_v_it = __pyx_v_results.begin();

  /* "../resources_source/python/pysolution.pxi":57
 * 
 *         it = results.begin()
 *         while it != results.end():             # <<<<<<<<<<<<<<
 *             out[deref(it).first.decode()] = deref(it).second
 *             incr(it)
 */
  while (1) {
    __pyx_t_4 = ((__pyx_v_it != __pyx_v_results.end()) != 0);
    if (!__pyx_t_4) break;

    /* "../resources_source/python/pysolution.pxi":58
 *         it = results.begin()
 *         while it != results.end():
 *             out[deref(it).first.decode()] = deref(it).second             # <<<<<<<<<<<<<<
 *             incr(it)
 * 
 */
    __pyx_t_1 = PyFloat_FromDouble((*__pyx_v_it).second); if (unlikely(!__pyx_t_1)) __PYX_ERR(6, 58, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_5 = __Pyx_decode_cpp_string((*__pyx_v_it).first, 0, PY_SSIZE_T_MAX, NULL, NULL, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(6, 58, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (unlikely(PyDict_SetItem(__pyx_v_out, __pyx_t_5, __pyx_t_1) < 0)) __PYX_ERR(6, 58, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "../resources_source/python/pysolution.pxi":59
 *         while it != results.end():
 *             out[deref(it).first.decode()] = deref(it).second
 *             incr(it)             # <<<<<<<<<<<<<<
 * 
 *         return out
 */
    (void)((++__pyx_v_it));
  }

  /* "../resources_source/python/pysolution.pxi":61
 *             incr(it)
 * 
 *         return out             # <<<<<<<<<<<<<<
 * 
 *     # surface integrals
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_out);
  __pyx_r = __pyx_v_out;
  goto __pyx_L0;

  /* "../resources_source/python/pysolution.pxi":37
 * 
 *     # local values
 *     def local_values(self, x, y, time_step = None, adaptivity_step = None):             # <<<<<<<<<<<<<<
 *         """Compute local values in point and return dictionary with results.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("_agros.__Solution__.local_values", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_out);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../resources_source/python/pysolution.pxi":64
 * 
 *     # surface integrals
 *     def surface_integrals(self, edges = [], time_step = None, adaptivity_step = None):             # <<<<<<<<<<<<<<
 *         """Compute surface integrals on edges and return dictionary with results.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6_agros_12__Solution___7surface_integrals(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6_agros_12__Solution___6surface_integrals[] = "Compute surface integrals on edges and return dictionary with results.\n\n        surface_integrals(edges = [], time_step = None, adaptivity_step = None)\n\n        Keyword arguments:\n        edges -- list of edges (default is [] - compute integrals on all edges)\n        time_step -- time step (default is None - use last time step)\n        adaptivity_step -- adaptivity step (default is None - use adaptive step)        \n        ";
static PyObject *__pyx_pw_6_agros_12__Solution___7surface_integrals(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_edges = 0;
  PyObject *__pyx_v_time_step = 0;
  PyObject *__pyx_v_adaptivity_step = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("surface_integrals (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_edges,&__pyx_n_s_time_step,&__pyx_n_s_adaptivity_step,0};
    PyObject* values[3] = {0,0,0};
    values[0] = __pyx_k__40;
    values[1] = ((PyObject *)Py_None);
    values[2] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_edges);
          if (value) { values[0] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_time_step);
          if (value) { values[1] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_adaptivity_step);
          if (value) { values[2] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "surface_integrals") < 0)) __PYX_ERR(6, 64, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_edges = values[0];
    __pyx_v_time_step = values[1];
    __pyx_v_adaptivity_step = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("surface_integrals", 0, 0, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(6, 64, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("_agros.__Solution__.surface_integrals", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6_agros_12__Solution___6surface_integrals(((struct __pyx_obj_6_agros___Solution__ *)__pyx_v_self), __pyx_v_edges, __pyx_v_time_step, __pyx_v_adaptivity_step);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6_agros_12__Solution___6surface_integrals(struct __pyx_obj_6_agros___Solution__ *__pyx_v_self, PyObject *__pyx_v_edges, PyObject *__pyx_v_time_step, PyObject *__pyx_v_adaptivity_step) {
  std::vector<int>  __pyx_v_edges_vector;
  PyObject *__pyx_v_i = NULL;
  PyObject *__pyx_v_out = NULL;
  std::map<std::string,double>  __pyx_v_results;
  std::map<std::string,double> ::iterator __pyx_v_it;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *(*__pyx_t_3)(PyObject *);
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  int __pyx_t_6;
  int __pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("surface_integrals", 0);

  /* "../resources_source/python/pysolution.pxi":75
 *         """
 *         cdef vector[int] edges_vector
 *         for i in edges:             # <<<<<<<<<<<<<<
 *             edges_vector.push_back(i)
 * 
 */
  if (likely(PyList_CheckExact(__pyx_v_edges)) || PyTuple_CheckExact(__pyx_v_edges)) {
    __pyx_t_1 = __pyx_v_edges; __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
    __pyx_t_3 = NULL;
  } else {
    __pyx_t_2 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_v_edges); if (unlikely(!__pyx_t_1)) __PYX_ERR(6, 75, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_3)) __PYX_ERR(6, 75, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_3)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(6, 75, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(6, 75, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      } else {
        if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(6, 75, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(6, 75, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      }
    } else {
      __pyx_t_4 = __pyx_t_3(__pyx_t_1);
      if (unlikely(!__pyx_t_4)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(6, 75, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_4);
    }
    __Pyx_XDECREF_SET(__pyx_v_i, __pyx_t_4);
    __pyx_t_4 = 0;

    /* "../resources_source/python/pysolution.pxi":76
 *         cdef vector[int] edges_vector
 *         for i in edges:
 *             edges_vector.push_back(i)             # <<<<<<<<<<<<<<
 * 
 *         out = dict()
 */
    __pyx_t_5 = __Pyx_PyInt_As_int(__pyx_v_i); if (unlikely((__pyx_t_5 == (int)-1) && PyErr_Occurred())) __PYX_ERR(6, 76, __pyx_L1_error)
    try {
      __pyx_v_edges_vector.push_back(__pyx_t_5);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(6, 76, __pyx_L1_error)
    }

    /* "../resources_source/python/pysolution.pxi":75
 *         """
 *         cdef vector[int] edges_vector
 *         for i in edges:             # <<<<<<<<<<<<<<
 *             edges_vector.push_back(i)
 * 
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "../resources_source/python/pysolution.pxi":78
 *             edges_vector.push_back(i)
 * 
 *         out = dict()             # <<<<<<<<<<<<<<
 *         cdef map[string, double] results
 * 
 */
  __pyx_t_1 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(6, 78, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_out = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "../resources_source/python/pysolution.pxi":82
 * 
 *         self._solution.surfaceIntegrals(edges_vector,
 *                                         int(-1 if time_step is None else time_step),             # <<<<<<<<<<<<<<
 *                                         int(-1 if adaptivity_step is None else adaptivity_step),
 *                                         results)
 */
  __pyx_t_6 = (__pyx_v_time_step == Py_None);
  if ((__pyx_t_6 != 0)) {
    __Pyx_INCREF(__pyx_int_neg_1);
    __pyx_t_1 = __pyx_int_neg_1;
  } else {
    __Pyx_INCREF(__pyx_v_time_step);
    __pyx_t_1 = __pyx_v_time_step;
  }
  __pyx_t_4 = __Pyx_PyNumber_Int(__pyx_t_1); if (unlikely(!__pyx_t_4)) __PYX_ERR(6, 82, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_5 = __Pyx_PyInt_As_int(__pyx_t_4); if (unlikely((__pyx_t_5 == (int)-1) && PyErr_Occurred())) __PYX_ERR(6, 82, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "../resources_source/python/pysolution.pxi":83
 *         self._solution.surfaceIntegrals(edges_vector,
 *                                         int(-1 if time_step is None else time_step),
 *                                         int(-1 if adaptivity_step is None else adaptivity_step),             # <<<<<<<<<<<<<<
 *                                         results)
 *         it = results.begin()
 */
  __pyx_t_6 = (__pyx_v_adaptivity_step == Py_None);
  if ((__pyx_t_6 != 0)) {
    __Pyx_INCREF(__pyx_int_neg_1);
    __pyx_t_4 = __pyx_int_neg_1;
  } else {
    __Pyx_INCREF(__pyx_v_adaptivity_step);
    __pyx_t_4 = __pyx_v_adaptivity_step;
  }
  __pyx_t_1 = __Pyx_PyNumber_Int(__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(6, 83, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_7 = __Pyx_PyInt_As_int(__pyx_t_1); if (unlikely((__pyx_t_7 == (int)-1) && PyErr_Occurred())) __PYX_ERR(6, 83, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "../resources_source/python/pysolution.pxi":81
 *         cdef map[string, double] results
 * 
 *         self._solution.surfaceIntegrals(edges_vector,             # <<<<<<<<<<<<<<
 *                                         int(-1 if time_step is None else time_step),
 *                                         int(-1 if adaptivity_step is None else adaptivity_step),
 */
  try {
    __pyx_v_self->_solution->surfaceIntegrals(__pyx_v_edges_vector, __pyx_t_5, __pyx_t_7, __pyx_v_results);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(6, 81, __pyx_L1_error)
  }

  /* "../resources_source/python/pysolution.pxi":85
 *                                         int(-1 if adaptivity_step is None else adaptivity_step),
 *                                         results)
 *         it = results.begin()             # <<<<<<<<<<<<<<
 *         while it != results.end():
 *             out[deref(it).first.decode()] = deref(it).second
 */
  __pyx_v_it = __pyx_v_results.begin();

  /* "../resources_source/python/pysolution.pxi":86
 *                                         results)
 *         it = results.begin()
 *         while it != results.end():             # <<<<<<<<<<<<<<
 *             out[deref(it).first.decode()] = deref(it).second
 *             incr(it)
 */
  while (1) {
    __pyx_t_6 = ((__pyx_v_it != __pyx_v_results.end()) != 0);
    if (!__pyx_t_6) break;

    /* "../resources_source/python/pysolution.pxi":87
 *         it = results.begin()
 *         while it != results.end():
 *             out[deref(it).first.decode()] = deref(it).second             # <<<<<<<<<<<<<<
 *             incr(it)
 * 
 */
    __pyx_t_1 = PyFloat_FromDouble((*__pyx_v_it).second); if (unlikely(!__pyx_t_1)) __PYX_ERR(6, 87, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_4 = __Pyx_decode_cpp_string((*__pyx_v_it).first, 0, PY_SSIZE_T_MAX, NULL, NULL, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(6, 87, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    if (unlikely(PyDict_SetItem(__pyx_v_out, __pyx_t_4, __pyx_t_1) < 0)) __PYX_ERR(6, 87, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "../resources_source/python/pysolution.pxi":88
 *         while it != results.end():
 *             out[deref(it).first.decode()] = deref(it).second
 *             incr(it)             # <<<<<<<<<<<<<<
 * 
 *         return out
 */
    (void)((++__pyx_v_it));
  }

  /* "../resources_source/python/pysolution.pxi":90
 *             incr(it)
 * 
 *         return out             # <<<<<<<<<<<<<<
 * 
 *     # volume integrals
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_out);
  __pyx_r = __pyx_v_out;
  goto __pyx_L0;

  /* "../resources_source/python/pysolution.pxi":64
 * 
 *     # surface integrals
 *     def surface_integrals(self, edges = [], time_step = None, adaptivity_step = None):             # <<<<<<<<<<<<<<
 *         """Compute surface integrals on edges and return dictionary with results.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("_agros.__Solution__.surface_integrals", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_i);
  __Pyx_XDECREF(__pyx_v_out);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../resources_source/python/pysolution.pxi":93
 * 
 *     # volume integrals
 *     def volume_integrals(self, labels = [], time_step = None, adaptivity_step = None):             # <<<<<<<<<<<<<<
 *         """Compute volume integrals on labels and return dictionary with results.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6_agros_12__Solution___9volume_integrals(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6_agros_12__Solution___8volume_integrals[] = "Compute volume integrals on labels and return dictionary with results.\n\n        volume_integrals(labels = [], time_step = None, adaptivity_step = None)\n\n        Keyword arguments:\n        labels -- list of labels (default is [] - compute integrals on all labels)\n        time_step -- time step (default is None - use last time step)\n        adaptivity_step -- adaptivity step (default is None - use adaptive step)        \n        ";
static PyObject *__pyx_pw_6_agros_12__Solution___9volume_integrals(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_labels = 0;
  PyObject *__pyx_v_time_step = 0;
  PyObject *__pyx_v_adaptivity_step = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("volume_integrals (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_labels,&__pyx_n_s_time_step,&__pyx_n_s_adaptivity_step,0};
    PyObject* values[3] = {0,0,0};
    values[0] = __pyx_k__41;
    values[1] = ((PyObject *)Py_None);
    values[2] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_labels);
          if (value) { values[0] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_time_step);
          if (value) { values[1] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_adaptivity_step);
          if (value) { values[2] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "volume_integrals") < 0)) __PYX_ERR(6, 93, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_labels = values[0];
    __pyx_v_time_step = values[1];
    __pyx_v_adaptivity_step = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("volume_integrals", 0, 0, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(6, 93, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("_agros.__Solution__.volume_integrals", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6_agros_12__Solution___8volume_integrals(((struct __pyx_obj_6_agros___Solution__ *)__pyx_v_self), __pyx_v_labels, __pyx_v_time_step, __pyx_v_adaptivity_step);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6_agros_12__Solution___8volume_integrals(struct __pyx_obj_6_agros___Solution__ *__pyx_v_self, PyObject *__pyx_v_labels, PyObject *__pyx_v_time_step, PyObject *__pyx_v_adaptivity_step) {
  std::vector<int>  __pyx_v_labels_vector;
  PyObject *__pyx_v_i = NULL;
  PyObject *__pyx_v_out = NULL;
  std::map<std::string,double>  __pyx_v_results;
  std::map<std::string,double> ::iterator __pyx_v_it;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *(*__pyx_t_3)(PyObject *);
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  int __pyx_t_6;
  int __pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("volume_integrals", 0);

  /* "../resources_source/python/pysolution.pxi":104
 *         """
 *         cdef vector[int] labels_vector
 *         for i in labels:             # <<<<<<<<<<<<<<
 *             labels_vector.push_back(i)
 * 
 */
  if (likely(PyList_CheckExact(__pyx_v_labels)) || PyTuple_CheckExact(__pyx_v_labels)) {
    __pyx_t_1 = __pyx_v_labels; __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
    __pyx_t_3 = NULL;
  } else {
    __pyx_t_2 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_v_labels); if (unlikely(!__pyx_t_1)) __PYX_ERR(6, 104, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_3)) __PYX_ERR(6, 104, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_3)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(6, 104, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(6, 104, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      } else {
        if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(6, 104, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(6, 104, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      }
    } else {
      __pyx_t_4 = __pyx_t_3(__pyx_t_1);
      if (unlikely(!__pyx_t_4)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(6, 104, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_4);
    }
    __Pyx_XDECREF_SET(__pyx_v_i, __pyx_t_4);
    __pyx_t_4 = 0;

    /* "../resources_source/python/pysolution.pxi":105
 *         cdef vector[int] labels_vector
 *         for i in labels:
 *             labels_vector.push_back(i)             # <<<<<<<<<<<<<<
 * 
 *         out = dict()
 */
    __pyx_t_5 = __Pyx_PyInt_As_int(__pyx_v_i); if (unlikely((__pyx_t_5 == (int)-1) && PyErr_Occurred())) __PYX_ERR(6, 105, __pyx_L1_error)
    try {
      __pyx_v_labels_vector.push_back(__pyx_t_5);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(6, 105, __pyx_L1_error)
    }

    /* "../resources_source/python/pysolution.pxi":104
 *         """
 *         cdef vector[int] labels_vector
 *         for i in labels:             # <<<<<<<<<<<<<<
 *             labels_vector.push_back(i)
 * 
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "../resources_source/python/pysolution.pxi":107
 *             labels_vector.push_back(i)
 * 
 *         out = dict()             # <<<<<<<<<<<<<<
 *         cdef map[string, double] results
 * 
 */
  __pyx_t_1 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(6, 107, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_out = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "../resources_source/python/pysolution.pxi":111
 * 
 *         self._solution.volumeIntegrals(labels_vector,
 *                                        int(-1 if time_step is None else time_step),             # <<<<<<<<<<<<<<
 *                                        int(-1 if adaptivity_step is None else adaptivity_step),
 *                                        results)
 */
  __pyx_t_6 = (__pyx_v_time_step == Py_None);
  if ((__pyx_t_6 != 0)) {
    __Pyx_INCREF(__pyx_int_neg_1);
    __pyx_t_1 = __pyx_int_neg_1;
  } else {
    __Pyx_INCREF(__pyx_v_time_step);
    __pyx_t_1 = __pyx_v_time_step;
  }
  __pyx_t_4 = __Pyx_PyNumber_Int(__pyx_t_1); if (unlikely(!__pyx_t_4)) __PYX_ERR(6, 111, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_5 = __Pyx_PyInt_As_int(__pyx_t_4); if (unlikely((__pyx_t_5 == (int)-1) && PyErr_Occurred())) __PYX_ERR(6, 111, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "../resources_source/python/pysolution.pxi":112
 *         self._solution.volumeIntegrals(labels_vector,
 *                                        int(-1 if time_step is None else time_step),
 *                                        int(-1 if adaptivity_step is None else adaptivity_step),             # <<<<<<<<<<<<<<
 *                                        results)
 *         it = results.begin()
 */
  __pyx_t_6 = (__pyx_v_adaptivity_step == Py_None);
  if ((__pyx_t_6 != 0)) {
    __Pyx_INCREF(__pyx_int_neg_1);
    __pyx_t_4 = __pyx_int_neg_1;
  } else {
    __Pyx_INCREF(__pyx_v_adaptivity_step);
    __pyx_t_4 = __pyx_v_adaptivity_step;
  }
  __pyx_t_1 = __Pyx_PyNumber_Int(__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(6, 112, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_7 = __Pyx_PyInt_As_int(__pyx_t_1); if (unlikely((__pyx_t_7 == (int)-1) && PyErr_Occurred())) __PYX_ERR(6, 112, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "../resources_source/python/pysolution.pxi":110
 *         cdef map[string, double] results
 * 
 *         self._solution.volumeIntegrals(labels_vector,             # <<<<<<<<<<<<<<
 *                                        int(-1 if time_step is None else time_step),
 *                                        int(-1 if adaptivity_step is None else adaptivity_step),
 */
  try {
    __pyx_v_self->_solution->volumeIntegrals(__pyx_v_labels_vector, __pyx_t_5, __pyx_t_7, __pyx_v_results);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(6, 110, __pyx_L1_error)
  }

  /* "../resources_source/python/pysolution.pxi":114
 *                                        int(-1 if adaptivity_step is None else adaptivity_step),
 *                                        results)
 *         it = results.begin()             # <<<<<<<<<<<<<<
 *         while it != results.end():
 *             out[deref(it).first.decode()] = deref(it).second
 */
  __pyx_v_it = __pyx_v_results.begin();

  /* "../resources_source/python/pysolution.pxi":115
 *                                        results)
 *         it = results.begin()
 *         while it != results.end():             # <<<<<<<<<<<<<<
 *             out[deref(it).first.decode()] = deref(it).second
 *             incr(it)
 */
  while (1) {
    __pyx_t_6 = ((__pyx_v_it != __pyx_v_results.end()) != 0);
    if (!__pyx_t_6) break;

    /* "../resources_source/python/pysolution.pxi":116
 *         it = results.begin()
 *         while it != results.end():
 *             out[deref(it).first.decode()] = deref(it).second             # <<<<<<<<<<<<<<
 *             incr(it)
 * 
 */
    __pyx_t_1 = PyFloat_FromDouble((*__pyx_v_it).second); if (unlikely(!__pyx_t_1)) __PYX_ERR(6, 116, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_4 = __Pyx_decode_cpp_string((*__pyx_v_it).first, 0, PY_SSIZE_T_MAX, NULL, NULL, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(6, 116, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    if (unlikely(PyDict_SetItem(__pyx_v_out, __pyx_t_4, __pyx_t_1) < 0)) __PYX_ERR(6, 116, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "../resources_source/python/pysolution.pxi":117
 *         while it != results.end():
 *             out[deref(it).first.decode()] = deref(it).second
 *             incr(it)             # <<<<<<<<<<<<<<
 * 
 *         return out
 */
    (void)((++__pyx_v_it));
  }

  /* "../resources_source/python/pysolution.pxi":119
 *             incr(it)
 * 
 *         return out             # <<<<<<<<<<<<<<
 * 
 *     # mesh info
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_out);
  __pyx_r = __pyx_v_out;
  goto __pyx_L0;

  /* "../resources_source/python/pysolution.pxi":93
 * 
 *     # volume integrals
 *     def volume_integrals(self, labels = [], time_step = None, adaptivity_step = None):             # <<<<<<<<<<<<<<
 *         """Compute volume integrals on labels and return dictionary with results.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("_agros.__Solution__.volume_integrals", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_i);
  __Pyx_XDECREF(__pyx_v_out);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../resources_source/python/pysolution.pxi":122
 * 
 *     # mesh info
 *     def initial_mesh_info(self):             # <<<<<<<<<<<<<<
 *         """Return dictionary with initial mesh info."""
 *         info = dict()
 */

/* Python wrapper */
static PyObject *__pyx_pw_6_agros_12__Solution___11initial_mesh_info(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_6_agros_12__Solution___10initial_mesh_info[] = "Return dictionary with initial mesh info.";
static PyObject *__pyx_pw_6_agros_12__Solution___11initial_mesh_info(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("initial_mesh_info (wrapper)", 0);
  __pyx_r = __pyx_pf_6_agros_12__Solution___10initial_mesh_info(((struct __pyx_obj_6_agros___Solution__ *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6_agros_12__Solution___10initial_mesh_info(struct __pyx_obj_6_agros___Solution__ *__pyx_v_self) {
  PyObject *__pyx_v_info = NULL;
  std::map<std::string,int>  __pyx_v_info_map;
  std::map<std::string,int> ::iterator __pyx_v_it;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("initial_mesh_info", 0);

  /* "../resources_source/python/pysolution.pxi":124
 *     def initial_mesh_info(self):
 *         """Return dictionary with initial mesh info."""
 *         info = dict()             # <<<<<<<<<<<<<<
 *         cdef map[string, int] info_map
 * 
 */
  __pyx_t_1 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(6, 124, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_info = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "../resources_source/python/pysolution.pxi":127
 *         cdef map[string, int] info_map
 * 
 *         self._solution.initialMeshInfo(info_map)             # <<<<<<<<<<<<<<
 *         it = info_map.begin()
 *         while it != info_map.end():
 */
  try {
    __pyx_v_self->_solution->initialMeshInfo(__pyx_v_info_map);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(6, 127, __pyx_L1_error)
  }

  /* "../resources_source/python/pysolution.pxi":128
 * 
 *         self._solution.initialMeshInfo(info_map)
 *         it = info_map.begin()             # <<<<<<<<<<<<<<
 *         while it != info_map.end():
 *             info[deref(it).first.decode()] = deref(it).second
 */
  __pyx_v_it = __pyx_v_info_map.begin();

  /* "../resources_source/python/pysolution.pxi":129
 *         self._solution.initialMeshInfo(info_map)
 *         it = info_map.begin()
 *         while it != info_map.end():             # <<<<<<<<<<<<<<
 *             info[deref(it).first.decode()] = deref(it).second
 *             incr(it)
 */
  while (1) {
    __pyx_t_2 = ((__pyx_v_it != __pyx_v_info_map.end()) != 0);
    if (!__pyx_t_2) break;

    /* "../resources_source/python/pysolution.pxi":130
 *         it = info_map.begin()
 *         while it != info_map.end():
 *             info[deref(it).first.decode()] = deref(it).second             # <<<<<<<<<<<<<<
 *             incr(it)
 * 
 */
    __pyx_t_1 = __Pyx_PyInt_From_int((*__pyx_v_it).second); if (unlikely(!__pyx_t_1)) __PYX_ERR(6, 130, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = __Pyx_decode_cpp_string((*__pyx_v_it).first, 0, PY_SSIZE_T_MAX, NULL, NULL, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(6, 130, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (unlikely(PyDict_SetItem(__pyx_v_info, __pyx_t_3, __pyx_t_1) < 0)) __PYX_ERR(6, 130, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "../resources_source/python/pysolution.pxi":131
 *         while it != info_map.end():
 *             info[deref(it).first.decode()] = deref(it).second
 *             incr(it)             # <<<<<<<<<<<<<<
 * 
 *         return info
 */
    (void)((++__pyx_v_it));
  }

  /* "../resources_source/python/pysolution.pxi":133
 *             incr(it)
 * 
 *         return info             # <<<<<<<<<<<<<<
 * 
 *     def solution_mesh_info(self, time_step = None, adaptivity_step = None):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_info);
  __pyx_r = __pyx_v_info;
  goto __pyx_L0;

  /* "../resources_source/python/pysolution.pxi":122
 * 
 *     # mesh info
 *     def initial_mesh_info(self):             # <<<<<<<<<<<<<<
 *         """Return dictionary with initial mesh info."""
 *         info = dict()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("_agros.__Solution__.initial_mesh_info", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_info);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../resources_source/python/pysolution.pxi":135
 *         return info
 * 
 *     def solution_mesh_info(self, time_step = None, adaptivity_step = None):             # <<<<<<<<<<<<<<
 *         """Return dictionary with solution mesh info.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6_agros_12__Solution___13solution_mesh_info(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6_agros_12__Solution___12solution_mesh_info[] = "Return dictionary with solution mesh info.\n\n        solution_mesh_info(time_step = None, adaptivity_step = None)\n\n        Keyword arguments:\n        time_step -- time step (default is None - use last time step)\n        adaptivity_step -- adaptivity step (default is None - use adaptive step)\n        ";
static PyObject *__pyx_pw_6_agros_12__Solution___13solution_mesh_info(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_time_step = 0;
  PyObject *__pyx_v_adaptivity_step = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("solution_mesh_info (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_time_step,&__pyx_n_s_adaptivity_step,0};
    PyObject* values[2] = {0,0};
    values[0] = ((PyObject *)Py_None);
    values[1] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_time_step);
          if (value) { values[0] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_adaptivity_step);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "solution_mesh_info") < 0)) __PYX_ERR(6, 135, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_time_step = values[0];
    __pyx_v_adaptivity_step = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("solution_mesh_info", 0, 0, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(6, 135, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("_agros.__Solution__.solution_mesh_info", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6_agros_12__Solution___12solution_mesh_info(((struct __pyx_obj_6_agros___Solution__ *)__pyx_v_self), __pyx_v_time_step, __pyx_v_adaptivity_step);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6_agros_12__Solution___12solution_mesh_info(struct __pyx_obj_6_agros___Solution__ *__pyx_v_self, PyObject *__pyx_v_time_step, PyObject *__pyx_v_adaptivity_step) {
  PyObject *__pyx_v_info = NULL;
  std::map<std::string,int>  __pyx_v_info_map;
  std::map<std::string,int> ::iterator __pyx_v_it;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("solution_mesh_info", 0);

  /* "../resources_source/python/pysolution.pxi":144
 *         adaptivity_step -- adaptivity step (default is None - use adaptive step)
 *         """
 *         info = dict()             # <<<<<<<<<<<<<<
 *         cdef map[string, int] info_map
 * 
 */
  __pyx_t_1 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(6, 144, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_info = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "../resources_source/python/pysolution.pxi":147
 *         cdef map[string, int] info_map
 * 
 *         self._solution.solutionMeshInfo(int(-1 if time_step is None else time_step),             # <<<<<<<<<<<<<<
 *                                        int(-1 if adaptivity_step is None else adaptivity_step),
 *                                        info_map)
 */
  __pyx_t_2 = (__pyx_v_time_step == Py_None);
  if ((__pyx_t_2 != 0)) {
    __Pyx_INCREF(__pyx_int_neg_1);
    __pyx_t_1 = __pyx_int_neg_1;
  } else {
    __Pyx_INCREF(__pyx_v_time_step);
    __pyx_t_1 = __pyx_v_time_step;
  }
  __pyx_t_3 = __Pyx_PyNumber_Int(__pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(6, 147, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_4 = __Pyx_PyInt_As_int(__pyx_t_3); if (unlikely((__pyx_t_4 == (int)-1) && PyErr_Occurred())) __PYX_ERR(6, 147, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "../resources_source/python/pysolution.pxi":148
 * 
 *         self._solution.solutionMeshInfo(int(-1 if time_step is None else time_step),
 *                                        int(-1 if adaptivity_step is None else adaptivity_step),             # <<<<<<<<<<<<<<
 *                                        info_map)
 * 
 */
  __pyx_t_2 = (__pyx_v_adaptivity_step == Py_None);
  if ((__pyx_t_2 != 0)) {
    __Pyx_INCREF(__pyx_int_neg_1);
    __pyx_t_3 = __pyx_int_neg_1;
  } else {
    __Pyx_INCREF(__pyx_v_adaptivity_step);
    __pyx_t_3 = __pyx_v_adaptivity_step;
  }
  __pyx_t_1 = __Pyx_PyNumber_Int(__pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(6, 148, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_5 = __Pyx_PyInt_As_int(__pyx_t_1); if (unlikely((__pyx_t_5 == (int)-1) && PyErr_Occurred())) __PYX_ERR(6, 148, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "../resources_source/python/pysolution.pxi":147
 *         cdef map[string, int] info_map
 * 
 *         self._solution.solutionMeshInfo(int(-1 if time_step is None else time_step),             # <<<<<<<<<<<<<<
 *                                        int(-1 if adaptivity_step is None else adaptivity_step),
 *                                        info_map)
 */
  try {
    __pyx_v_self->_solution->solutionMeshInfo(__pyx_t_4, __pyx_t_5, __pyx_v_info_map);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(6, 147, __pyx_L1_error)
  }

  /* "../resources_source/python/pysolution.pxi":151
 *                                        info_map)
 * 
 *         it = info_map.begin()             # <<<<<<<<<<<<<<
 *         while it != info_map.end():
 *             info[deref(it).first.decode()] = deref(it).second
 */
  __pyx_v_it = __pyx_v_info_map.begin();

  /* "../resources_source/python/pysolution.pxi":152
 * 
 *         it = info_map.begin()
 *         while it != info_map.end():             # <<<<<<<<<<<<<<
 *             info[deref(it).first.decode()] = deref(it).second
 *             incr(it)
 */
  while (1) {
    __pyx_t_2 = ((__pyx_v_it != __pyx_v_info_map.end()) != 0);
    if (!__pyx_t_2) break;

    /* "../resources_source/python/pysolution.pxi":153
 *         it = info_map.begin()
 *         while it != info_map.end():
 *             info[deref(it).first.decode()] = deref(it).second             # <<<<<<<<<<<<<<
 *             incr(it)
 * 
 */
    __pyx_t_1 = __Pyx_PyInt_From_int((*__pyx_v_it).second); if (unlikely(!__pyx_t_1)) __PYX_ERR(6, 153, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = __Pyx_decode_cpp_string((*__pyx_v_it).first, 0, PY_SSIZE_T_MAX, NULL, NULL, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(6, 153, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (unlikely(PyDict_SetItem(__pyx_v_info, __pyx_t_3, __pyx_t_1) < 0)) __PYX_ERR(6, 153, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "../resources_source/python/pysolution.pxi":154
 *         while it != info_map.end():
 *             info[deref(it).first.decode()] = deref(it).second
 *             incr(it)             # <<<<<<<<<<<<<<
 * 
 *         return info
 */
    (void)((++__pyx_v_it));
  }

  /* "../resources_source/python/pysolution.pxi":156
 *             incr(it)
 * 
 *         return info             # <<<<<<<<<<<<<<
 * 
 *     # solver info
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_info);
  __pyx_r = __pyx_v_info;
  goto __pyx_L0;

  /* "../resources_source/python/pysolution.pxi":135
 *         return info
 * 
 *     def solution_mesh_info(self, time_step = None, adaptivity_step = None):             # <<<<<<<<<<<<<<
 *         """Return dictionary with solution mesh info.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("_agros.__Solution__.solution_mesh_info", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_info);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../resources_source/python/pysolution.pxi":159
 * 
 *     # solver info
 *     def solver_info(self, time_step = None, adaptivity_step = None):             # <<<<<<<<<<<<<<
 *         """Return dictionary with solver info.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6_agros_12__Solution___15solver_info(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6_agros_12__Solution___14solver_info[] = "Return dictionary with solver info.\n\n        solver_info(time_step = None, adaptivity_step = None)\n\n        Keyword arguments:\n        time_step -- time step (default is None - use last time step)\n        adaptivity_step -- adaptivity step (default is None - use adaptive step)\n        ";
static PyObject *__pyx_pw_6_agros_12__Solution___15solver_info(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_time_step = 0;
  PyObject *__pyx_v_adaptivity_step = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("solver_info (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_time_step,&__pyx_n_s_adaptivity_step,0};
    PyObject* values[2] = {0,0};
    values[0] = ((PyObject *)Py_None);
    values[1] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_time_step);
          if (value) { values[0] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_adaptivity_step);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "solver_info") < 0)) __PYX_ERR(6, 159, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_time_step = values[0];
    __pyx_v_adaptivity_step = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("solver_info", 0, 0, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(6, 159, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("_agros.__Solution__.solver_info", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6_agros_12__Solution___14solver_info(((struct __pyx_obj_6_agros___Solution__ *)__pyx_v_self), __pyx_v_time_step, __pyx_v_adaptivity_step);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6_agros_12__Solution___14solver_info(struct __pyx_obj_6_agros___Solution__ *__pyx_v_self, PyObject *__pyx_v_time_step, PyObject *__pyx_v_adaptivity_step) {
  std::vector<double>  __pyx_v_solution_change_vector;
  std::vector<double>  __pyx_v_residual_vector;
  std::vector<double>  __pyx_v_damping_vector;
  int __pyx_v_jacobian_calculations;
  PyObject *__pyx_v_solution_change = NULL;
  std::vector<double> ::size_type __pyx_v_i;
  PyObject *__pyx_v_residual = NULL;
  PyObject *__pyx_v_damping = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_t_5;
  std::vector<double> ::size_type __pyx_t_6;
  std::vector<double> ::size_type __pyx_t_7;
  std::vector<double> ::size_type __pyx_t_8;
  int __pyx_t_9;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("solver_info", 0);

  /* "../resources_source/python/pysolution.pxi":172
 *         cdef vector[double] damping_vector
 *         cdef int jacobian_calculations
 *         jacobian_calculations = -1             # <<<<<<<<<<<<<<
 *         self._solution.solverInfo(int(-1 if time_step is None else time_step),
 *                                  int(-1 if adaptivity_step is None else adaptivity_step),
 */
  __pyx_v_jacobian_calculations = -1;

  /* "../resources_source/python/pysolution.pxi":173
 *         cdef int jacobian_calculations
 *         jacobian_calculations = -1
 *         self._solution.solverInfo(int(-1 if time_step is None else time_step),             # <<<<<<<<<<<<<<
 *                                  int(-1 if adaptivity_step is None else adaptivity_step),
 *                                  solution_change_vector, residual_vector,
 */
  __pyx_t_2 = (__pyx_v_time_step == Py_None);
  if ((__pyx_t_2 != 0)) {
    __Pyx_INCREF(__pyx_int_neg_1);
    __pyx_t_1 = __pyx_int_neg_1;
  } else {
    __Pyx_INCREF(__pyx_v_time_step);
    __pyx_t_1 = __pyx_v_time_step;
  }
  __pyx_t_3 = __Pyx_PyNumber_Int(__pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(6, 173, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_4 = __Pyx_PyInt_As_int(__pyx_t_3); if (unlikely((__pyx_t_4 == (int)-1) && PyErr_Occurred())) __PYX_ERR(6, 173, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "../resources_source/python/pysolution.pxi":174
 *         jacobian_calculations = -1
 *         self._solution.solverInfo(int(-1 if time_step is None else time_step),
 *                                  int(-1 if adaptivity_step is None else adaptivity_step),             # <<<<<<<<<<<<<<
 *                                  solution_change_vector, residual_vector,
 *                                  damping_vector, jacobian_calculations)
 */
  __pyx_t_2 = (__pyx_v_adaptivity_step == Py_None);
  if ((__pyx_t_2 != 0)) {
    __Pyx_INCREF(__pyx_int_neg_1);
    __pyx_t_3 = __pyx_int_neg_1;
  } else {
    __Pyx_INCREF(__pyx_v_adaptivity_step);
    __pyx_t_3 = __pyx_v_adaptivity_step;
  }
  __pyx_t_1 = __Pyx_PyNumber_Int(__pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(6, 174, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_5 = __Pyx_PyInt_As_int(__pyx_t_1); if (unlikely((__pyx_t_5 == (int)-1) && PyErr_Occurred())) __PYX_ERR(6, 174, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "../resources_source/python/pysolution.pxi":173
 *         cdef int jacobian_calculations
 *         jacobian_calculations = -1
 *         self._solution.solverInfo(int(-1 if time_step is None else time_step),             # <<<<<<<<<<<<<<
 *                                  int(-1 if adaptivity_step is None else adaptivity_step),
 *                                  solution_change_vector, residual_vector,
 */
  try {
    __pyx_v_self->_solution->solverInfo(__pyx_t_4, __pyx_t_5, __pyx_v_solution_change_vector, __pyx_v_residual_vector, __pyx_v_damping_vector, __pyx_v_jacobian_calculations);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(6, 173, __pyx_L1_error)
  }

  /* "../resources_source/python/pysolution.pxi":178
 *                                  damping_vector, jacobian_calculations)
 * 
 *         solution_change = list()             # <<<<<<<<<<<<<<
 *         for i in range(solution_change_vector.size()):
 *             solution_change.append(solution_change_vector[i])
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(6, 178, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_solution_change = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "../resources_source/python/pysolution.pxi":179
 * 
 *         solution_change = list()
 *         for i in range(solution_change_vector.size()):             # <<<<<<<<<<<<<<
 *             solution_change.append(solution_change_vector[i])
 * 
 */
  __pyx_t_6 = __pyx_v_solution_change_vector.size();
  __pyx_t_7 = __pyx_t_6;
  for (__pyx_t_8 = 0; __pyx_t_8 < __pyx_t_7; __pyx_t_8+=1) {
    __pyx_v_i = __pyx_t_8;

    /* "../resources_source/python/pysolution.pxi":180
 *         solution_change = list()
 *         for i in range(solution_change_vector.size()):
 *             solution_change.append(solution_change_vector[i])             # <<<<<<<<<<<<<<
 * 
 *         residual = list()
 */
    __pyx_t_1 = PyFloat_FromDouble((__pyx_v_solution_change_vector[__pyx_v_i])); if (unlikely(!__pyx_t_1)) __PYX_ERR(6, 180, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_9 = __Pyx_PyList_Append(__pyx_v_solution_change, __pyx_t_1); if (unlikely(__pyx_t_9 == ((int)-1))) __PYX_ERR(6, 180, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "../resources_source/python/pysolution.pxi":182
 *             solution_change.append(solution_change_vector[i])
 * 
 *         residual = list()             # <<<<<<<<<<<<<<
 *         for i in range(residual_vector.size()):
 *             residual.append(residual_vector[i])
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(6, 182, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_residual = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "../resources_source/python/pysolution.pxi":183
 * 
 *         residual = list()
 *         for i in range(residual_vector.size()):             # <<<<<<<<<<<<<<
 *             residual.append(residual_vector[i])
 * 
 */
  __pyx_t_6 = __pyx_v_residual_vector.size();
  __pyx_t_7 = __pyx_t_6;
  for (__pyx_t_8 = 0; __pyx_t_8 < __pyx_t_7; __pyx_t_8+=1) {
    __pyx_v_i = __pyx_t_8;

    /* "../resources_source/python/pysolution.pxi":184
 *         residual = list()
 *         for i in range(residual_vector.size()):
 *             residual.append(residual_vector[i])             # <<<<<<<<<<<<<<
 * 
 *         damping = list()
 */
    __pyx_t_1 = PyFloat_FromDouble((__pyx_v_residual_vector[__pyx_v_i])); if (unlikely(!__pyx_t_1)) __PYX_ERR(6, 184, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_9 = __Pyx_PyList_Append(__pyx_v_residual, __pyx_t_1); if (unlikely(__pyx_t_9 == ((int)-1))) __PYX_ERR(6, 184, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "../resources_source/python/pysolution.pxi":186
 *             residual.append(residual_vector[i])
 * 
 *         damping = list()             # <<<<<<<<<<<<<<
 *         for i in range(damping_vector.size()):
 *             damping.append(damping_vector[i])
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(6, 186, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_damping = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "../resources_source/python/pysolution.pxi":187
 * 
 *         damping = list()
 *         for i in range(damping_vector.size()):             # <<<<<<<<<<<<<<
 *             damping.append(damping_vector[i])
 * 
 */
  __pyx_t_6 = __pyx_v_damping_vector.size();
  __pyx_t_7 = __pyx_t_6;
  for (__pyx_t_8 = 0; __pyx_t_8 < __pyx_t_7; __pyx_t_8+=1) {
    __pyx_v_i = __pyx_t_8;

    /* "../resources_source/python/pysolution.pxi":188
 *         damping = list()
 *         for i in range(damping_vector.size()):
 *             damping.append(damping_vector[i])             # <<<<<<<<<<<<<<
 * 
 *         return {'solution_change' : solution_change, 'residual' : residual, 'damping' : damping, 'jacobian_calculations' : jacobian_calculations}
 */
    __pyx_t_1 = PyFloat_FromDouble((__pyx_v_damping_vector[__pyx_v_i])); if (unlikely(!__pyx_t_1)) __PYX_ERR(6, 188, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_9 = __Pyx_PyList_Append(__pyx_v_damping, __pyx_t_1); if (unlikely(__pyx_t_9 == ((int)-1))) __PYX_ERR(6, 188, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "../resources_source/python/pysolution.pxi":190
 *             damping.append(damping_vector[i])
 * 
 *         return {'solution_change' : solution_change, 'residual' : residual, 'damping' : damping, 'jacobian_calculations' : jacobian_calculations}             # <<<<<<<<<<<<<<
 * 
 *     # adaptivity info
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyDict_NewPresized(4); if (unlikely(!__pyx_t_1)) __PYX_ERR(6, 190, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_solution_change, __pyx_v_solution_change) < 0) __PYX_ERR(6, 190, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_residual, __pyx_v_residual) < 0) __PYX_ERR(6, 190, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_damping, __pyx_v_damping) < 0) __PYX_ERR(6, 190, __pyx_L1_error)
  __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_v_jacobian_calculations); if (unlikely(!__pyx_t_3)) __PYX_ERR(6, 190, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_jacobian_calculations, __pyx_t_3) < 0) __PYX_ERR(6, 190, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../resources_source/python/pysolution.pxi":159
 * 
 *     # solver info
 *     def solver_info(self, time_step = None, adaptivity_step = None):             # <<<<<<<<<<<<<<
 *         """Return dictionary with solver info.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("_agros.__Solution__.solver_info", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_solution_change);
  __Pyx_XDECREF(__pyx_v_residual);
  __Pyx_XDECREF(__pyx_v_damping);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../resources_source/python/pysolution.pxi":193
 * 
 *     # adaptivity info
 *     def adaptivity_info(self, time_step = None):             # <<<<<<<<<<<<<<
 *         """Return dictionary with adaptivity process info.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6_agros_12__Solution___17adaptivity_info(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6_agros_12__Solution___16adaptivity_info[] = "Return dictionary with adaptivity process info.\n\n        adaptivity_info(time_step = None)\n\n        Keyword arguments:\n        time_step -- time step (default is None - use last time step)\n        ";
static PyObject *__pyx_pw_6_agros_12__Solution___17adaptivity_info(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_time_step = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("adaptivity_info (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_time_step,0};
    PyObject* values[1] = {0};
    values[0] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_time_step);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "adaptivity_info") < 0)) __PYX_ERR(6, 193, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_time_step = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("adaptivity_info", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(6, 193, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("_agros.__Solution__.adaptivity_info", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6_agros_12__Solution___16adaptivity_info(((struct __pyx_obj_6_agros___Solution__ *)__pyx_v_self), __pyx_v_time_step);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6_agros_12__Solution___16adaptivity_info(struct __pyx_obj_6_agros___Solution__ *__pyx_v_self, PyObject *__pyx_v_time_step) {
  std::vector<double>  __pyx_v_error_vector;
  std::vector<int>  __pyx_v_dofs_vector;
  PyObject *__pyx_v_error = NULL;
  std::vector<int> ::size_type __pyx_v_i;
  PyObject *__pyx_v_dofs = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  std::vector<double> ::size_type __pyx_t_5;
  std::vector<double> ::size_type __pyx_t_6;
  std::vector<int> ::size_type __pyx_t_7;
  int __pyx_t_8;
  std::vector<int> ::size_type __pyx_t_9;
  std::vector<int> ::size_type __pyx_t_10;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("adaptivity_info", 0);

  /* "../resources_source/python/pysolution.pxi":203
 *         cdef vector[double] error_vector
 *         cdef vector[int] dofs_vector
 *         self._solution.adaptivityInfo(int(-1 if time_step is None else time_step),             # <<<<<<<<<<<<<<
 *                                      error_vector, dofs_vector)
 * 
 */
  __pyx_t_2 = (__pyx_v_time_step == Py_None);
  if ((__pyx_t_2 != 0)) {
    __Pyx_INCREF(__pyx_int_neg_1);
    __pyx_t_1 = __pyx_int_neg_1;
  } else {
    __Pyx_INCREF(__pyx_v_time_step);
    __pyx_t_1 = __pyx_v_time_step;
  }
  __pyx_t_3 = __Pyx_PyNumber_Int(__pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(6, 203, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_4 = __Pyx_PyInt_As_int(__pyx_t_3); if (unlikely((__pyx_t_4 == (int)-1) && PyErr_Occurred())) __PYX_ERR(6, 203, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "../resources_source/python/pysolution.pxi":204
 *         cdef vector[int] dofs_vector
 *         self._solution.adaptivityInfo(int(-1 if time_step is None else time_step),
 *                                      error_vector, dofs_vector)             # <<<<<<<<<<<<<<
 * 
 *         error = list()
 */
  try {
    __pyx_v_self->_solution->adaptivityInfo(__pyx_t_4, __pyx_v_error_vector, __pyx_v_dofs_vector);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(6, 203, __pyx_L1_error)
  }

  /* "../resources_source/python/pysolution.pxi":206
 *                                      error_vector, dofs_vector)
 * 
 *         error = list()             # <<<<<<<<<<<<<<
 *         for i in range(error_vector.size()):
 *             error.append(error_vector[i])
 */
  __pyx_t_3 = PyList_New(0); if (unlikely(!__pyx_t_3)) __PYX_ERR(6, 206, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_v_error = ((PyObject*)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "../resources_source/python/pysolution.pxi":207
 * 
 *         error = list()
 *         for i in range(error_vector.size()):             # <<<<<<<<<<<<<<
 *             error.append(error_vector[i])
 * 
 */
  __pyx_t_5 = __pyx_v_error_vector.size();
  __pyx_t_6 = __pyx_t_5;
  for (__pyx_t_7 = 0; __pyx_t_7 < __pyx_t_6; __pyx_t_7+=1) {
    __pyx_v_i = __pyx_t_7;

    /* "../resources_source/python/pysolution.pxi":208
 *         error = list()
 *         for i in range(error_vector.size()):
 *             error.append(error_vector[i])             # <<<<<<<<<<<<<<
 * 
 *         dofs = list()
 */
    __pyx_t_3 = PyFloat_FromDouble((__pyx_v_error_vector[__pyx_v_i])); if (unlikely(!__pyx_t_3)) __PYX_ERR(6, 208, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_8 = __Pyx_PyList_Append(__pyx_v_error, __pyx_t_3); if (unlikely(__pyx_t_8 == ((int)-1))) __PYX_ERR(6, 208, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }

  /* "../resources_source/python/pysolution.pxi":210
 *             error.append(error_vector[i])
 * 
 *         dofs = list()             # <<<<<<<<<<<<<<
 *         for i in range(dofs_vector.size()):
 *             dofs.append(dofs_vector[i])
 */
  __pyx_t_3 = PyList_New(0); if (unlikely(!__pyx_t_3)) __PYX_ERR(6, 210, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_v_dofs = ((PyObject*)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "../resources_source/python/pysolution.pxi":211
 * 
 *         dofs = list()
 *         for i in range(dofs_vector.size()):             # <<<<<<<<<<<<<<
 *             dofs.append(dofs_vector[i])
 * 
 */
  __pyx_t_7 = __pyx_v_dofs_vector.size();
  __pyx_t_9 = __pyx_t_7;
  for (__pyx_t_10 = 0; __pyx_t_10 < __pyx_t_9; __pyx_t_10+=1) {
    __pyx_v_i = __pyx_t_10;

    /* "../resources_source/python/pysolution.pxi":212
 *         dofs = list()
 *         for i in range(dofs_vector.size()):
 *             dofs.append(dofs_vector[i])             # <<<<<<<<<<<<<<
 * 
 *         return {'error' : error, 'dofs' : dofs}
 */
    __pyx_t_3 = __Pyx_PyInt_From_int((__pyx_v_dofs_vector[__pyx_v_i])); if (unlikely(!__pyx_t_3)) __PYX_ERR(6, 212, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_8 = __Pyx_PyList_Append(__pyx_v_dofs, __pyx_t_3); if (unlikely(__pyx_t_8 == ((int)-1))) __PYX_ERR(6, 212, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }

  /* "../resources_source/python/pysolution.pxi":214
 *             dofs.append(dofs_vector[i])
 * 
 *         return {'error' : error, 'dofs' : dofs}             # <<<<<<<<<<<<<<
 * 
 *     def export_vtk(self, fileName, time_step, adaptivity_step, variable, variableComp):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_3 = __Pyx_PyDict_NewPresized(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(6, 214, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_error, __pyx_v_error) < 0) __PYX_ERR(6, 214, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_dofs, __pyx_v_dofs) < 0) __PYX_ERR(6, 214, __pyx_L1_error)
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "../resources_source/python/pysolution.pxi":193
 * 
 *     # adaptivity info
 *     def adaptivity_info(self, time_step = None):             # <<<<<<<<<<<<<<
 *         """Return dictionary with adaptivity process info.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("_agros.__Solution__.adaptivity_info", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_error);
  __Pyx_XDECREF(__pyx_v_dofs);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../resources_source/python/pysolution.pxi":216
 *         return {'error' : error, 'dofs' : dofs}
 * 
 *     def export_vtk(self, fileName, time_step, adaptivity_step, variable, variableComp):             # <<<<<<<<<<<<<<
 *         self._solution.exportVTK(fileName.encode(),
 *                                  int(-1 if time_step is None else time_step),
 */

/* Python wrapper */
static PyObject *__pyx_pw_6_agros_12__Solution___19export_vtk(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_6_agros_12__Solution___19export_vtk(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_fileName = 0;
  PyObject *__pyx_v_time_step = 0;
  PyObject *__pyx_v_adaptivity_step = 0;
  PyObject *__pyx_v_variable = 0;
  PyObject *__pyx_v_variableComp = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("export_vtk (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_fileName,&__pyx_n_s_time_step,&__pyx_n_s_adaptivity_step,&__pyx_n_s_variable,&__pyx_n_s_variableComp,0};
    PyObject* values[5] = {0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_fileName)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_time_step)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("export_vtk", 1, 5, 5, 1); __PYX_ERR(6, 216, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_adaptivity_step)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("export_vtk", 1, 5, 5, 2); __PYX_ERR(6, 216, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_variable)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("export_vtk", 1, 5, 5, 3); __PYX_ERR(6, 216, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (likely((values[4] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_variableComp)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("export_vtk", 1, 5, 5, 4); __PYX_ERR(6, 216, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "export_vtk") < 0)) __PYX_ERR(6, 216, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 5) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
    }
    __pyx_v_fileName = values[0];
    __pyx_v_time_step = values[1];
    __pyx_v_adaptivity_step = values[2];
    __pyx_v_variable = values[3];
    __pyx_v_variableComp = values[4];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("export_vtk", 1, 5, 5, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(6, 216, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("_agros.__Solution__.export_vtk", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6_agros_12__Solution___18export_vtk(((struct __pyx_obj_6_agros___Solution__ *)__pyx_v_self), __pyx_v_fileName, __pyx_v_time_step, __pyx_v_adaptivity_step, __pyx_v_variable, __pyx_v_variableComp);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6_agros_12__Solution___18export_vtk(struct __pyx_obj_6_agros___Solution__ *__pyx_v_self, PyObject *__pyx_v_fileName, PyObject *__pyx_v_time_step, PyObject *__pyx_v_adaptivity_step, PyObject *__pyx_v_variable, PyObject *__pyx_v_variableComp) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  std::string __pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;
  int __pyx_t_7;
  std::string __pyx_t_8;
  std::string __pyx_t_9;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("export_vtk", 0);

  /* "../resources_source/python/pysolution.pxi":217
 * 
 *     def export_vtk(self, fileName, time_step, adaptivity_step, variable, variableComp):
 *         self._solution.exportVTK(fileName.encode(),             # <<<<<<<<<<<<<<
 *                                  int(-1 if time_step is None else time_step),
 *                                  int(-1 if adaptivity_step is None else adaptivity_step),
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_fileName, __pyx_n_s_encode); if (unlikely(!__pyx_t_2)) __PYX_ERR(6, 217, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(6, 217, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = __pyx_convert_string_from_py_std__in_string(__pyx_t_1); if (unlikely(PyErr_Occurred())) __PYX_ERR(6, 217, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "../resources_source/python/pysolution.pxi":218
 *     def export_vtk(self, fileName, time_step, adaptivity_step, variable, variableComp):
 *         self._solution.exportVTK(fileName.encode(),
 *                                  int(-1 if time_step is None else time_step),             # <<<<<<<<<<<<<<
 *                                  int(-1 if adaptivity_step is None else adaptivity_step),
 *                                  variable.encode(),
 */
  __pyx_t_5 = (__pyx_v_time_step == Py_None);
  if ((__pyx_t_5 != 0)) {
    __Pyx_INCREF(__pyx_int_neg_1);
    __pyx_t_1 = __pyx_int_neg_1;
  } else {
    __Pyx_INCREF(__pyx_v_time_step);
    __pyx_t_1 = __pyx_v_time_step;
  }
  __pyx_t_2 = __Pyx_PyNumber_Int(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(6, 218, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_6 = __Pyx_PyInt_As_int(__pyx_t_2); if (unlikely((__pyx_t_6 == (int)-1) && PyErr_Occurred())) __PYX_ERR(6, 218, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "../resources_source/python/pysolution.pxi":219
 *         self._solution.exportVTK(fileName.encode(),
 *                                  int(-1 if time_step is None else time_step),
 *                                  int(-1 if adaptivity_step is None else adaptivity_step),             # <<<<<<<<<<<<<<
 *                                  variable.encode(),
 *                                  variableComp.encode())
 */
  __pyx_t_5 = (__pyx_v_adaptivity_step == Py_None);
  if ((__pyx_t_5 != 0)) {
    __Pyx_INCREF(__pyx_int_neg_1);
    __pyx_t_2 = __pyx_int_neg_1;
  } else {
    __Pyx_INCREF(__pyx_v_adaptivity_step);
    __pyx_t_2 = __pyx_v_adaptivity_step;
  }
  __pyx_t_1 = __Pyx_PyNumber_Int(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(6, 219, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_7 = __Pyx_PyInt_As_int(__pyx_t_1); if (unlikely((__pyx_t_7 == (int)-1) && PyErr_Occurred())) __PYX_ERR(6, 219, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "../resources_source/python/pysolution.pxi":220
 *                                  int(-1 if time_step is None else time_step),
 *                                  int(-1 if adaptivity_step is None else adaptivity_step),
 *                                  variable.encode(),             # <<<<<<<<<<<<<<
 *                                  variableComp.encode())
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_variable, __pyx_n_s_encode); if (unlikely(!__pyx_t_2)) __PYX_ERR(6, 220, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(6, 220, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_8 = __pyx_convert_string_from_py_std__in_string(__pyx_t_1); if (unlikely(PyErr_Occurred())) __PYX_ERR(6, 220, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "../resources_source/python/pysolution.pxi":221
 *                                  int(-1 if adaptivity_step is None else adaptivity_step),
 *                                  variable.encode(),
 *                                  variableComp.encode())             # <<<<<<<<<<<<<<
 * 
 *     # solution
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_variableComp, __pyx_n_s_encode); if (unlikely(!__pyx_t_2)) __PYX_ERR(6, 221, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(6, 221, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_9 = __pyx_convert_string_from_py_std__in_string(__pyx_t_1); if (unlikely(PyErr_Occurred())) __PYX_ERR(6, 221, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "../resources_source/python/pysolution.pxi":217
 * 
 *     def export_vtk(self, fileName, time_step, adaptivity_step, variable, variableComp):
 *         self._solution.exportVTK(fileName.encode(),             # <<<<<<<<<<<<<<
 *                                  int(-1 if time_step is None else time_step),
 *                                  int(-1 if adaptivity_step is None else adaptivity_step),
 */
  __pyx_v_self->_solution->exportVTK(__pyx_t_4, __pyx_t_6, __pyx_t_7, __pyx_t_8, __pyx_t_9);

  /* "../resources_source/python/pysolution.pxi":216
 *         return {'error' : error, 'dofs' : dofs}
 * 
 *     def export_vtk(self, fileName, time_step, adaptivity_step, variable, variableComp):             # <<<<<<<<<<<<<<
 *         self._solution.exportVTK(fileName.encode(),
 *                                  int(-1 if time_step is None else time_step),
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("_agros.__Solution__.export_vtk", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../resources_source/python/pysolution.pxi":224
 * 
 *     # solution
 *     def solution(self, time_step = None, adaptivity_step = None):             # <<<<<<<<<<<<<<
 *         cdef vector[double] sln_vector
 *         self._solution.getSolution(int(-1 if time_step is None else time_step),
 */

/* Python wrapper */
static PyObject *__pyx_pw_6_agros_12__Solution___21solution(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_6_agros_12__Solution___21solution(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_time_step = 0;
  PyObject *__pyx_v_adaptivity_step = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("solution (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_time_step,&__pyx_n_s_adaptivity_step,0};
    PyObject* values[2] = {0,0};
    values[0] = ((PyObject *)Py_None);
    values[1] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_time_step);
          if (value) { values[0] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_adaptivity_step);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "solution") < 0)) __PYX_ERR(6, 224, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_time_step = values[0];
    __pyx_v_adaptivity_step = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("solution", 0, 0, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(6, 224, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("_agros.__Solution__.solution", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6_agros_12__Solution___20solution(((struct __pyx_obj_6_agros___Solution__ *)__pyx_v_self), __pyx_v_time_step, __pyx_v_adaptivity_step);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6_agros_12__Solution___20solution(struct __pyx_obj_6_agros___Solution__ *__pyx_v_self, PyObject *__pyx_v_time_step, PyObject *__pyx_v_adaptivity_step) {
  std::vector<double>  __pyx_v_sln_vector;
  PyObject *__pyx_v_sln = NULL;
  std::vector<double> ::size_type __pyx_v_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_t_5;
  std::vector<double> ::size_type __pyx_t_6;
  std::vector<double> ::size_type __pyx_t_7;
  std::vector<double> ::size_type __pyx_t_8;
  int __pyx_t_9;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("solution", 0);

  /* "../resources_source/python/pysolution.pxi":226
 *     def solution(self, time_step = None, adaptivity_step = None):
 *         cdef vector[double] sln_vector
 *         self._solution.getSolution(int(-1 if time_step is None else time_step),             # <<<<<<<<<<<<<<
 *                                 int(-1 if adaptivity_step is None else adaptivity_step),
 *                                 sln_vector)
 */
  __pyx_t_2 = (__pyx_v_time_step == Py_None);
  if ((__pyx_t_2 != 0)) {
    __Pyx_INCREF(__pyx_int_neg_1);
    __pyx_t_1 = __pyx_int_neg_1;
  } else {
    __Pyx_INCREF(__pyx_v_time_step);
    __pyx_t_1 = __pyx_v_time_step;
  }
  __pyx_t_3 = __Pyx_PyNumber_Int(__pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(6, 226, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_4 = __Pyx_PyInt_As_int(__pyx_t_3); if (unlikely((__pyx_t_4 == (int)-1) && PyErr_Occurred())) __PYX_ERR(6, 226, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "../resources_source/python/pysolution.pxi":227
 *         cdef vector[double] sln_vector
 *         self._solution.getSolution(int(-1 if time_step is None else time_step),
 *                                 int(-1 if adaptivity_step is None else adaptivity_step),             # <<<<<<<<<<<<<<
 *                                 sln_vector)
 * 
 */
  __pyx_t_2 = (__pyx_v_adaptivity_step == Py_None);
  if ((__pyx_t_2 != 0)) {
    __Pyx_INCREF(__pyx_int_neg_1);
    __pyx_t_3 = __pyx_int_neg_1;
  } else {
    __Pyx_INCREF(__pyx_v_adaptivity_step);
    __pyx_t_3 = __pyx_v_adaptivity_step;
  }
  __pyx_t_1 = __Pyx_PyNumber_Int(__pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(6, 227, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_5 = __Pyx_PyInt_As_int(__pyx_t_1); if (unlikely((__pyx_t_5 == (int)-1) && PyErr_Occurred())) __PYX_ERR(6, 227, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "../resources_source/python/pysolution.pxi":226
 *     def solution(self, time_step = None, adaptivity_step = None):
 *         cdef vector[double] sln_vector
 *         self._solution.getSolution(int(-1 if time_step is None else time_step),             # <<<<<<<<<<<<<<
 *                                 int(-1 if adaptivity_step is None else adaptivity_step),
 *                                 sln_vector)
 */
  try {
    __pyx_v_self->_solution->getSolution(__pyx_t_4, __pyx_t_5, __pyx_v_sln_vector);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(6, 226, __pyx_L1_error)
  }

  /* "../resources_source/python/pysolution.pxi":230
 *                                 sln_vector)
 * 
 *         sln = list()             # <<<<<<<<<<<<<<
 *         for i in range(sln_vector.size()):
 *             sln.append(sln_vector[i])
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(6, 230, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_sln = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "../resources_source/python/pysolution.pxi":231
 * 
 *         sln = list()
 *         for i in range(sln_vector.size()):             # <<<<<<<<<<<<<<
 *             sln.append(sln_vector[i])
 * 
 */
  __pyx_t_6 = __pyx_v_sln_vector.size();
  __pyx_t_7 = __pyx_t_6;
  for (__pyx_t_8 = 0; __pyx_t_8 < __pyx_t_7; __pyx_t_8+=1) {
    __pyx_v_i = __pyx_t_8;

    /* "../resources_source/python/pysolution.pxi":232
 *         sln = list()
 *         for i in range(sln_vector.size()):
 *             sln.append(sln_vector[i])             # <<<<<<<<<<<<<<
 * 
 *         return sln
 */
    __pyx_t_1 = PyFloat_FromDouble((__pyx_v_sln_vector[__pyx_v_i])); if (unlikely(!__pyx_t_1)) __PYX_ERR(6, 232, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_9 = __Pyx_PyList_Append(__pyx_v_sln, __pyx_t_1); if (unlikely(__pyx_t_9 == ((int)-1))) __PYX_ERR(6, 232, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "../resources_source/python/pysolution.pxi":234
 *             sln.append(sln_vector[i])
 * 
 *         return sln             # <<<<<<<<<<<<<<
 * 
 *     def setSolution(self, sln, time_step = None, adaptivity_step = None):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_sln);
  __pyx_r = __pyx_v_sln;
  goto __pyx_L0;

  /* "../resources_source/python/pysolution.pxi":224
 * 
 *     # solution
 *     def solution(self, time_step = None, adaptivity_step = None):             # <<<<<<<<<<<<<<
 *         cdef vector[double] sln_vector
 *         self._solution.getSolution(int(-1 if time_step is None else time_step),
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("_agros.__Solution__.solution", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_sln);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../resources_source/python/pysolution.pxi":236
 *         return sln
 * 
 *     def setSolution(self, sln, time_step = None, adaptivity_step = None):             # <<<<<<<<<<<<<<
 *         cdef vector[double] sln_vector = sln
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6_agros_12__Solution___23setSolution(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_6_agros_12__Solution___23setSolution(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_sln = 0;
  PyObject *__pyx_v_time_step = 0;
  PyObject *__pyx_v_adaptivity_step = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("setSolution (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_sln,&__pyx_n_s_time_step,&__pyx_n_s_adaptivity_step,0};
    PyObject* values[3] = {0,0,0};
    values[1] = ((PyObject *)Py_None);
    values[2] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_sln)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_time_step);
          if (value) { values[1] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_adaptivity_step);
          if (value) { values[2] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "setSolution") < 0)) __PYX_ERR(6, 236, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_sln = values[0];
    __pyx_v_time_step = values[1];
    __pyx_v_adaptivity_step = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("setSolution", 0, 1, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(6, 236, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("_agros.__Solution__.setSolution", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6_agros_12__Solution___22setSolution(((struct __pyx_obj_6_agros___Solution__ *)__pyx_v_self), __pyx_v_sln, __pyx_v_time_step, __pyx_v_adaptivity_step);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6_agros_12__Solution___22setSolution(struct __pyx_obj_6_agros___Solution__ *__pyx_v_self, PyObject *__pyx_v_sln, PyObject *__pyx_v_time_step, PyObject *__pyx_v_adaptivity_step) {
  std::vector<double>  __pyx_v_sln_vector;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  std::vector<double>  __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  int __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("setSolution", 0);

  /* "../resources_source/python/pysolution.pxi":237
 * 
 *     def setSolution(self, sln, time_step = None, adaptivity_step = None):
 *         cdef vector[double] sln_vector = sln             # <<<<<<<<<<<<<<
 * 
 *         self._solution.setSolution(int(-1 if time_step is None else time_step),
 */
  __pyx_t_1 = __pyx_convert_vector_from_py_double(__pyx_v_sln); if (unlikely(PyErr_Occurred())) __PYX_ERR(6, 237, __pyx_L1_error)
  __pyx_v_sln_vector = __pyx_t_1;

  /* "../resources_source/python/pysolution.pxi":239
 *         cdef vector[double] sln_vector = sln
 * 
 *         self._solution.setSolution(int(-1 if time_step is None else time_step),             # <<<<<<<<<<<<<<
 *                                 int(-1 if adaptivity_step is None else adaptivity_step),
 *                                 sln_vector)
 */
  __pyx_t_3 = (__pyx_v_time_step == Py_None);
  if ((__pyx_t_3 != 0)) {
    __Pyx_INCREF(__pyx_int_neg_1);
    __pyx_t_2 = __pyx_int_neg_1;
  } else {
    __Pyx_INCREF(__pyx_v_time_step);
    __pyx_t_2 = __pyx_v_time_step;
  }
  __pyx_t_4 = __Pyx_PyNumber_Int(__pyx_t_2); if (unlikely(!__pyx_t_4)) __PYX_ERR(6, 239, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_5 = __Pyx_PyInt_As_int(__pyx_t_4); if (unlikely((__pyx_t_5 == (int)-1) && PyErr_Occurred())) __PYX_ERR(6, 239, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "../resources_source/python/pysolution.pxi":240
 * 
 *         self._solution.setSolution(int(-1 if time_step is None else time_step),
 *                                 int(-1 if adaptivity_step is None else adaptivity_step),             # <<<<<<<<<<<<<<
 *                                 sln_vector)
 */
  __pyx_t_3 = (__pyx_v_adaptivity_step == Py_None);
  if ((__pyx_t_3 != 0)) {
    __Pyx_INCREF(__pyx_int_neg_1);
    __pyx_t_4 = __pyx_int_neg_1;
  } else {
    __Pyx_INCREF(__pyx_v_adaptivity_step);
    __pyx_t_4 = __pyx_v_adaptivity_step;
  }
  __pyx_t_2 = __Pyx_PyNumber_Int(__pyx_t_4); if (unlikely(!__pyx_t_2)) __PYX_ERR(6, 240, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_6 = __Pyx_PyInt_As_int(__pyx_t_2); if (unlikely((__pyx_t_6 == (int)-1) && PyErr_Occurred())) __PYX_ERR(6, 240, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "../resources_source/python/pysolution.pxi":239
 *         cdef vector[double] sln_vector = sln
 * 
 *         self._solution.setSolution(int(-1 if time_step is None else time_step),             # <<<<<<<<<<<<<<
 *                                 int(-1 if adaptivity_step is None else adaptivity_step),
 *                                 sln_vector)
 */
  try {
    __pyx_v_self->_solution->setSolution(__pyx_t_5, __pyx_t_6, __pyx_v_sln_vector);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(6, 239, __pyx_L1_error)
  }

  /* "../resources_source/python/pysolution.pxi":236
 *         return sln
 * 
 *     def setSolution(self, sln, time_step = None, adaptivity_step = None):             # <<<<<<<<<<<<<<
 *         cdef vector[double] sln_vector = sln
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("_agros.__Solution__.setSolution", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_6_agros_12__Solution___25__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_6_agros_12__Solution___25__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6_agros_12__Solution___24__reduce_cython__(((struct __pyx_obj_6_agros___Solution__ *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6_agros_12__Solution___24__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_6_agros___Solution__ *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__42, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(2, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("_agros.__Solution__.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw_6_agros_12__Solution___27__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_6_agros_12__Solution___27__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6_agros_12__Solution___26__setstate_cython__(((struct __pyx_obj_6_agros___Solution__ *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6_agros_12__Solution___26__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_6_agros___Solution__ *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__43, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(2, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("_agros.__Solution__.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../resources_source/python/pyparticletracing.pxi":78
 *     cdef PyParticleTracing *_tracing
 * 
 *     def __cinit__(self):             # <<<<<<<<<<<<<<
 *         self._tracing = new PyParticleTracing()
 *     def __dealloc__(self):
 */

/* Python wrapper */
static int __pyx_pw_6_agros_19__ParticleTracing___1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_6_agros_19__ParticleTracing___1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__cinit__", 0))) return -1;
  __pyx_r = __pyx_pf_6_agros_19__ParticleTracing_____cinit__(((struct __pyx_obj_6_agros___ParticleTracing__ *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6_agros_19__ParticleTracing_____cinit__(struct __pyx_obj_6_agros___ParticleTracing__ *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "../resources_source/python/pyparticletracing.pxi":79
 * 
 *     def __cinit__(self):
 *         self._tracing = new PyParticleTracing()             # <<<<<<<<<<<<<<
 *     def __dealloc__(self):
 *         del self._tracing
 */
  __pyx_v_self->_tracing = new PyParticleTracing();

  /* "../resources_source/python/pyparticletracing.pxi":78
 *     cdef PyParticleTracing *_tracing
 * 
 *     def __cinit__(self):             # <<<<<<<<<<<<<<
 *         self._tracing = new PyParticleTracing()
 *     def __dealloc__(self):
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../resources_source/python/pyparticletracing.pxi":80
 *     def __cinit__(self):
 *         self._tracing = new PyParticleTracing()
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self._tracing
 * 
 */

/* Python wrapper */
static void __pyx_pw_6_agros_19__ParticleTracing___3__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_6_agros_19__ParticleTracing___3__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_6_agros_19__ParticleTracing___2__dealloc__(((struct __pyx_obj_6_agros___ParticleTracing__ *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_6_agros_19__ParticleTracing___2__dealloc__(struct __pyx_obj_6_agros___ParticleTracing__ *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "../resources_source/python/pyparticletracing.pxi":81
 *         self._tracing = new PyParticleTracing()
 *     def __dealloc__(self):
 *         del self._tracing             # <<<<<<<<<<<<<<
 * 
 *     def solve(self, initial_positions = [], initial_velocities = [],
 */
  delete __pyx_v_self->_tracing;

  /* "../resources_source/python/pyparticletracing.pxi":80
 *     def __cinit__(self):
 *         self._tracing = new PyParticleTracing()
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self._tracing
 * 
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "../resources_source/python/pyparticletracing.pxi":83
 *         del self._tracing
 * 
 *     def solve(self, initial_positions = [], initial_velocities = [],             # <<<<<<<<<<<<<<
 *                     particle_charges = [], particle_masses = []):
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6_agros_19__ParticleTracing___5solve(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_6_agros_19__ParticleTracing___5solve(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_initial_positions = 0;
  PyObject *__pyx_v_initial_velocities = 0;
  PyObject *__pyx_v_particle_charges = 0;
  PyObject *__pyx_v_particle_masses = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("solve (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_initial_positions,&__pyx_n_s_initial_velocities,&__pyx_n_s_particle_charges,&__pyx_n_s_particle_masses,0};
    PyObject* values[4] = {0,0,0,0};
    values[0] = __pyx_k__44;
    values[1] = __pyx_k__45;
    values[2] = __pyx_k__46;
    values[3] = __pyx_k__47;
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_initial_positions);
          if (value) { values[0] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_initial_velocities);
          if (value) { values[1] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_particle_charges);
          if (value) { values[2] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_particle_masses);
          if (value) { values[3] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "solve") < 0)) __PYX_ERR(7, 83, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_initial_positions = values[0];
    __pyx_v_initial_velocities = values[1];
    __pyx_v_particle_charges = values[2];
    __pyx_v_particle_masses = values[3];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("solve", 0, 0, 4, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(7, 83, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("_agros.__ParticleTracing__.solve", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6_agros_19__ParticleTracing___4solve(((struct __pyx_obj_6_agros___ParticleTracing__ *)__pyx_v_self), __pyx_v_initial_positions, __pyx_v_initial_velocities, __pyx_v_particle_charges, __pyx_v_particle_masses);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6_agros_19__ParticleTracing___4solve(struct __pyx_obj_6_agros___ParticleTracing__ *__pyx_v_self, PyObject *__pyx_v_initial_positions, PyObject *__pyx_v_initial_velocities, PyObject *__pyx_v_particle_charges, PyObject *__pyx_v_particle_masses) {
  std::vector<std::vector<double> >  __pyx_v_initial_positions_vector;
  std::vector<std::vector<double> >  __pyx_v_initial_velocities_vector;
  PyObject *__pyx_v_position = NULL;
  PyObject *__pyx_v_velocity = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *(*__pyx_t_3)(PyObject *);
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("solve", 0);

  /* "../resources_source/python/pyparticletracing.pxi":88
 *         cdef vector[vector[double]] initial_positions_vector, initial_velocities_vector
 * 
 *         for position in initial_positions:             # <<<<<<<<<<<<<<
 *             initial_positions_vector.push_back(list_to_double_vector(position))
 * 
 */
  if (likely(PyList_CheckExact(__pyx_v_initial_positions)) || PyTuple_CheckExact(__pyx_v_initial_positions)) {
    __pyx_t_1 = __pyx_v_initial_positions; __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
    __pyx_t_3 = NULL;
  } else {
    __pyx_t_2 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_v_initial_positions); if (unlikely(!__pyx_t_1)) __PYX_ERR(7, 88, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_3)) __PYX_ERR(7, 88, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_3)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(7, 88, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(7, 88, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      } else {
        if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(7, 88, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(7, 88, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      }
    } else {
      __pyx_t_4 = __pyx_t_3(__pyx_t_1);
      if (unlikely(!__pyx_t_4)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(7, 88, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_4);
    }
    __Pyx_XDECREF_SET(__pyx_v_position, __pyx_t_4);
    __pyx_t_4 = 0;

    /* "../resources_source/python/pyparticletracing.pxi":89
 * 
 *         for position in initial_positions:
 *             initial_positions_vector.push_back(list_to_double_vector(position))             # <<<<<<<<<<<<<<
 * 
 *         for velocity in initial_velocities:
 */
    try {
      __pyx_v_initial_positions_vector.push_back(__pyx_f_6_agros_list_to_double_vector(__pyx_v_position));
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(7, 89, __pyx_L1_error)
    }

    /* "../resources_source/python/pyparticletracing.pxi":88
 *         cdef vector[vector[double]] initial_positions_vector, initial_velocities_vector
 * 
 *         for position in initial_positions:             # <<<<<<<<<<<<<<
 *             initial_positions_vector.push_back(list_to_double_vector(position))
 * 
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "../resources_source/python/pyparticletracing.pxi":91
 *             initial_positions_vector.push_back(list_to_double_vector(position))
 * 
 *         for velocity in initial_velocities:             # <<<<<<<<<<<<<<
 *             initial_velocities_vector.push_back(list_to_double_vector(velocity))
 * 
 */
  if (likely(PyList_CheckExact(__pyx_v_initial_velocities)) || PyTuple_CheckExact(__pyx_v_initial_velocities)) {
    __pyx_t_1 = __pyx_v_initial_velocities; __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
    __pyx_t_3 = NULL;
  } else {
    __pyx_t_2 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_v_initial_velocities); if (unlikely(!__pyx_t_1)) __PYX_ERR(7, 91, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_3)) __PYX_ERR(7, 91, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_3)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(7, 91, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(7, 91, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      } else {
        if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(7, 91, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(7, 91, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      }
    } else {
      __pyx_t_4 = __pyx_t_3(__pyx_t_1);
      if (unlikely(!__pyx_t_4)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(7, 91, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_4);
    }
    __Pyx_XDECREF_SET(__pyx_v_velocity, __pyx_t_4);
    __pyx_t_4 = 0;

    /* "../resources_source/python/pyparticletracing.pxi":92
 * 
 *         for velocity in initial_velocities:
 *             initial_velocities_vector.push_back(list_to_double_vector(velocity))             # <<<<<<<<<<<<<<
 * 
 *         self._tracing.solve(initial_positions_vector,
 */
    try {
      __pyx_v_initial_velocities_vector.push_back(__pyx_f_6_agros_list_to_double_vector(__pyx_v_velocity));
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(7, 92, __pyx_L1_error)
    }

    /* "../resources_source/python/pyparticletracing.pxi":91
 *             initial_positions_vector.push_back(list_to_double_vector(position))
 * 
 *         for velocity in initial_velocities:             # <<<<<<<<<<<<<<
 *             initial_velocities_vector.push_back(list_to_double_vector(velocity))
 * 
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "../resources_source/python/pyparticletracing.pxi":94
 *             initial_velocities_vector.push_back(list_to_double_vector(velocity))
 * 
 *         self._tracing.solve(initial_positions_vector,             # <<<<<<<<<<<<<<
 *                            initial_velocities_vector,
 *                            list_to_double_vector(particle_charges),
 */
  try {
    __pyx_v_self->_tracing->solve(__pyx_v_initial_positions_vector, __pyx_v_initial_velocities_vector, __pyx_f_6_agros_list_to_double_vector(__pyx_v_particle_charges), __pyx_f_6_agros_list_to_double_vector(__pyx_v_particle_masses));
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(7, 94, __pyx_L1_error)
  }

  /* "../resources_source/python/pyparticletracing.pxi":83
 *         del self._tracing
 * 
 *     def solve(self, initial_positions = [], initial_velocities = [],             # <<<<<<<<<<<<<<
 *                     particle_charges = [], particle_masses = []):
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("_agros.__ParticleTracing__.solve", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_position);
  __Pyx_XDECREF(__pyx_v_velocity);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../resources_source/python/pyparticletracing.pxi":104
 *     """
 * 
 *     def positions(self):             # <<<<<<<<<<<<<<
 *         cdef vector[vector[double]] x, y, z
 *         self._tracing.positions(x, y, z)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6_agros_19__ParticleTracing___7positions(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_6_agros_19__ParticleTracing___7positions(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("positions (wrapper)", 0);
  __pyx_r = __pyx_pf_6_agros_19__ParticleTracing___6positions(((struct __pyx_obj_6_agros___ParticleTracing__ *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6_agros_19__ParticleTracing___6positions(struct __pyx_obj_6_agros___ParticleTracing__ *__pyx_v_self) {
  std::vector<std::vector<double> >  __pyx_v_x;
  std::vector<std::vector<double> >  __pyx_v_y;
  std::vector<std::vector<double> >  __pyx_v_z;
  PyObject *__pyx_v_out = NULL;
  std::vector<std::vector<double> > ::size_type __pyx_v_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  std::vector<std::vector<double> > ::size_type __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  std::vector<std::vector<double> > ::size_type __pyx_t_7;
  std::vector<std::vector<double> > ::size_type __pyx_t_8;
  int __pyx_t_9;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("positions", 0);

  /* "../resources_source/python/pyparticletracing.pxi":106
 *     def positions(self):
 *         cdef vector[vector[double]] x, y, z
 *         self._tracing.positions(x, y, z)             # <<<<<<<<<<<<<<
 * 
 *         assert x.size() == y.size() == z.size()
 */
  __pyx_v_self->_tracing->positions(__pyx_v_x, __pyx_v_y, __pyx_v_z);

  /* "../resources_source/python/pyparticletracing.pxi":108
 *         self._tracing.positions(x, y, z)
 * 
 *         assert x.size() == y.size() == z.size()             # <<<<<<<<<<<<<<
 * 
 *         out = [[], [], []]
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_1 = __pyx_v_y.size();
    __pyx_t_2 = (__pyx_v_x.size() == __pyx_t_1);
    if (__pyx_t_2) {
      __pyx_t_2 = (__pyx_t_1 == __pyx_v_z.size());
    }
    if (unlikely(!(__pyx_t_2 != 0))) {
      PyErr_SetNone(PyExc_AssertionError);
      __PYX_ERR(7, 108, __pyx_L1_error)
    }
  }
  #endif

  /* "../resources_source/python/pyparticletracing.pxi":110
 *         assert x.size() == y.size() == z.size()
 * 
 *         out = [[], [], []]             # <<<<<<<<<<<<<<
 *         for i in range(x.size()):
 *             out[0].append(double_vector_to_list(x[i]))
 */
  __pyx_t_3 = PyList_New(0); if (unlikely(!__pyx_t_3)) __PYX_ERR(7, 110, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyList_New(0); if (unlikely(!__pyx_t_4)) __PYX_ERR(7, 110, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = PyList_New(0); if (unlikely(!__pyx_t_5)) __PYX_ERR(7, 110, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = PyList_New(3); if (unlikely(!__pyx_t_6)) __PYX_ERR(7, 110, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_GIVEREF(__pyx_t_3);
  PyList_SET_ITEM(__pyx_t_6, 0, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_4);
  PyList_SET_ITEM(__pyx_t_6, 1, __pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_5);
  PyList_SET_ITEM(__pyx_t_6, 2, __pyx_t_5);
  __pyx_t_3 = 0;
  __pyx_t_4 = 0;
  __pyx_t_5 = 0;
  __pyx_v_out = ((PyObject*)__pyx_t_6);
  __pyx_t_6 = 0;

  /* "../resources_source/python/pyparticletracing.pxi":111
 * 
 *         out = [[], [], []]
 *         for i in range(x.size()):             # <<<<<<<<<<<<<<
 *             out[0].append(double_vector_to_list(x[i]))
 *             out[1].append(double_vector_to_list(y[i]))
 */
  __pyx_t_1 = __pyx_v_x.size();
  __pyx_t_7 = __pyx_t_1;
  for (__pyx_t_8 = 0; __pyx_t_8 < __pyx_t_7; __pyx_t_8+=1) {
    __pyx_v_i = __pyx_t_8;

    /* "../resources_source/python/pyparticletracing.pxi":112
 *         out = [[], [], []]
 *         for i in range(x.size()):
 *             out[0].append(double_vector_to_list(x[i]))             # <<<<<<<<<<<<<<
 *             out[1].append(double_vector_to_list(y[i]))
 *             out[2].append(double_vector_to_list(z[i]))
 */
    __pyx_t_6 = __Pyx_GetItemInt_List(__pyx_v_out, 0, long, 1, __Pyx_PyInt_From_long, 1, 0, 1); if (unlikely(!__pyx_t_6)) __PYX_ERR(7, 112, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_5 = __pyx_f_6_agros_double_vector_to_list((__pyx_v_x[__pyx_v_i])); if (unlikely(!__pyx_t_5)) __PYX_ERR(7, 112, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_9 = __Pyx_PyObject_Append(__pyx_t_6, __pyx_t_5); if (unlikely(__pyx_t_9 == ((int)-1))) __PYX_ERR(7, 112, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

    /* "../resources_source/python/pyparticletracing.pxi":113
 *         for i in range(x.size()):
 *             out[0].append(double_vector_to_list(x[i]))
 *             out[1].append(double_vector_to_list(y[i]))             # <<<<<<<<<<<<<<
 *             out[2].append(double_vector_to_list(z[i]))
 * 
 */
    __pyx_t_5 = __Pyx_GetItemInt_List(__pyx_v_out, 1, long, 1, __Pyx_PyInt_From_long, 1, 0, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(7, 113, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = __pyx_f_6_agros_double_vector_to_list((__pyx_v_y[__pyx_v_i])); if (unlikely(!__pyx_t_6)) __PYX_ERR(7, 113, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_9 = __Pyx_PyObject_Append(__pyx_t_5, __pyx_t_6); if (unlikely(__pyx_t_9 == ((int)-1))) __PYX_ERR(7, 113, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

    /* "../resources_source/python/pyparticletracing.pxi":114
 *             out[0].append(double_vector_to_list(x[i]))
 *             out[1].append(double_vector_to_list(y[i]))
 *             out[2].append(double_vector_to_list(z[i]))             # <<<<<<<<<<<<<<
 * 
 *         return out
 */
    __pyx_t_6 = __Pyx_GetItemInt_List(__pyx_v_out, 2, long, 1, __Pyx_PyInt_From_long, 1, 0, 1); if (unlikely(!__pyx_t_6)) __PYX_ERR(7, 114, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_5 = __pyx_f_6_agros_double_vector_to_list((__pyx_v_z[__pyx_v_i])); if (unlikely(!__pyx_t_5)) __PYX_ERR(7, 114, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_9 = __Pyx_PyObject_Append(__pyx_t_6, __pyx_t_5); if (unlikely(__pyx_t_9 == ((int)-1))) __PYX_ERR(7, 114, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }

  /* "../resources_source/python/pyparticletracing.pxi":116
 *             out[2].append(double_vector_to_list(z[i]))
 * 
 *         return out             # <<<<<<<<<<<<<<
 * 
 *     def velocities(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_out);
  __pyx_r = __pyx_v_out;
  goto __pyx_L0;

  /* "../resources_source/python/pyparticletracing.pxi":104
 *     """
 * 
 *     def positions(self):             # <<<<<<<<<<<<<<
 *         cdef vector[vector[double]] x, y, z
 *         self._tracing.positions(x, y, z)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("_agros.__ParticleTracing__.positions", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_out);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../resources_source/python/pyparticletracing.pxi":118
 *         return out
 * 
 *     def velocities(self):             # <<<<<<<<<<<<<<
 *         cdef vector[vector[double]] vx, vy, vz
 *         self._tracing.velocities(vx, vy, vz)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6_agros_19__ParticleTracing___9velocities(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_6_agros_19__ParticleTracing___9velocities(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("velocities (wrapper)", 0);
  __pyx_r = __pyx_pf_6_agros_19__ParticleTracing___8velocities(((struct __pyx_obj_6_agros___ParticleTracing__ *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6_agros_19__ParticleTracing___8velocities(struct __pyx_obj_6_agros___ParticleTracing__ *__pyx_v_self) {
  std::vector<std::vector<double> >  __pyx_v_vx;
  std::vector<std::vector<double> >  __pyx_v_vy;
  std::vector<std::vector<double> >  __pyx_v_vz;
  PyObject *__pyx_v_out = NULL;
  std::vector<std::vector<double> > ::size_type __pyx_v_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  std::vector<std::vector<double> > ::size_type __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  std::vector<std::vector<double> > ::size_type __pyx_t_7;
  std::vector<std::vector<double> > ::size_type __pyx_t_8;
  int __pyx_t_9;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("velocities", 0);

  /* "../resources_source/python/pyparticletracing.pxi":120
 *     def velocities(self):
 *         cdef vector[vector[double]] vx, vy, vz
 *         self._tracing.velocities(vx, vy, vz)             # <<<<<<<<<<<<<<
 * 
 *         assert vx.size() == vy.size() == vz.size()
 */
  __pyx_v_self->_tracing->velocities(__pyx_v_vx, __pyx_v_vy, __pyx_v_vz);

  /* "../resources_source/python/pyparticletracing.pxi":122
 *         self._tracing.velocities(vx, vy, vz)
 * 
 *         assert vx.size() == vy.size() == vz.size()             # <<<<<<<<<<<<<<
 * 
 *         out = [[], [], []]
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_1 = __pyx_v_vy.size();
    __pyx_t_2 = (__pyx_v_vx.size() == __pyx_t_1);
    if (__pyx_t_2) {
      __pyx_t_2 = (__pyx_t_1 == __pyx_v_vz.size());
    }
    if (unlikely(!(__pyx_t_2 != 0))) {
      PyErr_SetNone(PyExc_AssertionError);
      __PYX_ERR(7, 122, __pyx_L1_error)
    }
  }
  #endif

  /* "../resources_source/python/pyparticletracing.pxi":124
 *         assert vx.size() == vy.size() == vz.size()
 * 
 *         out = [[], [], []]             # <<<<<<<<<<<<<<
 *         for i in range(vx.size()):
 *             out[0].append(double_vector_to_list(vx[i]))
 */
  __pyx_t_3 = PyList_New(0); if (unlikely(!__pyx_t_3)) __PYX_ERR(7, 124, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyList_New(0); if (unlikely(!__pyx_t_4)) __PYX_ERR(7, 124, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = PyList_New(0); if (unlikely(!__pyx_t_5)) __PYX_ERR(7, 124, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = PyList_New(3); if (unlikely(!__pyx_t_6)) __PYX_ERR(7, 124, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_GIVEREF(__pyx_t_3);
  PyList_SET_ITEM(__pyx_t_6, 0, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_4);
  PyList_SET_ITEM(__pyx_t_6, 1, __pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_5);
  PyList_SET_ITEM(__pyx_t_6, 2, __pyx_t_5);
  __pyx_t_3 = 0;
  __pyx_t_4 = 0;
  __pyx_t_5 = 0;
  __pyx_v_out = ((PyObject*)__pyx_t_6);
  __pyx_t_6 = 0;

  /* "../resources_source/python/pyparticletracing.pxi":125
 * 
 *         out = [[], [], []]
 *         for i in range(vx.size()):             # <<<<<<<<<<<<<<
 *             out[0].append(double_vector_to_list(vx[i]))
 *             out[1].append(double_vector_to_list(vy[i]))
 */
  __pyx_t_1 = __pyx_v_vx.size();
  __pyx_t_7 = __pyx_t_1;
  for (__pyx_t_8 = 0; __pyx_t_8 < __pyx_t_7; __pyx_t_8+=1) {
    __pyx_v_i = __pyx_t_8;

    /* "../resources_source/python/pyparticletracing.pxi":126
 *         out = [[], [], []]
 *         for i in range(vx.size()):
 *             out[0].append(double_vector_to_list(vx[i]))             # <<<<<<<<<<<<<<
 *             out[1].append(double_vector_to_list(vy[i]))
 *             out[2].append(double_vector_to_list(vz[i]))
 */
    __pyx_t_6 = __Pyx_GetItemInt_List(__pyx_v_out, 0, long, 1, __Pyx_PyInt_From_long, 1, 0, 1); if (unlikely(!__pyx_t_6)) __PYX_ERR(7, 126, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_5 = __pyx_f_6_agros_double_vector_to_list((__pyx_v_vx[__pyx_v_i])); if (unlikely(!__pyx_t_5)) __PYX_ERR(7, 126, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_9 = __Pyx_PyObject_Append(__pyx_t_6, __pyx_t_5); if (unlikely(__pyx_t_9 == ((int)-1))) __PYX_ERR(7, 126, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

    /* "../resources_source/python/pyparticletracing.pxi":127
 *         for i in range(vx.size()):
 *             out[0].append(double_vector_to_list(vx[i]))
 *             out[1].append(double_vector_to_list(vy[i]))             # <<<<<<<<<<<<<<
 *             out[2].append(double_vector_to_list(vz[i]))
 * 
 */
    __pyx_t_5 = __Pyx_GetItemInt_List(__pyx_v_out, 1, long, 1, __Pyx_PyInt_From_long, 1, 0, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(7, 127, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = __pyx_f_6_agros_double_vector_to_list((__pyx_v_vy[__pyx_v_i])); if (unlikely(!__pyx_t_6)) __PYX_ERR(7, 127, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_9 = __Pyx_PyObject_Append(__pyx_t_5, __pyx_t_6); if (unlikely(__pyx_t_9 == ((int)-1))) __PYX_ERR(7, 127, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

    /* "../resources_source/python/pyparticletracing.pxi":128
 *             out[0].append(double_vector_to_list(vx[i]))
 *             out[1].append(double_vector_to_list(vy[i]))
 *             out[2].append(double_vector_to_list(vz[i]))             # <<<<<<<<<<<<<<
 * 
 *         return out
 */
    __pyx_t_6 = __Pyx_GetItemInt_List(__pyx_v_out, 2, long, 1, __Pyx_PyInt_From_long, 1, 0, 1); if (unlikely(!__pyx_t_6)) __PYX_ERR(7, 128, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_5 = __pyx_f_6_agros_double_vector_to_list((__pyx_v_vz[__pyx_v_i])); if (unlikely(!__pyx_t_5)) __PYX_ERR(7, 128, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_9 = __Pyx_PyObject_Append(__pyx_t_6, __pyx_t_5); if (unlikely(__pyx_t_9 == ((int)-1))) __PYX_ERR(7, 128, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }

  /* "../resources_source/python/pyparticletracing.pxi":130
 *             out[2].append(double_vector_to_list(vz[i]))
 * 
 *         return out             # <<<<<<<<<<<<<<
 * 
 *     def times(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_out);
  __pyx_r = __pyx_v_out;
  goto __pyx_L0;

  /* "../resources_source/python/pyparticletracing.pxi":118
 *         return out
 * 
 *     def velocities(self):             # <<<<<<<<<<<<<<
 *         cdef vector[vector[double]] vx, vy, vz
 *         self._tracing.velocities(vx, vy, vz)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("_agros.__ParticleTracing__.velocities", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_out);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../resources_source/python/pyparticletracing.pxi":132
 *         return out
 * 
 *     def times(self):             # <<<<<<<<<<<<<<
 *         cdef vector[vector[double]] t
 *         self._tracing.times(t)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6_agros_19__ParticleTracing___11times(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_6_agros_19__ParticleTracing___11times(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("times (wrapper)", 0);
  __pyx_r = __pyx_pf_6_agros_19__ParticleTracing___10times(((struct __pyx_obj_6_agros___ParticleTracing__ *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6_agros_19__ParticleTracing___10times(struct __pyx_obj_6_agros___ParticleTracing__ *__pyx_v_self) {
  std::vector<std::vector<double> >  __pyx_v_t;
  PyObject *__pyx_v_out = NULL;
  std::vector<std::vector<double> > ::size_type __pyx_v_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  std::vector<std::vector<double> > ::size_type __pyx_t_2;
  std::vector<std::vector<double> > ::size_type __pyx_t_3;
  std::vector<std::vector<double> > ::size_type __pyx_t_4;
  int __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("times", 0);

  /* "../resources_source/python/pyparticletracing.pxi":134
 *     def times(self):
 *         cdef vector[vector[double]] t
 *         self._tracing.times(t)             # <<<<<<<<<<<<<<
 * 
 *         out = []
 */
  __pyx_v_self->_tracing->times(__pyx_v_t);

  /* "../resources_source/python/pyparticletracing.pxi":136
 *         self._tracing.times(t)
 * 
 *         out = []             # <<<<<<<<<<<<<<
 *         for i in range(t.size()):
 *             out.append(double_vector_to_list(t[i]))
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(7, 136, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_out = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "../resources_source/python/pyparticletracing.pxi":137
 * 
 *         out = []
 *         for i in range(t.size()):             # <<<<<<<<<<<<<<
 *             out.append(double_vector_to_list(t[i]))
 * 
 */
  __pyx_t_2 = __pyx_v_t.size();
  __pyx_t_3 = __pyx_t_2;
  for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
    __pyx_v_i = __pyx_t_4;

    /* "../resources_source/python/pyparticletracing.pxi":138
 *         out = []
 *         for i in range(t.size()):
 *             out.append(double_vector_to_list(t[i]))             # <<<<<<<<<<<<<<
 * 
 *         return out
 */
    __pyx_t_1 = __pyx_f_6_agros_double_vector_to_list((__pyx_v_t[__pyx_v_i])); if (unlikely(!__pyx_t_1)) __PYX_ERR(7, 138, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_5 = __Pyx_PyList_Append(__pyx_v_out, __pyx_t_1); if (unlikely(__pyx_t_5 == ((int)-1))) __PYX_ERR(7, 138, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "../resources_source/python/pyparticletracing.pxi":140
 *             out.append(double_vector_to_list(t[i]))
 * 
 *         return out             # <<<<<<<<<<<<<<
 * 
 *     property number_of_particles:
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_out);
  __pyx_r = __pyx_v_out;
  goto __pyx_L0;

  /* "../resources_source/python/pyparticletracing.pxi":132
 *         return out
 * 
 *     def times(self):             # <<<<<<<<<<<<<<
 *         cdef vector[vector[double]] t
 *         self._tracing.times(t)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("_agros.__ParticleTracing__.times", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_out);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../resources_source/python/pyparticletracing.pxi":143
 * 
 *     property number_of_particles:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self._tracing.getNumberOfParticles()
 *         def __set__(self, particles):
 */

/* Python wrapper */
static PyObject *__pyx_pw_6_agros_19__ParticleTracing___19number_of_particles_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6_agros_19__ParticleTracing___19number_of_particles_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6_agros_19__ParticleTracing___19number_of_particles___get__(((struct __pyx_obj_6_agros___ParticleTracing__ *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6_agros_19__ParticleTracing___19number_of_particles___get__(struct __pyx_obj_6_agros___ParticleTracing__ *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "../resources_source/python/pyparticletracing.pxi":144
 *     property number_of_particles:
 *         def __get__(self):
 *             return self._tracing.getNumberOfParticles()             # <<<<<<<<<<<<<<
 *         def __set__(self, particles):
 *             self._tracing.setNumberOfParticles(particles)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->_tracing->getNumberOfParticles()); if (unlikely(!__pyx_t_1)) __PYX_ERR(7, 144, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../resources_source/python/pyparticletracing.pxi":143
 * 
 *     property number_of_particles:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self._tracing.getNumberOfParticles()
 *         def __set__(self, particles):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("_agros.__ParticleTracing__.number_of_particles.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../resources_source/python/pyparticletracing.pxi":145
 *         def __get__(self):
 *             return self._tracing.getNumberOfParticles()
 *         def __set__(self, particles):             # <<<<<<<<<<<<<<
 *             self._tracing.setNumberOfParticles(particles)
 * 
 */

/* Python wrapper */
static int __pyx_pw_6_agros_19__ParticleTracing___19number_of_particles_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_particles); /*proto*/
static int __pyx_pw_6_agros_19__ParticleTracing___19number_of_particles_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_particles) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6_agros_19__ParticleTracing___19number_of_particles_2__set__(((struct __pyx_obj_6_agros___ParticleTracing__ *)__pyx_v_self), ((PyObject *)__pyx_v_particles));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6_agros_19__ParticleTracing___19number_of_particles_2__set__(struct __pyx_obj_6_agros___ParticleTracing__ *__pyx_v_self, PyObject *__pyx_v_particles) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "../resources_source/python/pyparticletracing.pxi":146
 *             return self._tracing.getNumberOfParticles()
 *         def __set__(self, particles):
 *             self._tracing.setNumberOfParticles(particles)             # <<<<<<<<<<<<<<
 * 
 *     property particles_dispersion:
 */
  __pyx_t_1 = __Pyx_PyInt_As_int(__pyx_v_particles); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) __PYX_ERR(7, 146, __pyx_L1_error)
  try {
    __pyx_v_self->_tracing->setNumberOfParticles(__pyx_t_1);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(7, 146, __pyx_L1_error)
  }

  /* "../resources_source/python/pyparticletracing.pxi":145
 *         def __get__(self):
 *             return self._tracing.getNumberOfParticles()
 *         def __set__(self, particles):             # <<<<<<<<<<<<<<
 *             self._tracing.setNumberOfParticles(particles)
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("_agros.__ParticleTracing__.number_of_particles.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../resources_source/python/pyparticletracing.pxi":149
 * 
 *     property particles_dispersion:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self._tracing.getStartingRadius()
 *         def __set__(self, dispersion):
 */

/* Python wrapper */
static PyObject *__pyx_pw_6_agros_19__ParticleTracing___20particles_dispersion_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6_agros_19__ParticleTracing___20particles_dispersion_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6_agros_19__ParticleTracing___20particles_dispersion___get__(((struct __pyx_obj_6_agros___ParticleTracing__ *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6_agros_19__ParticleTracing___20particles_dispersion___get__(struct __pyx_obj_6_agros___ParticleTracing__ *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "../resources_source/python/pyparticletracing.pxi":150
 *     property particles_dispersion:
 *         def __get__(self):
 *             return self._tracing.getStartingRadius()             # <<<<<<<<<<<<<<
 *         def __set__(self, dispersion):
 *             self._tracing.setStartingRadius(dispersion)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->_tracing->getStartingRadius()); if (unlikely(!__pyx_t_1)) __PYX_ERR(7, 150, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../resources_source/python/pyparticletracing.pxi":149
 * 
 *     property particles_dispersion:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self._tracing.getStartingRadius()
 *         def __set__(self, dispersion):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("_agros.__ParticleTracing__.particles_dispersion.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../resources_source/python/pyparticletracing.pxi":151
 *         def __get__(self):
 *             return self._tracing.getStartingRadius()
 *         def __set__(self, dispersion):             # <<<<<<<<<<<<<<
 *             self._tracing.setStartingRadius(dispersion)
 * 
 */

/* Python wrapper */
static int __pyx_pw_6_agros_19__ParticleTracing___20particles_dispersion_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_dispersion); /*proto*/
static int __pyx_pw_6_agros_19__ParticleTracing___20particles_dispersion_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_dispersion) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6_agros_19__ParticleTracing___20particles_dispersion_2__set__(((struct __pyx_obj_6_agros___ParticleTracing__ *)__pyx_v_self), ((PyObject *)__pyx_v_dispersion));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6_agros_19__ParticleTracing___20particles_dispersion_2__set__(struct __pyx_obj_6_agros___ParticleTracing__ *__pyx_v_self, PyObject *__pyx_v_dispersion) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "../resources_source/python/pyparticletracing.pxi":152
 *             return self._tracing.getStartingRadius()
 *         def __set__(self, dispersion):
 *             self._tracing.setStartingRadius(dispersion)             # <<<<<<<<<<<<<<
 * 
 *     property initial_position:
 */
  __pyx_t_1 = __pyx_PyFloat_AsDouble(__pyx_v_dispersion); if (unlikely((__pyx_t_1 == (double)-1) && PyErr_Occurred())) __PYX_ERR(7, 152, __pyx_L1_error)
  try {
    __pyx_v_self->_tracing->setStartingRadius(__pyx_t_1);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(7, 152, __pyx_L1_error)
  }

  /* "../resources_source/python/pyparticletracing.pxi":151
 *         def __get__(self):
 *             return self._tracing.getStartingRadius()
 *         def __set__(self, dispersion):             # <<<<<<<<<<<<<<
 *             self._tracing.setStartingRadius(dispersion)
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("_agros.__ParticleTracing__.particles_dispersion.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../resources_source/python/pyparticletracing.pxi":155
 * 
 *     property initial_position:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef vector[double] position
 *             self._tracing.getInitialPosition(position)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6_agros_19__ParticleTracing___16initial_position_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6_agros_19__ParticleTracing___16initial_position_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6_agros_19__ParticleTracing___16initial_position___get__(((struct __pyx_obj_6_agros___ParticleTracing__ *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6_agros_19__ParticleTracing___16initial_position___get__(struct __pyx_obj_6_agros___ParticleTracing__ *__pyx_v_self) {
  std::vector<double>  __pyx_v_position;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "../resources_source/python/pyparticletracing.pxi":157
 *         def __get__(self):
 *             cdef vector[double] position
 *             self._tracing.getInitialPosition(position)             # <<<<<<<<<<<<<<
 *             return double_vector_to_list(position)
 *         def __set__(self, position):
 */
  __pyx_v_self->_tracing->getInitialPosition(__pyx_v_position);

  /* "../resources_source/python/pyparticletracing.pxi":158
 *             cdef vector[double] position
 *             self._tracing.getInitialPosition(position)
 *             return double_vector_to_list(position)             # <<<<<<<<<<<<<<
 *         def __set__(self, position):
 *             self._tracing.setInitialPosition(list_to_double_vector(position))
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_6_agros_double_vector_to_list(__pyx_v_position); if (unlikely(!__pyx_t_1)) __PYX_ERR(7, 158, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../resources_source/python/pyparticletracing.pxi":155
 * 
 *     property initial_position:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef vector[double] position
 *             self._tracing.getInitialPosition(position)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("_agros.__ParticleTracing__.initial_position.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../resources_source/python/pyparticletracing.pxi":159
 *             self._tracing.getInitialPosition(position)
 *             return double_vector_to_list(position)
 *         def __set__(self, position):             # <<<<<<<<<<<<<<
 *             self._tracing.setInitialPosition(list_to_double_vector(position))
 * 
 */

/* Python wrapper */
static int __pyx_pw_6_agros_19__ParticleTracing___16initial_position_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_position); /*proto*/
static int __pyx_pw_6_agros_19__ParticleTracing___16initial_position_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_position) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6_agros_19__ParticleTracing___16initial_position_2__set__(((struct __pyx_obj_6_agros___ParticleTracing__ *)__pyx_v_self), ((PyObject *)__pyx_v_position));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6_agros_19__ParticleTracing___16initial_position_2__set__(struct __pyx_obj_6_agros___ParticleTracing__ *__pyx_v_self, PyObject *__pyx_v_position) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "../resources_source/python/pyparticletracing.pxi":160
 *             return double_vector_to_list(position)
 *         def __set__(self, position):
 *             self._tracing.setInitialPosition(list_to_double_vector(position))             # <<<<<<<<<<<<<<
 * 
 *     property initial_velocity:
 */
  try {
    __pyx_v_self->_tracing->setInitialPosition(__pyx_f_6_agros_list_to_double_vector(__pyx_v_position));
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(7, 160, __pyx_L1_error)
  }

  /* "../resources_source/python/pyparticletracing.pxi":159
 *             self._tracing.getInitialPosition(position)
 *             return double_vector_to_list(position)
 *         def __set__(self, position):             # <<<<<<<<<<<<<<
 *             self._tracing.setInitialPosition(list_to_double_vector(position))
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("_agros.__ParticleTracing__.initial_position.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../resources_source/python/pyparticletracing.pxi":163
 * 
 *     property initial_velocity:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef vector[double] velocity
 *             self._tracing.getInitialVelocity(velocity)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6_agros_19__ParticleTracing___16initial_velocity_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6_agros_19__ParticleTracing___16initial_velocity_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6_agros_19__ParticleTracing___16initial_velocity___get__(((struct __pyx_obj_6_agros___ParticleTracing__ *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6_agros_19__ParticleTracing___16initial_velocity___get__(struct __pyx_obj_6_agros___ParticleTracing__ *__pyx_v_self) {
  std::vector<double>  __pyx_v_velocity;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "../resources_source/python/pyparticletracing.pxi":165
 *         def __get__(self):
 *             cdef vector[double] velocity
 *             self._tracing.getInitialVelocity(velocity)             # <<<<<<<<<<<<<<
 *             return double_vector_to_list(velocity)
 *         def __set__(self, velocity):
 */
  __pyx_v_self->_tracing->getInitialVelocity(__pyx_v_velocity);

  /* "../resources_source/python/pyparticletracing.pxi":166
 *             cdef vector[double] velocity
 *             self._tracing.getInitialVelocity(velocity)
 *             return double_vector_to_list(velocity)             # <<<<<<<<<<<<<<
 *         def __set__(self, velocity):
 *             self._tracing.setInitialVelocity(list_to_double_vector(velocity))
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_6_agros_double_vector_to_list(__pyx_v_velocity); if (unlikely(!__pyx_t_1)) __PYX_ERR(7, 166, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../resources_source/python/pyparticletracing.pxi":163
 * 
 *     property initial_velocity:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef vector[double] velocity
 *             self._tracing.getInitialVelocity(velocity)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("_agros.__ParticleTracing__.initial_velocity.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../resources_source/python/pyparticletracing.pxi":167
 *             self._tracing.getInitialVelocity(velocity)
 *             return double_vector_to_list(velocity)
 *         def __set__(self, velocity):             # <<<<<<<<<<<<<<
 *             self._tracing.setInitialVelocity(list_to_double_vector(velocity))
 * 
 */

/* Python wrapper */
static int __pyx_pw_6_agros_19__ParticleTracing___16initial_velocity_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_velocity); /*proto*/
static int __pyx_pw_6_agros_19__ParticleTracing___16initial_velocity_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_velocity) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6_agros_19__ParticleTracing___16initial_velocity_2__set__(((struct __pyx_obj_6_agros___ParticleTracing__ *)__pyx_v_self), ((PyObject *)__pyx_v_velocity));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6_agros_19__ParticleTracing___16initial_velocity_2__set__(struct __pyx_obj_6_agros___ParticleTracing__ *__pyx_v_self, PyObject *__pyx_v_velocity) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "../resources_source/python/pyparticletracing.pxi":168
 *             return double_vector_to_list(velocity)
 *         def __set__(self, velocity):
 *             self._tracing.setInitialVelocity(list_to_double_vector(velocity))             # <<<<<<<<<<<<<<
 * 
 *     property mass:
 */
  __pyx_v_self->_tracing->setInitialVelocity(__pyx_f_6_agros_list_to_double_vector(__pyx_v_velocity));

  /* "../resources_source/python/pyparticletracing.pxi":167
 *             self._tracing.getInitialVelocity(velocity)
 *             return double_vector_to_list(velocity)
 *         def __set__(self, velocity):             # <<<<<<<<<<<<<<
 *             self._tracing.setInitialVelocity(list_to_double_vector(velocity))
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../resources_source/python/pyparticletracing.pxi":171
 * 
 *     property mass:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self._tracing.getParticleMass()
 *         def __set__(self, mass):
 */

/* Python wrapper */
static PyObject *__pyx_pw_6_agros_19__ParticleTracing___4mass_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6_agros_19__ParticleTracing___4mass_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6_agros_19__ParticleTracing___4mass___get__(((struct __pyx_obj_6_agros___ParticleTracing__ *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6_agros_19__ParticleTracing___4mass___get__(struct __pyx_obj_6_agros___ParticleTracing__ *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "../resources_source/python/pyparticletracing.pxi":172
 *     property mass:
 *         def __get__(self):
 *             return self._tracing.getParticleMass()             # <<<<<<<<<<<<<<
 *         def __set__(self, mass):
 *             self._tracing.setParticleMass(mass)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->_tracing->getParticleMass()); if (unlikely(!__pyx_t_1)) __PYX_ERR(7, 172, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../resources_source/python/pyparticletracing.pxi":171
 * 
 *     property mass:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self._tracing.getParticleMass()
 *         def __set__(self, mass):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("_agros.__ParticleTracing__.mass.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../resources_source/python/pyparticletracing.pxi":173
 *         def __get__(self):
 *             return self._tracing.getParticleMass()
 *         def __set__(self, mass):             # <<<<<<<<<<<<<<
 *             self._tracing.setParticleMass(mass)
 * 
 */

/* Python wrapper */
static int __pyx_pw_6_agros_19__ParticleTracing___4mass_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_mass); /*proto*/
static int __pyx_pw_6_agros_19__ParticleTracing___4mass_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_mass) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6_agros_19__ParticleTracing___4mass_2__set__(((struct __pyx_obj_6_agros___ParticleTracing__ *)__pyx_v_self), ((PyObject *)__pyx_v_mass));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6_agros_19__ParticleTracing___4mass_2__set__(struct __pyx_obj_6_agros___ParticleTracing__ *__pyx_v_self, PyObject *__pyx_v_mass) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "../resources_source/python/pyparticletracing.pxi":174
 *             return self._tracing.getParticleMass()
 *         def __set__(self, mass):
 *             self._tracing.setParticleMass(mass)             # <<<<<<<<<<<<<<
 * 
 *     property charge:
 */
  __pyx_t_1 = __pyx_PyFloat_AsDouble(__pyx_v_mass); if (unlikely((__pyx_t_1 == (double)-1) && PyErr_Occurred())) __PYX_ERR(7, 174, __pyx_L1_error)
  try {
    __pyx_v_self->_tracing->setParticleMass(__pyx_t_1);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(7, 174, __pyx_L1_error)
  }

  /* "../resources_source/python/pyparticletracing.pxi":173
 *         def __get__(self):
 *             return self._tracing.getParticleMass()
 *         def __set__(self, mass):             # <<<<<<<<<<<<<<
 *             self._tracing.setParticleMass(mass)
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("_agros.__ParticleTracing__.mass.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../resources_source/python/pyparticletracing.pxi":177
 * 
 *     property charge:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self._tracing.getParticleCharge()
 *         def __set__(self, charge):
 */

/* Python wrapper */
static PyObject *__pyx_pw_6_agros_19__ParticleTracing___6charge_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6_agros_19__ParticleTracing___6charge_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6_agros_19__ParticleTracing___6charge___get__(((struct __pyx_obj_6_agros___ParticleTracing__ *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6_agros_19__ParticleTracing___6charge___get__(struct __pyx_obj_6_agros___ParticleTracing__ *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "../resources_source/python/pyparticletracing.pxi":178
 *     property charge:
 *         def __get__(self):
 *             return self._tracing.getParticleCharge()             # <<<<<<<<<<<<<<
 *         def __set__(self, charge):
 *             self._tracing.setParticleCharge(charge)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->_tracing->getParticleCharge()); if (unlikely(!__pyx_t_1)) __PYX_ERR(7, 178, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../resources_source/python/pyparticletracing.pxi":177
 * 
 *     property charge:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self._tracing.getParticleCharge()
 *         def __set__(self, charge):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("_agros.__ParticleTracing__.charge.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../resources_source/python/pyparticletracing.pxi":179
 *         def __get__(self):
 *             return self._tracing.getParticleCharge()
 *         def __set__(self, charge):             # <<<<<<<<<<<<<<
 *             self._tracing.setParticleCharge(charge)
 * 
 */

/* Python wrapper */
static int __pyx_pw_6_agros_19__ParticleTracing___6charge_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_charge); /*proto*/
static int __pyx_pw_6_agros_19__ParticleTracing___6charge_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_charge) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6_agros_19__ParticleTracing___6charge_2__set__(((struct __pyx_obj_6_agros___ParticleTracing__ *)__pyx_v_self), ((PyObject *)__pyx_v_charge));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6_agros_19__ParticleTracing___6charge_2__set__(struct __pyx_obj_6_agros___ParticleTracing__ *__pyx_v_self, PyObject *__pyx_v_charge) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "../resources_source/python/pyparticletracing.pxi":180
 *             return self._tracing.getParticleCharge()
 *         def __set__(self, charge):
 *             self._tracing.setParticleCharge(charge)             # <<<<<<<<<<<<<<
 * 
 *     property include_relativistic_correction:
 */
  __pyx_t_1 = __pyx_PyFloat_AsDouble(__pyx_v_charge); if (unlikely((__pyx_t_1 == (double)-1) && PyErr_Occurred())) __PYX_ERR(7, 180, __pyx_L1_error)
  __pyx_v_self->_tracing->setParticleCharge(__pyx_t_1);

  /* "../resources_source/python/pyparticletracing.pxi":179
 *         def __get__(self):
 *             return self._tracing.getParticleCharge()
 *         def __set__(self, charge):             # <<<<<<<<<<<<<<
 *             self._tracing.setParticleCharge(charge)
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("_agros.__ParticleTracing__.charge.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../resources_source/python/pyparticletracing.pxi":183
 * 
 *     property include_relativistic_correction:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self._tracing.getIncludeRelativisticCorrection()
 *         def __set__(self, correction):
 */

/* Python wrapper */
static PyObject *__pyx_pw_6_agros_19__ParticleTracing___31include_relativistic_correction_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6_agros_19__ParticleTracing___31include_relativistic_correction_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6_agros_19__ParticleTracing___31include_relativistic_correction___get__(((struct __pyx_obj_6_agros___ParticleTracing__ *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6_agros_19__ParticleTracing___31include_relativistic_correction___get__(struct __pyx_obj_6_agros___ParticleTracing__ *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "../resources_source/python/pyparticletracing.pxi":184
 *     property include_relativistic_correction:
 *         def __get__(self):
 *             return self._tracing.getIncludeRelativisticCorrection()             # <<<<<<<<<<<<<<
 *         def __set__(self, correction):
 *             self._tracing.setIncludeRelativisticCorrection(correction)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_v_self->_tracing->getIncludeRelativisticCorrection()); if (unlikely(!__pyx_t_1)) __PYX_ERR(7, 184, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../resources_source/python/pyparticletracing.pxi":183
 * 
 *     property include_relativistic_correction:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self._tracing.getIncludeRelativisticCorrection()
 *         def __set__(self, correction):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("_agros.__ParticleTracing__.include_relativistic_correction.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../resources_source/python/pyparticletracing.pxi":185
 *         def __get__(self):
 *             return self._tracing.getIncludeRelativisticCorrection()
 *         def __set__(self, correction):             # <<<<<<<<<<<<<<
 *             self._tracing.setIncludeRelativisticCorrection(correction)
 * 
 */

/* Python wrapper */
static int __pyx_pw_6_agros_19__ParticleTracing___31include_relativistic_correction_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_correction); /*proto*/
static int __pyx_pw_6_agros_19__ParticleTracing___31include_relativistic_correction_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_correction) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6_agros_19__ParticleTracing___31include_relativistic_correction_2__set__(((struct __pyx_obj_6_agros___ParticleTracing__ *)__pyx_v_self), ((PyObject *)__pyx_v_correction));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6_agros_19__ParticleTracing___31include_relativistic_correction_2__set__(struct __pyx_obj_6_agros___ParticleTracing__ *__pyx_v_self, PyObject *__pyx_v_correction) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  bool __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "../resources_source/python/pyparticletracing.pxi":186
 *             return self._tracing.getIncludeRelativisticCorrection()
 *         def __set__(self, correction):
 *             self._tracing.setIncludeRelativisticCorrection(correction)             # <<<<<<<<<<<<<<
 * 
 *     property reflect_on_different_material:
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_correction); if (unlikely((__pyx_t_1 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(7, 186, __pyx_L1_error)
  __pyx_v_self->_tracing->setIncludeRelativisticCorrection(__pyx_t_1);

  /* "../resources_source/python/pyparticletracing.pxi":185
 *         def __get__(self):
 *             return self._tracing.getIncludeRelativisticCorrection()
 *         def __set__(self, correction):             # <<<<<<<<<<<<<<
 *             self._tracing.setIncludeRelativisticCorrection(correction)
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("_agros.__ParticleTracing__.include_relativistic_correction.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../resources_source/python/pyparticletracing.pxi":189
 * 
 *     property reflect_on_different_material:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self._tracing.getReflectOnDifferentMaterial()
 *         def __set__(self, reflect):
 */

/* Python wrapper */
static PyObject *__pyx_pw_6_agros_19__ParticleTracing___29reflect_on_different_material_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6_agros_19__ParticleTracing___29reflect_on_different_material_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6_agros_19__ParticleTracing___29reflect_on_different_material___get__(((struct __pyx_obj_6_agros___ParticleTracing__ *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6_agros_19__ParticleTracing___29reflect_on_different_material___get__(struct __pyx_obj_6_agros___ParticleTracing__ *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "../resources_source/python/pyparticletracing.pxi":190
 *     property reflect_on_different_material:
 *         def __get__(self):
 *             return self._tracing.getReflectOnDifferentMaterial()             # <<<<<<<<<<<<<<
 *         def __set__(self, reflect):
 *             self._tracing.setReflectOnDifferentMaterial(reflect)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_v_self->_tracing->getReflectOnDifferentMaterial()); if (unlikely(!__pyx_t_1)) __PYX_ERR(7, 190, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../resources_source/python/pyparticletracing.pxi":189
 * 
 *     property reflect_on_different_material:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self._tracing.getReflectOnDifferentMaterial()
 *         def __set__(self, reflect):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("_agros.__ParticleTracing__.reflect_on_different_material.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../resources_source/python/pyparticletracing.pxi":191
 *         def __get__(self):
 *             return self._tracing.getReflectOnDifferentMaterial()
 *         def __set__(self, reflect):             # <<<<<<<<<<<<<<
 *             self._tracing.setReflectOnDifferentMaterial(reflect)
 * 
 */

/* Python wrapper */
static int __pyx_pw_6_agros_19__ParticleTracing___29reflect_on_different_material_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_reflect); /*proto*/
static int __pyx_pw_6_agros_19__ParticleTracing___29reflect_on_different_material_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_reflect) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6_agros_19__ParticleTracing___29reflect_on_different_material_2__set__(((struct __pyx_obj_6_agros___ParticleTracing__ *)__pyx_v_self), ((PyObject *)__pyx_v_reflect));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6_agros_19__ParticleTracing___29reflect_on_different_material_2__set__(struct __pyx_obj_6_agros___ParticleTracing__ *__pyx_v_self, PyObject *__pyx_v_reflect) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  bool __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "../resources_source/python/pyparticletracing.pxi":192
 *             return self._tracing.getReflectOnDifferentMaterial()
 *         def __set__(self, reflect):
 *             self._tracing.setReflectOnDifferentMaterial(reflect)             # <<<<<<<<<<<<<<
 * 
 *     property reflect_on_boundary:
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_reflect); if (unlikely((__pyx_t_1 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(7, 192, __pyx_L1_error)
  __pyx_v_self->_tracing->setReflectOnDifferentMaterial(__pyx_t_1);

  /* "../resources_source/python/pyparticletracing.pxi":191
 *         def __get__(self):
 *             return self._tracing.getReflectOnDifferentMaterial()
 *         def __set__(self, reflect):             # <<<<<<<<<<<<<<
 *             self._tracing.setReflectOnDifferentMaterial(reflect)
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("_agros.__ParticleTracing__.reflect_on_different_material.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../resources_source/python/pyparticletracing.pxi":195
 * 
 *     property reflect_on_boundary:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self._tracing.getReflectOnBoundary()
 *         def __set__(self, reflect):
 */

/* Python wrapper */
static PyObject *__pyx_pw_6_agros_19__ParticleTracing___19reflect_on_boundary_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6_agros_19__ParticleTracing___19reflect_on_boundary_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6_agros_19__ParticleTracing___19reflect_on_boundary___get__(((struct __pyx_obj_6_agros___ParticleTracing__ *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6_agros_19__ParticleTracing___19reflect_on_boundary___get__(struct __pyx_obj_6_agros___ParticleTracing__ *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "../resources_source/python/pyparticletracing.pxi":196
 *     property reflect_on_boundary:
 *         def __get__(self):
 *             return self._tracing.getReflectOnBoundary()             # <<<<<<<<<<<<<<
 *         def __set__(self, reflect):
 *             self._tracing.setReflectOnBoundary(reflect)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_v_self->_tracing->getReflectOnBoundary()); if (unlikely(!__pyx_t_1)) __PYX_ERR(7, 196, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../resources_source/python/pyparticletracing.pxi":195
 * 
 *     property reflect_on_boundary:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self._tracing.getReflectOnBoundary()
 *         def __set__(self, reflect):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("_agros.__ParticleTracing__.reflect_on_boundary.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../resources_source/python/pyparticletracing.pxi":197
 *         def __get__(self):
 *             return self._tracing.getReflectOnBoundary()
 *         def __set__(self, reflect):             # <<<<<<<<<<<<<<
 *             self._tracing.setReflectOnBoundary(reflect)
 * 
 */

/* Python wrapper */
static int __pyx_pw_6_agros_19__ParticleTracing___19reflect_on_boundary_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_reflect); /*proto*/
static int __pyx_pw_6_agros_19__ParticleTracing___19reflect_on_boundary_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_reflect) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6_agros_19__ParticleTracing___19reflect_on_boundary_2__set__(((struct __pyx_obj_6_agros___ParticleTracing__ *)__pyx_v_self), ((PyObject *)__pyx_v_reflect));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6_agros_19__ParticleTracing___19reflect_on_boundary_2__set__(struct __pyx_obj_6_agros___ParticleTracing__ *__pyx_v_self, PyObject *__pyx_v_reflect) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  bool __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "../resources_source/python/pyparticletracing.pxi":198
 *             return self._tracing.getReflectOnBoundary()
 *         def __set__(self, reflect):
 *             self._tracing.setReflectOnBoundary(reflect)             # <<<<<<<<<<<<<<
 * 
 *     property coefficient_of_restitution:
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_reflect); if (unlikely((__pyx_t_1 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(7, 198, __pyx_L1_error)
  __pyx_v_self->_tracing->setReflectOnBoundary(__pyx_t_1);

  /* "../resources_source/python/pyparticletracing.pxi":197
 *         def __get__(self):
 *             return self._tracing.getReflectOnBoundary()
 *         def __set__(self, reflect):             # <<<<<<<<<<<<<<
 *             self._tracing.setReflectOnBoundary(reflect)
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("_agros.__ParticleTracing__.reflect_on_boundary.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../resources_source/python/pyparticletracing.pxi":201
 * 
 *     property coefficient_of_restitution:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self._tracing.getCoefficientOfRestitution()
 *         def __set__(self, coeff):
 */

/* Python wrapper */
static PyObject *__pyx_pw_6_agros_19__ParticleTracing___26coefficient_of_restitution_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6_agros_19__ParticleTracing___26coefficient_of_restitution_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6_agros_19__ParticleTracing___26coefficient_of_restitution___get__(((struct __pyx_obj_6_agros___ParticleTracing__ *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6_agros_19__ParticleTracing___26coefficient_of_restitution___get__(struct __pyx_obj_6_agros___ParticleTracing__ *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "../resources_source/python/pyparticletracing.pxi":202
 *     property coefficient_of_restitution:
 *         def __get__(self):
 *             return self._tracing.getCoefficientOfRestitution()             # <<<<<<<<<<<<<<
 *         def __set__(self, coeff):
 *             self._tracing.setCoefficientOfRestitution(coeff)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->_tracing->getCoefficientOfRestitution()); if (unlikely(!__pyx_t_1)) __PYX_ERR(7, 202, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../resources_source/python/pyparticletracing.pxi":201
 * 
 *     property coefficient_of_restitution:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self._tracing.getCoefficientOfRestitution()
 *         def __set__(self, coeff):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("_agros.__ParticleTracing__.coefficient_of_restitution.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../resources_source/python/pyparticletracing.pxi":203
 *         def __get__(self):
 *             return self._tracing.getCoefficientOfRestitution()
 *         def __set__(self, coeff):             # <<<<<<<<<<<<<<
 *             self._tracing.setCoefficientOfRestitution(coeff)
 * 
 */

/* Python wrapper */
static int __pyx_pw_6_agros_19__ParticleTracing___26coefficient_of_restitution_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_coeff); /*proto*/
static int __pyx_pw_6_agros_19__ParticleTracing___26coefficient_of_restitution_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_coeff) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6_agros_19__ParticleTracing___26coefficient_of_restitution_2__set__(((struct __pyx_obj_6_agros___ParticleTracing__ *)__pyx_v_self), ((PyObject *)__pyx_v_coeff));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6_agros_19__ParticleTracing___26coefficient_of_restitution_2__set__(struct __pyx_obj_6_agros___ParticleTracing__ *__pyx_v_self, PyObject *__pyx_v_coeff) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "../resources_source/python/pyparticletracing.pxi":204
 *             return self._tracing.getCoefficientOfRestitution()
 *         def __set__(self, coeff):
 *             self._tracing.setCoefficientOfRestitution(coeff)             # <<<<<<<<<<<<<<
 * 
 *     property drag_force_density:
 */
  __pyx_t_1 = __pyx_PyFloat_AsDouble(__pyx_v_coeff); if (unlikely((__pyx_t_1 == (double)-1) && PyErr_Occurred())) __PYX_ERR(7, 204, __pyx_L1_error)
  try {
    __pyx_v_self->_tracing->setCoefficientOfRestitution(__pyx_t_1);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(7, 204, __pyx_L1_error)
  }

  /* "../resources_source/python/pyparticletracing.pxi":203
 *         def __get__(self):
 *             return self._tracing.getCoefficientOfRestitution()
 *         def __set__(self, coeff):             # <<<<<<<<<<<<<<
 *             self._tracing.setCoefficientOfRestitution(coeff)
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("_agros.__ParticleTracing__.coefficient_of_restitution.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../resources_source/python/pyparticletracing.pxi":207
 * 
 *     property drag_force_density:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self._tracing.getDragForceDensity()
 *         def __set__(self, density):
 */

/* Python wrapper */
static PyObject *__pyx_pw_6_agros_19__ParticleTracing___18drag_force_density_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6_agros_19__ParticleTracing___18drag_force_density_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6_agros_19__ParticleTracing___18drag_force_density___get__(((struct __pyx_obj_6_agros___ParticleTracing__ *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6_agros_19__ParticleTracing___18drag_force_density___get__(struct __pyx_obj_6_agros___ParticleTracing__ *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "../resources_source/python/pyparticletracing.pxi":208
 *     property drag_force_density:
 *         def __get__(self):
 *             return self._tracing.getDragForceDensity()             # <<<<<<<<<<<<<<
 *         def __set__(self, density):
 *             self._tracing.setDragForceDensity(density)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->_tracing->getDragForceDensity()); if (unlikely(!__pyx_t_1)) __PYX_ERR(7, 208, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../resources_source/python/pyparticletracing.pxi":207
 * 
 *     property drag_force_density:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self._tracing.getDragForceDensity()
 *         def __set__(self, density):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("_agros.__ParticleTracing__.drag_force_density.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../resources_source/python/pyparticletracing.pxi":209
 *         def __get__(self):
 *             return self._tracing.getDragForceDensity()
 *         def __set__(self, density):             # <<<<<<<<<<<<<<
 *             self._tracing.setDragForceDensity(density)
 * 
 */

/* Python wrapper */
static int __pyx_pw_6_agros_19__ParticleTracing___18drag_force_density_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_density); /*proto*/
static int __pyx_pw_6_agros_19__ParticleTracing___18drag_force_density_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_density) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6_agros_19__ParticleTracing___18drag_force_density_2__set__(((struct __pyx_obj_6_agros___ParticleTracing__ *)__pyx_v_self), ((PyObject *)__pyx_v_density));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6_agros_19__ParticleTracing___18drag_force_density_2__set__(struct __pyx_obj_6_agros___ParticleTracing__ *__pyx_v_self, PyObject *__pyx_v_density) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "../resources_source/python/pyparticletracing.pxi":210
 *             return self._tracing.getDragForceDensity()
 *         def __set__(self, density):
 *             self._tracing.setDragForceDensity(density)             # <<<<<<<<<<<<<<
 * 
 *     property drag_force_reference_area:
 */
  __pyx_t_1 = __pyx_PyFloat_AsDouble(__pyx_v_density); if (unlikely((__pyx_t_1 == (double)-1) && PyErr_Occurred())) __PYX_ERR(7, 210, __pyx_L1_error)
  try {
    __pyx_v_self->_tracing->setDragForceDensity(__pyx_t_1);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(7, 210, __pyx_L1_error)
  }

  /* "../resources_source/python/pyparticletracing.pxi":209
 *         def __get__(self):
 *             return self._tracing.getDragForceDensity()
 *         def __set__(self, density):             # <<<<<<<<<<<<<<
 *             self._tracing.setDragForceDensity(density)
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("_agros.__ParticleTracing__.drag_force_density.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../resources_source/python/pyparticletracing.pxi":213
 * 
 *     property drag_force_reference_area:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self._tracing.getDragForceReferenceArea()
 *         def __set__(self, area):
 */

/* Python wrapper */
static PyObject *__pyx_pw_6_agros_19__ParticleTracing___25drag_force_reference_area_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6_agros_19__ParticleTracing___25drag_force_reference_area_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6_agros_19__ParticleTracing___25drag_force_reference_area___get__(((struct __pyx_obj_6_agros___ParticleTracing__ *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6_agros_19__ParticleTracing___25drag_force_reference_area___get__(struct __pyx_obj_6_agros___ParticleTracing__ *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "../resources_source/python/pyparticletracing.pxi":214
 *     property drag_force_reference_area:
 *         def __get__(self):
 *             return self._tracing.getDragForceReferenceArea()             # <<<<<<<<<<<<<<
 *         def __set__(self, area):
 *             self._tracing.setDragForceReferenceArea(area)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->_tracing->getDragForceReferenceArea()); if (unlikely(!__pyx_t_1)) __PYX_ERR(7, 214, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../resources_source/python/pyparticletracing.pxi":213
 * 
 *     property drag_force_reference_area:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self._tracing.getDragForceReferenceArea()
 *         def __set__(self, area):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("_agros.__ParticleTracing__.drag_force_reference_area.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../resources_source/python/pyparticletracing.pxi":215
 *         def __get__(self):
 *             return self._tracing.getDragForceReferenceArea()
 *         def __set__(self, area):             # <<<<<<<<<<<<<<
 *             self._tracing.setDragForceReferenceArea(area)
 * 
 */

/* Python wrapper */
static int __pyx_pw_6_agros_19__ParticleTracing___25drag_force_reference_area_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_area); /*proto*/
static int __pyx_pw_6_agros_19__ParticleTracing___25drag_force_reference_area_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_area) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6_agros_19__ParticleTracing___25drag_force_reference_area_2__set__(((struct __pyx_obj_6_agros___ParticleTracing__ *)__pyx_v_self), ((PyObject *)__pyx_v_area));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6_agros_19__ParticleTracing___25drag_force_reference_area_2__set__(struct __pyx_obj_6_agros___ParticleTracing__ *__pyx_v_self, PyObject *__pyx_v_area) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "../resources_source/python/pyparticletracing.pxi":216
 *             return self._tracing.getDragForceReferenceArea()
 *         def __set__(self, area):
 *             self._tracing.setDragForceReferenceArea(area)             # <<<<<<<<<<<<<<
 * 
 *     property drag_force_coefficient:
 */
  __pyx_t_1 = __pyx_PyFloat_AsDouble(__pyx_v_area); if (unlikely((__pyx_t_1 == (double)-1) && PyErr_Occurred())) __PYX_ERR(7, 216, __pyx_L1_error)
  try {
    __pyx_v_self->_tracing->setDragForceReferenceArea(__pyx_t_1);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(7, 216, __pyx_L1_error)
  }

  /* "../resources_source/python/pyparticletracing.pxi":215
 *         def __get__(self):
 *             return self._tracing.getDragForceReferenceArea()
 *         def __set__(self, area):             # <<<<<<<<<<<<<<
 *             self._tracing.setDragForceReferenceArea(area)
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("_agros.__ParticleTracing__.drag_force_reference_area.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../resources_source/python/pyparticletracing.pxi":219
 * 
 *     property drag_force_coefficient:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self._tracing.getDragForceCoefficient()
 *         def __set__(self, coeff):
 */

/* Python wrapper */
static PyObject *__pyx_pw_6_agros_19__ParticleTracing___22drag_force_coefficient_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6_agros_19__ParticleTracing___22drag_force_coefficient_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6_agros_19__ParticleTracing___22drag_force_coefficient___get__(((struct __pyx_obj_6_agros___ParticleTracing__ *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6_agros_19__ParticleTracing___22drag_force_coefficient___get__(struct __pyx_obj_6_agros___ParticleTracing__ *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "../resources_source/python/pyparticletracing.pxi":220
 *     property drag_force_coefficient:
 *         def __get__(self):
 *             return self._tracing.getDragForceCoefficient()             # <<<<<<<<<<<<<<
 *         def __set__(self, coeff):
 *             self._tracing.setDragForceCoefficient(coeff)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->_tracing->getDragForceCoefficient()); if (unlikely(!__pyx_t_1)) __PYX_ERR(7, 220, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../resources_source/python/pyparticletracing.pxi":219
 * 
 *     property drag_force_coefficient:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self._tracing.getDragForceCoefficient()
 *         def __set__(self, coeff):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("_agros.__ParticleTracing__.drag_force_coefficient.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../resources_source/python/pyparticletracing.pxi":221
 *         def __get__(self):
 *             return self._tracing.getDragForceCoefficient()
 *         def __set__(self, coeff):             # <<<<<<<<<<<<<<
 *             self._tracing.setDragForceCoefficient(coeff)
 * 
 */

/* Python wrapper */
static int __pyx_pw_6_agros_19__ParticleTracing___22drag_force_coefficient_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_coeff); /*proto*/
static int __pyx_pw_6_agros_19__ParticleTracing___22drag_force_coefficient_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_coeff) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6_agros_19__ParticleTracing___22drag_force_coefficient_2__set__(((struct __pyx_obj_6_agros___ParticleTracing__ *)__pyx_v_self), ((PyObject *)__pyx_v_coeff));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6_agros_19__ParticleTracing___22drag_force_coefficient_2__set__(struct __pyx_obj_6_agros___ParticleTracing__ *__pyx_v_self, PyObject *__pyx_v_coeff) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "../resources_source/python/pyparticletracing.pxi":222
 *             return self._tracing.getDragForceCoefficient()
 *         def __set__(self, coeff):
 *             self._tracing.setDragForceCoefficient(coeff)             # <<<<<<<<<<<<<<
 * 
 *     property custom_force:
 */
  __pyx_t_1 = __pyx_PyFloat_AsDouble(__pyx_v_coeff); if (unlikely((__pyx_t_1 == (double)-1) && PyErr_Occurred())) __PYX_ERR(7, 222, __pyx_L1_error)
  try {
    __pyx_v_self->_tracing->setDragForceCoefficient(__pyx_t_1);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(7, 222, __pyx_L1_error)
  }

  /* "../resources_source/python/pyparticletracing.pxi":221
 *         def __get__(self):
 *             return self._tracing.getDragForceCoefficient()
 *         def __set__(self, coeff):             # <<<<<<<<<<<<<<
 *             self._tracing.setDragForceCoefficient(coeff)
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("_agros.__ParticleTracing__.drag_force_coefficient.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../resources_source/python/pyparticletracing.pxi":225
 * 
 *     property custom_force:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef vector[double] force
 *             self._tracing.getCustomForce(force)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6_agros_19__ParticleTracing___12custom_force_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6_agros_19__ParticleTracing___12custom_force_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6_agros_19__ParticleTracing___12custom_force___get__(((struct __pyx_obj_6_agros___ParticleTracing__ *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6_agros_19__ParticleTracing___12custom_force___get__(struct __pyx_obj_6_agros___ParticleTracing__ *__pyx_v_self) {
  std::vector<double>  __pyx_v_force;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "../resources_source/python/pyparticletracing.pxi":227
 *         def __get__(self):
 *             cdef vector[double] force
 *             self._tracing.getCustomForce(force)             # <<<<<<<<<<<<<<
 *             return double_vector_to_list(force)
 *         def __set__(self, force):
 */
  try {
    __pyx_v_self->_tracing->getCustomForce(__pyx_v_force);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(7, 227, __pyx_L1_error)
  }

  /* "../resources_source/python/pyparticletracing.pxi":228
 *             cdef vector[double] force
 *             self._tracing.getCustomForce(force)
 *             return double_vector_to_list(force)             # <<<<<<<<<<<<<<
 *         def __set__(self, force):
 *             self._tracing.setCustomForce(list_to_double_vector(force))
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_6_agros_double_vector_to_list(__pyx_v_force); if (unlikely(!__pyx_t_1)) __PYX_ERR(7, 228, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../resources_source/python/pyparticletracing.pxi":225
 * 
 *     property custom_force:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef vector[double] force
 *             self._tracing.getCustomForce(force)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("_agros.__ParticleTracing__.custom_force.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../resources_source/python/pyparticletracing.pxi":229
 *             self._tracing.getCustomForce(force)
 *             return double_vector_to_list(force)
 *         def __set__(self, force):             # <<<<<<<<<<<<<<
 *             self._tracing.setCustomForce(list_to_double_vector(force))
 * 
 */

/* Python wrapper */
static int __pyx_pw_6_agros_19__ParticleTracing___12custom_force_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_force); /*proto*/
static int __pyx_pw_6_agros_19__ParticleTracing___12custom_force_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_force) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6_agros_19__ParticleTracing___12custom_force_2__set__(((struct __pyx_obj_6_agros___ParticleTracing__ *)__pyx_v_self), ((PyObject *)__pyx_v_force));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6_agros_19__ParticleTracing___12custom_force_2__set__(struct __pyx_obj_6_agros___ParticleTracing__ *__pyx_v_self, PyObject *__pyx_v_force) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "../resources_source/python/pyparticletracing.pxi":230
 *             return double_vector_to_list(force)
 *         def __set__(self, force):
 *             self._tracing.setCustomForce(list_to_double_vector(force))             # <<<<<<<<<<<<<<
 * 
 *     property electrostatic_interaction:
 */
  try {
    __pyx_v_self->_tracing->setCustomForce(__pyx_f_6_agros_list_to_double_vector(__pyx_v_force));
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(7, 230, __pyx_L1_error)
  }

  /* "../resources_source/python/pyparticletracing.pxi":229
 *             self._tracing.getCustomForce(force)
 *             return double_vector_to_list(force)
 *         def __set__(self, force):             # <<<<<<<<<<<<<<
 *             self._tracing.setCustomForce(list_to_double_vector(force))
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("_agros.__ParticleTracing__.custom_force.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../resources_source/python/pyparticletracing.pxi":233
 * 
 *     property electrostatic_interaction:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self._tracing.getElectrostaticInteraction()
 *         def __set__(self, interaction):
 */

/* Python wrapper */
static PyObject *__pyx_pw_6_agros_19__ParticleTracing___25electrostatic_interaction_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6_agros_19__ParticleTracing___25electrostatic_interaction_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6_agros_19__ParticleTracing___25electrostatic_interaction___get__(((struct __pyx_obj_6_agros___ParticleTracing__ *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6_agros_19__ParticleTracing___25electrostatic_interaction___get__(struct __pyx_obj_6_agros___ParticleTracing__ *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "../resources_source/python/pyparticletracing.pxi":234
 *     property electrostatic_interaction:
 *         def __get__(self):
 *             return self._tracing.getElectrostaticInteraction()             # <<<<<<<<<<<<<<
 *         def __set__(self, interaction):
 *             self._tracing.setElectrostaticInteraction(interaction)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_v_self->_tracing->getElectrostaticInteraction()); if (unlikely(!__pyx_t_1)) __PYX_ERR(7, 234, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../resources_source/python/pyparticletracing.pxi":233
 * 
 *     property electrostatic_interaction:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self._tracing.getElectrostaticInteraction()
 *         def __set__(self, interaction):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("_agros.__ParticleTracing__.electrostatic_interaction.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../resources_source/python/pyparticletracing.pxi":235
 *         def __get__(self):
 *             return self._tracing.getElectrostaticInteraction()
 *         def __set__(self, interaction):             # <<<<<<<<<<<<<<
 *             self._tracing.setElectrostaticInteraction(interaction)
 * 
 */

/* Python wrapper */
static int __pyx_pw_6_agros_19__ParticleTracing___25electrostatic_interaction_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_interaction); /*proto*/
static int __pyx_pw_6_agros_19__ParticleTracing___25electrostatic_interaction_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_interaction) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6_agros_19__ParticleTracing___25electrostatic_interaction_2__set__(((struct __pyx_obj_6_agros___ParticleTracing__ *)__pyx_v_self), ((PyObject *)__pyx_v_interaction));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6_agros_19__ParticleTracing___25electrostatic_interaction_2__set__(struct __pyx_obj_6_agros___ParticleTracing__ *__pyx_v_self, PyObject *__pyx_v_interaction) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  bool __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "../resources_source/python/pyparticletracing.pxi":236
 *             return self._tracing.getElectrostaticInteraction()
 *         def __set__(self, interaction):
 *             self._tracing.setElectrostaticInteraction(interaction)             # <<<<<<<<<<<<<<
 * 
 *     property magnetic_interaction:
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_interaction); if (unlikely((__pyx_t_1 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(7, 236, __pyx_L1_error)
  __pyx_v_self->_tracing->setElectrostaticInteraction(__pyx_t_1);

  /* "../resources_source/python/pyparticletracing.pxi":235
 *         def __get__(self):
 *             return self._tracing.getElectrostaticInteraction()
 *         def __set__(self, interaction):             # <<<<<<<<<<<<<<
 *             self._tracing.setElectrostaticInteraction(interaction)
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("_agros.__ParticleTracing__.electrostatic_interaction.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../resources_source/python/pyparticletracing.pxi":239
 * 
 *     property magnetic_interaction:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self._tracing.getMagneticInteraction()
 *         def __set__(self, interaction):
 */

/* Python wrapper */
static PyObject *__pyx_pw_6_agros_19__ParticleTracing___20magnetic_interaction_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6_agros_19__ParticleTracing___20magnetic_interaction_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6_agros_19__ParticleTracing___20magnetic_interaction___get__(((struct __pyx_obj_6_agros___ParticleTracing__ *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6_agros_19__ParticleTracing___20magnetic_interaction___get__(struct __pyx_obj_6_agros___ParticleTracing__ *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "../resources_source/python/pyparticletracing.pxi":240
 *     property magnetic_interaction:
 *         def __get__(self):
 *             return self._tracing.getMagneticInteraction()             # <<<<<<<<<<<<<<
 *         def __set__(self, interaction):
 *             self._tracing.setMagneticInteraction(interaction)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_v_self->_tracing->getMagneticInteraction()); if (unlikely(!__pyx_t_1)) __PYX_ERR(7, 240, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../resources_source/python/pyparticletracing.pxi":239
 * 
 *     property magnetic_interaction:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self._tracing.getMagneticInteraction()
 *         def __set__(self, interaction):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("_agros.__ParticleTracing__.magnetic_interaction.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../resources_source/python/pyparticletracing.pxi":241
 *         def __get__(self):
 *             return self._tracing.getMagneticInteraction()
 *         def __set__(self, interaction):             # <<<<<<<<<<<<<<
 *             self._tracing.setMagneticInteraction(interaction)
 * 
 */

/* Python wrapper */
static int __pyx_pw_6_agros_19__ParticleTracing___20magnetic_interaction_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_interaction); /*proto*/
static int __pyx_pw_6_agros_19__ParticleTracing___20magnetic_interaction_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_interaction) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6_agros_19__ParticleTracing___20magnetic_interaction_2__set__(((struct __pyx_obj_6_agros___ParticleTracing__ *)__pyx_v_self), ((PyObject *)__pyx_v_interaction));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6_agros_19__ParticleTracing___20magnetic_interaction_2__set__(struct __pyx_obj_6_agros___ParticleTracing__ *__pyx_v_self, PyObject *__pyx_v_interaction) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  bool __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "../resources_source/python/pyparticletracing.pxi":242
 *             return self._tracing.getMagneticInteraction()
 *         def __set__(self, interaction):
 *             self._tracing.setMagneticInteraction(interaction)             # <<<<<<<<<<<<<<
 * 
 *     property butcher_table_type:
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_interaction); if (unlikely((__pyx_t_1 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(7, 242, __pyx_L1_error)
  __pyx_v_self->_tracing->setMagneticInteraction(__pyx_t_1);

  /* "../resources_source/python/pyparticletracing.pxi":241
 *         def __get__(self):
 *             return self._tracing.getMagneticInteraction()
 *         def __set__(self, interaction):             # <<<<<<<<<<<<<<
 *             self._tracing.setMagneticInteraction(interaction)
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("_agros.__ParticleTracing__.magnetic_interaction.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../resources_source/python/pyparticletracing.pxi":245
 * 
 *     property butcher_table_type:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self._tracing.getButcherTableType().c_str()
 *         def __set__(self, table_type):
 */

/* Python wrapper */
static PyObject *__pyx_pw_6_agros_19__ParticleTracing___18butcher_table_type_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6_agros_19__ParticleTracing___18butcher_table_type_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6_agros_19__ParticleTracing___18butcher_table_type___get__(((struct __pyx_obj_6_agros___ParticleTracing__ *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6_agros_19__ParticleTracing___18butcher_table_type___get__(struct __pyx_obj_6_agros___ParticleTracing__ *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "../resources_source/python/pyparticletracing.pxi":246
 *     property butcher_table_type:
 *         def __get__(self):
 *             return self._tracing.getButcherTableType().c_str()             # <<<<<<<<<<<<<<
 *         def __set__(self, table_type):
 *             self._tracing.setButcherTableType(table_type.encode())
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBytes_FromString(__pyx_v_self->_tracing->getButcherTableType().c_str()); if (unlikely(!__pyx_t_1)) __PYX_ERR(7, 246, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../resources_source/python/pyparticletracing.pxi":245
 * 
 *     property butcher_table_type:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self._tracing.getButcherTableType().c_str()
 *         def __set__(self, table_type):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("_agros.__ParticleTracing__.butcher_table_type.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../resources_source/python/pyparticletracing.pxi":247
 *         def __get__(self):
 *             return self._tracing.getButcherTableType().c_str()
 *         def __set__(self, table_type):             # <<<<<<<<<<<<<<
 *             self._tracing.setButcherTableType(table_type.encode())
 * 
 */

/* Python wrapper */
static int __pyx_pw_6_agros_19__ParticleTracing___18butcher_table_type_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_table_type); /*proto*/
static int __pyx_pw_6_agros_19__ParticleTracing___18butcher_table_type_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_table_type) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6_agros_19__ParticleTracing___18butcher_table_type_2__set__(((struct __pyx_obj_6_agros___ParticleTracing__ *)__pyx_v_self), ((PyObject *)__pyx_v_table_type));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6_agros_19__ParticleTracing___18butcher_table_type_2__set__(struct __pyx_obj_6_agros___ParticleTracing__ *__pyx_v_self, PyObject *__pyx_v_table_type) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  std::string __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "../resources_source/python/pyparticletracing.pxi":248
 *             return self._tracing.getButcherTableType().c_str()
 *         def __set__(self, table_type):
 *             self._tracing.setButcherTableType(table_type.encode())             # <<<<<<<<<<<<<<
 * 
 *     property maximum_number_of_steps:
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_table_type, __pyx_n_s_encode); if (unlikely(!__pyx_t_2)) __PYX_ERR(7, 248, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(7, 248, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = __pyx_convert_string_from_py_std__in_string(__pyx_t_1); if (unlikely(PyErr_Occurred())) __PYX_ERR(7, 248, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  try {
    __pyx_v_self->_tracing->setButcherTableType(__pyx_t_4);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(7, 248, __pyx_L1_error)
  }

  /* "../resources_source/python/pyparticletracing.pxi":247
 *         def __get__(self):
 *             return self._tracing.getButcherTableType().c_str()
 *         def __set__(self, table_type):             # <<<<<<<<<<<<<<
 *             self._tracing.setButcherTableType(table_type.encode())
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("_agros.__ParticleTracing__.butcher_table_type.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../resources_source/python/pyparticletracing.pxi":251
 * 
 *     property maximum_number_of_steps:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self._tracing.getMaximumNumberOfSteps()
 *         def __set__(self, steps):
 */

/* Python wrapper */
static PyObject *__pyx_pw_6_agros_19__ParticleTracing___23maximum_number_of_steps_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6_agros_19__ParticleTracing___23maximum_number_of_steps_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6_agros_19__ParticleTracing___23maximum_number_of_steps___get__(((struct __pyx_obj_6_agros___ParticleTracing__ *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6_agros_19__ParticleTracing___23maximum_number_of_steps___get__(struct __pyx_obj_6_agros___ParticleTracing__ *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "../resources_source/python/pyparticletracing.pxi":252
 *     property maximum_number_of_steps:
 *         def __get__(self):
 *             return self._tracing.getMaximumNumberOfSteps()             # <<<<<<<<<<<<<<
 *         def __set__(self, steps):
 *             self._tracing.setMaximumNumberOfSteps(steps)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->_tracing->getMaximumNumberOfSteps()); if (unlikely(!__pyx_t_1)) __PYX_ERR(7, 252, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../resources_source/python/pyparticletracing.pxi":251
 * 
 *     property maximum_number_of_steps:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self._tracing.getMaximumNumberOfSteps()
 *         def __set__(self, steps):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("_agros.__ParticleTracing__.maximum_number_of_steps.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../resources_source/python/pyparticletracing.pxi":253
 *         def __get__(self):
 *             return self._tracing.getMaximumNumberOfSteps()
 *         def __set__(self, steps):             # <<<<<<<<<<<<<<
 *             self._tracing.setMaximumNumberOfSteps(steps)
 * 
 */

/* Python wrapper */
static int __pyx_pw_6_agros_19__ParticleTracing___23maximum_number_of_steps_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_steps); /*proto*/
static int __pyx_pw_6_agros_19__ParticleTracing___23maximum_number_of_steps_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_steps) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6_agros_19__ParticleTracing___23maximum_number_of_steps_2__set__(((struct __pyx_obj_6_agros___ParticleTracing__ *)__pyx_v_self), ((PyObject *)__pyx_v_steps));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6_agros_19__ParticleTracing___23maximum_number_of_steps_2__set__(struct __pyx_obj_6_agros___ParticleTracing__ *__pyx_v_self, PyObject *__pyx_v_steps) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "../resources_source/python/pyparticletracing.pxi":254
 *             return self._tracing.getMaximumNumberOfSteps()
 *         def __set__(self, steps):
 *             self._tracing.setMaximumNumberOfSteps(steps)             # <<<<<<<<<<<<<<
 * 
 *     property maximum_relative_error:
 */
  __pyx_t_1 = __Pyx_PyInt_As_int(__pyx_v_steps); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) __PYX_ERR(7, 254, __pyx_L1_error)
  try {
    __pyx_v_self->_tracing->setMaximumNumberOfSteps(__pyx_t_1);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(7, 254, __pyx_L1_error)
  }

  /* "../resources_source/python/pyparticletracing.pxi":253
 *         def __get__(self):
 *             return self._tracing.getMaximumNumberOfSteps()
 *         def __set__(self, steps):             # <<<<<<<<<<<<<<
 *             self._tracing.setMaximumNumberOfSteps(steps)
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("_agros.__ParticleTracing__.maximum_number_of_steps.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../resources_source/python/pyparticletracing.pxi":257
 * 
 *     property maximum_relative_error:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self._tracing.getMaximumRelativeError()
 *         def __set__(self, tolerance):
 */

/* Python wrapper */
static PyObject *__pyx_pw_6_agros_19__ParticleTracing___22maximum_relative_error_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6_agros_19__ParticleTracing___22maximum_relative_error_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6_agros_19__ParticleTracing___22maximum_relative_error___get__(((struct __pyx_obj_6_agros___ParticleTracing__ *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6_agros_19__ParticleTracing___22maximum_relative_error___get__(struct __pyx_obj_6_agros___ParticleTracing__ *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "../resources_source/python/pyparticletracing.pxi":258
 *     property maximum_relative_error:
 *         def __get__(self):
 *             return self._tracing.getMaximumRelativeError()             # <<<<<<<<<<<<<<
 *         def __set__(self, tolerance):
 *             self._tracing.setMaximumRelativeError(tolerance)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->_tracing->getMaximumRelativeError()); if (unlikely(!__pyx_t_1)) __PYX_ERR(7, 258, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../resources_source/python/pyparticletracing.pxi":257
 * 
 *     property maximum_relative_error:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self._tracing.getMaximumRelativeError()
 *         def __set__(self, tolerance):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("_agros.__ParticleTracing__.maximum_relative_error.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../resources_source/python/pyparticletracing.pxi":259
 *         def __get__(self):
 *             return self._tracing.getMaximumRelativeError()
 *         def __set__(self, tolerance):             # <<<<<<<<<<<<<<
 *             self._tracing.setMaximumRelativeError(tolerance)
 * 
 */

/* Python wrapper */
static int __pyx_pw_6_agros_19__ParticleTracing___22maximum_relative_error_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_tolerance); /*proto*/
static int __pyx_pw_6_agros_19__ParticleTracing___22maximum_relative_error_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_tolerance) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6_agros_19__ParticleTracing___22maximum_relative_error_2__set__(((struct __pyx_obj_6_agros___ParticleTracing__ *)__pyx_v_self), ((PyObject *)__pyx_v_tolerance));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6_agros_19__ParticleTracing___22maximum_relative_error_2__set__(struct __pyx_obj_6_agros___ParticleTracing__ *__pyx_v_self, PyObject *__pyx_v_tolerance) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "../resources_source/python/pyparticletracing.pxi":260
 *             return self._tracing.getMaximumRelativeError()
 *         def __set__(self, tolerance):
 *             self._tracing.setMaximumRelativeError(tolerance)             # <<<<<<<<<<<<<<
 * 
 *     property maximum_step:
 */
  __pyx_t_1 = __pyx_PyFloat_AsDouble(__pyx_v_tolerance); if (unlikely((__pyx_t_1 == (double)-1) && PyErr_Occurred())) __PYX_ERR(7, 260, __pyx_L1_error)
  try {
    __pyx_v_self->_tracing->setMaximumRelativeError(__pyx_t_1);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(7, 260, __pyx_L1_error)
  }

  /* "../resources_source/python/pyparticletracing.pxi":259
 *         def __get__(self):
 *             return self._tracing.getMaximumRelativeError()
 *         def __set__(self, tolerance):             # <<<<<<<<<<<<<<
 *             self._tracing.setMaximumRelativeError(tolerance)
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("_agros.__ParticleTracing__.maximum_relative_error.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../resources_source/python/pyparticletracing.pxi":263
 * 
 *     property maximum_step:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self._tracing.getMaximumStep()
 *         def __set__(self, step):
 */

/* Python wrapper */
static PyObject *__pyx_pw_6_agros_19__ParticleTracing___12maximum_step_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6_agros_19__ParticleTracing___12maximum_step_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6_agros_19__ParticleTracing___12maximum_step___get__(((struct __pyx_obj_6_agros___ParticleTracing__ *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6_agros_19__ParticleTracing___12maximum_step___get__(struct __pyx_obj_6_agros___ParticleTracing__ *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "../resources_source/python/pyparticletracing.pxi":264
 *     property maximum_step:
 *         def __get__(self):
 *             return self._tracing.getMaximumStep()             # <<<<<<<<<<<<<<
 *         def __set__(self, step):
 *             self._tracing.setMaximumStep(step)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->_tracing->getMaximumStep()); if (unlikely(!__pyx_t_1)) __PYX_ERR(7, 264, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../resources_source/python/pyparticletracing.pxi":263
 * 
 *     property maximum_step:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self._tracing.getMaximumStep()
 *         def __set__(self, step):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("_agros.__ParticleTracing__.maximum_step.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../resources_source/python/pyparticletracing.pxi":265
 *         def __get__(self):
 *             return self._tracing.getMaximumStep()
 *         def __set__(self, step):             # <<<<<<<<<<<<<<
 *             self._tracing.setMaximumStep(step)
 * 
 */

/* Python wrapper */
static int __pyx_pw_6_agros_19__ParticleTracing___12maximum_step_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_step); /*proto*/
static int __pyx_pw_6_agros_19__ParticleTracing___12maximum_step_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_step) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6_agros_19__ParticleTracing___12maximum_step_2__set__(((struct __pyx_obj_6_agros___ParticleTracing__ *)__pyx_v_self), ((PyObject *)__pyx_v_step));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6_agros_19__ParticleTracing___12maximum_step_2__set__(struct __pyx_obj_6_agros___ParticleTracing__ *__pyx_v_self, PyObject *__pyx_v_step) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "../resources_source/python/pyparticletracing.pxi":266
 *             return self._tracing.getMaximumStep()
 *         def __set__(self, step):
 *             self._tracing.setMaximumStep(step)             # <<<<<<<<<<<<<<
 * 
 *     property collor_by_velocity:
 */
  __pyx_t_1 = __pyx_PyFloat_AsDouble(__pyx_v_step); if (unlikely((__pyx_t_1 == (double)-1) && PyErr_Occurred())) __PYX_ERR(7, 266, __pyx_L1_error)
  try {
    __pyx_v_self->_tracing->setMaximumStep(__pyx_t_1);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(7, 266, __pyx_L1_error)
  }

  /* "../resources_source/python/pyparticletracing.pxi":265
 *         def __get__(self):
 *             return self._tracing.getMaximumStep()
 *         def __set__(self, step):             # <<<<<<<<<<<<<<
 *             self._tracing.setMaximumStep(step)
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("_agros.__ParticleTracing__.maximum_step.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../resources_source/python/pyparticletracing.pxi":269
 * 
 *     property collor_by_velocity:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self._tracing.getColorByVelocity()
 *         def __set__(self, show):
 */

/* Python wrapper */
static PyObject *__pyx_pw_6_agros_19__ParticleTracing___18collor_by_velocity_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6_agros_19__ParticleTracing___18collor_by_velocity_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6_agros_19__ParticleTracing___18collor_by_velocity___get__(((struct __pyx_obj_6_agros___ParticleTracing__ *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6_agros_19__ParticleTracing___18collor_by_velocity___get__(struct __pyx_obj_6_agros___ParticleTracing__ *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "../resources_source/python/pyparticletracing.pxi":270
 *     property collor_by_velocity:
 *         def __get__(self):
 *             return self._tracing.getColorByVelocity()             # <<<<<<<<<<<<<<
 *         def __set__(self, show):
 *             self._tracing.setColorByVelocity(show)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_v_self->_tracing->getColorByVelocity()); if (unlikely(!__pyx_t_1)) __PYX_ERR(7, 270, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../resources_source/python/pyparticletracing.pxi":269
 * 
 *     property collor_by_velocity:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self._tracing.getColorByVelocity()
 *         def __set__(self, show):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("_agros.__ParticleTracing__.collor_by_velocity.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../resources_source/python/pyparticletracing.pxi":271
 *         def __get__(self):
 *             return self._tracing.getColorByVelocity()
 *         def __set__(self, show):             # <<<<<<<<<<<<<<
 *             self._tracing.setColorByVelocity(show)
 * 
 */

/* Python wrapper */
static int __pyx_pw_6_agros_19__ParticleTracing___18collor_by_velocity_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_show); /*proto*/
static int __pyx_pw_6_agros_19__ParticleTracing___18collor_by_velocity_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_show) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6_agros_19__ParticleTracing___18collor_by_velocity_2__set__(((struct __pyx_obj_6_agros___ParticleTracing__ *)__pyx_v_self), ((PyObject *)__pyx_v_show));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6_agros_19__ParticleTracing___18collor_by_velocity_2__set__(struct __pyx_obj_6_agros___ParticleTracing__ *__pyx_v_self, PyObject *__pyx_v_show) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  bool __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "../resources_source/python/pyparticletracing.pxi":272
 *             return self._tracing.getColorByVelocity()
 *         def __set__(self, show):
 *             self._tracing.setColorByVelocity(show)             # <<<<<<<<<<<<<<
 * 
 *     property show_points:
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_show); if (unlikely((__pyx_t_1 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(7, 272, __pyx_L1_error)
  __pyx_v_self->_tracing->setColorByVelocity(__pyx_t_1);

  /* "../resources_source/python/pyparticletracing.pxi":271
 *         def __get__(self):
 *             return self._tracing.getColorByVelocity()
 *         def __set__(self, show):             # <<<<<<<<<<<<<<
 *             self._tracing.setColorByVelocity(show)
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("_agros.__ParticleTracing__.collor_by_velocity.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../resources_source/python/pyparticletracing.pxi":275
 * 
 *     property show_points:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self._tracing.getShowPoints()
 *         def __set__(self, show):
 */

/* Python wrapper */
static PyObject *__pyx_pw_6_agros_19__ParticleTracing___11show_points_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6_agros_19__ParticleTracing___11show_points_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6_agros_19__ParticleTracing___11show_points___get__(((struct __pyx_obj_6_agros___ParticleTracing__ *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6_agros_19__ParticleTracing___11show_points___get__(struct __pyx_obj_6_agros___ParticleTracing__ *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "../resources_source/python/pyparticletracing.pxi":276
 *     property show_points:
 *         def __get__(self):
 *             return self._tracing.getShowPoints()             # <<<<<<<<<<<<<<
 *         def __set__(self, show):
 *             self._tracing.setShowPoints(show)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_v_self->_tracing->getShowPoints()); if (unlikely(!__pyx_t_1)) __PYX_ERR(7, 276, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../resources_source/python/pyparticletracing.pxi":275
 * 
 *     property show_points:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self._tracing.getShowPoints()
 *         def __set__(self, show):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("_agros.__ParticleTracing__.show_points.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../resources_source/python/pyparticletracing.pxi":277
 *         def __get__(self):
 *             return self._tracing.getShowPoints()
 *         def __set__(self, show):             # <<<<<<<<<<<<<<
 *             self._tracing.setShowPoints(show)
 * 
 */

/* Python wrapper */
static int __pyx_pw_6_agros_19__ParticleTracing___11show_points_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_show); /*proto*/
static int __pyx_pw_6_agros_19__ParticleTracing___11show_points_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_show) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6_agros_19__ParticleTracing___11show_points_2__set__(((struct __pyx_obj_6_agros___ParticleTracing__ *)__pyx_v_self), ((PyObject *)__pyx_v_show));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6_agros_19__ParticleTracing___11show_points_2__set__(struct __pyx_obj_6_agros___ParticleTracing__ *__pyx_v_self, PyObject *__pyx_v_show) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  bool __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "../resources_source/python/pyparticletracing.pxi":278
 *             return self._tracing.getShowPoints()
 *         def __set__(self, show):
 *             self._tracing.setShowPoints(show)             # <<<<<<<<<<<<<<
 * 
 *     property blended_faces:
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_show); if (unlikely((__pyx_t_1 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(7, 278, __pyx_L1_error)
  __pyx_v_self->_tracing->setShowPoints(__pyx_t_1);

  /* "../resources_source/python/pyparticletracing.pxi":277
 *         def __get__(self):
 *             return self._tracing.getShowPoints()
 *         def __set__(self, show):             # <<<<<<<<<<<<<<
 *             self._tracing.setShowPoints(show)
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("_agros.__ParticleTracing__.show_points.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../resources_source/python/pyparticletracing.pxi":281
 * 
 *     property blended_faces:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self._tracing.getShowBlendedFaces()
 *         def __set__(self, show):
 */

/* Python wrapper */
static PyObject *__pyx_pw_6_agros_19__ParticleTracing___13blended_faces_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6_agros_19__ParticleTracing___13blended_faces_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6_agros_19__ParticleTracing___13blended_faces___get__(((struct __pyx_obj_6_agros___ParticleTracing__ *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6_agros_19__ParticleTracing___13blended_faces___get__(struct __pyx_obj_6_agros___ParticleTracing__ *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "../resources_source/python/pyparticletracing.pxi":282
 *     property blended_faces:
 *         def __get__(self):
 *             return self._tracing.getShowBlendedFaces()             # <<<<<<<<<<<<<<
 *         def __set__(self, show):
 *             self._tracing.setShowBlendedFaces(show)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_v_self->_tracing->getShowBlendedFaces()); if (unlikely(!__pyx_t_1)) __PYX_ERR(7, 282, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../resources_source/python/pyparticletracing.pxi":281
 * 
 *     property blended_faces:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self._tracing.getShowBlendedFaces()
 *         def __set__(self, show):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("_agros.__ParticleTracing__.blended_faces.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../resources_source/python/pyparticletracing.pxi":283
 *         def __get__(self):
 *             return self._tracing.getShowBlendedFaces()
 *         def __set__(self, show):             # <<<<<<<<<<<<<<
 *             self._tracing.setShowBlendedFaces(show)
 * 
 */

/* Python wrapper */
static int __pyx_pw_6_agros_19__ParticleTracing___13blended_faces_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_show); /*proto*/
static int __pyx_pw_6_agros_19__ParticleTracing___13blended_faces_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_show) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6_agros_19__ParticleTracing___13blended_faces_2__set__(((struct __pyx_obj_6_agros___ParticleTracing__ *)__pyx_v_self), ((PyObject *)__pyx_v_show));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6_agros_19__ParticleTracing___13blended_faces_2__set__(struct __pyx_obj_6_agros___ParticleTracing__ *__pyx_v_self, PyObject *__pyx_v_show) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  bool __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "../resources_source/python/pyparticletracing.pxi":284
 *             return self._tracing.getShowBlendedFaces()
 *         def __set__(self, show):
 *             self._tracing.setShowBlendedFaces(show)             # <<<<<<<<<<<<<<
 * 
 *     property multiple_show_particles:
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_show); if (unlikely((__pyx_t_1 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(7, 284, __pyx_L1_error)
  __pyx_v_self->_tracing->setShowBlendedFaces(__pyx_t_1);

  /* "../resources_source/python/pyparticletracing.pxi":283
 *         def __get__(self):
 *             return self._tracing.getShowBlendedFaces()
 *         def __set__(self, show):             # <<<<<<<<<<<<<<
 *             self._tracing.setShowBlendedFaces(show)
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("_agros.__ParticleTracing__.blended_faces.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../resources_source/python/pyparticletracing.pxi":287
 * 
 *     property multiple_show_particles:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self._tracing.getNumShowParticlesAxi()
 *         def __set__(self, particles):
 */

/* Python wrapper */
static PyObject *__pyx_pw_6_agros_19__ParticleTracing___23multiple_show_particles_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6_agros_19__ParticleTracing___23multiple_show_particles_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6_agros_19__ParticleTracing___23multiple_show_particles___get__(((struct __pyx_obj_6_agros___ParticleTracing__ *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6_agros_19__ParticleTracing___23multiple_show_particles___get__(struct __pyx_obj_6_agros___ParticleTracing__ *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "../resources_source/python/pyparticletracing.pxi":288
 *     property multiple_show_particles:
 *         def __get__(self):
 *             return self._tracing.getNumShowParticlesAxi()             # <<<<<<<<<<<<<<
 *         def __set__(self, particles):
 *             self._tracing.setNumShowParticlesAxi(particles)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->_tracing->getNumShowParticlesAxi()); if (unlikely(!__pyx_t_1)) __PYX_ERR(7, 288, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../resources_source/python/pyparticletracing.pxi":287
 * 
 *     property multiple_show_particles:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self._tracing.getNumShowParticlesAxi()
 *         def __set__(self, particles):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("_agros.__ParticleTracing__.multiple_show_particles.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../resources_source/python/pyparticletracing.pxi":289
 *         def __get__(self):
 *             return self._tracing.getNumShowParticlesAxi()
 *         def __set__(self, particles):             # <<<<<<<<<<<<<<
 *             self._tracing.setNumShowParticlesAxi(particles)
 */

/* Python wrapper */
static int __pyx_pw_6_agros_19__ParticleTracing___23multiple_show_particles_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_particles); /*proto*/
static int __pyx_pw_6_agros_19__ParticleTracing___23multiple_show_particles_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_particles) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6_agros_19__ParticleTracing___23multiple_show_particles_2__set__(((struct __pyx_obj_6_agros___ParticleTracing__ *)__pyx_v_self), ((PyObject *)__pyx_v_particles));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6_agros_19__ParticleTracing___23multiple_show_particles_2__set__(struct __pyx_obj_6_agros___ParticleTracing__ *__pyx_v_self, PyObject *__pyx_v_particles) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "../resources_source/python/pyparticletracing.pxi":290
 *             return self._tracing.getNumShowParticlesAxi()
 *         def __set__(self, particles):
 *             self._tracing.setNumShowParticlesAxi(particles)             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyInt_As_int(__pyx_v_particles); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) __PYX_ERR(7, 290, __pyx_L1_error)
  try {
    __pyx_v_self->_tracing->setNumShowParticlesAxi(__pyx_t_1);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(7, 290, __pyx_L1_error)
  }

  /* "../resources_source/python/pyparticletracing.pxi":289
 *         def __get__(self):
 *             return self._tracing.getNumShowParticlesAxi()
 *         def __set__(self, particles):             # <<<<<<<<<<<<<<
 *             self._tracing.setNumShowParticlesAxi(particles)
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("_agros.__ParticleTracing__.multiple_show_particles.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_6_agros_19__ParticleTracing___13__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_6_agros_19__ParticleTracing___13__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6_agros_19__ParticleTracing___12__reduce_cython__(((struct __pyx_obj_6_agros___ParticleTracing__ *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6_agros_19__ParticleTracing___12__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_6_agros___ParticleTracing__ *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__48, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(2, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("_agros.__ParticleTracing__.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw_6_agros_19__ParticleTracing___15__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_6_agros_19__ParticleTracing___15__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6_agros_19__ParticleTracing___14__setstate_cython__(((struct __pyx_obj_6_agros___ParticleTracing__ *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6_agros_19__ParticleTracing___14__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_6_agros___ParticleTracing__ *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__49, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(2, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("_agros.__ParticleTracing__.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../resources_source/python/pystudy.pxi":60
 *     cdef object settings
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.thisptr
 * 
 */

/* Python wrapper */
static void __pyx_pw_6_agros_9__Study___1__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_6_agros_9__Study___1__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_6_agros_9__Study_____dealloc__(((struct __pyx_obj_6_agros___Study__ *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_6_agros_9__Study_____dealloc__(struct __pyx_obj_6_agros___Study__ *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "../resources_source/python/pystudy.pxi":61
 * 
 *     def __dealloc__(self):
 *         del self.thisptr             # <<<<<<<<<<<<<<
 * 
 *     def add_parameter(self, name, lower_bound, upper_bound):
 */
  delete __pyx_v_self->thisptr;

  /* "../resources_source/python/pystudy.pxi":60
 *     cdef object settings
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.thisptr
 * 
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "../resources_source/python/pystudy.pxi":63
 *         del self.thisptr
 * 
 *     def add_parameter(self, name, lower_bound, upper_bound):             # <<<<<<<<<<<<<<
 *         self.thisptr.addParameter(name.encode(), lower_bound, upper_bound)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6_agros_9__Study___3add_parameter(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_6_agros_9__Study___3add_parameter(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_name = 0;
  PyObject *__pyx_v_lower_bound = 0;
  PyObject *__pyx_v_upper_bound = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("add_parameter (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_name,&__pyx_n_s_lower_bound,&__pyx_n_s_upper_bound,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_name)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_lower_bound)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("add_parameter", 1, 3, 3, 1); __PYX_ERR(8, 63, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_upper_bound)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("add_parameter", 1, 3, 3, 2); __PYX_ERR(8, 63, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "add_parameter") < 0)) __PYX_ERR(8, 63, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_name = values[0];
    __pyx_v_lower_bound = values[1];
    __pyx_v_upper_bound = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("add_parameter", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(8, 63, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("_agros.__Study__.add_parameter", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6_agros_9__Study___2add_parameter(((struct __pyx_obj_6_agros___Study__ *)__pyx_v_self), __pyx_v_name, __pyx_v_lower_bound, __pyx_v_upper_bound);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6_agros_9__Study___2add_parameter(struct __pyx_obj_6_agros___Study__ *__pyx_v_self, PyObject *__pyx_v_name, PyObject *__pyx_v_lower_bound, PyObject *__pyx_v_upper_bound) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  std::string __pyx_t_4;
  double __pyx_t_5;
  double __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("add_parameter", 0);

  /* "../resources_source/python/pystudy.pxi":64
 * 
 *     def add_parameter(self, name, lower_bound, upper_bound):
 *         self.thisptr.addParameter(name.encode(), lower_bound, upper_bound)             # <<<<<<<<<<<<<<
 * 
 *     def add_functional(self, name, expression, weight = 100):
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_name, __pyx_n_s_encode); if (unlikely(!__pyx_t_2)) __PYX_ERR(8, 64, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(8, 64, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = __pyx_convert_string_from_py_std__in_string(__pyx_t_1); if (unlikely(PyErr_Occurred())) __PYX_ERR(8, 64, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_5 = __pyx_PyFloat_AsDouble(__pyx_v_lower_bound); if (unlikely((__pyx_t_5 == (double)-1) && PyErr_Occurred())) __PYX_ERR(8, 64, __pyx_L1_error)
  __pyx_t_6 = __pyx_PyFloat_AsDouble(__pyx_v_upper_bound); if (unlikely((__pyx_t_6 == (double)-1) && PyErr_Occurred())) __PYX_ERR(8, 64, __pyx_L1_error)
  try {
    __pyx_v_self->thisptr->addParameter(__pyx_t_4, __pyx_t_5, __pyx_t_6);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(8, 64, __pyx_L1_error)
  }

  /* "../resources_source/python/pystudy.pxi":63
 *         del self.thisptr
 * 
 *     def add_parameter(self, name, lower_bound, upper_bound):             # <<<<<<<<<<<<<<
 *         self.thisptr.addParameter(name.encode(), lower_bound, upper_bound)
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("_agros.__Study__.add_parameter", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../resources_source/python/pystudy.pxi":66
 *         self.thisptr.addParameter(name.encode(), lower_bound, upper_bound)
 * 
 *     def add_functional(self, name, expression, weight = 100):             # <<<<<<<<<<<<<<
 *         self.thisptr.addFunctional(name.encode(), expression.encode(), weight)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6_agros_9__Study___5add_functional(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_6_agros_9__Study___5add_functional(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_name = 0;
  PyObject *__pyx_v_expression = 0;
  PyObject *__pyx_v_weight = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("add_functional (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_name,&__pyx_n_s_expression,&__pyx_n_s_weight,0};
    PyObject* values[3] = {0,0,0};
    values[2] = ((PyObject *)__pyx_int_100);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_name)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_expression)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("add_functional", 0, 2, 3, 1); __PYX_ERR(8, 66, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_weight);
          if (value) { values[2] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "add_functional") < 0)) __PYX_ERR(8, 66, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_name = values[0];
    __pyx_v_expression = values[1];
    __pyx_v_weight = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("add_functional", 0, 2, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(8, 66, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("_agros.__Study__.add_functional", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6_agros_9__Study___4add_functional(((struct __pyx_obj_6_agros___Study__ *)__pyx_v_self), __pyx_v_name, __pyx_v_expression, __pyx_v_weight);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6_agros_9__Study___4add_functional(struct __pyx_obj_6_agros___Study__ *__pyx_v_self, PyObject *__pyx_v_name, PyObject *__pyx_v_expression, PyObject *__pyx_v_weight) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  std::string __pyx_t_4;
  std::string __pyx_t_5;
  int __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("add_functional", 0);

  /* "../resources_source/python/pystudy.pxi":67
 * 
 *     def add_functional(self, name, expression, weight = 100):
 *         self.thisptr.addFunctional(name.encode(), expression.encode(), weight)             # <<<<<<<<<<<<<<
 * 
 *     def type(self):
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_name, __pyx_n_s_encode); if (unlikely(!__pyx_t_2)) __PYX_ERR(8, 67, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(8, 67, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = __pyx_convert_string_from_py_std__in_string(__pyx_t_1); if (unlikely(PyErr_Occurred())) __PYX_ERR(8, 67, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_expression, __pyx_n_s_encode); if (unlikely(!__pyx_t_2)) __PYX_ERR(8, 67, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(8, 67, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_5 = __pyx_convert_string_from_py_std__in_string(__pyx_t_1); if (unlikely(PyErr_Occurred())) __PYX_ERR(8, 67, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_6 = __Pyx_PyInt_As_int(__pyx_v_weight); if (unlikely((__pyx_t_6 == (int)-1) && PyErr_Occurred())) __PYX_ERR(8, 67, __pyx_L1_error)
  try {
    __pyx_v_self->thisptr->addFunctional(__pyx_t_4, __pyx_t_5, __pyx_t_6);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(8, 67, __pyx_L1_error)
  }

  /* "../resources_source/python/pystudy.pxi":66
 *         self.thisptr.addParameter(name.encode(), lower_bound, upper_bound)
 * 
 *     def add_functional(self, name, expression, weight = 100):             # <<<<<<<<<<<<<<
 *         self.thisptr.addFunctional(name.encode(), expression.encode(), weight)
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("_agros.__Study__.add_functional", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../resources_source/python/pystudy.pxi":69
 *         self.thisptr.addFunctional(name.encode(), expression.encode(), weight)
 * 
 *     def type(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr.type();
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6_agros_9__Study___7type(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_6_agros_9__Study___7type(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("type (wrapper)", 0);
  __pyx_r = __pyx_pf_6_agros_9__Study___6type(((struct __pyx_obj_6_agros___Study__ *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6_agros_9__Study___6type(struct __pyx_obj_6_agros___Study__ *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("type", 0);

  /* "../resources_source/python/pystudy.pxi":70
 * 
 *     def type(self):
 *         return self.thisptr.type();             # <<<<<<<<<<<<<<
 * 
 *     # settings
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_convert_PyBytes_string_to_py_std__in_string(__pyx_v_self->thisptr->type()); if (unlikely(!__pyx_t_1)) __PYX_ERR(8, 70, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../resources_source/python/pystudy.pxi":69
 *         self.thisptr.addFunctional(name.encode(), expression.encode(), weight)
 * 
 *     def type(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr.type();
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("_agros.__Study__.type", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../resources_source/python/pystudy.pxi":74
 *     # settings
 *     property settings:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.settings.get_parameters()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6_agros_9__Study___8settings_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6_agros_9__Study___8settings_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6_agros_9__Study___8settings___get__(((struct __pyx_obj_6_agros___Study__ *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6_agros_9__Study___8settings___get__(struct __pyx_obj_6_agros___Study__ *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "../resources_source/python/pystudy.pxi":75
 *     property settings:
 *         def __get__(self):
 *             return self.settings.get_parameters()             # <<<<<<<<<<<<<<
 * 
 *     property clear_solution:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->settings, __pyx_n_s_get_parameters); if (unlikely(!__pyx_t_2)) __PYX_ERR(8, 75, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(8, 75, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../resources_source/python/pystudy.pxi":74
 *     # settings
 *     property settings:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.settings.get_parameters()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("_agros.__Study__.settings.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../resources_source/python/pystudy.pxi":78
 * 
 *     property clear_solution:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.thisptr.getBoolParameter(b'General_ClearSolution')
 *         def __set__(self, val):
 */

/* Python wrapper */
static PyObject *__pyx_pw_6_agros_9__Study___14clear_solution_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6_agros_9__Study___14clear_solution_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6_agros_9__Study___14clear_solution___get__(((struct __pyx_obj_6_agros___Study__ *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6_agros_9__Study___14clear_solution___get__(struct __pyx_obj_6_agros___Study__ *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  std::string __pyx_t_1;
  bool __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "../resources_source/python/pystudy.pxi":79
 *     property clear_solution:
 *         def __get__(self):
 *             return self.thisptr.getBoolParameter(b'General_ClearSolution')             # <<<<<<<<<<<<<<
 *         def __set__(self, val):
 *             self.thisptr.setParameter(string(b'General_ClearSolution'), <bool> val)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_convert_string_from_py_std__in_string(__pyx_n_b_General_ClearSolution); if (unlikely(PyErr_Occurred())) __PYX_ERR(8, 79, __pyx_L1_error)
  try {
    __pyx_t_2 = __pyx_v_self->thisptr->getBoolParameter(__pyx_t_1);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(8, 79, __pyx_L1_error)
  }
  __pyx_t_3 = __Pyx_PyBool_FromLong(__pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(8, 79, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "../resources_source/python/pystudy.pxi":78
 * 
 *     property clear_solution:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.thisptr.getBoolParameter(b'General_ClearSolution')
 *         def __set__(self, val):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("_agros.__Study__.clear_solution.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../resources_source/python/pystudy.pxi":80
 *         def __get__(self):
 *             return self.thisptr.getBoolParameter(b'General_ClearSolution')
 *         def __set__(self, val):             # <<<<<<<<<<<<<<
 *             self.thisptr.setParameter(string(b'General_ClearSolution'), <bool> val)
 * 
 */

/* Python wrapper */
static int __pyx_pw_6_agros_9__Study___14clear_solution_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_val); /*proto*/
static int __pyx_pw_6_agros_9__Study___14clear_solution_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_val) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6_agros_9__Study___14clear_solution_2__set__(((struct __pyx_obj_6_agros___Study__ *)__pyx_v_self), ((PyObject *)__pyx_v_val));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6_agros_9__Study___14clear_solution_2__set__(struct __pyx_obj_6_agros___Study__ *__pyx_v_self, PyObject *__pyx_v_val) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  bool __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "../resources_source/python/pystudy.pxi":81
 *             return self.thisptr.getBoolParameter(b'General_ClearSolution')
 *         def __set__(self, val):
 *             self.thisptr.setParameter(string(b'General_ClearSolution'), <bool> val)             # <<<<<<<<<<<<<<
 * 
 *     property solve_problem:
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_val); if (unlikely((__pyx_t_1 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(8, 81, __pyx_L1_error)
  try {
    __pyx_v_self->thisptr->setParameter(std::string(((char *)"General_ClearSolution")), ((bool)__pyx_t_1));
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(8, 81, __pyx_L1_error)
  }

  /* "../resources_source/python/pystudy.pxi":80
 *         def __get__(self):
 *             return self.thisptr.getBoolParameter(b'General_ClearSolution')
 *         def __set__(self, val):             # <<<<<<<<<<<<<<
 *             self.thisptr.setParameter(string(b'General_ClearSolution'), <bool> val)
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("_agros.__Study__.clear_solution.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../resources_source/python/pystudy.pxi":84
 * 
 *     property solve_problem:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.thisptr.getBoolParameter(b'General_SolveProblem')
 *         def __set__(self, val):
 */

/* Python wrapper */
static PyObject *__pyx_pw_6_agros_9__Study___13solve_problem_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6_agros_9__Study___13solve_problem_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6_agros_9__Study___13solve_problem___get__(((struct __pyx_obj_6_agros___Study__ *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6_agros_9__Study___13solve_problem___get__(struct __pyx_obj_6_agros___Study__ *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  std::string __pyx_t_1;
  bool __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "../resources_source/python/pystudy.pxi":85
 *     property solve_problem:
 *         def __get__(self):
 *             return self.thisptr.getBoolParameter(b'General_SolveProblem')             # <<<<<<<<<<<<<<
 *         def __set__(self, val):
 *             self.thisptr.setParameter(string(b'General_SolveProblem'), <bool> val)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_convert_string_from_py_std__in_string(__pyx_n_b_General_SolveProblem); if (unlikely(PyErr_Occurred())) __PYX_ERR(8, 85, __pyx_L1_error)
  try {
    __pyx_t_2 = __pyx_v_self->thisptr->getBoolParameter(__pyx_t_1);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(8, 85, __pyx_L1_error)
  }
  __pyx_t_3 = __Pyx_PyBool_FromLong(__pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(8, 85, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "../resources_source/python/pystudy.pxi":84
 * 
 *     property solve_problem:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.thisptr.getBoolParameter(b'General_SolveProblem')
 *         def __set__(self, val):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("_agros.__Study__.solve_problem.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../resources_source/python/pystudy.pxi":86
 *         def __get__(self):
 *             return self.thisptr.getBoolParameter(b'General_SolveProblem')
 *         def __set__(self, val):             # <<<<<<<<<<<<<<
 *             self.thisptr.setParameter(string(b'General_SolveProblem'), <bool> val)
 * 
 */

/* Python wrapper */
static int __pyx_pw_6_agros_9__Study___13solve_problem_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_val); /*proto*/
static int __pyx_pw_6_agros_9__Study___13solve_problem_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_val) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6_agros_9__Study___13solve_problem_2__set__(((struct __pyx_obj_6_agros___Study__ *)__pyx_v_self), ((PyObject *)__pyx_v_val));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6_agros_9__Study___13solve_problem_2__set__(struct __pyx_obj_6_agros___Study__ *__pyx_v_self, PyObject *__pyx_v_val) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  bool __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "../resources_source/python/pystudy.pxi":87
 *             return self.thisptr.getBoolParameter(b'General_SolveProblem')
 *         def __set__(self, val):
 *             self.thisptr.setParameter(string(b'General_SolveProblem'), <bool> val)             # <<<<<<<<<<<<<<
 * 
 *     property doe:
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_val); if (unlikely((__pyx_t_1 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(8, 87, __pyx_L1_error)
  try {
    __pyx_v_self->thisptr->setParameter(std::string(((char *)"General_SolveProblem")), ((bool)__pyx_t_1));
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(8, 87, __pyx_L1_error)
  }

  /* "../resources_source/python/pystudy.pxi":86
 *         def __get__(self):
 *             return self.thisptr.getBoolParameter(b'General_SolveProblem')
 *         def __set__(self, val):             # <<<<<<<<<<<<<<
 *             self.thisptr.setParameter(string(b'General_SolveProblem'), <bool> val)
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("_agros.__Study__.solve_problem.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../resources_source/python/pystudy.pxi":90
 * 
 *     property doe:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.thisptr.getBoolParameter(b'General_DoE')
 *         def __set__(self, val):
 */

/* Python wrapper */
static PyObject *__pyx_pw_6_agros_9__Study___3doe_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6_agros_9__Study___3doe_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6_agros_9__Study___3doe___get__(((struct __pyx_obj_6_agros___Study__ *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6_agros_9__Study___3doe___get__(struct __pyx_obj_6_agros___Study__ *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  std::string __pyx_t_1;
  bool __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "../resources_source/python/pystudy.pxi":91
 *     property doe:
 *         def __get__(self):
 *             return self.thisptr.getBoolParameter(b'General_DoE')             # <<<<<<<<<<<<<<
 *         def __set__(self, val):
 *             self.thisptr.setParameter(string(b'General_DoE'), <bool> val)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_convert_string_from_py_std__in_string(__pyx_n_b_General_DoE); if (unlikely(PyErr_Occurred())) __PYX_ERR(8, 91, __pyx_L1_error)
  try {
    __pyx_t_2 = __pyx_v_self->thisptr->getBoolParameter(__pyx_t_1);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(8, 91, __pyx_L1_error)
  }
  __pyx_t_3 = __Pyx_PyBool_FromLong(__pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(8, 91, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "../resources_source/python/pystudy.pxi":90
 * 
 *     property doe:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.thisptr.getBoolParameter(b'General_DoE')
 *         def __set__(self, val):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("_agros.__Study__.doe.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../resources_source/python/pystudy.pxi":92
 *         def __get__(self):
 *             return self.thisptr.getBoolParameter(b'General_DoE')
 *         def __set__(self, val):             # <<<<<<<<<<<<<<
 *             self.thisptr.setParameter(string(b'General_DoE'), <bool> val)
 * 
 */

/* Python wrapper */
static int __pyx_pw_6_agros_9__Study___3doe_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_val); /*proto*/
static int __pyx_pw_6_agros_9__Study___3doe_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_val) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6_agros_9__Study___3doe_2__set__(((struct __pyx_obj_6_agros___Study__ *)__pyx_v_self), ((PyObject *)__pyx_v_val));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6_agros_9__Study___3doe_2__set__(struct __pyx_obj_6_agros___Study__ *__pyx_v_self, PyObject *__pyx_v_val) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  bool __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "../resources_source/python/pystudy.pxi":93
 *             return self.thisptr.getBoolParameter(b'General_DoE')
 *         def __set__(self, val):
 *             self.thisptr.setParameter(string(b'General_DoE'), <bool> val)             # <<<<<<<<<<<<<<
 * 
 *     property doe_deviation:
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_val); if (unlikely((__pyx_t_1 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(8, 93, __pyx_L1_error)
  try {
    __pyx_v_self->thisptr->setParameter(std::string(((char *)"General_DoE")), ((bool)__pyx_t_1));
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(8, 93, __pyx_L1_error)
  }

  /* "../resources_source/python/pystudy.pxi":92
 *         def __get__(self):
 *             return self.thisptr.getBoolParameter(b'General_DoE')
 *         def __set__(self, val):             # <<<<<<<<<<<<<<
 *             self.thisptr.setParameter(string(b'General_DoE'), <bool> val)
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("_agros.__Study__.doe.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../resources_source/python/pystudy.pxi":96
 * 
 *     property doe_deviation:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.thisptr.getIntParameter(b'General_DoE_Deviation')
 *         def __set__(self, val):
 */

/* Python wrapper */
static PyObject *__pyx_pw_6_agros_9__Study___13doe_deviation_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6_agros_9__Study___13doe_deviation_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6_agros_9__Study___13doe_deviation___get__(((struct __pyx_obj_6_agros___Study__ *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6_agros_9__Study___13doe_deviation___get__(struct __pyx_obj_6_agros___Study__ *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  std::string __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "../resources_source/python/pystudy.pxi":97
 *     property doe_deviation:
 *         def __get__(self):
 *             return self.thisptr.getIntParameter(b'General_DoE_Deviation')             # <<<<<<<<<<<<<<
 *         def __set__(self, val):
 *             positive_value(val, 'doe_deviation')
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_convert_string_from_py_std__in_string(__pyx_n_b_General_DoE_Deviation); if (unlikely(PyErr_Occurred())) __PYX_ERR(8, 97, __pyx_L1_error)
  try {
    __pyx_t_2 = __pyx_v_self->thisptr->getIntParameter(__pyx_t_1);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(8, 97, __pyx_L1_error)
  }
  __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(8, 97, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "../resources_source/python/pystudy.pxi":96
 * 
 *     property doe_deviation:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.thisptr.getIntParameter(b'General_DoE_Deviation')
 *         def __set__(self, val):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("_agros.__Study__.doe_deviation.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../resources_source/python/pystudy.pxi":98
 *         def __get__(self):
 *             return self.thisptr.getIntParameter(b'General_DoE_Deviation')
 *         def __set__(self, val):             # <<<<<<<<<<<<<<
 *             positive_value(val, 'doe_deviation')
 *             self.thisptr.setParameter(string(b'General_DoE_Deviation'), <double> val)
 */

/* Python wrapper */
static int __pyx_pw_6_agros_9__Study___13doe_deviation_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_val); /*proto*/
static int __pyx_pw_6_agros_9__Study___13doe_deviation_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_val) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6_agros_9__Study___13doe_deviation_2__set__(((struct __pyx_obj_6_agros___Study__ *)__pyx_v_self), ((PyObject *)__pyx_v_val));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6_agros_9__Study___13doe_deviation_2__set__(struct __pyx_obj_6_agros___Study__ *__pyx_v_self, PyObject *__pyx_v_val) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  double __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "../resources_source/python/pystudy.pxi":99
 *             return self.thisptr.getIntParameter(b'General_DoE_Deviation')
 *         def __set__(self, val):
 *             positive_value(val, 'doe_deviation')             # <<<<<<<<<<<<<<
 *             self.thisptr.setParameter(string(b'General_DoE_Deviation'), <double> val)
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_positive_value); if (unlikely(!__pyx_t_2)) __PYX_ERR(8, 99, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  __pyx_t_4 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_4 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[3] = {__pyx_t_3, __pyx_v_val, __pyx_n_s_doe_deviation};
    __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_4, 2+__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(8, 99, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[3] = {__pyx_t_3, __pyx_v_val, __pyx_n_s_doe_deviation};
    __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_4, 2+__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(8, 99, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else
  #endif
  {
    __pyx_t_5 = PyTuple_New(2+__pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(8, 99, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (__pyx_t_3) {
      __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_3); __pyx_t_3 = NULL;
    }
    __Pyx_INCREF(__pyx_v_val);
    __Pyx_GIVEREF(__pyx_v_val);
    PyTuple_SET_ITEM(__pyx_t_5, 0+__pyx_t_4, __pyx_v_val);
    __Pyx_INCREF(__pyx_n_s_doe_deviation);
    __Pyx_GIVEREF(__pyx_n_s_doe_deviation);
    PyTuple_SET_ITEM(__pyx_t_5, 1+__pyx_t_4, __pyx_n_s_doe_deviation);
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_5, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(8, 99, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "../resources_source/python/pystudy.pxi":100
 *         def __set__(self, val):
 *             positive_value(val, 'doe_deviation')
 *             self.thisptr.setParameter(string(b'General_DoE_Deviation'), <double> val)             # <<<<<<<<<<<<<<
 * 
 *     property doe_sweep_samples:
 */
  __pyx_t_6 = __pyx_PyFloat_AsDouble(__pyx_v_val); if (unlikely((__pyx_t_6 == (double)-1) && PyErr_Occurred())) __PYX_ERR(8, 100, __pyx_L1_error)
  try {
    __pyx_v_self->thisptr->setParameter(std::string(((char *)"General_DoE_Deviation")), ((double)__pyx_t_6));
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(8, 100, __pyx_L1_error)
  }

  /* "../resources_source/python/pystudy.pxi":98
 *         def __get__(self):
 *             return self.thisptr.getIntParameter(b'General_DoE_Deviation')
 *         def __set__(self, val):             # <<<<<<<<<<<<<<
 *             positive_value(val, 'doe_deviation')
 *             self.thisptr.setParameter(string(b'General_DoE_Deviation'), <double> val)
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("_agros.__Study__.doe_deviation.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../resources_source/python/pystudy.pxi":103
 * 
 *     property doe_sweep_samples:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.thisptr.getDoubleParameter(b'General_DoE_SweepSamples')
 *         def __set__(self, val):
 */

/* Python wrapper */
static PyObject *__pyx_pw_6_agros_9__Study___17doe_sweep_samples_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6_agros_9__Study___17doe_sweep_samples_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6_agros_9__Study___17doe_sweep_samples___get__(((struct __pyx_obj_6_agros___Study__ *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6_agros_9__Study___17doe_sweep_samples___get__(struct __pyx_obj_6_agros___Study__ *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  std::string __pyx_t_1;
  double __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "../resources_source/python/pystudy.pxi":104
 *     property doe_sweep_samples:
 *         def __get__(self):
 *             return self.thisptr.getDoubleParameter(b'General_DoE_SweepSamples')             # <<<<<<<<<<<<<<
 *         def __set__(self, val):
 *             positive_value(val, 'doe_sweep_samples')
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_convert_string_from_py_std__in_string(__pyx_n_b_General_DoE_SweepSamples); if (unlikely(PyErr_Occurred())) __PYX_ERR(8, 104, __pyx_L1_error)
  try {
    __pyx_t_2 = __pyx_v_self->thisptr->getDoubleParameter(__pyx_t_1);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(8, 104, __pyx_L1_error)
  }
  __pyx_t_3 = PyFloat_FromDouble(__pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(8, 104, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "../resources_source/python/pystudy.pxi":103
 * 
 *     property doe_sweep_samples:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.thisptr.getDoubleParameter(b'General_DoE_SweepSamples')
 *         def __set__(self, val):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("_agros.__Study__.doe_sweep_samples.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../resources_source/python/pystudy.pxi":105
 *         def __get__(self):
 *             return self.thisptr.getDoubleParameter(b'General_DoE_SweepSamples')
 *         def __set__(self, val):             # <<<<<<<<<<<<<<
 *             positive_value(val, 'doe_sweep_samples')
 *             self.thisptr.setParameter(string(b'General_DoE_SweepSamples'), <int> val)
 */

/* Python wrapper */
static int __pyx_pw_6_agros_9__Study___17doe_sweep_samples_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_val); /*proto*/
static int __pyx_pw_6_agros_9__Study___17doe_sweep_samples_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_val) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6_agros_9__Study___17doe_sweep_samples_2__set__(((struct __pyx_obj_6_agros___Study__ *)__pyx_v_self), ((PyObject *)__pyx_v_val));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6_agros_9__Study___17doe_sweep_samples_2__set__(struct __pyx_obj_6_agros___Study__ *__pyx_v_self, PyObject *__pyx_v_val) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "../resources_source/python/pystudy.pxi":106
 *             return self.thisptr.getDoubleParameter(b'General_DoE_SweepSamples')
 *         def __set__(self, val):
 *             positive_value(val, 'doe_sweep_samples')             # <<<<<<<<<<<<<<
 *             self.thisptr.setParameter(string(b'General_DoE_SweepSamples'), <int> val)
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_positive_value); if (unlikely(!__pyx_t_2)) __PYX_ERR(8, 106, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  __pyx_t_4 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_4 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[3] = {__pyx_t_3, __pyx_v_val, __pyx_n_s_doe_sweep_samples};
    __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_4, 2+__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(8, 106, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[3] = {__pyx_t_3, __pyx_v_val, __pyx_n_s_doe_sweep_samples};
    __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_4, 2+__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(8, 106, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else
  #endif
  {
    __pyx_t_5 = PyTuple_New(2+__pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(8, 106, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (__pyx_t_3) {
      __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_3); __pyx_t_3 = NULL;
    }
    __Pyx_INCREF(__pyx_v_val);
    __Pyx_GIVEREF(__pyx_v_val);
    PyTuple_SET_ITEM(__pyx_t_5, 0+__pyx_t_4, __pyx_v_val);
    __Pyx_INCREF(__pyx_n_s_doe_sweep_samples);
    __Pyx_GIVEREF(__pyx_n_s_doe_sweep_samples);
    PyTuple_SET_ITEM(__pyx_t_5, 1+__pyx_t_4, __pyx_n_s_doe_sweep_samples);
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_5, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(8, 106, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "../resources_source/python/pystudy.pxi":107
 *         def __set__(self, val):
 *             positive_value(val, 'doe_sweep_samples')
 *             self.thisptr.setParameter(string(b'General_DoE_SweepSamples'), <int> val)             # <<<<<<<<<<<<<<
 * 
 *     # solve study
 */
  __pyx_t_4 = __Pyx_PyInt_As_int(__pyx_v_val); if (unlikely((__pyx_t_4 == (int)-1) && PyErr_Occurred())) __PYX_ERR(8, 107, __pyx_L1_error)
  try {
    __pyx_v_self->thisptr->setParameter(std::string(((char *)"General_DoE_SweepSamples")), ((int)__pyx_t_4));
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(8, 107, __pyx_L1_error)
  }

  /* "../resources_source/python/pystudy.pxi":105
 *         def __get__(self):
 *             return self.thisptr.getDoubleParameter(b'General_DoE_SweepSamples')
 *         def __set__(self, val):             # <<<<<<<<<<<<<<
 *             positive_value(val, 'doe_sweep_samples')
 *             self.thisptr.setParameter(string(b'General_DoE_SweepSamples'), <int> val)
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("_agros.__Study__.doe_sweep_samples.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../resources_source/python/pystudy.pxi":110
 * 
 *     # solve study
 *     def solve(self):             # <<<<<<<<<<<<<<
 *         self.thisptr.solve();
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6_agros_9__Study___9solve(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_6_agros_9__Study___9solve(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("solve (wrapper)", 0);
  __pyx_r = __pyx_pf_6_agros_9__Study___8solve(((struct __pyx_obj_6_agros___Study__ *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6_agros_9__Study___8solve(struct __pyx_obj_6_agros___Study__ *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("solve", 0);

  /* "../resources_source/python/pystudy.pxi":111
 *     # solve study
 *     def solve(self):
 *         self.thisptr.solve();             # <<<<<<<<<<<<<<
 * 
 *     # postprocessor
 */
  try {
    __pyx_v_self->thisptr->solve();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(8, 111, __pyx_L1_error)
  }

  /* "../resources_source/python/pystudy.pxi":110
 * 
 *     # solve study
 *     def solve(self):             # <<<<<<<<<<<<<<
 *         self.thisptr.solve();
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("_agros.__Study__.solve", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../resources_source/python/pystudy.pxi":114
 * 
 *     # postprocessor
 *     def find_extreme(self, type, key, minimum = True):             # <<<<<<<<<<<<<<
 *         cdef string problemDir = self.thisptr.findExtreme(type.encode(), key.encode(), minimum)
 *         if (problemDir.decode() != ""):
 */

/* Python wrapper */
static PyObject *__pyx_pw_6_agros_9__Study___11find_extreme(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_6_agros_9__Study___11find_extreme(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_type = 0;
  PyObject *__pyx_v_key = 0;
  PyObject *__pyx_v_minimum = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("find_extreme (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_type,&__pyx_n_s_key,&__pyx_n_s_minimum,0};
    PyObject* values[3] = {0,0,0};
    values[2] = ((PyObject *)Py_True);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_type)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_key)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("find_extreme", 0, 2, 3, 1); __PYX_ERR(8, 114, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_minimum);
          if (value) { values[2] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "find_extreme") < 0)) __PYX_ERR(8, 114, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_type = values[0];
    __pyx_v_key = values[1];
    __pyx_v_minimum = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("find_extreme", 0, 2, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(8, 114, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("_agros.__Study__.find_extreme", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6_agros_9__Study___10find_extreme(((struct __pyx_obj_6_agros___Study__ *)__pyx_v_self), __pyx_v_type, __pyx_v_key, __pyx_v_minimum);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6_agros_9__Study___10find_extreme(struct __pyx_obj_6_agros___Study__ *__pyx_v_self, PyObject *__pyx_v_type, PyObject *__pyx_v_key, PyObject *__pyx_v_minimum) {
  std::string __pyx_v_problemDir;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  std::string __pyx_t_4;
  std::string __pyx_t_5;
  bool __pyx_t_6;
  std::string __pyx_t_7;
  int __pyx_t_8;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("find_extreme", 0);

  /* "../resources_source/python/pystudy.pxi":115
 *     # postprocessor
 *     def find_extreme(self, type, key, minimum = True):
 *         cdef string problemDir = self.thisptr.findExtreme(type.encode(), key.encode(), minimum)             # <<<<<<<<<<<<<<
 *         if (problemDir.decode() != ""):
 *             return __Computation__(computation = problemDir.decode())
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_type, __pyx_n_s_encode); if (unlikely(!__pyx_t_2)) __PYX_ERR(8, 115, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(8, 115, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = __pyx_convert_string_from_py_std__in_string(__pyx_t_1); if (unlikely(PyErr_Occurred())) __PYX_ERR(8, 115, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_key, __pyx_n_s_encode); if (unlikely(!__pyx_t_2)) __PYX_ERR(8, 115, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(8, 115, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_5 = __pyx_convert_string_from_py_std__in_string(__pyx_t_1); if (unlikely(PyErr_Occurred())) __PYX_ERR(8, 115, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_v_minimum); if (unlikely((__pyx_t_6 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(8, 115, __pyx_L1_error)
  try {
    __pyx_t_7 = __pyx_v_self->thisptr->findExtreme(__pyx_t_4, __pyx_t_5, __pyx_t_6);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(8, 115, __pyx_L1_error)
  }
  __pyx_v_problemDir = __pyx_t_7;

  /* "../resources_source/python/pystudy.pxi":116
 *     def find_extreme(self, type, key, minimum = True):
 *         cdef string problemDir = self.thisptr.findExtreme(type.encode(), key.encode(), minimum)
 *         if (problemDir.decode() != ""):             # <<<<<<<<<<<<<<
 *             return __Computation__(computation = problemDir.decode())
 * 
 */
  __pyx_t_1 = __Pyx_decode_cpp_string(__pyx_v_problemDir, 0, PY_SSIZE_T_MAX, NULL, NULL, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(8, 116, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_8 = (__Pyx_PyString_Equals(__pyx_t_1, __pyx_kp_s__25, Py_NE)); if (unlikely(__pyx_t_8 < 0)) __PYX_ERR(8, 116, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_8) {

    /* "../resources_source/python/pystudy.pxi":117
 *         cdef string problemDir = self.thisptr.findExtreme(type.encode(), key.encode(), minimum)
 *         if (problemDir.decode() != ""):
 *             return __Computation__(computation = problemDir.decode())             # <<<<<<<<<<<<<<
 * 
 *     def steps(self):
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_1 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(8, 117, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = __Pyx_decode_cpp_string(__pyx_v_problemDir, 0, PY_SSIZE_T_MAX, NULL, NULL, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(8, 117, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_computation, __pyx_t_2) < 0) __PYX_ERR(8, 117, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_6_agros___Computation__), __pyx_empty_tuple, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(8, 117, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;

    /* "../resources_source/python/pystudy.pxi":116
 *     def find_extreme(self, type, key, minimum = True):
 *         cdef string problemDir = self.thisptr.findExtreme(type.encode(), key.encode(), minimum)
 *         if (problemDir.decode() != ""):             # <<<<<<<<<<<<<<
 *             return __Computation__(computation = problemDir.decode())
 * 
 */
  }

  /* "../resources_source/python/pystudy.pxi":114
 * 
 *     # postprocessor
 *     def find_extreme(self, type, key, minimum = True):             # <<<<<<<<<<<<<<
 *         cdef string problemDir = self.thisptr.findExtreme(type.encode(), key.encode(), minimum)
 *         if (problemDir.decode() != ""):
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("_agros.__Study__.find_extreme", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../resources_source/python/pystudy.pxi":119
 *             return __Computation__(computation = problemDir.decode())
 * 
 *     def steps(self):             # <<<<<<<<<<<<<<
 *         cdef vector[int] steps
 *         self.thisptr.steps(steps)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6_agros_9__Study___13steps(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_6_agros_9__Study___13steps(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("steps (wrapper)", 0);
  __pyx_r = __pyx_pf_6_agros_9__Study___12steps(((struct __pyx_obj_6_agros___Study__ *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6_agros_9__Study___12steps(struct __pyx_obj_6_agros___Study__ *__pyx_v_self) {
  std::vector<int>  __pyx_v_steps;
  PyObject *__pyx_v_out = NULL;
  std::vector<int> ::size_type __pyx_v_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  std::vector<int> ::size_type __pyx_t_2;
  std::vector<int> ::size_type __pyx_t_3;
  std::vector<int> ::size_type __pyx_t_4;
  int __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("steps", 0);

  /* "../resources_source/python/pystudy.pxi":121
 *     def steps(self):
 *         cdef vector[int] steps
 *         self.thisptr.steps(steps)             # <<<<<<<<<<<<<<
 * 
 *         out = []
 */
  __pyx_v_self->thisptr->steps(__pyx_v_steps);

  /* "../resources_source/python/pystudy.pxi":123
 *         self.thisptr.steps(steps)
 * 
 *         out = []             # <<<<<<<<<<<<<<
 *         for i in range(steps.size()):
 *             out.append(steps[i])
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(8, 123, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_out = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "../resources_source/python/pystudy.pxi":124
 * 
 *         out = []
 *         for i in range(steps.size()):             # <<<<<<<<<<<<<<
 *             out.append(steps[i])
 * 
 */
  __pyx_t_2 = __pyx_v_steps.size();
  __pyx_t_3 = __pyx_t_2;
  for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
    __pyx_v_i = __pyx_t_4;

    /* "../resources_source/python/pystudy.pxi":125
 *         out = []
 *         for i in range(steps.size()):
 *             out.append(steps[i])             # <<<<<<<<<<<<<<
 * 
 *         return out
 */
    __pyx_t_1 = __Pyx_PyInt_From_int((__pyx_v_steps[__pyx_v_i])); if (unlikely(!__pyx_t_1)) __PYX_ERR(8, 125, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_5 = __Pyx_PyList_Append(__pyx_v_out, __pyx_t_1); if (unlikely(__pyx_t_5 == ((int)-1))) __PYX_ERR(8, 125, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "../resources_source/python/pystudy.pxi":127
 *             out.append(steps[i])
 * 
 *         return out             # <<<<<<<<<<<<<<
 * 
 *     def values(self, variable):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_out);
  __pyx_r = __pyx_v_out;
  goto __pyx_L0;

  /* "../resources_source/python/pystudy.pxi":119
 *             return __Computation__(computation = problemDir.decode())
 * 
 *     def steps(self):             # <<<<<<<<<<<<<<
 *         cdef vector[int] steps
 *         self.thisptr.steps(steps)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("_agros.__Study__.steps", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_out);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../resources_source/python/pystudy.pxi":129
 *         return out
 * 
 *     def values(self, variable):             # <<<<<<<<<<<<<<
 *         cdef vector[double] values
 *         self.thisptr.values(variable.encode(), values)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6_agros_9__Study___15values(PyObject *__pyx_v_self, PyObject *__pyx_v_variable); /*proto*/
static PyObject *__pyx_pw_6_agros_9__Study___15values(PyObject *__pyx_v_self, PyObject *__pyx_v_variable) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("values (wrapper)", 0);
  __pyx_r = __pyx_pf_6_agros_9__Study___14values(((struct __pyx_obj_6_agros___Study__ *)__pyx_v_self), ((PyObject *)__pyx_v_variable));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6_agros_9__Study___14values(struct __pyx_obj_6_agros___Study__ *__pyx_v_self, PyObject *__pyx_v_variable) {
  std::vector<double>  __pyx_v_values;
  PyObject *__pyx_v_out = NULL;
  std::vector<double> ::size_type __pyx_v_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  std::string __pyx_t_4;
  std::vector<double> ::size_type __pyx_t_5;
  std::vector<double> ::size_type __pyx_t_6;
  std::vector<double> ::size_type __pyx_t_7;
  int __pyx_t_8;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("values", 0);

  /* "../resources_source/python/pystudy.pxi":131
 *     def values(self, variable):
 *         cdef vector[double] values
 *         self.thisptr.values(variable.encode(), values)             # <<<<<<<<<<<<<<
 * 
 *         out = []
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_variable, __pyx_n_s_encode); if (unlikely(!__pyx_t_2)) __PYX_ERR(8, 131, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(8, 131, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = __pyx_convert_string_from_py_std__in_string(__pyx_t_1); if (unlikely(PyErr_Occurred())) __PYX_ERR(8, 131, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_self->thisptr->values(__pyx_t_4, __pyx_v_values);

  /* "../resources_source/python/pystudy.pxi":133
 *         self.thisptr.values(variable.encode(), values)
 * 
 *         out = []             # <<<<<<<<<<<<<<
 *         for i in range(values.size()):
 *             out.append(values[i])
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(8, 133, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_out = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "../resources_source/python/pystudy.pxi":134
 * 
 *         out = []
 *         for i in range(values.size()):             # <<<<<<<<<<<<<<
 *             out.append(values[i])
 * 
 */
  __pyx_t_5 = __pyx_v_values.size();
  __pyx_t_6 = __pyx_t_5;
  for (__pyx_t_7 = 0; __pyx_t_7 < __pyx_t_6; __pyx_t_7+=1) {
    __pyx_v_i = __pyx_t_7;

    /* "../resources_source/python/pystudy.pxi":135
 *         out = []
 *         for i in range(values.size()):
 *             out.append(values[i])             # <<<<<<<<<<<<<<
 * 
 *         return out
 */
    __pyx_t_1 = PyFloat_FromDouble((__pyx_v_values[__pyx_v_i])); if (unlikely(!__pyx_t_1)) __PYX_ERR(8, 135, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_8 = __Pyx_PyList_Append(__pyx_v_out, __pyx_t_1); if (unlikely(__pyx_t_8 == ((int)-1))) __PYX_ERR(8, 135, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "../resources_source/python/pystudy.pxi":137
 *             out.append(values[i])
 * 
 *         return out             # <<<<<<<<<<<<<<
 * 
 * cdef class __StudyBayesOpt__(__Study__):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_out);
  __pyx_r = __pyx_v_out;
  goto __pyx_L0;

  /* "../resources_source/python/pystudy.pxi":129
 *         return out
 * 
 *     def values(self, variable):             # <<<<<<<<<<<<<<
 *         cdef vector[double] values
 *         self.thisptr.values(variable.encode(), values)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("_agros.__Study__.values", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_out);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.thisptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_6_agros_9__Study___17__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_6_agros_9__Study___17__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6_agros_9__Study___16__reduce_cython__(((struct __pyx_obj_6_agros___Study__ *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6_agros_9__Study___16__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_6_agros___Study__ *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.thisptr cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.thisptr cannot be converted to a Python object for pickling")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__50, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(2, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.thisptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("_agros.__Study__.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.thisptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.thisptr cannot be converted to a Python object for pickling")
 */

/* Python wrapper */
static PyObject *__pyx_pw_6_agros_9__Study___19__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_6_agros_9__Study___19__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6_agros_9__Study___18__setstate_cython__(((struct __pyx_obj_6_agros___Study__ *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6_agros_9__Study___18__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_6_agros___Study__ *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("self.thisptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.thisptr cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__51, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(2, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.thisptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.thisptr cannot be converted to a Python object for pickling")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("_agros.__Study__.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../resources_source/python/pystudy.pxi":140
 * 
 * cdef class __StudyBayesOpt__(__Study__):
 *     def __cinit__(self, index = -1):             # <<<<<<<<<<<<<<
 *         self.thisptr = new PyStudyBayesOpt(index)
 * 
 */

/* Python wrapper */
static int __pyx_pw_6_agros_17__StudyBayesOpt___1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_6_agros_17__StudyBayesOpt___1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_index = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_index,0};
    PyObject* values[1] = {0};
    values[0] = ((PyObject *)__pyx_int_neg_1);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_index);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) __PYX_ERR(8, 140, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_index = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(8, 140, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("_agros.__StudyBayesOpt__.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6_agros_17__StudyBayesOpt_____cinit__(((struct __pyx_obj_6_agros___StudyBayesOpt__ *)__pyx_v_self), __pyx_v_index);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6_agros_17__StudyBayesOpt_____cinit__(struct __pyx_obj_6_agros___StudyBayesOpt__ *__pyx_v_self, PyObject *__pyx_v_index) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "../resources_source/python/pystudy.pxi":141
 * cdef class __StudyBayesOpt__(__Study__):
 *     def __cinit__(self, index = -1):
 *         self.thisptr = new PyStudyBayesOpt(index)             # <<<<<<<<<<<<<<
 * 
 *         self.settings = __Parameters__(self.__get_settings__,
 */
  __pyx_t_1 = __Pyx_PyInt_As_int(__pyx_v_index); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) __PYX_ERR(8, 141, __pyx_L1_error)
  __pyx_v_self->__pyx_base.thisptr = new PyStudyBayesOpt(__pyx_t_1);

  /* "../resources_source/python/pystudy.pxi":143
 *         self.thisptr = new PyStudyBayesOpt(index)
 * 
 *         self.settings = __Parameters__(self.__get_settings__,             # <<<<<<<<<<<<<<
 *                                        self.__set_settings__)
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_Parameters); if (unlikely(!__pyx_t_3)) __PYX_ERR(8, 143, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_get_settings); if (unlikely(!__pyx_t_4)) __PYX_ERR(8, 143, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);

  /* "../resources_source/python/pystudy.pxi":144
 * 
 *         self.settings = __Parameters__(self.__get_settings__,
 *                                        self.__set_settings__)             # <<<<<<<<<<<<<<
 * 
 *     def __get_settings__(self):
 */
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_set_settings); if (unlikely(!__pyx_t_5)) __PYX_ERR(8, 144, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = NULL;
  __pyx_t_1 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_6)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_1 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_3)) {
    PyObject *__pyx_temp[3] = {__pyx_t_6, __pyx_t_4, __pyx_t_5};
    __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_1, 2+__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(8, 143, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
    PyObject *__pyx_temp[3] = {__pyx_t_6, __pyx_t_4, __pyx_t_5};
    __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_1, 2+__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(8, 143, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  } else
  #endif
  {
    __pyx_t_7 = PyTuple_New(2+__pyx_t_1); if (unlikely(!__pyx_t_7)) __PYX_ERR(8, 143, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    if (__pyx_t_6) {
      __Pyx_GIVEREF(__pyx_t_6); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_6); __pyx_t_6 = NULL;
    }
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_7, 0+__pyx_t_1, __pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_7, 1+__pyx_t_1, __pyx_t_5);
    __pyx_t_4 = 0;
    __pyx_t_5 = 0;
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_7, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(8, 143, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "../resources_source/python/pystudy.pxi":143
 *         self.thisptr = new PyStudyBayesOpt(index)
 * 
 *         self.settings = __Parameters__(self.__get_settings__,             # <<<<<<<<<<<<<<
 *                                        self.__set_settings__)
 * 
 */
  __Pyx_GIVEREF(__pyx_t_2);
  __Pyx_GOTREF(__pyx_v_self->__pyx_base.settings);
  __Pyx_DECREF(__pyx_v_self->__pyx_base.settings);
  __pyx_v_self->__pyx_base.settings = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "../resources_source/python/pystudy.pxi":140
 * 
 * cdef class __StudyBayesOpt__(__Study__):
 *     def __cinit__(self, index = -1):             # <<<<<<<<<<<<<<
 *         self.thisptr = new PyStudyBayesOpt(index)
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("_agros.__StudyBayesOpt__.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../resources_source/python/pystudy.pxi":146
 *                                        self.__set_settings__)
 * 
 *     def __get_settings__(self):             # <<<<<<<<<<<<<<
 *         return {'n_init_samples' : self.thisptr.getIntParameter(b'BayesOpt_n_init_samples'),
 *                 'n_iterations' : self.thisptr.getIntParameter(b'BayesOpt_n_iterations'),
 */

/* Python wrapper */
static PyObject *__pyx_pw_6_agros_17__StudyBayesOpt___3__get_settings__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_6_agros_17__StudyBayesOpt___3__get_settings__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get_settings__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6_agros_17__StudyBayesOpt___2__get_settings__(((struct __pyx_obj_6_agros___StudyBayesOpt__ *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6_agros_17__StudyBayesOpt___2__get_settings__(struct __pyx_obj_6_agros___StudyBayesOpt__ *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  std::string __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  double __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get_settings__", 0);

  /* "../resources_source/python/pystudy.pxi":147
 * 
 *     def __get_settings__(self):
 *         return {'n_init_samples' : self.thisptr.getIntParameter(b'BayesOpt_n_init_samples'),             # <<<<<<<<<<<<<<
 *                 'n_iterations' : self.thisptr.getIntParameter(b'BayesOpt_n_iterations'),
 *                 'n_iter_relearn' : self.thisptr.getIntParameter(b'BayesOpt_n_iter_relearn'),
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyDict_NewPresized(8); if (unlikely(!__pyx_t_1)) __PYX_ERR(8, 147, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_convert_string_from_py_std__in_string(__pyx_n_b_BayesOpt_n_init_samples); if (unlikely(PyErr_Occurred())) __PYX_ERR(8, 147, __pyx_L1_error)
  try {
    __pyx_t_3 = __pyx_v_self->__pyx_base.thisptr->getIntParameter(__pyx_t_2);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(8, 147, __pyx_L1_error)
  }
  __pyx_t_4 = __Pyx_PyInt_From_int(__pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(8, 147, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_n_init_samples, __pyx_t_4) < 0) __PYX_ERR(8, 147, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "../resources_source/python/pystudy.pxi":148
 *     def __get_settings__(self):
 *         return {'n_init_samples' : self.thisptr.getIntParameter(b'BayesOpt_n_init_samples'),
 *                 'n_iterations' : self.thisptr.getIntParameter(b'BayesOpt_n_iterations'),             # <<<<<<<<<<<<<<
 *                 'n_iter_relearn' : self.thisptr.getIntParameter(b'BayesOpt_n_iter_relearn'),
 *                 'init_method' : (<PyStudyBayesOpt*> self.thisptr).getInitMethod().decode(),
 */
  __pyx_t_2 = __pyx_convert_string_from_py_std__in_string(__pyx_n_b_BayesOpt_n_iterations); if (unlikely(PyErr_Occurred())) __PYX_ERR(8, 148, __pyx_L1_error)
  try {
    __pyx_t_3 = __pyx_v_self->__pyx_base.thisptr->getIntParameter(__pyx_t_2);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(8, 148, __pyx_L1_error)
  }
  __pyx_t_4 = __Pyx_PyInt_From_int(__pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(8, 148, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_n_iterations, __pyx_t_4) < 0) __PYX_ERR(8, 147, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "../resources_source/python/pystudy.pxi":149
 *         return {'n_init_samples' : self.thisptr.getIntParameter(b'BayesOpt_n_init_samples'),
 *                 'n_iterations' : self.thisptr.getIntParameter(b'BayesOpt_n_iterations'),
 *                 'n_iter_relearn' : self.thisptr.getIntParameter(b'BayesOpt_n_iter_relearn'),             # <<<<<<<<<<<<<<
 *                 'init_method' : (<PyStudyBayesOpt*> self.thisptr).getInitMethod().decode(),
 *                 'surr_name' : (<PyStudyBayesOpt*> self.thisptr).getSurrName().decode(),
 */
  __pyx_t_2 = __pyx_convert_string_from_py_std__in_string(__pyx_n_b_BayesOpt_n_iter_relearn); if (unlikely(PyErr_Occurred())) __PYX_ERR(8, 149, __pyx_L1_error)
  try {
    __pyx_t_3 = __pyx_v_self->__pyx_base.thisptr->getIntParameter(__pyx_t_2);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(8, 149, __pyx_L1_error)
  }
  __pyx_t_4 = __Pyx_PyInt_From_int(__pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(8, 149, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_n_iter_relearn, __pyx_t_4) < 0) __PYX_ERR(8, 147, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "../resources_source/python/pystudy.pxi":150
 *                 'n_iterations' : self.thisptr.getIntParameter(b'BayesOpt_n_iterations'),
 *                 'n_iter_relearn' : self.thisptr.getIntParameter(b'BayesOpt_n_iter_relearn'),
 *                 'init_method' : (<PyStudyBayesOpt*> self.thisptr).getInitMethod().decode(),             # <<<<<<<<<<<<<<
 *                 'surr_name' : (<PyStudyBayesOpt*> self.thisptr).getSurrName().decode(),
 *                 'surr_noise' : self.thisptr.getDoubleParameter(b'BayesOpt_surr_noise'),
 */
  __pyx_t_4 = __Pyx_decode_cpp_string(((PyStudyBayesOpt *)__pyx_v_self->__pyx_base.thisptr)->getInitMethod(), 0, PY_SSIZE_T_MAX, NULL, NULL, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(8, 150, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_init_method, __pyx_t_4) < 0) __PYX_ERR(8, 147, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "../resources_source/python/pystudy.pxi":151
 *                 'n_iter_relearn' : self.thisptr.getIntParameter(b'BayesOpt_n_iter_relearn'),
 *                 'init_method' : (<PyStudyBayesOpt*> self.thisptr).getInitMethod().decode(),
 *                 'surr_name' : (<PyStudyBayesOpt*> self.thisptr).getSurrName().decode(),             # <<<<<<<<<<<<<<
 *                 'surr_noise' : self.thisptr.getDoubleParameter(b'BayesOpt_surr_noise'),
 *                 'sc_type' : (<PyStudyBayesOpt*> self.thisptr).getScoreType().decode(),
 */
  __pyx_t_4 = __Pyx_decode_cpp_string(((PyStudyBayesOpt *)__pyx_v_self->__pyx_base.thisptr)->getSurrName(), 0, PY_SSIZE_T_MAX, NULL, NULL, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(8, 151, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_surr_name, __pyx_t_4) < 0) __PYX_ERR(8, 147, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "../resources_source/python/pystudy.pxi":152
 *                 'init_method' : (<PyStudyBayesOpt*> self.thisptr).getInitMethod().decode(),
 *                 'surr_name' : (<PyStudyBayesOpt*> self.thisptr).getSurrName().decode(),
 *                 'surr_noise' : self.thisptr.getDoubleParameter(b'BayesOpt_surr_noise'),             # <<<<<<<<<<<<<<
 *                 'sc_type' : (<PyStudyBayesOpt*> self.thisptr).getScoreType().decode(),
 *                 'l_type' : (<PyStudyBayesOpt*> self.thisptr).getLearningType().decode()}
 */
  __pyx_t_2 = __pyx_convert_string_from_py_std__in_string(__pyx_n_b_BayesOpt_surr_noise); if (unlikely(PyErr_Occurred())) __PYX_ERR(8, 152, __pyx_L1_error)
  try {
    __pyx_t_5 = __pyx_v_self->__pyx_base.thisptr->getDoubleParameter(__pyx_t_2);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(8, 152, __pyx_L1_error)
  }
  __pyx_t_4 = PyFloat_FromDouble(__pyx_t_5); if (unlikely(!__pyx_t_4)) __PYX_ERR(8, 152, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_surr_noise, __pyx_t_4) < 0) __PYX_ERR(8, 147, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "../resources_source/python/pystudy.pxi":153
 *                 'surr_name' : (<PyStudyBayesOpt*> self.thisptr).getSurrName().decode(),
 *                 'surr_noise' : self.thisptr.getDoubleParameter(b'BayesOpt_surr_noise'),
 *                 'sc_type' : (<PyStudyBayesOpt*> self.thisptr).getScoreType().decode(),             # <<<<<<<<<<<<<<
 *                 'l_type' : (<PyStudyBayesOpt*> self.thisptr).getLearningType().decode()}
 * 
 */
  __pyx_t_4 = __Pyx_decode_cpp_string(((PyStudyBayesOpt *)__pyx_v_self->__pyx_base.thisptr)->getScoreType(), 0, PY_SSIZE_T_MAX, NULL, NULL, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(8, 153, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_sc_type, __pyx_t_4) < 0) __PYX_ERR(8, 147, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "../resources_source/python/pystudy.pxi":154
 *                 'surr_noise' : self.thisptr.getDoubleParameter(b'BayesOpt_surr_noise'),
 *                 'sc_type' : (<PyStudyBayesOpt*> self.thisptr).getScoreType().decode(),
 *                 'l_type' : (<PyStudyBayesOpt*> self.thisptr).getLearningType().decode()}             # <<<<<<<<<<<<<<
 * 
 *     def __set_settings__(self, settings):
 */
  __pyx_t_4 = __Pyx_decode_cpp_string(((PyStudyBayesOpt *)__pyx_v_self->__pyx_base.thisptr)->getLearningType(), 0, PY_SSIZE_T_MAX, NULL, NULL, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(8, 154, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_l_type, __pyx_t_4) < 0) __PYX_ERR(8, 147, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../resources_source/python/pystudy.pxi":146
 *                                        self.__set_settings__)
 * 
 *     def __get_settings__(self):             # <<<<<<<<<<<<<<
 *         return {'n_init_samples' : self.thisptr.getIntParameter(b'BayesOpt_n_init_samples'),
 *                 'n_iterations' : self.thisptr.getIntParameter(b'BayesOpt_n_iterations'),
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("_agros.__StudyBayesOpt__.__get_settings__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../resources_source/python/pystudy.pxi":156
 *                 'l_type' : (<PyStudyBayesOpt*> self.thisptr).getLearningType().decode()}
 * 
 *     def __set_settings__(self, settings):             # <<<<<<<<<<<<<<
 *         positive_value(settings['n_init_samples'], 'n_init_samples')
 *         self.thisptr.setParameter(string(b'BayesOpt_n_init_samples'), <int> settings['n_init_samples'])
 */

/* Python wrapper */
static PyObject *__pyx_pw_6_agros_17__StudyBayesOpt___5__set_settings__(PyObject *__pyx_v_self, PyObject *__pyx_v_settings); /*proto*/
static PyObject *__pyx_pw_6_agros_17__StudyBayesOpt___5__set_settings__(PyObject *__pyx_v_self, PyObject *__pyx_v_settings) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set_settings__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6_agros_17__StudyBayesOpt___4__set_settings__(((struct __pyx_obj_6_agros___StudyBayesOpt__ *)__pyx_v_self), ((PyObject *)__pyx_v_settings));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6_agros_17__StudyBayesOpt___4__set_settings__(struct __pyx_obj_6_agros___StudyBayesOpt__ *__pyx_v_self, PyObject *__pyx_v_settings) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  double __pyx_t_7;
  std::string __pyx_t_8;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set_settings__", 0);

  /* "../resources_source/python/pystudy.pxi":157
 * 
 *     def __set_settings__(self, settings):
 *         positive_value(settings['n_init_samples'], 'n_init_samples')             # <<<<<<<<<<<<<<
 *         self.thisptr.setParameter(string(b'BayesOpt_n_init_samples'), <int> settings['n_init_samples'])
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_positive_value); if (unlikely(!__pyx_t_2)) __PYX_ERR(8, 157, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_Dict_GetItem(__pyx_v_settings, __pyx_n_s_n_init_samples); if (unlikely(!__pyx_t_3)) __PYX_ERR(8, 157, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = NULL;
  __pyx_t_5 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_5 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[3] = {__pyx_t_4, __pyx_t_3, __pyx_n_s_n_init_samples};
    __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_5, 2+__pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(8, 157, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[3] = {__pyx_t_4, __pyx_t_3, __pyx_n_s_n_init_samples};
    __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_5, 2+__pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(8, 157, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else
  #endif
  {
    __pyx_t_6 = PyTuple_New(2+__pyx_t_5); if (unlikely(!__pyx_t_6)) __PYX_ERR(8, 157, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    if (__pyx_t_4) {
      __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_4); __pyx_t_4 = NULL;
    }
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_6, 0+__pyx_t_5, __pyx_t_3);
    __Pyx_INCREF(__pyx_n_s_n_init_samples);
    __Pyx_GIVEREF(__pyx_n_s_n_init_samples);
    PyTuple_SET_ITEM(__pyx_t_6, 1+__pyx_t_5, __pyx_n_s_n_init_samples);
    __pyx_t_3 = 0;
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_6, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(8, 157, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "../resources_source/python/pystudy.pxi":158
 *     def __set_settings__(self, settings):
 *         positive_value(settings['n_init_samples'], 'n_init_samples')
 *         self.thisptr.setParameter(string(b'BayesOpt_n_init_samples'), <int> settings['n_init_samples'])             # <<<<<<<<<<<<<<
 * 
 *         positive_value(settings['n_iterations'], 'n_iterations')
 */
  __pyx_t_1 = __Pyx_PyObject_Dict_GetItem(__pyx_v_settings, __pyx_n_s_n_init_samples); if (unlikely(!__pyx_t_1)) __PYX_ERR(8, 158, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_5 = __Pyx_PyInt_As_int(__pyx_t_1); if (unlikely((__pyx_t_5 == (int)-1) && PyErr_Occurred())) __PYX_ERR(8, 158, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  try {
    __pyx_v_self->__pyx_base.thisptr->setParameter(std::string(((char *)"BayesOpt_n_init_samples")), ((int)__pyx_t_5));
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(8, 158, __pyx_L1_error)
  }

  /* "../resources_source/python/pystudy.pxi":160
 *         self.thisptr.setParameter(string(b'BayesOpt_n_init_samples'), <int> settings['n_init_samples'])
 * 
 *         positive_value(settings['n_iterations'], 'n_iterations')             # <<<<<<<<<<<<<<
 *         self.thisptr.setParameter(string(b'BayesOpt_n_iterations'), <int> settings['n_iterations'])
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_positive_value); if (unlikely(!__pyx_t_2)) __PYX_ERR(8, 160, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_6 = __Pyx_PyObject_Dict_GetItem(__pyx_v_settings, __pyx_n_s_n_iterations); if (unlikely(!__pyx_t_6)) __PYX_ERR(8, 160, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_3 = NULL;
  __pyx_t_5 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_5 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[3] = {__pyx_t_3, __pyx_t_6, __pyx_n_s_n_iterations};
    __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_5, 2+__pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(8, 160, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[3] = {__pyx_t_3, __pyx_t_6, __pyx_n_s_n_iterations};
    __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_5, 2+__pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(8, 160, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  } else
  #endif
  {
    __pyx_t_4 = PyTuple_New(2+__pyx_t_5); if (unlikely(!__pyx_t_4)) __PYX_ERR(8, 160, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    if (__pyx_t_3) {
      __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_3); __pyx_t_3 = NULL;
    }
    __Pyx_GIVEREF(__pyx_t_6);
    PyTuple_SET_ITEM(__pyx_t_4, 0+__pyx_t_5, __pyx_t_6);
    __Pyx_INCREF(__pyx_n_s_n_iterations);
    __Pyx_GIVEREF(__pyx_n_s_n_iterations);
    PyTuple_SET_ITEM(__pyx_t_4, 1+__pyx_t_5, __pyx_n_s_n_iterations);
    __pyx_t_6 = 0;
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_4, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(8, 160, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "../resources_source/python/pystudy.pxi":161
 * 
 *         positive_value(settings['n_iterations'], 'n_iterations')
 *         self.thisptr.setParameter(string(b'BayesOpt_n_iterations'), <int> settings['n_iterations'])             # <<<<<<<<<<<<<<
 * 
 *         positive_value(settings['n_iter_relearn'], 'n_iter_relearn')
 */
  __pyx_t_1 = __Pyx_PyObject_Dict_GetItem(__pyx_v_settings, __pyx_n_s_n_iterations); if (unlikely(!__pyx_t_1)) __PYX_ERR(8, 161, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_5 = __Pyx_PyInt_As_int(__pyx_t_1); if (unlikely((__pyx_t_5 == (int)-1) && PyErr_Occurred())) __PYX_ERR(8, 161, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  try {
    __pyx_v_self->__pyx_base.thisptr->setParameter(std::string(((char *)"BayesOpt_n_iterations")), ((int)__pyx_t_5));
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(8, 161, __pyx_L1_error)
  }

  /* "../resources_source/python/pystudy.pxi":163
 *         self.thisptr.setParameter(string(b'BayesOpt_n_iterations'), <int> settings['n_iterations'])
 * 
 *         positive_value(settings['n_iter_relearn'], 'n_iter_relearn')             # <<<<<<<<<<<<<<
 *         self.thisptr.setParameter(string(b'BayesOpt_n_iter_relearn'), <int> settings['n_iter_relearn'])
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_positive_value); if (unlikely(!__pyx_t_2)) __PYX_ERR(8, 163, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = __Pyx_PyObject_Dict_GetItem(__pyx_v_settings, __pyx_n_s_n_iter_relearn); if (unlikely(!__pyx_t_4)) __PYX_ERR(8, 163, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_6 = NULL;
  __pyx_t_5 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_6)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_5 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[3] = {__pyx_t_6, __pyx_t_4, __pyx_n_s_n_iter_relearn};
    __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_5, 2+__pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(8, 163, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[3] = {__pyx_t_6, __pyx_t_4, __pyx_n_s_n_iter_relearn};
    __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_5, 2+__pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(8, 163, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  } else
  #endif
  {
    __pyx_t_3 = PyTuple_New(2+__pyx_t_5); if (unlikely(!__pyx_t_3)) __PYX_ERR(8, 163, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (__pyx_t_6) {
      __Pyx_GIVEREF(__pyx_t_6); PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_6); __pyx_t_6 = NULL;
    }
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_3, 0+__pyx_t_5, __pyx_t_4);
    __Pyx_INCREF(__pyx_n_s_n_iter_relearn);
    __Pyx_GIVEREF(__pyx_n_s_n_iter_relearn);
    PyTuple_SET_ITEM(__pyx_t_3, 1+__pyx_t_5, __pyx_n_s_n_iter_relearn);
    __pyx_t_4 = 0;
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_3, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(8, 163, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "../resources_source/python/pystudy.pxi":164
 * 
 *         positive_value(settings['n_iter_relearn'], 'n_iter_relearn')
 *         self.thisptr.setParameter(string(b'BayesOpt_n_iter_relearn'), <int> settings['n_iter_relearn'])             # <<<<<<<<<<<<<<
 * 
 *         positive_value(settings['surr_noise'], 'surr_noise')
 */
  __pyx_t_1 = __Pyx_PyObject_Dict_GetItem(__pyx_v_settings, __pyx_n_s_n_iter_relearn); if (unlikely(!__pyx_t_1)) __PYX_ERR(8, 164, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_5 = __Pyx_PyInt_As_int(__pyx_t_1); if (unlikely((__pyx_t_5 == (int)-1) && PyErr_Occurred())) __PYX_ERR(8, 164, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  try {
    __pyx_v_self->__pyx_base.thisptr->setParameter(std::string(((char *)"BayesOpt_n_iter_relearn")), ((int)__pyx_t_5));
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(8, 164, __pyx_L1_error)
  }

  /* "../resources_source/python/pystudy.pxi":166
 *         self.thisptr.setParameter(string(b'BayesOpt_n_iter_relearn'), <int> settings['n_iter_relearn'])
 * 
 *         positive_value(settings['surr_noise'], 'surr_noise')             # <<<<<<<<<<<<<<
 *         self.thisptr.setParameter(string(b'BayesOpt_surr_noise'), <double> settings['surr_noise'])
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_positive_value); if (unlikely(!__pyx_t_2)) __PYX_ERR(8, 166, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_Dict_GetItem(__pyx_v_settings, __pyx_n_s_surr_noise); if (unlikely(!__pyx_t_3)) __PYX_ERR(8, 166, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = NULL;
  __pyx_t_5 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_5 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[3] = {__pyx_t_4, __pyx_t_3, __pyx_n_s_surr_noise};
    __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_5, 2+__pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(8, 166, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[3] = {__pyx_t_4, __pyx_t_3, __pyx_n_s_surr_noise};
    __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_5, 2+__pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(8, 166, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else
  #endif
  {
    __pyx_t_6 = PyTuple_New(2+__pyx_t_5); if (unlikely(!__pyx_t_6)) __PYX_ERR(8, 166, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    if (__pyx_t_4) {
      __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_4); __pyx_t_4 = NULL;
    }
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_6, 0+__pyx_t_5, __pyx_t_3);
    __Pyx_INCREF(__pyx_n_s_surr_noise);
    __Pyx_GIVEREF(__pyx_n_s_surr_noise);
    PyTuple_SET_ITEM(__pyx_t_6, 1+__pyx_t_5, __pyx_n_s_surr_noise);
    __pyx_t_3 = 0;
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_6, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(8, 166, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "../resources_source/python/pystudy.pxi":167
 * 
 *         positive_value(settings['surr_noise'], 'surr_noise')
 *         self.thisptr.setParameter(string(b'BayesOpt_surr_noise'), <double> settings['surr_noise'])             # <<<<<<<<<<<<<<
 * 
 *         (<PyStudyBayesOpt*> self.thisptr).setInitMethod(<string> settings['init_method'].encode())
 */
  __pyx_t_1 = __Pyx_PyObject_Dict_GetItem(__pyx_v_settings, __pyx_n_s_surr_noise); if (unlikely(!__pyx_t_1)) __PYX_ERR(8, 167, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_7 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_7 == (double)-1) && PyErr_Occurred())) __PYX_ERR(8, 167, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  try {
    __pyx_v_self->__pyx_base.thisptr->setParameter(std::string(((char *)"BayesOpt_surr_noise")), ((double)__pyx_t_7));
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(8, 167, __pyx_L1_error)
  }

  /* "../resources_source/python/pystudy.pxi":169
 *         self.thisptr.setParameter(string(b'BayesOpt_surr_noise'), <double> settings['surr_noise'])
 * 
 *         (<PyStudyBayesOpt*> self.thisptr).setInitMethod(<string> settings['init_method'].encode())             # <<<<<<<<<<<<<<
 *         (<PyStudyBayesOpt*> self.thisptr).setSurrName(<string> settings['surr_name'].encode())
 *         (<PyStudyBayesOpt*> self.thisptr).setScoreType(<string> settings['sc_type'].encode())
 */
  __pyx_t_2 = __Pyx_PyObject_Dict_GetItem(__pyx_v_settings, __pyx_n_s_init_method); if (unlikely(!__pyx_t_2)) __PYX_ERR(8, 169, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_encode); if (unlikely(!__pyx_t_6)) __PYX_ERR(8, 169, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_6))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_6);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_6, function);
    }
  }
  __pyx_t_1 = (__pyx_t_2) ? __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_t_2) : __Pyx_PyObject_CallNoArg(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(8, 169, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_8 = __pyx_convert_string_from_py_std__in_string(__pyx_t_1); if (unlikely(PyErr_Occurred())) __PYX_ERR(8, 169, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  try {
    ((PyStudyBayesOpt *)__pyx_v_self->__pyx_base.thisptr)->setInitMethod(((std::string)__pyx_t_8));
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(8, 169, __pyx_L1_error)
  }

  /* "../resources_source/python/pystudy.pxi":170
 * 
 *         (<PyStudyBayesOpt*> self.thisptr).setInitMethod(<string> settings['init_method'].encode())
 *         (<PyStudyBayesOpt*> self.thisptr).setSurrName(<string> settings['surr_name'].encode())             # <<<<<<<<<<<<<<
 *         (<PyStudyBayesOpt*> self.thisptr).setScoreType(<string> settings['sc_type'].encode())
 *         (<PyStudyBayesOpt*> self.thisptr).setLearningType(<string> settings['l_type'].encode())
 */
  __pyx_t_6 = __Pyx_PyObject_Dict_GetItem(__pyx_v_settings, __pyx_n_s_surr_name); if (unlikely(!__pyx_t_6)) __PYX_ERR(8, 170, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_encode); if (unlikely(!__pyx_t_2)) __PYX_ERR(8, 170, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_6)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_6) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_6) : __Pyx_PyObject_CallNoArg(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(8, 170, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_8 = __pyx_convert_string_from_py_std__in_string(__pyx_t_1); if (unlikely(PyErr_Occurred())) __PYX_ERR(8, 170, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  try {
    ((PyStudyBayesOpt *)__pyx_v_self->__pyx_base.thisptr)->setSurrName(((std::string)__pyx_t_8));
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(8, 170, __pyx_L1_error)
  }

  /* "../resources_source/python/pystudy.pxi":171
 *         (<PyStudyBayesOpt*> self.thisptr).setInitMethod(<string> settings['init_method'].encode())
 *         (<PyStudyBayesOpt*> self.thisptr).setSurrName(<string> settings['surr_name'].encode())
 *         (<PyStudyBayesOpt*> self.thisptr).setScoreType(<string> settings['sc_type'].encode())             # <<<<<<<<<<<<<<
 *         (<PyStudyBayesOpt*> self.thisptr).setLearningType(<string> settings['l_type'].encode())
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_Dict_GetItem(__pyx_v_settings, __pyx_n_s_sc_type); if (unlikely(!__pyx_t_2)) __PYX_ERR(8, 171, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_encode); if (unlikely(!__pyx_t_6)) __PYX_ERR(8, 171, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_6))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_6);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_6, function);
    }
  }
  __pyx_t_1 = (__pyx_t_2) ? __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_t_2) : __Pyx_PyObject_CallNoArg(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(8, 171, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_8 = __pyx_convert_string_from_py_std__in_string(__pyx_t_1); if (unlikely(PyErr_Occurred())) __PYX_ERR(8, 171, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  try {
    ((PyStudyBayesOpt *)__pyx_v_self->__pyx_base.thisptr)->setScoreType(((std::string)__pyx_t_8));
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(8, 171, __pyx_L1_error)
  }

  /* "../resources_source/python/pystudy.pxi":172
 *         (<PyStudyBayesOpt*> self.thisptr).setSurrName(<string> settings['surr_name'].encode())
 *         (<PyStudyBayesOpt*> self.thisptr).setScoreType(<string> settings['sc_type'].encode())
 *         (<PyStudyBayesOpt*> self.thisptr).setLearningType(<string> settings['l_type'].encode())             # <<<<<<<<<<<<<<
 * 
 * cdef class __StudyNLopt__(__Study__):
 */
  __pyx_t_6 = __Pyx_PyObject_Dict_GetItem(__pyx_v_settings, __pyx_n_s_l_type); if (unlikely(!__pyx_t_6)) __PYX_ERR(8, 172, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_encode); if (unlikely(!__pyx_t_2)) __PYX_ERR(8, 172, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_6)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_6) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_6) : __Pyx_PyObject_CallNoArg(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(8, 172, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_8 = __pyx_convert_string_from_py_std__in_string(__pyx_t_1); if (unlikely(PyErr_Occurred())) __PYX_ERR(8, 172, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  try {
    ((PyStudyBayesOpt *)__pyx_v_self->__pyx_base.thisptr)->setLearningType(((std::string)__pyx_t_8));
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(8, 172, __pyx_L1_error)
  }

  /* "../resources_source/python/pystudy.pxi":156
 *                 'l_type' : (<PyStudyBayesOpt*> self.thisptr).getLearningType().decode()}
 * 
 *     def __set_settings__(self, settings):             # <<<<<<<<<<<<<<
 *         positive_value(settings['n_init_samples'], 'n_init_samples')
 *         self.thisptr.setParameter(string(b'BayesOpt_n_init_samples'), <int> settings['n_init_samples'])
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("_agros.__StudyBayesOpt__.__set_settings__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_6_agros_17__StudyBayesOpt___7__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_6_agros_17__StudyBayesOpt___7__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6_agros_17__StudyBayesOpt___6__reduce_cython__(((struct __pyx_obj_6_agros___StudyBayesOpt__ *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6_agros_17__StudyBayesOpt___6__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_6_agros___StudyBayesOpt__ *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__52, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(2, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("_agros.__StudyBayesOpt__.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw_6_agros_17__StudyBayesOpt___9__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_6_agros_17__StudyBayesOpt___9__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6_agros_17__StudyBayesOpt___8__setstate_cython__(((struct __pyx_obj_6_agros___StudyBayesOpt__ *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6_agros_17__StudyBayesOpt___8__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_6_agros___StudyBayesOpt__ *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__53, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(2, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("_agros.__StudyBayesOpt__.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../resources_source/python/pystudy.pxi":175
 * 
 * cdef class __StudyNLopt__(__Study__):
 *     def __cinit__(self, index = -1):             # <<<<<<<<<<<<<<
 *         self.thisptr = new PyStudyNLopt(index)
 * 
 */

/* Python wrapper */
static int __pyx_pw_6_agros_14__StudyNLopt___1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_6_agros_14__StudyNLopt___1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_index = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_index,0};
    PyObject* values[1] = {0};
    values[0] = ((PyObject *)__pyx_int_neg_1);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_index);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) __PYX_ERR(8, 175, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_index = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(8, 175, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("_agros.__StudyNLopt__.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6_agros_14__StudyNLopt_____cinit__(((struct __pyx_obj_6_agros___StudyNLopt__ *)__pyx_v_self), __pyx_v_index);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6_agros_14__StudyNLopt_____cinit__(struct __pyx_obj_6_agros___StudyNLopt__ *__pyx_v_self, PyObject *__pyx_v_index) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "../resources_source/python/pystudy.pxi":176
 * cdef class __StudyNLopt__(__Study__):
 *     def __cinit__(self, index = -1):
 *         self.thisptr = new PyStudyNLopt(index)             # <<<<<<<<<<<<<<
 * 
 *         self.settings = __Parameters__(self.__get_settings__,
 */
  __pyx_t_1 = __Pyx_PyInt_As_int(__pyx_v_index); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) __PYX_ERR(8, 176, __pyx_L1_error)
  __pyx_v_self->__pyx_base.thisptr = new PyStudyNLopt(__pyx_t_1);

  /* "../resources_source/python/pystudy.pxi":178
 *         self.thisptr = new PyStudyNLopt(index)
 * 
 *         self.settings = __Parameters__(self.__get_settings__,             # <<<<<<<<<<<<<<
 *                                        self.__set_settings__)
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_Parameters); if (unlikely(!__pyx_t_3)) __PYX_ERR(8, 178, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_get_settings); if (unlikely(!__pyx_t_4)) __PYX_ERR(8, 178, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);

  /* "../resources_source/python/pystudy.pxi":179
 * 
 *         self.settings = __Parameters__(self.__get_settings__,
 *                                        self.__set_settings__)             # <<<<<<<<<<<<<<
 * 
 *     def __get_settings__(self):
 */
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_set_settings); if (unlikely(!__pyx_t_5)) __PYX_ERR(8, 179, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = NULL;
  __pyx_t_1 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_6)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_1 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_3)) {
    PyObject *__pyx_temp[3] = {__pyx_t_6, __pyx_t_4, __pyx_t_5};
    __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_1, 2+__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(8, 178, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
    PyObject *__pyx_temp[3] = {__pyx_t_6, __pyx_t_4, __pyx_t_5};
    __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_1, 2+__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(8, 178, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  } else
  #endif
  {
    __pyx_t_7 = PyTuple_New(2+__pyx_t_1); if (unlikely(!__pyx_t_7)) __PYX_ERR(8, 178, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    if (__pyx_t_6) {
      __Pyx_GIVEREF(__pyx_t_6); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_6); __pyx_t_6 = NULL;
    }
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_7, 0+__pyx_t_1, __pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_7, 1+__pyx_t_1, __pyx_t_5);
    __pyx_t_4 = 0;
    __pyx_t_5 = 0;
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_7, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(8, 178, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "../resources_source/python/pystudy.pxi":178
 *         self.thisptr = new PyStudyNLopt(index)
 * 
 *         self.settings = __Parameters__(self.__get_settings__,             # <<<<<<<<<<<<<<
 *                                        self.__set_settings__)
 * 
 */
  __Pyx_GIVEREF(__pyx_t_2);
  __Pyx_GOTREF(__pyx_v_self->__pyx_base.settings);
  __Pyx_DECREF(__pyx_v_self->__pyx_base.settings);
  __pyx_v_self->__pyx_base.settings = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "../resources_source/python/pystudy.pxi":175
 * 
 * cdef class __StudyNLopt__(__Study__):
 *     def __cinit__(self, index = -1):             # <<<<<<<<<<<<<<
 *         self.thisptr = new PyStudyNLopt(index)
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("_agros.__StudyNLopt__.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../resources_source/python/pystudy.pxi":181
 *                                        self.__set_settings__)
 * 
 *     def __get_settings__(self):             # <<<<<<<<<<<<<<
 *         return {'n_iterations' : self.thisptr.getIntParameter(b'NLopt_n_iterations'),
 *                 'xtol_rel' : self.thisptr.getDoubleParameter(b'NLopt_xtol_rel'),
 */

/* Python wrapper */
static PyObject *__pyx_pw_6_agros_14__StudyNLopt___3__get_settings__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_6_agros_14__StudyNLopt___3__get_settings__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get_settings__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6_agros_14__StudyNLopt___2__get_settings__(((struct __pyx_obj_6_agros___StudyNLopt__ *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6_agros_14__StudyNLopt___2__get_settings__(struct __pyx_obj_6_agros___StudyNLopt__ *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  std::string __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  double __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get_settings__", 0);

  /* "../resources_source/python/pystudy.pxi":182
 * 
 *     def __get_settings__(self):
 *         return {'n_iterations' : self.thisptr.getIntParameter(b'NLopt_n_iterations'),             # <<<<<<<<<<<<<<
 *                 'xtol_rel' : self.thisptr.getDoubleParameter(b'NLopt_xtol_rel'),
 *                 'xtol_abs' : self.thisptr.getDoubleParameter(b'NLopt_xtol_abs'),
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyDict_NewPresized(6); if (unlikely(!__pyx_t_1)) __PYX_ERR(8, 182, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_convert_string_from_py_std__in_string(__pyx_n_b_NLopt_n_iterations); if (unlikely(PyErr_Occurred())) __PYX_ERR(8, 182, __pyx_L1_error)
  try {
    __pyx_t_3 = __pyx_v_self->__pyx_base.thisptr->getIntParameter(__pyx_t_2);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(8, 182, __pyx_L1_error)
  }
  __pyx_t_4 = __Pyx_PyInt_From_int(__pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(8, 182, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_n_iterations, __pyx_t_4) < 0) __PYX_ERR(8, 182, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "../resources_source/python/pystudy.pxi":183
 *     def __get_settings__(self):
 *         return {'n_iterations' : self.thisptr.getIntParameter(b'NLopt_n_iterations'),
 *                 'xtol_rel' : self.thisptr.getDoubleParameter(b'NLopt_xtol_rel'),             # <<<<<<<<<<<<<<
 *                 'xtol_abs' : self.thisptr.getDoubleParameter(b'NLopt_xtol_abs'),
 *                 'ftol_rel' : self.thisptr.getDoubleParameter(b'NLopt_ftol_rel'),
 */
  __pyx_t_2 = __pyx_convert_string_from_py_std__in_string(__pyx_n_b_NLopt_xtol_rel); if (unlikely(PyErr_Occurred())) __PYX_ERR(8, 183, __pyx_L1_error)
  try {
    __pyx_t_5 = __pyx_v_self->__pyx_base.thisptr->getDoubleParameter(__pyx_t_2);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(8, 183, __pyx_L1_error)
  }
  __pyx_t_4 = PyFloat_FromDouble(__pyx_t_5); if (unlikely(!__pyx_t_4)) __PYX_ERR(8, 183, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_xtol_rel, __pyx_t_4) < 0) __PYX_ERR(8, 182, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "../resources_source/python/pystudy.pxi":184
 *         return {'n_iterations' : self.thisptr.getIntParameter(b'NLopt_n_iterations'),
 *                 'xtol_rel' : self.thisptr.getDoubleParameter(b'NLopt_xtol_rel'),
 *                 'xtol_abs' : self.thisptr.getDoubleParameter(b'NLopt_xtol_abs'),             # <<<<<<<<<<<<<<
 *                 'ftol_rel' : self.thisptr.getDoubleParameter(b'NLopt_ftol_rel'),
 *                 'ftol_abs' : self.thisptr.getDoubleParameter(b'NLopt_ftol_abs'),
 */
  __pyx_t_2 = __pyx_convert_string_from_py_std__in_string(__pyx_n_b_NLopt_xtol_abs); if (unlikely(PyErr_Occurred())) __PYX_ERR(8, 184, __pyx_L1_error)
  try {
    __pyx_t_5 = __pyx_v_self->__pyx_base.thisptr->getDoubleParameter(__pyx_t_2);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(8, 184, __pyx_L1_error)
  }
  __pyx_t_4 = PyFloat_FromDouble(__pyx_t_5); if (unlikely(!__pyx_t_4)) __PYX_ERR(8, 184, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_xtol_abs, __pyx_t_4) < 0) __PYX_ERR(8, 182, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "../resources_source/python/pystudy.pxi":185
 *                 'xtol_rel' : self.thisptr.getDoubleParameter(b'NLopt_xtol_rel'),
 *                 'xtol_abs' : self.thisptr.getDoubleParameter(b'NLopt_xtol_abs'),
 *                 'ftol_rel' : self.thisptr.getDoubleParameter(b'NLopt_ftol_rel'),             # <<<<<<<<<<<<<<
 *                 'ftol_abs' : self.thisptr.getDoubleParameter(b'NLopt_ftol_abs'),
 *                 'algorithm' : (<PyStudyNLopt*> self.thisptr).getAlgorithm().decode()}
 */
  __pyx_t_2 = __pyx_convert_string_from_py_std__in_string(__pyx_n_b_NLopt_ftol_rel); if (unlikely(PyErr_Occurred())) __PYX_ERR(8, 185, __pyx_L1_error)
  try {
    __pyx_t_5 = __pyx_v_self->__pyx_base.thisptr->getDoubleParameter(__pyx_t_2);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(8, 185, __pyx_L1_error)
  }
  __pyx_t_4 = PyFloat_FromDouble(__pyx_t_5); if (unlikely(!__pyx_t_4)) __PYX_ERR(8, 185, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_ftol_rel, __pyx_t_4) < 0) __PYX_ERR(8, 182, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "../resources_source/python/pystudy.pxi":186
 *                 'xtol_abs' : self.thisptr.getDoubleParameter(b'NLopt_xtol_abs'),
 *                 'ftol_rel' : self.thisptr.getDoubleParameter(b'NLopt_ftol_rel'),
 *                 'ftol_abs' : self.thisptr.getDoubleParameter(b'NLopt_ftol_abs'),             # <<<<<<<<<<<<<<
 *                 'algorithm' : (<PyStudyNLopt*> self.thisptr).getAlgorithm().decode()}
 * 
 */
  __pyx_t_2 = __pyx_convert_string_from_py_std__in_string(__pyx_n_b_NLopt_ftol_abs); if (unlikely(PyErr_Occurred())) __PYX_ERR(8, 186, __pyx_L1_error)
  try {
    __pyx_t_5 = __pyx_v_self->__pyx_base.thisptr->getDoubleParameter(__pyx_t_2);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(8, 186, __pyx_L1_error)
  }
  __pyx_t_4 = PyFloat_FromDouble(__pyx_t_5); if (unlikely(!__pyx_t_4)) __PYX_ERR(8, 186, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_ftol_abs, __pyx_t_4) < 0) __PYX_ERR(8, 182, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "../resources_source/python/pystudy.pxi":187
 *                 'ftol_rel' : self.thisptr.getDoubleParameter(b'NLopt_ftol_rel'),
 *                 'ftol_abs' : self.thisptr.getDoubleParameter(b'NLopt_ftol_abs'),
 *                 'algorithm' : (<PyStudyNLopt*> self.thisptr).getAlgorithm().decode()}             # <<<<<<<<<<<<<<
 * 
 *     def __set_settings__(self, settings):
 */
  __pyx_t_4 = __Pyx_decode_cpp_string(((PyStudyNLopt *)__pyx_v_self->__pyx_base.thisptr)->getAlgorithm(), 0, PY_SSIZE_T_MAX, NULL, NULL, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(8, 187, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_algorithm, __pyx_t_4) < 0) __PYX_ERR(8, 182, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../resources_source/python/pystudy.pxi":181
 *                                        self.__set_settings__)
 * 
 *     def __get_settings__(self):             # <<<<<<<<<<<<<<
 *         return {'n_iterations' : self.thisptr.getIntParameter(b'NLopt_n_iterations'),
 *                 'xtol_rel' : self.thisptr.getDoubleParameter(b'NLopt_xtol_rel'),
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("_agros.__StudyNLopt__.__get_settings__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../resources_source/python/pystudy.pxi":189
 *                 'algorithm' : (<PyStudyNLopt*> self.thisptr).getAlgorithm().decode()}
 * 
 *     def __set_settings__(self, settings):             # <<<<<<<<<<<<<<
 *         positive_value(settings['n_iterations'], 'n_iterations')
 *         self.thisptr.setParameter(string(b'NLopt_n_iterations'), <int> settings['n_iterations'])
 */

/* Python wrapper */
static PyObject *__pyx_pw_6_agros_14__StudyNLopt___5__set_settings__(PyObject *__pyx_v_self, PyObject *__pyx_v_settings); /*proto*/
static PyObject *__pyx_pw_6_agros_14__StudyNLopt___5__set_settings__(PyObject *__pyx_v_self, PyObject *__pyx_v_settings) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set_settings__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6_agros_14__StudyNLopt___4__set_settings__(((struct __pyx_obj_6_agros___StudyNLopt__ *)__pyx_v_self), ((PyObject *)__pyx_v_settings));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6_agros_14__StudyNLopt___4__set_settings__(struct __pyx_obj_6_agros___StudyNLopt__ *__pyx_v_self, PyObject *__pyx_v_settings) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  double __pyx_t_7;
  std::string __pyx_t_8;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set_settings__", 0);

  /* "../resources_source/python/pystudy.pxi":190
 * 
 *     def __set_settings__(self, settings):
 *         positive_value(settings['n_iterations'], 'n_iterations')             # <<<<<<<<<<<<<<
 *         self.thisptr.setParameter(string(b'NLopt_n_iterations'), <int> settings['n_iterations'])
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_positive_value); if (unlikely(!__pyx_t_2)) __PYX_ERR(8, 190, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_Dict_GetItem(__pyx_v_settings, __pyx_n_s_n_iterations); if (unlikely(!__pyx_t_3)) __PYX_ERR(8, 190, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = NULL;
  __pyx_t_5 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_5 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[3] = {__pyx_t_4, __pyx_t_3, __pyx_n_s_n_iterations};
    __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_5, 2+__pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(8, 190, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[3] = {__pyx_t_4, __pyx_t_3, __pyx_n_s_n_iterations};
    __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_5, 2+__pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(8, 190, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else
  #endif
  {
    __pyx_t_6 = PyTuple_New(2+__pyx_t_5); if (unlikely(!__pyx_t_6)) __PYX_ERR(8, 190, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    if (__pyx_t_4) {
      __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_4); __pyx_t_4 = NULL;
    }
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_6, 0+__pyx_t_5, __pyx_t_3);
    __Pyx_INCREF(__pyx_n_s_n_iterations);
    __Pyx_GIVEREF(__pyx_n_s_n_iterations);
    PyTuple_SET_ITEM(__pyx_t_6, 1+__pyx_t_5, __pyx_n_s_n_iterations);
    __pyx_t_3 = 0;
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_6, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(8, 190, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "../resources_source/python/pystudy.pxi":191
 *     def __set_settings__(self, settings):
 *         positive_value(settings['n_iterations'], 'n_iterations')
 *         self.thisptr.setParameter(string(b'NLopt_n_iterations'), <int> settings['n_iterations'])             # <<<<<<<<<<<<<<
 * 
 *         positive_value(settings['xtol_rel'], 'xtol_rel')
 */
  __pyx_t_1 = __Pyx_PyObject_Dict_GetItem(__pyx_v_settings, __pyx_n_s_n_iterations); if (unlikely(!__pyx_t_1)) __PYX_ERR(8, 191, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_5 = __Pyx_PyInt_As_int(__pyx_t_1); if (unlikely((__pyx_t_5 == (int)-1) && PyErr_Occurred())) __PYX_ERR(8, 191, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  try {
    __pyx_v_self->__pyx_base.thisptr->setParameter(std::string(((char *)"NLopt_n_iterations")), ((int)__pyx_t_5));
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(8, 191, __pyx_L1_error)
  }

  /* "../resources_source/python/pystudy.pxi":193
 *         self.thisptr.setParameter(string(b'NLopt_n_iterations'), <int> settings['n_iterations'])
 * 
 *         positive_value(settings['xtol_rel'], 'xtol_rel')             # <<<<<<<<<<<<<<
 *         self.thisptr.setParameter(string(b'NLopt_xtol_rel'), <double> settings['xtol_rel'])
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_positive_value); if (unlikely(!__pyx_t_2)) __PYX_ERR(8, 193, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_6 = __Pyx_PyObject_Dict_GetItem(__pyx_v_settings, __pyx_n_s_xtol_rel); if (unlikely(!__pyx_t_6)) __PYX_ERR(8, 193, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_3 = NULL;
  __pyx_t_5 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_5 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[3] = {__pyx_t_3, __pyx_t_6, __pyx_n_s_xtol_rel};
    __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_5, 2+__pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(8, 193, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[3] = {__pyx_t_3, __pyx_t_6, __pyx_n_s_xtol_rel};
    __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_5, 2+__pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(8, 193, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  } else
  #endif
  {
    __pyx_t_4 = PyTuple_New(2+__pyx_t_5); if (unlikely(!__pyx_t_4)) __PYX_ERR(8, 193, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    if (__pyx_t_3) {
      __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_3); __pyx_t_3 = NULL;
    }
    __Pyx_GIVEREF(__pyx_t_6);
    PyTuple_SET_ITEM(__pyx_t_4, 0+__pyx_t_5, __pyx_t_6);
    __Pyx_INCREF(__pyx_n_s_xtol_rel);
    __Pyx_GIVEREF(__pyx_n_s_xtol_rel);
    PyTuple_SET_ITEM(__pyx_t_4, 1+__pyx_t_5, __pyx_n_s_xtol_rel);
    __pyx_t_6 = 0;
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_4, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(8, 193, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "../resources_source/python/pystudy.pxi":194
 * 
 *         positive_value(settings['xtol_rel'], 'xtol_rel')
 *         self.thisptr.setParameter(string(b'NLopt_xtol_rel'), <double> settings['xtol_rel'])             # <<<<<<<<<<<<<<
 * 
 *         positive_value(settings['xtol_abs'], 'xtol_abs')
 */
  __pyx_t_1 = __Pyx_PyObject_Dict_GetItem(__pyx_v_settings, __pyx_n_s_xtol_rel); if (unlikely(!__pyx_t_1)) __PYX_ERR(8, 194, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_7 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_7 == (double)-1) && PyErr_Occurred())) __PYX_ERR(8, 194, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  try {
    __pyx_v_self->__pyx_base.thisptr->setParameter(std::string(((char *)"NLopt_xtol_rel")), ((double)__pyx_t_7));
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(8, 194, __pyx_L1_error)
  }

  /* "../resources_source/python/pystudy.pxi":196
 *         self.thisptr.setParameter(string(b'NLopt_xtol_rel'), <double> settings['xtol_rel'])
 * 
 *         positive_value(settings['xtol_abs'], 'xtol_abs')             # <<<<<<<<<<<<<<
 *         self.thisptr.setParameter(string(b'NLopt_xtol_abs'), <double> settings['xtol_abs'])
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_positive_value); if (unlikely(!__pyx_t_2)) __PYX_ERR(8, 196, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = __Pyx_PyObject_Dict_GetItem(__pyx_v_settings, __pyx_n_s_xtol_abs); if (unlikely(!__pyx_t_4)) __PYX_ERR(8, 196, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_6 = NULL;
  __pyx_t_5 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_6)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_5 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[3] = {__pyx_t_6, __pyx_t_4, __pyx_n_s_xtol_abs};
    __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_5, 2+__pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(8, 196, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[3] = {__pyx_t_6, __pyx_t_4, __pyx_n_s_xtol_abs};
    __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_5, 2+__pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(8, 196, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  } else
  #endif
  {
    __pyx_t_3 = PyTuple_New(2+__pyx_t_5); if (unlikely(!__pyx_t_3)) __PYX_ERR(8, 196, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (__pyx_t_6) {
      __Pyx_GIVEREF(__pyx_t_6); PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_6); __pyx_t_6 = NULL;
    }
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_3, 0+__pyx_t_5, __pyx_t_4);
    __Pyx_INCREF(__pyx_n_s_xtol_abs);
    __Pyx_GIVEREF(__pyx_n_s_xtol_abs);
    PyTuple_SET_ITEM(__pyx_t_3, 1+__pyx_t_5, __pyx_n_s_xtol_abs);
    __pyx_t_4 = 0;
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_3, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(8, 196, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "../resources_source/python/pystudy.pxi":197
 * 
 *         positive_value(settings['xtol_abs'], 'xtol_abs')
 *         self.thisptr.setParameter(string(b'NLopt_xtol_abs'), <double> settings['xtol_abs'])             # <<<<<<<<<<<<<<
 * 
 *         positive_value(settings['ftol_rel'], 'ftol_rel')
 */
  __pyx_t_1 = __Pyx_PyObject_Dict_GetItem(__pyx_v_settings, __pyx_n_s_xtol_abs); if (unlikely(!__pyx_t_1)) __PYX_ERR(8, 197, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_7 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_7 == (double)-1) && PyErr_Occurred())) __PYX_ERR(8, 197, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  try {
    __pyx_v_self->__pyx_base.thisptr->setParameter(std::string(((char *)"NLopt_xtol_abs")), ((double)__pyx_t_7));
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(8, 197, __pyx_L1_error)
  }

  /* "../resources_source/python/pystudy.pxi":199
 *         self.thisptr.setParameter(string(b'NLopt_xtol_abs'), <double> settings['xtol_abs'])
 * 
 *         positive_value(settings['ftol_rel'], 'ftol_rel')             # <<<<<<<<<<<<<<
 *         self.thisptr.setParameter(string(b'NLopt_ftol_rel'), <double> settings['ftol_rel'])
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_positive_value); if (unlikely(!__pyx_t_2)) __PYX_ERR(8, 199, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_Dict_GetItem(__pyx_v_settings, __pyx_n_s_ftol_rel); if (unlikely(!__pyx_t_3)) __PYX_ERR(8, 199, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = NULL;
  __pyx_t_5 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_5 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[3] = {__pyx_t_4, __pyx_t_3, __pyx_n_s_ftol_rel};
    __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_5, 2+__pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(8, 199, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[3] = {__pyx_t_4, __pyx_t_3, __pyx_n_s_ftol_rel};
    __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_5, 2+__pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(8, 199, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else
  #endif
  {
    __pyx_t_6 = PyTuple_New(2+__pyx_t_5); if (unlikely(!__pyx_t_6)) __PYX_ERR(8, 199, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    if (__pyx_t_4) {
      __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_4); __pyx_t_4 = NULL;
    }
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_6, 0+__pyx_t_5, __pyx_t_3);
    __Pyx_INCREF(__pyx_n_s_ftol_rel);
    __Pyx_GIVEREF(__pyx_n_s_ftol_rel);
    PyTuple_SET_ITEM(__pyx_t_6, 1+__pyx_t_5, __pyx_n_s_ftol_rel);
    __pyx_t_3 = 0;
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_6, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(8, 199, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "../resources_source/python/pystudy.pxi":200
 * 
 *         positive_value(settings['ftol_rel'], 'ftol_rel')
 *         self.thisptr.setParameter(string(b'NLopt_ftol_rel'), <double> settings['ftol_rel'])             # <<<<<<<<<<<<<<
 * 
 *         positive_value(settings['ftol_abs'], 'ftol_abs')
 */
  __pyx_t_1 = __Pyx_PyObject_Dict_GetItem(__pyx_v_settings, __pyx_n_s_ftol_rel); if (unlikely(!__pyx_t_1)) __PYX_ERR(8, 200, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_7 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_7 == (double)-1) && PyErr_Occurred())) __PYX_ERR(8, 200, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  try {
    __pyx_v_self->__pyx_base.thisptr->setParameter(std::string(((char *)"NLopt_ftol_rel")), ((double)__pyx_t_7));
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(8, 200, __pyx_L1_error)
  }

  /* "../resources_source/python/pystudy.pxi":202
 *         self.thisptr.setParameter(string(b'NLopt_ftol_rel'), <double> settings['ftol_rel'])
 * 
 *         positive_value(settings['ftol_abs'], 'ftol_abs')             # <<<<<<<<<<<<<<
 *         self.thisptr.setParameter(string(b'NLopt_ftol_abs'), <double> settings['ftol_abs'])
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_positive_value); if (unlikely(!__pyx_t_2)) __PYX_ERR(8, 202, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_6 = __Pyx_PyObject_Dict_GetItem(__pyx_v_settings, __pyx_n_s_ftol_abs); if (unlikely(!__pyx_t_6)) __PYX_ERR(8, 202, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_3 = NULL;
  __pyx_t_5 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_5 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[3] = {__pyx_t_3, __pyx_t_6, __pyx_n_s_ftol_abs};
    __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_5, 2+__pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(8, 202, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[3] = {__pyx_t_3, __pyx_t_6, __pyx_n_s_ftol_abs};
    __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_5, 2+__pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(8, 202, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  } else
  #endif
  {
    __pyx_t_4 = PyTuple_New(2+__pyx_t_5); if (unlikely(!__pyx_t_4)) __PYX_ERR(8, 202, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    if (__pyx_t_3) {
      __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_3); __pyx_t_3 = NULL;
    }
    __Pyx_GIVEREF(__pyx_t_6);
    PyTuple_SET_ITEM(__pyx_t_4, 0+__pyx_t_5, __pyx_t_6);
    __Pyx_INCREF(__pyx_n_s_ftol_abs);
    __Pyx_GIVEREF(__pyx_n_s_ftol_abs);
    PyTuple_SET_ITEM(__pyx_t_4, 1+__pyx_t_5, __pyx_n_s_ftol_abs);
    __pyx_t_6 = 0;
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_4, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(8, 202, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "../resources_source/python/pystudy.pxi":203
 * 
 *         positive_value(settings['ftol_abs'], 'ftol_abs')
 *         self.thisptr.setParameter(string(b'NLopt_ftol_abs'), <double> settings['ftol_abs'])             # <<<<<<<<<<<<<<
 * 
 *         (<PyStudyNLopt*> self.thisptr).setAlgorithm(<string> settings['algorithm'].encode())
 */
  __pyx_t_1 = __Pyx_PyObject_Dict_GetItem(__pyx_v_settings, __pyx_n_s_ftol_abs); if (unlikely(!__pyx_t_1)) __PYX_ERR(8, 203, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_7 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_7 == (double)-1) && PyErr_Occurred())) __PYX_ERR(8, 203, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  try {
    __pyx_v_self->__pyx_base.thisptr->setParameter(std::string(((char *)"NLopt_ftol_abs")), ((double)__pyx_t_7));
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(8, 203, __pyx_L1_error)
  }

  /* "../resources_source/python/pystudy.pxi":205
 *         self.thisptr.setParameter(string(b'NLopt_ftol_abs'), <double> settings['ftol_abs'])
 * 
 *         (<PyStudyNLopt*> self.thisptr).setAlgorithm(<string> settings['algorithm'].encode())             # <<<<<<<<<<<<<<
 * 
 * cdef class __StudyNSGA2__(__Study__):
 */
  __pyx_t_2 = __Pyx_PyObject_Dict_GetItem(__pyx_v_settings, __pyx_n_s_algorithm); if (unlikely(!__pyx_t_2)) __PYX_ERR(8, 205, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_encode); if (unlikely(!__pyx_t_4)) __PYX_ERR(8, 205, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  __pyx_t_1 = (__pyx_t_2) ? __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_2) : __Pyx_PyObject_CallNoArg(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(8, 205, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_8 = __pyx_convert_string_from_py_std__in_string(__pyx_t_1); if (unlikely(PyErr_Occurred())) __PYX_ERR(8, 205, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  try {
    ((PyStudyNLopt *)__pyx_v_self->__pyx_base.thisptr)->setAlgorithm(((std::string)__pyx_t_8));
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(8, 205, __pyx_L1_error)
  }

  /* "../resources_source/python/pystudy.pxi":189
 *                 'algorithm' : (<PyStudyNLopt*> self.thisptr).getAlgorithm().decode()}
 * 
 *     def __set_settings__(self, settings):             # <<<<<<<<<<<<<<
 *         positive_value(settings['n_iterations'], 'n_iterations')
 *         self.thisptr.setParameter(string(b'NLopt_n_iterations'), <int> settings['n_iterations'])
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("_agros.__StudyNLopt__.__set_settings__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_6_agros_14__StudyNLopt___7__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_6_agros_14__StudyNLopt___7__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6_agros_14__StudyNLopt___6__reduce_cython__(((struct __pyx_obj_6_agros___StudyNLopt__ *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6_agros_14__StudyNLopt___6__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_6_agros___StudyNLopt__ *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__54, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(2, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("_agros.__StudyNLopt__.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw_6_agros_14__StudyNLopt___9__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_6_agros_14__StudyNLopt___9__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6_agros_14__StudyNLopt___8__setstate_cython__(((struct __pyx_obj_6_agros___StudyNLopt__ *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6_agros_14__StudyNLopt___8__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_6_agros___StudyNLopt__ *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__55, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(2, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("_agros.__StudyNLopt__.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../resources_source/python/pystudy.pxi":208
 * 
 * cdef class __StudyNSGA2__(__Study__):
 *     def __cinit__(self, index = -1):             # <<<<<<<<<<<<<<
 *         self.thisptr = new PyStudyNSGA2(index)
 * 
 */

/* Python wrapper */
static int __pyx_pw_6_agros_14__StudyNSGA2___1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_6_agros_14__StudyNSGA2___1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_index = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_index,0};
    PyObject* values[1] = {0};
    values[0] = ((PyObject *)__pyx_int_neg_1);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_index);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) __PYX_ERR(8, 208, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_index = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(8, 208, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("_agros.__StudyNSGA2__.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6_agros_14__StudyNSGA2_____cinit__(((struct __pyx_obj_6_agros___StudyNSGA2__ *)__pyx_v_self), __pyx_v_index);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6_agros_14__StudyNSGA2_____cinit__(struct __pyx_obj_6_agros___StudyNSGA2__ *__pyx_v_self, PyObject *__pyx_v_index) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "../resources_source/python/pystudy.pxi":209
 * cdef class __StudyNSGA2__(__Study__):
 *     def __cinit__(self, index = -1):
 *         self.thisptr = new PyStudyNSGA2(index)             # <<<<<<<<<<<<<<
 * 
 *         self.settings = __Parameters__(self.__get_settings__,
 */
  __pyx_t_1 = __Pyx_PyInt_As_int(__pyx_v_index); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) __PYX_ERR(8, 209, __pyx_L1_error)
  __pyx_v_self->__pyx_base.thisptr = new PyStudyNSGA2(__pyx_t_1);

  /* "../resources_source/python/pystudy.pxi":211
 *         self.thisptr = new PyStudyNSGA2(index)
 * 
 *         self.settings = __Parameters__(self.__get_settings__,             # <<<<<<<<<<<<<<
 *                                        self.__set_settings__)
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_Parameters); if (unlikely(!__pyx_t_3)) __PYX_ERR(8, 211, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_get_settings); if (unlikely(!__pyx_t_4)) __PYX_ERR(8, 211, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);

  /* "../resources_source/python/pystudy.pxi":212
 * 
 *         self.settings = __Parameters__(self.__get_settings__,
 *                                        self.__set_settings__)             # <<<<<<<<<<<<<<
 * 
 *     def __get_settings__(self):
 */
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_set_settings); if (unlikely(!__pyx_t_5)) __PYX_ERR(8, 212, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = NULL;
  __pyx_t_1 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_6)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_1 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_3)) {
    PyObject *__pyx_temp[3] = {__pyx_t_6, __pyx_t_4, __pyx_t_5};
    __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_1, 2+__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(8, 211, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
    PyObject *__pyx_temp[3] = {__pyx_t_6, __pyx_t_4, __pyx_t_5};
    __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_1, 2+__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(8, 211, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  } else
  #endif
  {
    __pyx_t_7 = PyTuple_New(2+__pyx_t_1); if (unlikely(!__pyx_t_7)) __PYX_ERR(8, 211, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    if (__pyx_t_6) {
      __Pyx_GIVEREF(__pyx_t_6); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_6); __pyx_t_6 = NULL;
    }
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_7, 0+__pyx_t_1, __pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_7, 1+__pyx_t_1, __pyx_t_5);
    __pyx_t_4 = 0;
    __pyx_t_5 = 0;
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_7, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(8, 211, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "../resources_source/python/pystudy.pxi":211
 *         self.thisptr = new PyStudyNSGA2(index)
 * 
 *         self.settings = __Parameters__(self.__get_settings__,             # <<<<<<<<<<<<<<
 *                                        self.__set_settings__)
 * 
 */
  __Pyx_GIVEREF(__pyx_t_2);
  __Pyx_GOTREF(__pyx_v_self->__pyx_base.settings);
  __Pyx_DECREF(__pyx_v_self->__pyx_base.settings);
  __pyx_v_self->__pyx_base.settings = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "../resources_source/python/pystudy.pxi":208
 * 
 * cdef class __StudyNSGA2__(__Study__):
 *     def __cinit__(self, index = -1):             # <<<<<<<<<<<<<<
 *         self.thisptr = new PyStudyNSGA2(index)
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("_agros.__StudyNSGA2__.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../resources_source/python/pystudy.pxi":214
 *                                        self.__set_settings__)
 * 
 *     def __get_settings__(self):             # <<<<<<<<<<<<<<
 *         return {'popsize' : self.thisptr.getIntParameter(b'NSGA2_popsize'),
 *                 'ngen' : self.thisptr.getIntParameter(b'NSGA2_ngen'),
 */

/* Python wrapper */
static PyObject *__pyx_pw_6_agros_14__StudyNSGA2___3__get_settings__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_6_agros_14__StudyNSGA2___3__get_settings__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get_settings__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6_agros_14__StudyNSGA2___2__get_settings__(((struct __pyx_obj_6_agros___StudyNSGA2__ *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6_agros_14__StudyNSGA2___2__get_settings__(struct __pyx_obj_6_agros___StudyNSGA2__ *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  std::string __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  double __pyx_t_5;
  bool __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get_settings__", 0);

  /* "../resources_source/python/pystudy.pxi":215
 * 
 *     def __get_settings__(self):
 *         return {'popsize' : self.thisptr.getIntParameter(b'NSGA2_popsize'),             # <<<<<<<<<<<<<<
 *                 'ngen' : self.thisptr.getIntParameter(b'NSGA2_ngen'),
 *                 'pcross' : self.thisptr.getDoubleParameter(b'NSGA2_pcross'),
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyDict_NewPresized(7); if (unlikely(!__pyx_t_1)) __PYX_ERR(8, 215, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_convert_string_from_py_std__in_string(__pyx_n_b_NSGA2_popsize); if (unlikely(PyErr_Occurred())) __PYX_ERR(8, 215, __pyx_L1_error)
  try {
    __pyx_t_3 = __pyx_v_self->__pyx_base.thisptr->getIntParameter(__pyx_t_2);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(8, 215, __pyx_L1_error)
  }
  __pyx_t_4 = __Pyx_PyInt_From_int(__pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(8, 215, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_popsize, __pyx_t_4) < 0) __PYX_ERR(8, 215, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "../resources_source/python/pystudy.pxi":216
 *     def __get_settings__(self):
 *         return {'popsize' : self.thisptr.getIntParameter(b'NSGA2_popsize'),
 *                 'ngen' : self.thisptr.getIntParameter(b'NSGA2_ngen'),             # <<<<<<<<<<<<<<
 *                 'pcross' : self.thisptr.getDoubleParameter(b'NSGA2_pcross'),
 *                 'pmut' : self.thisptr.getDoubleParameter(b'NSGA2_pmut'),
 */
  __pyx_t_2 = __pyx_convert_string_from_py_std__in_string(__pyx_n_b_NSGA2_ngen); if (unlikely(PyErr_Occurred())) __PYX_ERR(8, 216, __pyx_L1_error)
  try {
    __pyx_t_3 = __pyx_v_self->__pyx_base.thisptr->getIntParameter(__pyx_t_2);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(8, 216, __pyx_L1_error)
  }
  __pyx_t_4 = __Pyx_PyInt_From_int(__pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(8, 216, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_ngen, __pyx_t_4) < 0) __PYX_ERR(8, 215, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "../resources_source/python/pystudy.pxi":217
 *         return {'popsize' : self.thisptr.getIntParameter(b'NSGA2_popsize'),
 *                 'ngen' : self.thisptr.getIntParameter(b'NSGA2_ngen'),
 *                 'pcross' : self.thisptr.getDoubleParameter(b'NSGA2_pcross'),             # <<<<<<<<<<<<<<
 *                 'pmut' : self.thisptr.getDoubleParameter(b'NSGA2_pmut'),
 *                 'eta_c' : self.thisptr.getDoubleParameter(b'NSGA2_eta_c'),
 */
  __pyx_t_2 = __pyx_convert_string_from_py_std__in_string(__pyx_n_b_NSGA2_pcross); if (unlikely(PyErr_Occurred())) __PYX_ERR(8, 217, __pyx_L1_error)
  try {
    __pyx_t_5 = __pyx_v_self->__pyx_base.thisptr->getDoubleParameter(__pyx_t_2);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(8, 217, __pyx_L1_error)
  }
  __pyx_t_4 = PyFloat_FromDouble(__pyx_t_5); if (unlikely(!__pyx_t_4)) __PYX_ERR(8, 217, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_pcross, __pyx_t_4) < 0) __PYX_ERR(8, 215, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "../resources_source/python/pystudy.pxi":218
 *                 'ngen' : self.thisptr.getIntParameter(b'NSGA2_ngen'),
 *                 'pcross' : self.thisptr.getDoubleParameter(b'NSGA2_pcross'),
 *                 'pmut' : self.thisptr.getDoubleParameter(b'NSGA2_pmut'),             # <<<<<<<<<<<<<<
 *                 'eta_c' : self.thisptr.getDoubleParameter(b'NSGA2_eta_c'),
 *                 'eta_m' : self.thisptr.getDoubleParameter(b'NSGA2_eta_m'),
 */
  __pyx_t_2 = __pyx_convert_string_from_py_std__in_string(__pyx_n_b_NSGA2_pmut); if (unlikely(PyErr_Occurred())) __PYX_ERR(8, 218, __pyx_L1_error)
  try {
    __pyx_t_5 = __pyx_v_self->__pyx_base.thisptr->getDoubleParameter(__pyx_t_2);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(8, 218, __pyx_L1_error)
  }
  __pyx_t_4 = PyFloat_FromDouble(__pyx_t_5); if (unlikely(!__pyx_t_4)) __PYX_ERR(8, 218, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_pmut, __pyx_t_4) < 0) __PYX_ERR(8, 215, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "../resources_source/python/pystudy.pxi":219
 *                 'pcross' : self.thisptr.getDoubleParameter(b'NSGA2_pcross'),
 *                 'pmut' : self.thisptr.getDoubleParameter(b'NSGA2_pmut'),
 *                 'eta_c' : self.thisptr.getDoubleParameter(b'NSGA2_eta_c'),             # <<<<<<<<<<<<<<
 *                 'eta_m' : self.thisptr.getDoubleParameter(b'NSGA2_eta_m'),
 *                 'crowdobj' : self.thisptr.getBoolParameter(b'NSGA2_crowdobj')}
 */
  __pyx_t_2 = __pyx_convert_string_from_py_std__in_string(__pyx_n_b_NSGA2_eta_c); if (unlikely(PyErr_Occurred())) __PYX_ERR(8, 219, __pyx_L1_error)
  try {
    __pyx_t_5 = __pyx_v_self->__pyx_base.thisptr->getDoubleParameter(__pyx_t_2);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(8, 219, __pyx_L1_error)
  }
  __pyx_t_4 = PyFloat_FromDouble(__pyx_t_5); if (unlikely(!__pyx_t_4)) __PYX_ERR(8, 219, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_eta_c, __pyx_t_4) < 0) __PYX_ERR(8, 215, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "../resources_source/python/pystudy.pxi":220
 *                 'pmut' : self.thisptr.getDoubleParameter(b'NSGA2_pmut'),
 *                 'eta_c' : self.thisptr.getDoubleParameter(b'NSGA2_eta_c'),
 *                 'eta_m' : self.thisptr.getDoubleParameter(b'NSGA2_eta_m'),             # <<<<<<<<<<<<<<
 *                 'crowdobj' : self.thisptr.getBoolParameter(b'NSGA2_crowdobj')}
 * 
 */
  __pyx_t_2 = __pyx_convert_string_from_py_std__in_string(__pyx_n_b_NSGA2_eta_m); if (unlikely(PyErr_Occurred())) __PYX_ERR(8, 220, __pyx_L1_error)
  try {
    __pyx_t_5 = __pyx_v_self->__pyx_base.thisptr->getDoubleParameter(__pyx_t_2);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(8, 220, __pyx_L1_error)
  }
  __pyx_t_4 = PyFloat_FromDouble(__pyx_t_5); if (unlikely(!__pyx_t_4)) __PYX_ERR(8, 220, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_eta_m, __pyx_t_4) < 0) __PYX_ERR(8, 215, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "../resources_source/python/pystudy.pxi":221
 *                 'eta_c' : self.thisptr.getDoubleParameter(b'NSGA2_eta_c'),
 *                 'eta_m' : self.thisptr.getDoubleParameter(b'NSGA2_eta_m'),
 *                 'crowdobj' : self.thisptr.getBoolParameter(b'NSGA2_crowdobj')}             # <<<<<<<<<<<<<<
 * 
 *     def __set_settings__(self, settings):
 */
  __pyx_t_2 = __pyx_convert_string_from_py_std__in_string(__pyx_n_b_NSGA2_crowdobj); if (unlikely(PyErr_Occurred())) __PYX_ERR(8, 221, __pyx_L1_error)
  try {
    __pyx_t_6 = __pyx_v_self->__pyx_base.thisptr->getBoolParameter(__pyx_t_2);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(8, 221, __pyx_L1_error)
  }
  __pyx_t_4 = __Pyx_PyBool_FromLong(__pyx_t_6); if (unlikely(!__pyx_t_4)) __PYX_ERR(8, 221, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_crowdobj, __pyx_t_4) < 0) __PYX_ERR(8, 215, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../resources_source/python/pystudy.pxi":214
 *                                        self.__set_settings__)
 * 
 *     def __get_settings__(self):             # <<<<<<<<<<<<<<
 *         return {'popsize' : self.thisptr.getIntParameter(b'NSGA2_popsize'),
 *                 'ngen' : self.thisptr.getIntParameter(b'NSGA2_ngen'),
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("_agros.__StudyNSGA2__.__get_settings__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../resources_source/python/pystudy.pxi":223
 *                 'crowdobj' : self.thisptr.getBoolParameter(b'NSGA2_crowdobj')}
 * 
 *     def __set_settings__(self, settings):             # <<<<<<<<<<<<<<
 *         positive_value(settings['popsize'], 'popsize')
 *         self.thisptr.setParameter(string(b'NSGA2_popsize'), <int> settings['popsize'])
 */

/* Python wrapper */
static PyObject *__pyx_pw_6_agros_14__StudyNSGA2___5__set_settings__(PyObject *__pyx_v_self, PyObject *__pyx_v_settings); /*proto*/
static PyObject *__pyx_pw_6_agros_14__StudyNSGA2___5__set_settings__(PyObject *__pyx_v_self, PyObject *__pyx_v_settings) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set_settings__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6_agros_14__StudyNSGA2___4__set_settings__(((struct __pyx_obj_6_agros___StudyNSGA2__ *)__pyx_v_self), ((PyObject *)__pyx_v_settings));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6_agros_14__StudyNSGA2___4__set_settings__(struct __pyx_obj_6_agros___StudyNSGA2__ *__pyx_v_self, PyObject *__pyx_v_settings) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  double __pyx_t_7;
  bool __pyx_t_8;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set_settings__", 0);

  /* "../resources_source/python/pystudy.pxi":224
 * 
 *     def __set_settings__(self, settings):
 *         positive_value(settings['popsize'], 'popsize')             # <<<<<<<<<<<<<<
 *         self.thisptr.setParameter(string(b'NSGA2_popsize'), <int> settings['popsize'])
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_positive_value); if (unlikely(!__pyx_t_2)) __PYX_ERR(8, 224, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_Dict_GetItem(__pyx_v_settings, __pyx_n_s_popsize); if (unlikely(!__pyx_t_3)) __PYX_ERR(8, 224, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = NULL;
  __pyx_t_5 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_5 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[3] = {__pyx_t_4, __pyx_t_3, __pyx_n_s_popsize};
    __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_5, 2+__pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(8, 224, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[3] = {__pyx_t_4, __pyx_t_3, __pyx_n_s_popsize};
    __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_5, 2+__pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(8, 224, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else
  #endif
  {
    __pyx_t_6 = PyTuple_New(2+__pyx_t_5); if (unlikely(!__pyx_t_6)) __PYX_ERR(8, 224, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    if (__pyx_t_4) {
      __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_4); __pyx_t_4 = NULL;
    }
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_6, 0+__pyx_t_5, __pyx_t_3);
    __Pyx_INCREF(__pyx_n_s_popsize);
    __Pyx_GIVEREF(__pyx_n_s_popsize);
    PyTuple_SET_ITEM(__pyx_t_6, 1+__pyx_t_5, __pyx_n_s_popsize);
    __pyx_t_3 = 0;
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_6, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(8, 224, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "../resources_source/python/pystudy.pxi":225
 *     def __set_settings__(self, settings):
 *         positive_value(settings['popsize'], 'popsize')
 *         self.thisptr.setParameter(string(b'NSGA2_popsize'), <int> settings['popsize'])             # <<<<<<<<<<<<<<
 * 
 *         positive_value(settings['ngen'], 'ngen')
 */
  __pyx_t_1 = __Pyx_PyObject_Dict_GetItem(__pyx_v_settings, __pyx_n_s_popsize); if (unlikely(!__pyx_t_1)) __PYX_ERR(8, 225, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_5 = __Pyx_PyInt_As_int(__pyx_t_1); if (unlikely((__pyx_t_5 == (int)-1) && PyErr_Occurred())) __PYX_ERR(8, 225, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  try {
    __pyx_v_self->__pyx_base.thisptr->setParameter(std::string(((char *)"NSGA2_popsize")), ((int)__pyx_t_5));
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(8, 225, __pyx_L1_error)
  }

  /* "../resources_source/python/pystudy.pxi":227
 *         self.thisptr.setParameter(string(b'NSGA2_popsize'), <int> settings['popsize'])
 * 
 *         positive_value(settings['ngen'], 'ngen')             # <<<<<<<<<<<<<<
 *         self.thisptr.setParameter(string(b'NSGA2_ngen'), <int> settings['ngen'])
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_positive_value); if (unlikely(!__pyx_t_2)) __PYX_ERR(8, 227, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_6 = __Pyx_PyObject_Dict_GetItem(__pyx_v_settings, __pyx_n_s_ngen); if (unlikely(!__pyx_t_6)) __PYX_ERR(8, 227, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_3 = NULL;
  __pyx_t_5 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_5 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[3] = {__pyx_t_3, __pyx_t_6, __pyx_n_s_ngen};
    __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_5, 2+__pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(8, 227, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[3] = {__pyx_t_3, __pyx_t_6, __pyx_n_s_ngen};
    __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_5, 2+__pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(8, 227, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  } else
  #endif
  {
    __pyx_t_4 = PyTuple_New(2+__pyx_t_5); if (unlikely(!__pyx_t_4)) __PYX_ERR(8, 227, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    if (__pyx_t_3) {
      __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_3); __pyx_t_3 = NULL;
    }
    __Pyx_GIVEREF(__pyx_t_6);
    PyTuple_SET_ITEM(__pyx_t_4, 0+__pyx_t_5, __pyx_t_6);
    __Pyx_INCREF(__pyx_n_s_ngen);
    __Pyx_GIVEREF(__pyx_n_s_ngen);
    PyTuple_SET_ITEM(__pyx_t_4, 1+__pyx_t_5, __pyx_n_s_ngen);
    __pyx_t_6 = 0;
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_4, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(8, 227, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "../resources_source/python/pystudy.pxi":228
 * 
 *         positive_value(settings['ngen'], 'ngen')
 *         self.thisptr.setParameter(string(b'NSGA2_ngen'), <int> settings['ngen'])             # <<<<<<<<<<<<<<
 * 
 *         positive_value(settings['pcross'], 'pcross')
 */
  __pyx_t_1 = __Pyx_PyObject_Dict_GetItem(__pyx_v_settings, __pyx_n_s_ngen); if (unlikely(!__pyx_t_1)) __PYX_ERR(8, 228, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_5 = __Pyx_PyInt_As_int(__pyx_t_1); if (unlikely((__pyx_t_5 == (int)-1) && PyErr_Occurred())) __PYX_ERR(8, 228, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  try {
    __pyx_v_self->__pyx_base.thisptr->setParameter(std::string(((char *)"NSGA2_ngen")), ((int)__pyx_t_5));
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(8, 228, __pyx_L1_error)
  }

  /* "../resources_source/python/pystudy.pxi":230
 *         self.thisptr.setParameter(string(b'NSGA2_ngen'), <int> settings['ngen'])
 * 
 *         positive_value(settings['pcross'], 'pcross')             # <<<<<<<<<<<<<<
 *         self.thisptr.setParameter(string(b'NSGA2_pcross'), <double> settings['pcross'])
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_positive_value); if (unlikely(!__pyx_t_2)) __PYX_ERR(8, 230, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = __Pyx_PyObject_Dict_GetItem(__pyx_v_settings, __pyx_n_s_pcross); if (unlikely(!__pyx_t_4)) __PYX_ERR(8, 230, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_6 = NULL;
  __pyx_t_5 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_6)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_5 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[3] = {__pyx_t_6, __pyx_t_4, __pyx_n_s_pcross};
    __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_5, 2+__pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(8, 230, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[3] = {__pyx_t_6, __pyx_t_4, __pyx_n_s_pcross};
    __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_5, 2+__pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(8, 230, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  } else
  #endif
  {
    __pyx_t_3 = PyTuple_New(2+__pyx_t_5); if (unlikely(!__pyx_t_3)) __PYX_ERR(8, 230, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (__pyx_t_6) {
      __Pyx_GIVEREF(__pyx_t_6); PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_6); __pyx_t_6 = NULL;
    }
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_3, 0+__pyx_t_5, __pyx_t_4);
    __Pyx_INCREF(__pyx_n_s_pcross);
    __Pyx_GIVEREF(__pyx_n_s_pcross);
    PyTuple_SET_ITEM(__pyx_t_3, 1+__pyx_t_5, __pyx_n_s_pcross);
    __pyx_t_4 = 0;
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_3, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(8, 230, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "../resources_source/python/pystudy.pxi":231
 * 
 *         positive_value(settings['pcross'], 'pcross')
 *         self.thisptr.setParameter(string(b'NSGA2_pcross'), <double> settings['pcross'])             # <<<<<<<<<<<<<<
 * 
 *         positive_value(settings['pmut'], 'pmut')
 */
  __pyx_t_1 = __Pyx_PyObject_Dict_GetItem(__pyx_v_settings, __pyx_n_s_pcross); if (unlikely(!__pyx_t_1)) __PYX_ERR(8, 231, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_7 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_7 == (double)-1) && PyErr_Occurred())) __PYX_ERR(8, 231, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  try {
    __pyx_v_self->__pyx_base.thisptr->setParameter(std::string(((char *)"NSGA2_pcross")), ((double)__pyx_t_7));
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(8, 231, __pyx_L1_error)
  }

  /* "../resources_source/python/pystudy.pxi":233
 *         self.thisptr.setParameter(string(b'NSGA2_pcross'), <double> settings['pcross'])
 * 
 *         positive_value(settings['pmut'], 'pmut')             # <<<<<<<<<<<<<<
 *         self.thisptr.setParameter(string(b'NSGA2_pmut'), <double> settings['pmut'])
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_positive_value); if (unlikely(!__pyx_t_2)) __PYX_ERR(8, 233, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_Dict_GetItem(__pyx_v_settings, __pyx_n_s_pmut); if (unlikely(!__pyx_t_3)) __PYX_ERR(8, 233, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = NULL;
  __pyx_t_5 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_5 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[3] = {__pyx_t_4, __pyx_t_3, __pyx_n_s_pmut};
    __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_5, 2+__pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(8, 233, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[3] = {__pyx_t_4, __pyx_t_3, __pyx_n_s_pmut};
    __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_5, 2+__pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(8, 233, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else
  #endif
  {
    __pyx_t_6 = PyTuple_New(2+__pyx_t_5); if (unlikely(!__pyx_t_6)) __PYX_ERR(8, 233, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    if (__pyx_t_4) {
      __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_4); __pyx_t_4 = NULL;
    }
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_6, 0+__pyx_t_5, __pyx_t_3);
    __Pyx_INCREF(__pyx_n_s_pmut);
    __Pyx_GIVEREF(__pyx_n_s_pmut);
    PyTuple_SET_ITEM(__pyx_t_6, 1+__pyx_t_5, __pyx_n_s_pmut);
    __pyx_t_3 = 0;
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_6, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(8, 233, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "../resources_source/python/pystudy.pxi":234
 * 
 *         positive_value(settings['pmut'], 'pmut')
 *         self.thisptr.setParameter(string(b'NSGA2_pmut'), <double> settings['pmut'])             # <<<<<<<<<<<<<<
 * 
 *         positive_value(settings['eta_c'], 'eta_c')
 */
  __pyx_t_1 = __Pyx_PyObject_Dict_GetItem(__pyx_v_settings, __pyx_n_s_pmut); if (unlikely(!__pyx_t_1)) __PYX_ERR(8, 234, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_7 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_7 == (double)-1) && PyErr_Occurred())) __PYX_ERR(8, 234, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  try {
    __pyx_v_self->__pyx_base.thisptr->setParameter(std::string(((char *)"NSGA2_pmut")), ((double)__pyx_t_7));
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(8, 234, __pyx_L1_error)
  }

  /* "../resources_source/python/pystudy.pxi":236
 *         self.thisptr.setParameter(string(b'NSGA2_pmut'), <double> settings['pmut'])
 * 
 *         positive_value(settings['eta_c'], 'eta_c')             # <<<<<<<<<<<<<<
 *         self.thisptr.setParameter(string(b'NSGA2_eta_c'), <double> settings['eta_c'])
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_positive_value); if (unlikely(!__pyx_t_2)) __PYX_ERR(8, 236, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_6 = __Pyx_PyObject_Dict_GetItem(__pyx_v_settings, __pyx_n_s_eta_c); if (unlikely(!__pyx_t_6)) __PYX_ERR(8, 236, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_3 = NULL;
  __pyx_t_5 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_5 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[3] = {__pyx_t_3, __pyx_t_6, __pyx_n_s_eta_c};
    __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_5, 2+__pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(8, 236, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[3] = {__pyx_t_3, __pyx_t_6, __pyx_n_s_eta_c};
    __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_5, 2+__pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(8, 236, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  } else
  #endif
  {
    __pyx_t_4 = PyTuple_New(2+__pyx_t_5); if (unlikely(!__pyx_t_4)) __PYX_ERR(8, 236, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    if (__pyx_t_3) {
      __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_3); __pyx_t_3 = NULL;
    }
    __Pyx_GIVEREF(__pyx_t_6);
    PyTuple_SET_ITEM(__pyx_t_4, 0+__pyx_t_5, __pyx_t_6);
    __Pyx_INCREF(__pyx_n_s_eta_c);
    __Pyx_GIVEREF(__pyx_n_s_eta_c);
    PyTuple_SET_ITEM(__pyx_t_4, 1+__pyx_t_5, __pyx_n_s_eta_c);
    __pyx_t_6 = 0;
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_4, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(8, 236, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "../resources_source/python/pystudy.pxi":237
 * 
 *         positive_value(settings['eta_c'], 'eta_c')
 *         self.thisptr.setParameter(string(b'NSGA2_eta_c'), <double> settings['eta_c'])             # <<<<<<<<<<<<<<
 * 
 *         positive_value(settings['eta_m'], 'eta_m')
 */
  __pyx_t_1 = __Pyx_PyObject_Dict_GetItem(__pyx_v_settings, __pyx_n_s_eta_c); if (unlikely(!__pyx_t_1)) __PYX_ERR(8, 237, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_7 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_7 == (double)-1) && PyErr_Occurred())) __PYX_ERR(8, 237, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  try {
    __pyx_v_self->__pyx_base.thisptr->setParameter(std::string(((char *)"NSGA2_eta_c")), ((double)__pyx_t_7));
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(8, 237, __pyx_L1_error)
  }

  /* "../resources_source/python/pystudy.pxi":239
 *         self.thisptr.setParameter(string(b'NSGA2_eta_c'), <double> settings['eta_c'])
 * 
 *         positive_value(settings['eta_m'], 'eta_m')             # <<<<<<<<<<<<<<
 *         self.thisptr.setParameter(string(b'NSGA2_eta_m'), <double> settings['eta_m'])
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_positive_value); if (unlikely(!__pyx_t_2)) __PYX_ERR(8, 239, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = __Pyx_PyObject_Dict_GetItem(__pyx_v_settings, __pyx_n_s_eta_m); if (unlikely(!__pyx_t_4)) __PYX_ERR(8, 239, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_6 = NULL;
  __pyx_t_5 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_6)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_5 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[3] = {__pyx_t_6, __pyx_t_4, __pyx_n_s_eta_m};
    __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_5, 2+__pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(8, 239, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[3] = {__pyx_t_6, __pyx_t_4, __pyx_n_s_eta_m};
    __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_5, 2+__pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(8, 239, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  } else
  #endif
  {
    __pyx_t_3 = PyTuple_New(2+__pyx_t_5); if (unlikely(!__pyx_t_3)) __PYX_ERR(8, 239, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (__pyx_t_6) {
      __Pyx_GIVEREF(__pyx_t_6); PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_6); __pyx_t_6 = NULL;
    }
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_3, 0+__pyx_t_5, __pyx_t_4);
    __Pyx_INCREF(__pyx_n_s_eta_m);
    __Pyx_GIVEREF(__pyx_n_s_eta_m);
    PyTuple_SET_ITEM(__pyx_t_3, 1+__pyx_t_5, __pyx_n_s_eta_m);
    __pyx_t_4 = 0;
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_3, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(8, 239, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "../resources_source/python/pystudy.pxi":240
 * 
 *         positive_value(settings['eta_m'], 'eta_m')
 *         self.thisptr.setParameter(string(b'NSGA2_eta_m'), <double> settings['eta_m'])             # <<<<<<<<<<<<<<
 * 
 *         positive_value(settings['crowdobj'], 'crowdobj')
 */
  __pyx_t_1 = __Pyx_PyObject_Dict_GetItem(__pyx_v_settings, __pyx_n_s_eta_m); if (unlikely(!__pyx_t_1)) __PYX_ERR(8, 240, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_7 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_7 == (double)-1) && PyErr_Occurred())) __PYX_ERR(8, 240, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  try {
    __pyx_v_self->__pyx_base.thisptr->setParameter(std::string(((char *)"NSGA2_eta_m")), ((double)__pyx_t_7));
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(8, 240, __pyx_L1_error)
  }

  /* "../resources_source/python/pystudy.pxi":242
 *         self.thisptr.setParameter(string(b'NSGA2_eta_m'), <double> settings['eta_m'])
 * 
 *         positive_value(settings['crowdobj'], 'crowdobj')             # <<<<<<<<<<<<<<
 *         self.thisptr.setParameter(string(b'NSGA2_crowdobj'), <bool> settings['crowdobj'])
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_positive_value); if (unlikely(!__pyx_t_2)) __PYX_ERR(8, 242, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_Dict_GetItem(__pyx_v_settings, __pyx_n_s_crowdobj); if (unlikely(!__pyx_t_3)) __PYX_ERR(8, 242, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = NULL;
  __pyx_t_5 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_5 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[3] = {__pyx_t_4, __pyx_t_3, __pyx_n_s_crowdobj};
    __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_5, 2+__pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(8, 242, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[3] = {__pyx_t_4, __pyx_t_3, __pyx_n_s_crowdobj};
    __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_5, 2+__pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(8, 242, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else
  #endif
  {
    __pyx_t_6 = PyTuple_New(2+__pyx_t_5); if (unlikely(!__pyx_t_6)) __PYX_ERR(8, 242, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    if (__pyx_t_4) {
      __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_4); __pyx_t_4 = NULL;
    }
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_6, 0+__pyx_t_5, __pyx_t_3);
    __Pyx_INCREF(__pyx_n_s_crowdobj);
    __Pyx_GIVEREF(__pyx_n_s_crowdobj);
    PyTuple_SET_ITEM(__pyx_t_6, 1+__pyx_t_5, __pyx_n_s_crowdobj);
    __pyx_t_3 = 0;
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_6, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(8, 242, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "../resources_source/python/pystudy.pxi":243
 * 
 *         positive_value(settings['crowdobj'], 'crowdobj')
 *         self.thisptr.setParameter(string(b'NSGA2_crowdobj'), <bool> settings['crowdobj'])             # <<<<<<<<<<<<<<
 * 
 * cdef class __StudySweep__(__Study__):
 */
  __pyx_t_1 = __Pyx_PyObject_Dict_GetItem(__pyx_v_settings, __pyx_n_s_crowdobj); if (unlikely(!__pyx_t_1)) __PYX_ERR(8, 243, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_8 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely((__pyx_t_8 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(8, 243, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  try {
    __pyx_v_self->__pyx_base.thisptr->setParameter(std::string(((char *)"NSGA2_crowdobj")), ((bool)__pyx_t_8));
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(8, 243, __pyx_L1_error)
  }

  /* "../resources_source/python/pystudy.pxi":223
 *                 'crowdobj' : self.thisptr.getBoolParameter(b'NSGA2_crowdobj')}
 * 
 *     def __set_settings__(self, settings):             # <<<<<<<<<<<<<<
 *         positive_value(settings['popsize'], 'popsize')
 *         self.thisptr.setParameter(string(b'NSGA2_popsize'), <int> settings['popsize'])
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("_agros.__StudyNSGA2__.__set_settings__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_6_agros_14__StudyNSGA2___7__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_6_agros_14__StudyNSGA2___7__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6_agros_14__StudyNSGA2___6__reduce_cython__(((struct __pyx_obj_6_agros___StudyNSGA2__ *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6_agros_14__StudyNSGA2___6__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_6_agros___StudyNSGA2__ *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__56, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(2, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("_agros.__StudyNSGA2__.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw_6_agros_14__StudyNSGA2___9__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_6_agros_14__StudyNSGA2___9__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6_agros_14__StudyNSGA2___8__setstate_cython__(((struct __pyx_obj_6_agros___StudyNSGA2__ *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6_agros_14__StudyNSGA2___8__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_6_agros___StudyNSGA2__ *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__57, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(2, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("_agros.__StudyNSGA2__.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../resources_source/python/pystudy.pxi":246
 * 
 * cdef class __StudySweep__(__Study__):
 *     def __cinit__(self, index = -1):             # <<<<<<<<<<<<<<
 *         self.thisptr = new PyStudySweep(index)
 * 
 */

/* Python wrapper */
static int __pyx_pw_6_agros_14__StudySweep___1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_6_agros_14__StudySweep___1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_index = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_index,0};
    PyObject* values[1] = {0};
    values[0] = ((PyObject *)__pyx_int_neg_1);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_index);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) __PYX_ERR(8, 246, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_index = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(8, 246, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("_agros.__StudySweep__.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6_agros_14__StudySweep_____cinit__(((struct __pyx_obj_6_agros___StudySweep__ *)__pyx_v_self), __pyx_v_index);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6_agros_14__StudySweep_____cinit__(struct __pyx_obj_6_agros___StudySweep__ *__pyx_v_self, PyObject *__pyx_v_index) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "../resources_source/python/pystudy.pxi":247
 * cdef class __StudySweep__(__Study__):
 *     def __cinit__(self, index = -1):
 *         self.thisptr = new PyStudySweep(index)             # <<<<<<<<<<<<<<
 * 
 *         self.settings = __Parameters__(self.__get_settings__,
 */
  __pyx_t_1 = __Pyx_PyInt_As_int(__pyx_v_index); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) __PYX_ERR(8, 247, __pyx_L1_error)
  __pyx_v_self->__pyx_base.thisptr = new PyStudySweep(__pyx_t_1);

  /* "../resources_source/python/pystudy.pxi":249
 *         self.thisptr = new PyStudySweep(index)
 * 
 *         self.settings = __Parameters__(self.__get_settings__,             # <<<<<<<<<<<<<<
 *                                        self.__set_settings__)
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_Parameters); if (unlikely(!__pyx_t_3)) __PYX_ERR(8, 249, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_get_settings); if (unlikely(!__pyx_t_4)) __PYX_ERR(8, 249, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);

  /* "../resources_source/python/pystudy.pxi":250
 * 
 *         self.settings = __Parameters__(self.__get_settings__,
 *                                        self.__set_settings__)             # <<<<<<<<<<<<<<
 * 
 *     def __get_settings__(self):
 */
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_set_settings); if (unlikely(!__pyx_t_5)) __PYX_ERR(8, 250, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = NULL;
  __pyx_t_1 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_6)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_1 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_3)) {
    PyObject *__pyx_temp[3] = {__pyx_t_6, __pyx_t_4, __pyx_t_5};
    __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_1, 2+__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(8, 249, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
    PyObject *__pyx_temp[3] = {__pyx_t_6, __pyx_t_4, __pyx_t_5};
    __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_1, 2+__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(8, 249, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  } else
  #endif
  {
    __pyx_t_7 = PyTuple_New(2+__pyx_t_1); if (unlikely(!__pyx_t_7)) __PYX_ERR(8, 249, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    if (__pyx_t_6) {
      __Pyx_GIVEREF(__pyx_t_6); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_6); __pyx_t_6 = NULL;
    }
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_7, 0+__pyx_t_1, __pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_7, 1+__pyx_t_1, __pyx_t_5);
    __pyx_t_4 = 0;
    __pyx_t_5 = 0;
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_7, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(8, 249, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "../resources_source/python/pystudy.pxi":249
 *         self.thisptr = new PyStudySweep(index)
 * 
 *         self.settings = __Parameters__(self.__get_settings__,             # <<<<<<<<<<<<<<
 *                                        self.__set_settings__)
 * 
 */
  __Pyx_GIVEREF(__pyx_t_2);
  __Pyx_GOTREF(__pyx_v_self->__pyx_base.settings);
  __Pyx_DECREF(__pyx_v_self->__pyx_base.settings);
  __pyx_v_self->__pyx_base.settings = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "../resources_source/python/pystudy.pxi":246
 * 
 * cdef class __StudySweep__(__Study__):
 *     def __cinit__(self, index = -1):             # <<<<<<<<<<<<<<
 *         self.thisptr = new PyStudySweep(index)
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("_agros.__StudySweep__.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../resources_source/python/pystudy.pxi":252
 *                                        self.__set_settings__)
 * 
 *     def __get_settings__(self):             # <<<<<<<<<<<<<<
 *         return {'num_samples' : self.thisptr.getIntParameter(b'Sweep_num_samples'),
 *                 'init_method' : (<PyStudySweep*> self.thisptr).getInitMethod().decode()}
 */

/* Python wrapper */
static PyObject *__pyx_pw_6_agros_14__StudySweep___3__get_settings__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_6_agros_14__StudySweep___3__get_settings__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get_settings__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6_agros_14__StudySweep___2__get_settings__(((struct __pyx_obj_6_agros___StudySweep__ *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6_agros_14__StudySweep___2__get_settings__(struct __pyx_obj_6_agros___StudySweep__ *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  std::string __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get_settings__", 0);

  /* "../resources_source/python/pystudy.pxi":253
 * 
 *     def __get_settings__(self):
 *         return {'num_samples' : self.thisptr.getIntParameter(b'Sweep_num_samples'),             # <<<<<<<<<<<<<<
 *                 'init_method' : (<PyStudySweep*> self.thisptr).getInitMethod().decode()}
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyDict_NewPresized(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(8, 253, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_convert_string_from_py_std__in_string(__pyx_n_b_Sweep_num_samples); if (unlikely(PyErr_Occurred())) __PYX_ERR(8, 253, __pyx_L1_error)
  try {
    __pyx_t_3 = __pyx_v_self->__pyx_base.thisptr->getIntParameter(__pyx_t_2);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(8, 253, __pyx_L1_error)
  }
  __pyx_t_4 = __Pyx_PyInt_From_int(__pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(8, 253, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_num_samples, __pyx_t_4) < 0) __PYX_ERR(8, 253, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "../resources_source/python/pystudy.pxi":254
 *     def __get_settings__(self):
 *         return {'num_samples' : self.thisptr.getIntParameter(b'Sweep_num_samples'),
 *                 'init_method' : (<PyStudySweep*> self.thisptr).getInitMethod().decode()}             # <<<<<<<<<<<<<<
 * 
 *     def __set_settings__(self, settings):
 */
  __pyx_t_4 = __Pyx_decode_cpp_string(((PyStudySweep *)__pyx_v_self->__pyx_base.thisptr)->getInitMethod(), 0, PY_SSIZE_T_MAX, NULL, NULL, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(8, 254, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_init_method, __pyx_t_4) < 0) __PYX_ERR(8, 253, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../resources_source/python/pystudy.pxi":252
 *                                        self.__set_settings__)
 * 
 *     def __get_settings__(self):             # <<<<<<<<<<<<<<
 *         return {'num_samples' : self.thisptr.getIntParameter(b'Sweep_num_samples'),
 *                 'init_method' : (<PyStudySweep*> self.thisptr).getInitMethod().decode()}
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("_agros.__StudySweep__.__get_settings__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../resources_source/python/pystudy.pxi":256
 *                 'init_method' : (<PyStudySweep*> self.thisptr).getInitMethod().decode()}
 * 
 *     def __set_settings__(self, settings):             # <<<<<<<<<<<<<<
 *         positive_value(settings['num_samples'], 'num_samples')
 *         self.thisptr.setParameter(string(b'Sweep_num_samples'), <int> settings['num_samples'])
 */

/* Python wrapper */
static PyObject *__pyx_pw_6_agros_14__StudySweep___5__set_settings__(PyObject *__pyx_v_self, PyObject *__pyx_v_settings); /*proto*/
static PyObject *__pyx_pw_6_agros_14__StudySweep___5__set_settings__(PyObject *__pyx_v_self, PyObject *__pyx_v_settings) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set_settings__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6_agros_14__StudySweep___4__set_settings__(((struct __pyx_obj_6_agros___StudySweep__ *)__pyx_v_self), ((PyObject *)__pyx_v_settings));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6_agros_14__StudySweep___4__set_settings__(struct __pyx_obj_6_agros___StudySweep__ *__pyx_v_self, PyObject *__pyx_v_settings) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  std::string __pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set_settings__", 0);

  /* "../resources_source/python/pystudy.pxi":257
 * 
 *     def __set_settings__(self, settings):
 *         positive_value(settings['num_samples'], 'num_samples')             # <<<<<<<<<<<<<<
 *         self.thisptr.setParameter(string(b'Sweep_num_samples'), <int> settings['num_samples'])
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_positive_value); if (unlikely(!__pyx_t_2)) __PYX_ERR(8, 257, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_Dict_GetItem(__pyx_v_settings, __pyx_n_s_num_samples); if (unlikely(!__pyx_t_3)) __PYX_ERR(8, 257, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = NULL;
  __pyx_t_5 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_5 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[3] = {__pyx_t_4, __pyx_t_3, __pyx_n_s_num_samples};
    __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_5, 2+__pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(8, 257, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[3] = {__pyx_t_4, __pyx_t_3, __pyx_n_s_num_samples};
    __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_5, 2+__pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(8, 257, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else
  #endif
  {
    __pyx_t_6 = PyTuple_New(2+__pyx_t_5); if (unlikely(!__pyx_t_6)) __PYX_ERR(8, 257, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    if (__pyx_t_4) {
      __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_4); __pyx_t_4 = NULL;
    }
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_6, 0+__pyx_t_5, __pyx_t_3);
    __Pyx_INCREF(__pyx_n_s_num_samples);
    __Pyx_GIVEREF(__pyx_n_s_num_samples);
    PyTuple_SET_ITEM(__pyx_t_6, 1+__pyx_t_5, __pyx_n_s_num_samples);
    __pyx_t_3 = 0;
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_6, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(8, 257, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "../resources_source/python/pystudy.pxi":258
 *     def __set_settings__(self, settings):
 *         positive_value(settings['num_samples'], 'num_samples')
 *         self.thisptr.setParameter(string(b'Sweep_num_samples'), <int> settings['num_samples'])             # <<<<<<<<<<<<<<
 * 
 *         (<PyStudySweep*> self.thisptr).setInitMethod(<string> settings['init_method'].encode())
 */
  __pyx_t_1 = __Pyx_PyObject_Dict_GetItem(__pyx_v_settings, __pyx_n_s_num_samples); if (unlikely(!__pyx_t_1)) __PYX_ERR(8, 258, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_5 = __Pyx_PyInt_As_int(__pyx_t_1); if (unlikely((__pyx_t_5 == (int)-1) && PyErr_Occurred())) __PYX_ERR(8, 258, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  try {
    __pyx_v_self->__pyx_base.thisptr->setParameter(std::string(((char *)"Sweep_num_samples")), ((int)__pyx_t_5));
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(8, 258, __pyx_L1_error)
  }

  /* "../resources_source/python/pystudy.pxi":260
 *         self.thisptr.setParameter(string(b'Sweep_num_samples'), <int> settings['num_samples'])
 * 
 *         (<PyStudySweep*> self.thisptr).setInitMethod(<string> settings['init_method'].encode())             # <<<<<<<<<<<<<<
 */
  __pyx_t_2 = __Pyx_PyObject_Dict_GetItem(__pyx_v_settings, __pyx_n_s_init_method); if (unlikely(!__pyx_t_2)) __PYX_ERR(8, 260, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_encode); if (unlikely(!__pyx_t_6)) __PYX_ERR(8, 260, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_6))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_6);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_6, function);
    }
  }
  __pyx_t_1 = (__pyx_t_2) ? __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_t_2) : __Pyx_PyObject_CallNoArg(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(8, 260, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_7 = __pyx_convert_string_from_py_std__in_string(__pyx_t_1); if (unlikely(PyErr_Occurred())) __PYX_ERR(8, 260, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  try {
    ((PyStudySweep *)__pyx_v_self->__pyx_base.thisptr)->setInitMethod(((std::string)__pyx_t_7));
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(8, 260, __pyx_L1_error)
  }

  /* "../resources_source/python/pystudy.pxi":256
 *                 'init_method' : (<PyStudySweep*> self.thisptr).getInitMethod().decode()}
 * 
 *     def __set_settings__(self, settings):             # <<<<<<<<<<<<<<
 *         positive_value(settings['num_samples'], 'num_samples')
 *         self.thisptr.setParameter(string(b'Sweep_num_samples'), <int> settings['num_samples'])
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("_agros.__StudySweep__.__set_settings__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_6_agros_14__StudySweep___7__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_6_agros_14__StudySweep___7__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6_agros_14__StudySweep___6__reduce_cython__(((struct __pyx_obj_6_agros___StudySweep__ *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6_agros_14__StudySweep___6__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_6_agros___StudySweep__ *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__58, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(2, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("_agros.__StudySweep__.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw_6_agros_14__StudySweep___9__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_6_agros_14__StudySweep___9__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6_agros_14__StudySweep___8__setstate_cython__(((struct __pyx_obj_6_agros___StudySweep__ *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6_agros_14__StudySweep___8__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_6_agros___StudySweep__ *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__59, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(2, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("_agros.__StudySweep__.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_agros.pyx":148
 *         void setDumpFormat(string format) except +
 * 
 * def open_file(file, open_with_solution = False):             # <<<<<<<<<<<<<<
 *     openFile(file.encode(), open_with_solution)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6_agros_11open_file(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_6_agros_11open_file = {"open_file", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6_agros_11open_file, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_6_agros_11open_file(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_file = 0;
  PyObject *__pyx_v_open_with_solution = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("open_file (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_file,&__pyx_n_s_open_with_solution,0};
    PyObject* values[2] = {0,0};
    values[1] = ((PyObject *)Py_False);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_file)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_open_with_solution);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "open_file") < 0)) __PYX_ERR(1, 148, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_file = values[0];
    __pyx_v_open_with_solution = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("open_file", 0, 1, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 148, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("_agros.open_file", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6_agros_10open_file(__pyx_self, __pyx_v_file, __pyx_v_open_with_solution);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6_agros_10open_file(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_file, PyObject *__pyx_v_open_with_solution) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  std::string __pyx_t_4;
  bool __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("open_file", 0);

  /* "_agros.pyx":149
 * 
 * def open_file(file, open_with_solution = False):
 *     openFile(file.encode(), open_with_solution)             # <<<<<<<<<<<<<<
 * 
 * def save_file(file, save_with_solution = False):
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_file, __pyx_n_s_encode); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 149, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 149, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = __pyx_convert_string_from_py_std__in_string(__pyx_t_1); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 149, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_v_open_with_solution); if (unlikely((__pyx_t_5 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(1, 149, __pyx_L1_error)
  try {
    openFile(__pyx_t_4, __pyx_t_5);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(1, 149, __pyx_L1_error)
  }

  /* "_agros.pyx":148
 *         void setDumpFormat(string format) except +
 * 
 * def open_file(file, open_with_solution = False):             # <<<<<<<<<<<<<<
 *     openFile(file.encode(), open_with_solution)
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("_agros.open_file", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_agros.pyx":151
 *     openFile(file.encode(), open_with_solution)
 * 
 * def save_file(file, save_with_solution = False):             # <<<<<<<<<<<<<<
 *     saveFile(file.encode(), save_with_solution)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6_agros_13save_file(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_6_agros_13save_file = {"save_file", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6_agros_13save_file, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_6_agros_13save_file(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_file = 0;
  PyObject *__pyx_v_save_with_solution = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("save_file (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_file,&__pyx_n_s_save_with_solution,0};
    PyObject* values[2] = {0,0};
    values[1] = ((PyObject *)Py_False);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_file)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_save_with_solution);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "save_file") < 0)) __PYX_ERR(1, 151, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_file = values[0];
    __pyx_v_save_with_solution = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("save_file", 0, 1, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 151, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("_agros.save_file", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6_agros_12save_file(__pyx_self, __pyx_v_file, __pyx_v_save_with_solution);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6_agros_12save_file(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_file, PyObject *__pyx_v_save_with_solution) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  std::string __pyx_t_4;
  bool __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("save_file", 0);

  /* "_agros.pyx":152
 * 
 * def save_file(file, save_with_solution = False):
 *     saveFile(file.encode(), save_with_solution)             # <<<<<<<<<<<<<<
 * 
 * def get_script_from_model():
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_file, __pyx_n_s_encode); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 152, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 152, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = __pyx_convert_string_from_py_std__in_string(__pyx_t_1); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 152, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_v_save_with_solution); if (unlikely((__pyx_t_5 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(1, 152, __pyx_L1_error)
  try {
    saveFile(__pyx_t_4, __pyx_t_5);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(1, 152, __pyx_L1_error)
  }

  /* "_agros.pyx":151
 *     openFile(file.encode(), open_with_solution)
 * 
 * def save_file(file, save_with_solution = False):             # <<<<<<<<<<<<<<
 *     saveFile(file.encode(), save_with_solution)
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("_agros.save_file", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_agros.pyx":154
 *     saveFile(file.encode(), save_with_solution)
 * 
 * def get_script_from_model():             # <<<<<<<<<<<<<<
 *     return getScriptFromModel().decode()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6_agros_15get_script_from_model(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyMethodDef __pyx_mdef_6_agros_15get_script_from_model = {"get_script_from_model", (PyCFunction)__pyx_pw_6_agros_15get_script_from_model, METH_NOARGS, 0};
static PyObject *__pyx_pw_6_agros_15get_script_from_model(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_script_from_model (wrapper)", 0);
  __pyx_r = __pyx_pf_6_agros_14get_script_from_model(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6_agros_14get_script_from_model(CYTHON_UNUSED PyObject *__pyx_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_script_from_model", 0);

  /* "_agros.pyx":155
 * 
 * def get_script_from_model():
 *     return getScriptFromModel().decode()             # <<<<<<<<<<<<<<
 * 
 * def tempdir(dir = ""):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_decode_cpp_string(getScriptFromModel(), 0, PY_SSIZE_T_MAX, NULL, NULL, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 155, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "_agros.pyx":154
 *     saveFile(file.encode(), save_with_solution)
 * 
 * def get_script_from_model():             # <<<<<<<<<<<<<<
 *     return getScriptFromModel().decode()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("_agros.get_script_from_model", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_agros.pyx":157
 *     return getScriptFromModel().decode()
 * 
 * def tempdir(dir = ""):             # <<<<<<<<<<<<<<
 *     return "{0}/{1}".format(tempDir().decode(), dir)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6_agros_17tempdir(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_6_agros_17tempdir = {"tempdir", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6_agros_17tempdir, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_6_agros_17tempdir(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_dir = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("tempdir (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_dir,0};
    PyObject* values[1] = {0};
    values[0] = ((PyObject *)__pyx_kp_s__25);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_dir);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "tempdir") < 0)) __PYX_ERR(1, 157, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_dir = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("tempdir", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 157, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("_agros.tempdir", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6_agros_16tempdir(__pyx_self, __pyx_v_dir);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6_agros_16tempdir(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_dir) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("tempdir", 0);

  /* "_agros.pyx":158
 * 
 * def tempdir(dir = ""):
 *     return "{0}/{1}".format(tempDir().decode(), dir)             # <<<<<<<<<<<<<<
 * 
 * def cachedir(dir = ""):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_kp_s_0_1, __pyx_n_s_format); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 158, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_decode_cpp_string(tempDir(), 0, PY_SSIZE_T_MAX, NULL, NULL, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 158, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = NULL;
  __pyx_t_5 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_5 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[3] = {__pyx_t_4, __pyx_t_3, __pyx_v_dir};
    __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_5, 2+__pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 158, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[3] = {__pyx_t_4, __pyx_t_3, __pyx_v_dir};
    __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_5, 2+__pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 158, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else
  #endif
  {
    __pyx_t_6 = PyTuple_New(2+__pyx_t_5); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 158, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    if (__pyx_t_4) {
      __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_4); __pyx_t_4 = NULL;
    }
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_6, 0+__pyx_t_5, __pyx_t_3);
    __Pyx_INCREF(__pyx_v_dir);
    __Pyx_GIVEREF(__pyx_v_dir);
    PyTuple_SET_ITEM(__pyx_t_6, 1+__pyx_t_5, __pyx_v_dir);
    __pyx_t_3 = 0;
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_6, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 158, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "_agros.pyx":157
 *     return getScriptFromModel().decode()
 * 
 * def tempdir(dir = ""):             # <<<<<<<<<<<<<<
 *     return "{0}/{1}".format(tempDir().decode(), dir)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("_agros.tempdir", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_agros.pyx":160
 *     return "{0}/{1}".format(tempDir().decode(), dir)
 * 
 * def cachedir(dir = ""):             # <<<<<<<<<<<<<<
 *     return "{0}/{1}".format(cacheDir().decode(), dir)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6_agros_19cachedir(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_6_agros_19cachedir = {"cachedir", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6_agros_19cachedir, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_6_agros_19cachedir(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_dir = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("cachedir (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_dir,0};
    PyObject* values[1] = {0};
    values[0] = ((PyObject *)__pyx_kp_s__25);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_dir);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "cachedir") < 0)) __PYX_ERR(1, 160, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_dir = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("cachedir", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 160, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("_agros.cachedir", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6_agros_18cachedir(__pyx_self, __pyx_v_dir);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6_agros_18cachedir(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_dir) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("cachedir", 0);

  /* "_agros.pyx":161
 * 
 * def cachedir(dir = ""):
 *     return "{0}/{1}".format(cacheDir().decode(), dir)             # <<<<<<<<<<<<<<
 * 
 * # datadir()
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_kp_s_0_1, __pyx_n_s_format); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 161, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_decode_cpp_string(cacheDir(), 0, PY_SSIZE_T_MAX, NULL, NULL, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 161, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = NULL;
  __pyx_t_5 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_5 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[3] = {__pyx_t_4, __pyx_t_3, __pyx_v_dir};
    __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_5, 2+__pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 161, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[3] = {__pyx_t_4, __pyx_t_3, __pyx_v_dir};
    __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_5, 2+__pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 161, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else
  #endif
  {
    __pyx_t_6 = PyTuple_New(2+__pyx_t_5); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 161, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    if (__pyx_t_4) {
      __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_4); __pyx_t_4 = NULL;
    }
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_6, 0+__pyx_t_5, __pyx_t_3);
    __Pyx_INCREF(__pyx_v_dir);
    __Pyx_GIVEREF(__pyx_v_dir);
    PyTuple_SET_ITEM(__pyx_t_6, 1+__pyx_t_5, __pyx_v_dir);
    __pyx_t_3 = 0;
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_6, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 161, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "_agros.pyx":160
 *     return "{0}/{1}".format(tempDir().decode(), dir)
 * 
 * def cachedir(dir = ""):             # <<<<<<<<<<<<<<
 *     return "{0}/{1}".format(cacheDir().decode(), dir)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("_agros.cachedir", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_agros.pyx":164
 * 
 * # datadir()
 * def datadir(str = ""):             # <<<<<<<<<<<<<<
 *     return dataDir().decode()
 * def _set_datadir(str):
 */

/* Python wrapper */
static PyObject *__pyx_pw_6_agros_21datadir(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_6_agros_21datadir = {"datadir", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6_agros_21datadir, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_6_agros_21datadir(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  CYTHON_UNUSED PyObject *__pyx_v_str = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("datadir (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_str,0};
    PyObject* values[1] = {0};
    values[0] = ((PyObject *)__pyx_kp_s__25);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_str);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "datadir") < 0)) __PYX_ERR(1, 164, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_str = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("datadir", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 164, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("_agros.datadir", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6_agros_20datadir(__pyx_self, __pyx_v_str);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6_agros_20datadir(CYTHON_UNUSED PyObject *__pyx_self, CYTHON_UNUSED PyObject *__pyx_v_str) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("datadir", 0);

  /* "_agros.pyx":165
 * # datadir()
 * def datadir(str = ""):
 *     return dataDir().decode()             # <<<<<<<<<<<<<<
 * def _set_datadir(str):
 *     setDataDir(str.encode())
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_decode_cpp_string(dataDir(), 0, PY_SSIZE_T_MAX, NULL, NULL, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 165, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "_agros.pyx":164
 * 
 * # datadir()
 * def datadir(str = ""):             # <<<<<<<<<<<<<<
 *     return dataDir().decode()
 * def _set_datadir(str):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("_agros.datadir", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_agros.pyx":166
 * def datadir(str = ""):
 *     return dataDir().decode()
 * def _set_datadir(str):             # <<<<<<<<<<<<<<
 *     setDataDir(str.encode())
 * def _read_plugins():
 */

/* Python wrapper */
static PyObject *__pyx_pw_6_agros_23_set_datadir(PyObject *__pyx_self, PyObject *__pyx_v_str); /*proto*/
static PyMethodDef __pyx_mdef_6_agros_23_set_datadir = {"_set_datadir", (PyCFunction)__pyx_pw_6_agros_23_set_datadir, METH_O, 0};
static PyObject *__pyx_pw_6_agros_23_set_datadir(PyObject *__pyx_self, PyObject *__pyx_v_str) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_set_datadir (wrapper)", 0);
  __pyx_r = __pyx_pf_6_agros_22_set_datadir(__pyx_self, ((PyObject *)__pyx_v_str));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6_agros_22_set_datadir(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_str) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  std::string __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_set_datadir", 0);

  /* "_agros.pyx":167
 *     return dataDir().decode()
 * def _set_datadir(str):
 *     setDataDir(str.encode())             # <<<<<<<<<<<<<<
 * def _read_plugins():
 *     readPlugins()
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_str, __pyx_n_s_encode); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 167, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 167, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = __pyx_convert_string_from_py_std__in_string(__pyx_t_1); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 167, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  (void)(setDataDir(__pyx_t_4));

  /* "_agros.pyx":166
 * def datadir(str = ""):
 *     return dataDir().decode()
 * def _set_datadir(str):             # <<<<<<<<<<<<<<
 *     setDataDir(str.encode())
 * def _read_plugins():
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("_agros._set_datadir", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_agros.pyx":168
 * def _set_datadir(str):
 *     setDataDir(str.encode())
 * def _read_plugins():             # <<<<<<<<<<<<<<
 *     readPlugins()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6_agros_25_read_plugins(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyMethodDef __pyx_mdef_6_agros_25_read_plugins = {"_read_plugins", (PyCFunction)__pyx_pw_6_agros_25_read_plugins, METH_NOARGS, 0};
static PyObject *__pyx_pw_6_agros_25_read_plugins(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_read_plugins (wrapper)", 0);
  __pyx_r = __pyx_pf_6_agros_24_read_plugins(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6_agros_24_read_plugins(CYTHON_UNUSED PyObject *__pyx_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_read_plugins", 0);

  /* "_agros.pyx":169
 *     setDataDir(str.encode())
 * def _read_plugins():
 *     readPlugins()             # <<<<<<<<<<<<<<
 * 
 * 
 */
  readPlugins();

  /* "_agros.pyx":168
 * def _set_datadir(str):
 *     setDataDir(str.encode())
 * def _read_plugins():             # <<<<<<<<<<<<<<
 *     readPlugins()
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_agros.pyx":172
 * 
 * 
 * def version():             # <<<<<<<<<<<<<<
 *     return pyVersion()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6_agros_27version(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyMethodDef __pyx_mdef_6_agros_27version = {"version", (PyCFunction)__pyx_pw_6_agros_27version, METH_NOARGS, 0};
static PyObject *__pyx_pw_6_agros_27version(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("version (wrapper)", 0);
  __pyx_r = __pyx_pf_6_agros_26version(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6_agros_26version(CYTHON_UNUSED PyObject *__pyx_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("version", 0);

  /* "_agros.pyx":173
 * 
 * def version():
 *     return pyVersion()             # <<<<<<<<<<<<<<
 * 
 * cdef class __Options__:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_convert_PyBytes_string_to_py_std__in_string(pyVersion()); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 173, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "_agros.pyx":172
 * 
 * 
 * def version():             # <<<<<<<<<<<<<<
 *     return pyVersion()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("_agros.version", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_agros.pyx":178
 *     cdef PyOptions *thisptr
 * 
 *     def __cinit__(self):             # <<<<<<<<<<<<<<
 *         self.thisptr = new PyOptions()
 *     def __dealloc__(self):
 */

/* Python wrapper */
static int __pyx_pw_6_agros_11__Options___1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_6_agros_11__Options___1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__cinit__", 0))) return -1;
  __pyx_r = __pyx_pf_6_agros_11__Options_____cinit__(((struct __pyx_obj_6_agros___Options__ *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6_agros_11__Options_____cinit__(struct __pyx_obj_6_agros___Options__ *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyOptions *__pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "_agros.pyx":179
 * 
 *     def __cinit__(self):
 *         self.thisptr = new PyOptions()             # <<<<<<<<<<<<<<
 *     def __dealloc__(self):
 *         del self.thisptr
 */
  try {
    __pyx_t_1 = new PyOptions();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(1, 179, __pyx_L1_error)
  }
  __pyx_v_self->thisptr = __pyx_t_1;

  /* "_agros.pyx":178
 *     cdef PyOptions *thisptr
 * 
 *     def __cinit__(self):             # <<<<<<<<<<<<<<
 *         self.thisptr = new PyOptions()
 *     def __dealloc__(self):
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("_agros.__Options__.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_agros.pyx":180
 *     def __cinit__(self):
 *         self.thisptr = new PyOptions()
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.thisptr
 * 
 */

/* Python wrapper */
static void __pyx_pw_6_agros_11__Options___3__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_6_agros_11__Options___3__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_6_agros_11__Options___2__dealloc__(((struct __pyx_obj_6_agros___Options__ *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_6_agros_11__Options___2__dealloc__(struct __pyx_obj_6_agros___Options__ *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "_agros.pyx":181
 *         self.thisptr = new PyOptions()
 *     def __dealloc__(self):
 *         del self.thisptr             # <<<<<<<<<<<<<<
 * 
 *     property cache_size:
 */
  delete __pyx_v_self->thisptr;

  /* "_agros.pyx":180
 *     def __cinit__(self):
 *         self.thisptr = new PyOptions()
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.thisptr
 * 
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "_agros.pyx":184
 * 
 *     property cache_size:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.thisptr.getCacheSize()
 *         def __set__(self, size):
 */

/* Python wrapper */
static PyObject *__pyx_pw_6_agros_11__Options___10cache_size_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6_agros_11__Options___10cache_size_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6_agros_11__Options___10cache_size___get__(((struct __pyx_obj_6_agros___Options__ *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6_agros_11__Options___10cache_size___get__(struct __pyx_obj_6_agros___Options__ *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "_agros.pyx":185
 *     property cache_size:
 *         def __get__(self):
 *             return self.thisptr.getCacheSize()             # <<<<<<<<<<<<<<
 *         def __set__(self, size):
 *             self.thisptr.setCacheSize(size)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->thisptr->getCacheSize()); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 185, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "_agros.pyx":184
 * 
 *     property cache_size:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.thisptr.getCacheSize()
 *         def __set__(self, size):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("_agros.__Options__.cache_size.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_agros.pyx":186
 *         def __get__(self):
 *             return self.thisptr.getCacheSize()
 *         def __set__(self, size):             # <<<<<<<<<<<<<<
 *             self.thisptr.setCacheSize(size)
 * 
 */

/* Python wrapper */
static int __pyx_pw_6_agros_11__Options___10cache_size_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_size); /*proto*/
static int __pyx_pw_6_agros_11__Options___10cache_size_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_size) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6_agros_11__Options___10cache_size_2__set__(((struct __pyx_obj_6_agros___Options__ *)__pyx_v_self), ((PyObject *)__pyx_v_size));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6_agros_11__Options___10cache_size_2__set__(struct __pyx_obj_6_agros___Options__ *__pyx_v_self, PyObject *__pyx_v_size) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "_agros.pyx":187
 *             return self.thisptr.getCacheSize()
 *         def __set__(self, size):
 *             self.thisptr.setCacheSize(size)             # <<<<<<<<<<<<<<
 * 
 *     property save_matrix_and_rhs:
 */
  __pyx_t_1 = __Pyx_PyInt_As_int(__pyx_v_size); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 187, __pyx_L1_error)
  try {
    __pyx_v_self->thisptr->setCacheSize(__pyx_t_1);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(1, 187, __pyx_L1_error)
  }

  /* "_agros.pyx":186
 *         def __get__(self):
 *             return self.thisptr.getCacheSize()
 *         def __set__(self, size):             # <<<<<<<<<<<<<<
 *             self.thisptr.setCacheSize(size)
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("_agros.__Options__.cache_size.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_agros.pyx":190
 * 
 *     property save_matrix_and_rhs:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.thisptr.getSaveMatrixRHS()
 *         def __set__(self, save):
 */

/* Python wrapper */
static PyObject *__pyx_pw_6_agros_11__Options___19save_matrix_and_rhs_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6_agros_11__Options___19save_matrix_and_rhs_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6_agros_11__Options___19save_matrix_and_rhs___get__(((struct __pyx_obj_6_agros___Options__ *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6_agros_11__Options___19save_matrix_and_rhs___get__(struct __pyx_obj_6_agros___Options__ *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "_agros.pyx":191
 *     property save_matrix_and_rhs:
 *         def __get__(self):
 *             return self.thisptr.getSaveMatrixRHS()             # <<<<<<<<<<<<<<
 *         def __set__(self, save):
 *             self.thisptr.setSaveMatrixRHS(save)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_v_self->thisptr->getSaveMatrixRHS()); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 191, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "_agros.pyx":190
 * 
 *     property save_matrix_and_rhs:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.thisptr.getSaveMatrixRHS()
 *         def __set__(self, save):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("_agros.__Options__.save_matrix_and_rhs.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_agros.pyx":192
 *         def __get__(self):
 *             return self.thisptr.getSaveMatrixRHS()
 *         def __set__(self, save):             # <<<<<<<<<<<<<<
 *             self.thisptr.setSaveMatrixRHS(save)
 * 
 */

/* Python wrapper */
static int __pyx_pw_6_agros_11__Options___19save_matrix_and_rhs_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_save); /*proto*/
static int __pyx_pw_6_agros_11__Options___19save_matrix_and_rhs_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_save) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6_agros_11__Options___19save_matrix_and_rhs_2__set__(((struct __pyx_obj_6_agros___Options__ *)__pyx_v_self), ((PyObject *)__pyx_v_save));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6_agros_11__Options___19save_matrix_and_rhs_2__set__(struct __pyx_obj_6_agros___Options__ *__pyx_v_self, PyObject *__pyx_v_save) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  bool __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "_agros.pyx":193
 *             return self.thisptr.getSaveMatrixRHS()
 *         def __set__(self, save):
 *             self.thisptr.setSaveMatrixRHS(save)             # <<<<<<<<<<<<<<
 * 
 *     property save_system:
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_save); if (unlikely((__pyx_t_1 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(1, 193, __pyx_L1_error)
  __pyx_v_self->thisptr->setSaveMatrixRHS(__pyx_t_1);

  /* "_agros.pyx":192
 *         def __get__(self):
 *             return self.thisptr.getSaveMatrixRHS()
 *         def __set__(self, save):             # <<<<<<<<<<<<<<
 *             self.thisptr.setSaveMatrixRHS(save)
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("_agros.__Options__.save_matrix_and_rhs.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_agros.pyx":196
 * 
 *     property save_system:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.thisptr.getSaveSystem()
 *         def __set__(self, save):
 */

/* Python wrapper */
static PyObject *__pyx_pw_6_agros_11__Options___11save_system_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6_agros_11__Options___11save_system_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6_agros_11__Options___11save_system___get__(((struct __pyx_obj_6_agros___Options__ *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6_agros_11__Options___11save_system___get__(struct __pyx_obj_6_agros___Options__ *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "_agros.pyx":197
 *     property save_system:
 *         def __get__(self):
 *             return self.thisptr.getSaveSystem()             # <<<<<<<<<<<<<<
 *         def __set__(self, save):
 *             self.thisptr.setSaveSystem(save)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_v_self->thisptr->getSaveSystem()); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 197, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "_agros.pyx":196
 * 
 *     property save_system:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.thisptr.getSaveSystem()
 *         def __set__(self, save):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("_agros.__Options__.save_system.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_agros.pyx":198
 *         def __get__(self):
 *             return self.thisptr.getSaveSystem()
 *         def __set__(self, save):             # <<<<<<<<<<<<<<
 *             self.thisptr.setSaveSystem(save)
 * 
 */

/* Python wrapper */
static int __pyx_pw_6_agros_11__Options___11save_system_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_save); /*proto*/
static int __pyx_pw_6_agros_11__Options___11save_system_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_save) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6_agros_11__Options___11save_system_2__set__(((struct __pyx_obj_6_agros___Options__ *)__pyx_v_self), ((PyObject *)__pyx_v_save));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6_agros_11__Options___11save_system_2__set__(struct __pyx_obj_6_agros___Options__ *__pyx_v_self, PyObject *__pyx_v_save) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  bool __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "_agros.pyx":199
 *             return self.thisptr.getSaveSystem()
 *         def __set__(self, save):
 *             self.thisptr.setSaveSystem(save)             # <<<<<<<<<<<<<<
 * 
 *     property dump_format:
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_save); if (unlikely((__pyx_t_1 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(1, 199, __pyx_L1_error)
  __pyx_v_self->thisptr->setSaveSystem(__pyx_t_1);

  /* "_agros.pyx":198
 *         def __get__(self):
 *             return self.thisptr.getSaveSystem()
 *         def __set__(self, save):             # <<<<<<<<<<<<<<
 *             self.thisptr.setSaveSystem(save)
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("_agros.__Options__.save_system.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_agros.pyx":202
 * 
 *     property dump_format:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.thisptr.getDumpFormat().decode()
 *         def __set__(self, format):
 */

/* Python wrapper */
static PyObject *__pyx_pw_6_agros_11__Options___11dump_format_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6_agros_11__Options___11dump_format_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6_agros_11__Options___11dump_format___get__(((struct __pyx_obj_6_agros___Options__ *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6_agros_11__Options___11dump_format___get__(struct __pyx_obj_6_agros___Options__ *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "_agros.pyx":203
 *     property dump_format:
 *         def __get__(self):
 *             return self.thisptr.getDumpFormat().decode()             # <<<<<<<<<<<<<<
 *         def __set__(self, format):
 *             self.thisptr.setDumpFormat(format.encode())
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_decode_cpp_string(__pyx_v_self->thisptr->getDumpFormat(), 0, PY_SSIZE_T_MAX, NULL, NULL, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 203, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "_agros.pyx":202
 * 
 *     property dump_format:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.thisptr.getDumpFormat().decode()
 *         def __set__(self, format):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("_agros.__Options__.dump_format.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_agros.pyx":204
 *         def __get__(self):
 *             return self.thisptr.getDumpFormat().decode()
 *         def __set__(self, format):             # <<<<<<<<<<<<<<
 *             self.thisptr.setDumpFormat(format.encode())
 * 
 */

/* Python wrapper */
static int __pyx_pw_6_agros_11__Options___11dump_format_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_format); /*proto*/
static int __pyx_pw_6_agros_11__Options___11dump_format_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_format) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6_agros_11__Options___11dump_format_2__set__(((struct __pyx_obj_6_agros___Options__ *)__pyx_v_self), ((PyObject *)__pyx_v_format));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6_agros_11__Options___11dump_format_2__set__(struct __pyx_obj_6_agros___Options__ *__pyx_v_self, PyObject *__pyx_v_format) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  std::string __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "_agros.pyx":205
 *             return self.thisptr.getDumpFormat().decode()
 *         def __set__(self, format):
 *             self.thisptr.setDumpFormat(format.encode())             # <<<<<<<<<<<<<<
 * 
 * options = __Options__()
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_format, __pyx_n_s_encode); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 205, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 205, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = __pyx_convert_string_from_py_std__in_string(__pyx_t_1); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 205, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  try {
    __pyx_v_self->thisptr->setDumpFormat(__pyx_t_4);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(1, 205, __pyx_L1_error)
  }

  /* "_agros.pyx":204
 *         def __get__(self):
 *             return self.thisptr.getDumpFormat().decode()
 *         def __set__(self, format):             # <<<<<<<<<<<<<<
 *             self.thisptr.setDumpFormat(format.encode())
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("_agros.__Options__.dump_format.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_6_agros_11__Options___5__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_6_agros_11__Options___5__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6_agros_11__Options___4__reduce_cython__(((struct __pyx_obj_6_agros___Options__ *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6_agros_11__Options___4__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_6_agros___Options__ *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__60, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(2, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("_agros.__Options__.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw_6_agros_11__Options___7__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_6_agros_11__Options___7__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6_agros_11__Options___6__setstate_cython__(((struct __pyx_obj_6_agros___Options__ *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6_agros_11__Options___6__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_6_agros___Options__ *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__61, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(2, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("_agros.__Options__.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "string.from_py":13
 * 
 * @cname("__pyx_convert_string_from_py_std__in_string")
 * cdef string __pyx_convert_string_from_py_std__in_string(object o) except *:             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t length = 0
 *     cdef const char* data = __Pyx_PyObject_AsStringAndSize(o, &length)
 */

static std::string __pyx_convert_string_from_py_std__in_string(PyObject *__pyx_v_o) {
  Py_ssize_t __pyx_v_length;
  char const *__pyx_v_data;
  std::string __pyx_r;
  __Pyx_RefNannyDeclarations
  char const *__pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_convert_string_from_py_std__in_string", 0);

  /* "string.from_py":14
 * @cname("__pyx_convert_string_from_py_std__in_string")
 * cdef string __pyx_convert_string_from_py_std__in_string(object o) except *:
 *     cdef Py_ssize_t length = 0             # <<<<<<<<<<<<<<
 *     cdef const char* data = __Pyx_PyObject_AsStringAndSize(o, &length)
 *     return string(data, length)
 */
  __pyx_v_length = 0;

  /* "string.from_py":15
 * cdef string __pyx_convert_string_from_py_std__in_string(object o) except *:
 *     cdef Py_ssize_t length = 0
 *     cdef const char* data = __Pyx_PyObject_AsStringAndSize(o, &length)             # <<<<<<<<<<<<<<
 *     return string(data, length)
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_AsStringAndSize(__pyx_v_o, (&__pyx_v_length)); if (unlikely(__pyx_t_1 == ((char const *)NULL))) __PYX_ERR(2, 15, __pyx_L1_error)
  __pyx_v_data = __pyx_t_1;

  /* "string.from_py":16
 *     cdef Py_ssize_t length = 0
 *     cdef const char* data = __Pyx_PyObject_AsStringAndSize(o, &length)
 *     return string(data, length)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = std::string(__pyx_v_data, __pyx_v_length);
  goto __pyx_L0;

  /* "string.from_py":13
 * 
 * @cname("__pyx_convert_string_from_py_std__in_string")
 * cdef string __pyx_convert_string_from_py_std__in_string(object o) except *:             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t length = 0
 *     cdef const char* data = __Pyx_PyObject_AsStringAndSize(o, &length)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("string.from_py.__pyx_convert_string_from_py_std__in_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_pretend_to_initialize(&__pyx_r);
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "string.to_py":31
 * 
 * @cname("__pyx_convert_PyObject_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyObject_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyObject_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

static CYTHON_INLINE PyObject *__pyx_convert_PyObject_string_to_py_std__in_string(std::string const &__pyx_v_s) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_convert_PyObject_string_to_py_std__in_string", 0);

  /* "string.to_py":32
 * @cname("__pyx_convert_PyObject_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyObject_string_to_py_std__in_string(const string& s):
 *     return __Pyx_PyObject_FromStringAndSize(s.data(), s.size())             # <<<<<<<<<<<<<<
 * cdef extern from *:
 *     cdef object __Pyx_PyUnicode_FromStringAndSize(const char*, size_t)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_FromStringAndSize(__pyx_v_s.data(), __pyx_v_s.size()); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 32, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "string.to_py":31
 * 
 * @cname("__pyx_convert_PyObject_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyObject_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyObject_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("string.to_py.__pyx_convert_PyObject_string_to_py_std__in_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "string.to_py":37
 * 
 * @cname("__pyx_convert_PyUnicode_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyUnicode_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyUnicode_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

static CYTHON_INLINE PyObject *__pyx_convert_PyUnicode_string_to_py_std__in_string(std::string const &__pyx_v_s) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_convert_PyUnicode_string_to_py_std__in_string", 0);

  /* "string.to_py":38
 * @cname("__pyx_convert_PyUnicode_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyUnicode_string_to_py_std__in_string(const string& s):
 *     return __Pyx_PyUnicode_FromStringAndSize(s.data(), s.size())             # <<<<<<<<<<<<<<
 * cdef extern from *:
 *     cdef object __Pyx_PyStr_FromStringAndSize(const char*, size_t)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyUnicode_FromStringAndSize(__pyx_v_s.data(), __pyx_v_s.size()); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 38, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "string.to_py":37
 * 
 * @cname("__pyx_convert_PyUnicode_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyUnicode_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyUnicode_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("string.to_py.__pyx_convert_PyUnicode_string_to_py_std__in_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "string.to_py":43
 * 
 * @cname("__pyx_convert_PyStr_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyStr_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyStr_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

static CYTHON_INLINE PyObject *__pyx_convert_PyStr_string_to_py_std__in_string(std::string const &__pyx_v_s) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_convert_PyStr_string_to_py_std__in_string", 0);

  /* "string.to_py":44
 * @cname("__pyx_convert_PyStr_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyStr_string_to_py_std__in_string(const string& s):
 *     return __Pyx_PyStr_FromStringAndSize(s.data(), s.size())             # <<<<<<<<<<<<<<
 * cdef extern from *:
 *     cdef object __Pyx_PyBytes_FromStringAndSize(const char*, size_t)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyStr_FromStringAndSize(__pyx_v_s.data(), __pyx_v_s.size()); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 44, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "string.to_py":43
 * 
 * @cname("__pyx_convert_PyStr_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyStr_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyStr_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("string.to_py.__pyx_convert_PyStr_string_to_py_std__in_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "string.to_py":49
 * 
 * @cname("__pyx_convert_PyBytes_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyBytes_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyBytes_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

static CYTHON_INLINE PyObject *__pyx_convert_PyBytes_string_to_py_std__in_string(std::string const &__pyx_v_s) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_convert_PyBytes_string_to_py_std__in_string", 0);

  /* "string.to_py":50
 * @cname("__pyx_convert_PyBytes_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyBytes_string_to_py_std__in_string(const string& s):
 *     return __Pyx_PyBytes_FromStringAndSize(s.data(), s.size())             # <<<<<<<<<<<<<<
 * cdef extern from *:
 *     cdef object __Pyx_PyByteArray_FromStringAndSize(const char*, size_t)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBytes_FromStringAndSize(__pyx_v_s.data(), __pyx_v_s.size()); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 50, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "string.to_py":49
 * 
 * @cname("__pyx_convert_PyBytes_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyBytes_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyBytes_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("string.to_py.__pyx_convert_PyBytes_string_to_py_std__in_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "string.to_py":55
 * 
 * @cname("__pyx_convert_PyByteArray_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyByteArray_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyByteArray_FromStringAndSize(s.data(), s.size())
 * 
 */

static CYTHON_INLINE PyObject *__pyx_convert_PyByteArray_string_to_py_std__in_string(std::string const &__pyx_v_s) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_convert_PyByteArray_string_to_py_std__in_string", 0);

  /* "string.to_py":56
 * @cname("__pyx_convert_PyByteArray_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyByteArray_string_to_py_std__in_string(const string& s):
 *     return __Pyx_PyByteArray_FromStringAndSize(s.data(), s.size())             # <<<<<<<<<<<<<<
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyByteArray_FromStringAndSize(__pyx_v_s.data(), __pyx_v_s.size()); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 56, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "string.to_py":55
 * 
 * @cname("__pyx_convert_PyByteArray_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyByteArray_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyByteArray_FromStringAndSize(s.data(), s.size())
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("string.to_py.__pyx_convert_PyByteArray_string_to_py_std__in_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "vector.from_py":45
 * 
 * @cname("__pyx_convert_vector_from_py_double")
 * cdef vector[X] __pyx_convert_vector_from_py_double(object o) except *:             # <<<<<<<<<<<<<<
 *     cdef vector[X] v
 *     for item in o:
 */

static std::vector<double>  __pyx_convert_vector_from_py_double(PyObject *__pyx_v_o) {
  std::vector<double>  __pyx_v_v;
  PyObject *__pyx_v_item = NULL;
  std::vector<double>  __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *(*__pyx_t_3)(PyObject *);
  PyObject *__pyx_t_4 = NULL;
  double __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_convert_vector_from_py_double", 0);

  /* "vector.from_py":47
 * cdef vector[X] __pyx_convert_vector_from_py_double(object o) except *:
 *     cdef vector[X] v
 *     for item in o:             # <<<<<<<<<<<<<<
 *         v.push_back(<X>item)
 *     return v
 */
  if (likely(PyList_CheckExact(__pyx_v_o)) || PyTuple_CheckExact(__pyx_v_o)) {
    __pyx_t_1 = __pyx_v_o; __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
    __pyx_t_3 = NULL;
  } else {
    __pyx_t_2 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_v_o); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 47, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 47, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_3)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(2, 47, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 47, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      } else {
        if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(2, 47, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 47, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      }
    } else {
      __pyx_t_4 = __pyx_t_3(__pyx_t_1);
      if (unlikely(!__pyx_t_4)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(2, 47, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_4);
    }
    __Pyx_XDECREF_SET(__pyx_v_item, __pyx_t_4);
    __pyx_t_4 = 0;

    /* "vector.from_py":48
 *     cdef vector[X] v
 *     for item in o:
 *         v.push_back(<X>item)             # <<<<<<<<<<<<<<
 *     return v
 * 
 */
    __pyx_t_5 = __pyx_PyFloat_AsDouble(__pyx_v_item); if (unlikely((__pyx_t_5 == (double)-1) && PyErr_Occurred())) __PYX_ERR(2, 48, __pyx_L1_error)
    __pyx_v_v.push_back(((double)__pyx_t_5));

    /* "vector.from_py":47
 * cdef vector[X] __pyx_convert_vector_from_py_double(object o) except *:
 *     cdef vector[X] v
 *     for item in o:             # <<<<<<<<<<<<<<
 *         v.push_back(<X>item)
 *     return v
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "vector.from_py":49
 *     for item in o:
 *         v.push_back(<X>item)
 *     return v             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_v;
  goto __pyx_L0;

  /* "vector.from_py":45
 * 
 * @cname("__pyx_convert_vector_from_py_double")
 * cdef vector[X] __pyx_convert_vector_from_py_double(object o) except *:             # <<<<<<<<<<<<<<
 *     cdef vector[X] v
 *     for item in o:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("vector.from_py.__pyx_convert_vector_from_py_double", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_pretend_to_initialize(&__pyx_r);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_item);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_tp_new_6_agros___Geometry__(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  if (unlikely(__pyx_pw_6_agros_12__Geometry___1__cinit__(o, __pyx_empty_tuple, NULL) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_6_agros___Geometry__(PyObject *o) {
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) + 1);
    __pyx_pw_6_agros_12__Geometry___3__dealloc__(o);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) - 1);
    PyErr_Restore(etype, eval, etb);
  }
  (*Py_TYPE(o)->tp_free)(o);
}

static PyMethodDef __pyx_methods_6_agros___Geometry__[] = {
  {"add_node", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6_agros_12__Geometry___5add_node, METH_VARARGS|METH_KEYWORDS, __pyx_doc_6_agros_12__Geometry___4add_node},
  {"remove_nodes", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6_agros_12__Geometry___7remove_nodes, METH_VARARGS|METH_KEYWORDS, __pyx_doc_6_agros_12__Geometry___6remove_nodes},
  {"add_edge", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6_agros_12__Geometry___9add_edge, METH_VARARGS|METH_KEYWORDS, __pyx_doc_6_agros_12__Geometry___8add_edge},
  {"add_edge_by_nodes", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6_agros_12__Geometry___11add_edge_by_nodes, METH_VARARGS|METH_KEYWORDS, __pyx_doc_6_agros_12__Geometry___10add_edge_by_nodes},
  {"modify_edge", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6_agros_12__Geometry___13modify_edge, METH_VARARGS|METH_KEYWORDS, __pyx_doc_6_agros_12__Geometry___12modify_edge},
  {"remove_edges", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6_agros_12__Geometry___15remove_edges, METH_VARARGS|METH_KEYWORDS, __pyx_doc_6_agros_12__Geometry___14remove_edges},
  {"add_label", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6_agros_12__Geometry___17add_label, METH_VARARGS|METH_KEYWORDS, __pyx_doc_6_agros_12__Geometry___16add_label},
  {"modify_label", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6_agros_12__Geometry___19modify_label, METH_VARARGS|METH_KEYWORDS, __pyx_doc_6_agros_12__Geometry___18modify_label},
  {"remove_labels", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6_agros_12__Geometry___21remove_labels, METH_VARARGS|METH_KEYWORDS, __pyx_doc_6_agros_12__Geometry___20remove_labels},
  {"add_rect", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6_agros_12__Geometry___23add_rect, METH_VARARGS|METH_KEYWORDS, __pyx_doc_6_agros_12__Geometry___22add_rect},
  {"add_circle", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6_agros_12__Geometry___25add_circle, METH_VARARGS|METH_KEYWORDS, __pyx_doc_6_agros_12__Geometry___24add_circle},
  {"add_semicircle", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6_agros_12__Geometry___27add_semicircle, METH_VARARGS|METH_KEYWORDS, __pyx_doc_6_agros_12__Geometry___26add_semicircle},
  {"nodes_count", (PyCFunction)__pyx_pw_6_agros_12__Geometry___29nodes_count, METH_NOARGS, __pyx_doc_6_agros_12__Geometry___28nodes_count},
  {"edges_count", (PyCFunction)__pyx_pw_6_agros_12__Geometry___31edges_count, METH_NOARGS, __pyx_doc_6_agros_12__Geometry___30edges_count},
  {"labels_count", (PyCFunction)__pyx_pw_6_agros_12__Geometry___33labels_count, METH_NOARGS, __pyx_doc_6_agros_12__Geometry___32labels_count},
  {"select_nodes", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6_agros_12__Geometry___35select_nodes, METH_VARARGS|METH_KEYWORDS, __pyx_doc_6_agros_12__Geometry___34select_nodes},
  {"select_edges", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6_agros_12__Geometry___37select_edges, METH_VARARGS|METH_KEYWORDS, __pyx_doc_6_agros_12__Geometry___36select_edges},
  {"select_labels", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6_agros_12__Geometry___39select_labels, METH_VARARGS|METH_KEYWORDS, __pyx_doc_6_agros_12__Geometry___38select_labels},
  {"select_node_by_point", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6_agros_12__Geometry___41select_node_by_point, METH_VARARGS|METH_KEYWORDS, __pyx_doc_6_agros_12__Geometry___40select_node_by_point},
  {"select_edge_by_point", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6_agros_12__Geometry___43select_edge_by_point, METH_VARARGS|METH_KEYWORDS, __pyx_doc_6_agros_12__Geometry___42select_edge_by_point},
  {"select_label_by_point", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6_agros_12__Geometry___45select_label_by_point, METH_VARARGS|METH_KEYWORDS, __pyx_doc_6_agros_12__Geometry___44select_label_by_point},
  {"move_selection", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6_agros_12__Geometry___47move_selection, METH_VARARGS|METH_KEYWORDS, __pyx_doc_6_agros_12__Geometry___46move_selection},
  {"rotate_selection", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6_agros_12__Geometry___49rotate_selection, METH_VARARGS|METH_KEYWORDS, __pyx_doc_6_agros_12__Geometry___48rotate_selection},
  {"scale_selection", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6_agros_12__Geometry___51scale_selection, METH_VARARGS|METH_KEYWORDS, __pyx_doc_6_agros_12__Geometry___50scale_selection},
  {"remove_selection", (PyCFunction)__pyx_pw_6_agros_12__Geometry___53remove_selection, METH_NOARGS, __pyx_doc_6_agros_12__Geometry___52remove_selection},
  {"select_none", (PyCFunction)__pyx_pw_6_agros_12__Geometry___55select_none, METH_NOARGS, __pyx_doc_6_agros_12__Geometry___54select_none},
  {"export_vtk", (PyCFunction)__pyx_pw_6_agros_12__Geometry___57export_vtk, METH_O, __pyx_doc_6_agros_12__Geometry___56export_vtk},
  {"export_svg", (PyCFunction)__pyx_pw_6_agros_12__Geometry___59export_svg, METH_O, __pyx_doc_6_agros_12__Geometry___58export_svg},
  {"export_svg_image", (PyCFunction)__pyx_pw_6_agros_12__Geometry___61export_svg_image, METH_NOARGS, __pyx_doc_6_agros_12__Geometry___60export_svg_image},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_6_agros_12__Geometry___63__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_6_agros_12__Geometry___65__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_6_agros___Geometry__ = {
  PyVarObject_HEAD_INIT(0, 0)
  "_agros.__Geometry__", /*tp_name*/
  sizeof(struct __pyx_obj_6_agros___Geometry__), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_6_agros___Geometry__, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_6_agros___Geometry__, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_6_agros___Geometry__, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};

static PyObject *__pyx_tp_new_6_agros___Field__(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_6_agros___Field__ *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_6_agros___Field__ *)o);
  p->matrix_solver_parameters = Py_None; Py_INCREF(Py_None);
  p->solver_parameters = Py_None; Py_INCREF(Py_None);
  p->adaptivity_parameters = Py_None; Py_INCREF(Py_None);
  p->_adaptivity_callback = Py_None; Py_INCREF(Py_None);
  if (unlikely(__pyx_pw_6_agros_9__Field___1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_6_agros___Field__(PyObject *o) {
  struct __pyx_obj_6_agros___Field__ *p = (struct __pyx_obj_6_agros___Field__ *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) + 1);
    __pyx_pw_6_agros_9__Field___3__dealloc__(o);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) - 1);
    PyErr_Restore(etype, eval, etb);
  }
  Py_CLEAR(p->matrix_solver_parameters);
  Py_CLEAR(p->solver_parameters);
  Py_CLEAR(p->adaptivity_parameters);
  Py_CLEAR(p->_adaptivity_callback);
  (*Py_TYPE(o)->tp_free)(o);
}

static int __pyx_tp_traverse_6_agros___Field__(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_6_agros___Field__ *p = (struct __pyx_obj_6_agros___Field__ *)o;
  if (p->matrix_solver_parameters) {
    e = (*v)(p->matrix_solver_parameters, a); if (e) return e;
  }
  if (p->solver_parameters) {
    e = (*v)(p->solver_parameters, a); if (e) return e;
  }
  if (p->adaptivity_parameters) {
    e = (*v)(p->adaptivity_parameters, a); if (e) return e;
  }
  if (p->_adaptivity_callback) {
    e = (*v)(p->_adaptivity_callback, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_6_agros___Field__(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_6_agros___Field__ *p = (struct __pyx_obj_6_agros___Field__ *)o;
  tmp = ((PyObject*)p->matrix_solver_parameters);
  p->matrix_solver_parameters = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->solver_parameters);
  p->solver_parameters = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->adaptivity_parameters);
  p->adaptivity_parameters = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->_adaptivity_callback);
  p->_adaptivity_callback = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyObject *__pyx_getprop_6_agros_9__Field___field_id(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6_agros_9__Field___8field_id_1__get__(o);
}

static PyObject *__pyx_getprop_6_agros_9__Field___analysis_type(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6_agros_9__Field___13analysis_type_1__get__(o);
}

static int __pyx_setprop_6_agros_9__Field___analysis_type(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_6_agros_9__Field___13analysis_type_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_6_agros_9__Field___solver(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6_agros_9__Field___6solver_1__get__(o);
}

static int __pyx_setprop_6_agros_9__Field___solver(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_6_agros_9__Field___6solver_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_6_agros_9__Field___solver_parameters(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6_agros_9__Field___17solver_parameters_1__get__(o);
}

static PyObject *__pyx_getprop_6_agros_9__Field___adaptivity_callback(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6_agros_9__Field___19adaptivity_callback_1__get__(o);
}

static int __pyx_setprop_6_agros_9__Field___adaptivity_callback(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_6_agros_9__Field___19adaptivity_callback_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_6_agros_9__Field___matrix_solver(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6_agros_9__Field___13matrix_solver_1__get__(o);
}

static int __pyx_setprop_6_agros_9__Field___matrix_solver(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_6_agros_9__Field___13matrix_solver_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_6_agros_9__Field___matrix_solver_parameters(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6_agros_9__Field___24matrix_solver_parameters_1__get__(o);
}

static PyObject *__pyx_getprop_6_agros_9__Field___number_of_refinements(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6_agros_9__Field___21number_of_refinements_1__get__(o);
}

static int __pyx_setprop_6_agros_9__Field___number_of_refinements(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_6_agros_9__Field___21number_of_refinements_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_6_agros_9__Field___polynomial_order(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6_agros_9__Field___16polynomial_order_1__get__(o);
}

static int __pyx_setprop_6_agros_9__Field___polynomial_order(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_6_agros_9__Field___16polynomial_order_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_6_agros_9__Field___adaptivity_type(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6_agros_9__Field___15adaptivity_type_1__get__(o);
}

static int __pyx_setprop_6_agros_9__Field___adaptivity_type(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_6_agros_9__Field___15adaptivity_type_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_6_agros_9__Field___adaptivity_parameters(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6_agros_9__Field___21adaptivity_parameters_1__get__(o);
}

static PyObject *__pyx_getprop_6_agros_9__Field___transient_initial_condition(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6_agros_9__Field___27transient_initial_condition_1__get__(o);
}

static int __pyx_setprop_6_agros_9__Field___transient_initial_condition(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_6_agros_9__Field___27transient_initial_condition_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_6_agros_9__Field___transient_time_skip(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6_agros_9__Field___19transient_time_skip_1__get__(o);
}

static int __pyx_setprop_6_agros_9__Field___transient_time_skip(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_6_agros_9__Field___19transient_time_skip_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyMethodDef __pyx_methods_6_agros___Field__[] = {
  {"__get_solver_parameters__", (PyCFunction)__pyx_pw_6_agros_9__Field___5__get_solver_parameters__, METH_NOARGS, 0},
  {"__set_solver_parameters__", (PyCFunction)__pyx_pw_6_agros_9__Field___7__set_solver_parameters__, METH_O, 0},
  {"__get_matrix_solver_parameters__", (PyCFunction)__pyx_pw_6_agros_9__Field___9__get_matrix_solver_parameters__, METH_NOARGS, 0},
  {"__set_matrix_solver_parameters__", (PyCFunction)__pyx_pw_6_agros_9__Field___11__set_matrix_solver_parameters__, METH_O, 0},
  {"__get_adaptivity_parameters__", (PyCFunction)__pyx_pw_6_agros_9__Field___13__get_adaptivity_parameters__, METH_NOARGS, 0},
  {"__set_adaptivity_parameters__", (PyCFunction)__pyx_pw_6_agros_9__Field___15__set_adaptivity_parameters__, METH_O, 0},
  {"add_boundary", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6_agros_9__Field___17add_boundary, METH_VARARGS|METH_KEYWORDS, __pyx_doc_6_agros_9__Field___16add_boundary},
  {"modify_boundary", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6_agros_9__Field___19modify_boundary, METH_VARARGS|METH_KEYWORDS, __pyx_doc_6_agros_9__Field___18modify_boundary},
  {"remove_boundary", (PyCFunction)__pyx_pw_6_agros_9__Field___21remove_boundary, METH_O, __pyx_doc_6_agros_9__Field___20remove_boundary},
  {"add_material", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6_agros_9__Field___23add_material, METH_VARARGS|METH_KEYWORDS, __pyx_doc_6_agros_9__Field___22add_material},
  {"modify_material", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6_agros_9__Field___25modify_material, METH_VARARGS|METH_KEYWORDS, __pyx_doc_6_agros_9__Field___24modify_material},
  {"remove_material", (PyCFunction)__pyx_pw_6_agros_9__Field___27remove_material, METH_O, __pyx_doc_6_agros_9__Field___26remove_material},
  {"add_recipe_volume_integral", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6_agros_9__Field___29add_recipe_volume_integral, METH_VARARGS|METH_KEYWORDS, 0},
  {"add_recipe_surface_integral", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6_agros_9__Field___31add_recipe_surface_integral, METH_VARARGS|METH_KEYWORDS, 0},
  {"add_recipe_local_value", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6_agros_9__Field___33add_recipe_local_value, METH_VARARGS|METH_KEYWORDS, 0},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_6_agros_9__Field___35__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_6_agros_9__Field___37__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_6_agros___Field__[] = {
  {(char *)"field_id", __pyx_getprop_6_agros_9__Field___field_id, 0, (char *)0, 0},
  {(char *)"analysis_type", __pyx_getprop_6_agros_9__Field___analysis_type, __pyx_setprop_6_agros_9__Field___analysis_type, (char *)0, 0},
  {(char *)"solver", __pyx_getprop_6_agros_9__Field___solver, __pyx_setprop_6_agros_9__Field___solver, (char *)0, 0},
  {(char *)"solver_parameters", __pyx_getprop_6_agros_9__Field___solver_parameters, 0, (char *)0, 0},
  {(char *)"adaptivity_callback", __pyx_getprop_6_agros_9__Field___adaptivity_callback, __pyx_setprop_6_agros_9__Field___adaptivity_callback, (char *)0, 0},
  {(char *)"matrix_solver", __pyx_getprop_6_agros_9__Field___matrix_solver, __pyx_setprop_6_agros_9__Field___matrix_solver, (char *)0, 0},
  {(char *)"matrix_solver_parameters", __pyx_getprop_6_agros_9__Field___matrix_solver_parameters, 0, (char *)0, 0},
  {(char *)"number_of_refinements", __pyx_getprop_6_agros_9__Field___number_of_refinements, __pyx_setprop_6_agros_9__Field___number_of_refinements, (char *)0, 0},
  {(char *)"polynomial_order", __pyx_getprop_6_agros_9__Field___polynomial_order, __pyx_setprop_6_agros_9__Field___polynomial_order, (char *)0, 0},
  {(char *)"adaptivity_type", __pyx_getprop_6_agros_9__Field___adaptivity_type, __pyx_setprop_6_agros_9__Field___adaptivity_type, (char *)0, 0},
  {(char *)"adaptivity_parameters", __pyx_getprop_6_agros_9__Field___adaptivity_parameters, 0, (char *)0, 0},
  {(char *)"transient_initial_condition", __pyx_getprop_6_agros_9__Field___transient_initial_condition, __pyx_setprop_6_agros_9__Field___transient_initial_condition, (char *)0, 0},
  {(char *)"transient_time_skip", __pyx_getprop_6_agros_9__Field___transient_time_skip, __pyx_setprop_6_agros_9__Field___transient_time_skip, (char *)0, 0},
  {0, 0, 0, 0, 0}
};

static PyTypeObject __pyx_type_6_agros___Field__ = {
  PyVarObject_HEAD_INIT(0, 0)
  "_agros.__Field__", /*tp_name*/
  sizeof(struct __pyx_obj_6_agros___Field__), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_6_agros___Field__, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_6_agros___Field__, /*tp_traverse*/
  __pyx_tp_clear_6_agros___Field__, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_6_agros___Field__, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_6_agros___Field__, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_6_agros___Field__, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};

static PyObject *__pyx_tp_new_6_agros___Problem__(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_6_agros___Problem__ *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_6_agros___Problem__ *)o);
  p->_parameters = Py_None; Py_INCREF(Py_None);
  p->_fields = Py_None; Py_INCREF(Py_None);
  p->_geometry = Py_None; Py_INCREF(Py_None);
  if (unlikely(__pyx_pw_6_agros_11__Problem___1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_6_agros___Problem__(PyObject *o) {
  struct __pyx_obj_6_agros___Problem__ *p = (struct __pyx_obj_6_agros___Problem__ *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) + 1);
    __pyx_pw_6_agros_11__Problem___3__dealloc__(o);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) - 1);
    PyErr_Restore(etype, eval, etb);
  }
  Py_CLEAR(p->_parameters);
  Py_CLEAR(p->_fields);
  Py_CLEAR(p->_geometry);
  (*Py_TYPE(o)->tp_free)(o);
}

static int __pyx_tp_traverse_6_agros___Problem__(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_6_agros___Problem__ *p = (struct __pyx_obj_6_agros___Problem__ *)o;
  if (p->_parameters) {
    e = (*v)(p->_parameters, a); if (e) return e;
  }
  if (p->_fields) {
    e = (*v)(p->_fields, a); if (e) return e;
  }
  if (p->_geometry) {
    e = (*v)(p->_geometry, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_6_agros___Problem__(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_6_agros___Problem__ *p = (struct __pyx_obj_6_agros___Problem__ *)o;
  tmp = ((PyObject*)p->_parameters);
  p->_parameters = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->_fields);
  p->_fields = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->_geometry);
  p->_geometry = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyObject *__pyx_getprop_6_agros_11__Problem___parameters(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6_agros_11__Problem___10parameters_1__get__(o);
}

static PyMethodDef __pyx_methods_6_agros___Problem__[] = {
  {"clear", (PyCFunction)__pyx_pw_6_agros_11__Problem___5clear, METH_NOARGS, __pyx_doc_6_agros_11__Problem___4clear},
  {"field", (PyCFunction)__pyx_pw_6_agros_11__Problem___7field, METH_O, __pyx_doc_6_agros_11__Problem___6field},
  {"__remove_field__", (PyCFunction)__pyx_pw_6_agros_11__Problem___9__remove_field__, METH_O, 0},
  {"geometry", (PyCFunction)__pyx_pw_6_agros_11__Problem___11geometry, METH_NOARGS, __pyx_doc_6_agros_11__Problem___10geometry},
  {"computation", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6_agros_11__Problem___13computation, METH_VARARGS|METH_KEYWORDS, __pyx_doc_6_agros_11__Problem___12computation},
  {"__get_parameters__", (PyCFunction)__pyx_pw_6_agros_11__Problem___15__get_parameters__, METH_NOARGS, 0},
  {"__set_parameters__", (PyCFunction)__pyx_pw_6_agros_11__Problem___17__set_parameters__, METH_O, 0},
  {"_get_coordinate_type", (PyCFunction)__pyx_pw_6_agros_11__Problem___19_get_coordinate_type, METH_NOARGS, 0},
  {"_set_coordinate_type", (PyCFunction)__pyx_pw_6_agros_11__Problem___21_set_coordinate_type, METH_O, 0},
  {"_get_mesh_type", (PyCFunction)__pyx_pw_6_agros_11__Problem___23_get_mesh_type, METH_NOARGS, 0},
  {"_set_mesh_type", (PyCFunction)__pyx_pw_6_agros_11__Problem___25_set_mesh_type, METH_O, 0},
  {"_get_frequency", (PyCFunction)__pyx_pw_6_agros_11__Problem___27_get_frequency, METH_NOARGS, 0},
  {"_set_frequency", (PyCFunction)__pyx_pw_6_agros_11__Problem___29_set_frequency, METH_O, 0},
  {"_get_time_step_method", (PyCFunction)__pyx_pw_6_agros_11__Problem___31_get_time_step_method, METH_NOARGS, 0},
  {"_set_time_step_method", (PyCFunction)__pyx_pw_6_agros_11__Problem___33_set_time_step_method, METH_O, 0},
  {"_get_time_method_order", (PyCFunction)__pyx_pw_6_agros_11__Problem___35_get_time_method_order, METH_NOARGS, 0},
  {"_set_time_method_order", (PyCFunction)__pyx_pw_6_agros_11__Problem___37_set_time_method_order, METH_O, 0},
  {"_get_time_method_tolerance", (PyCFunction)__pyx_pw_6_agros_11__Problem___39_get_time_method_tolerance, METH_NOARGS, 0},
  {"_set_time_method_tolerance", (PyCFunction)__pyx_pw_6_agros_11__Problem___41_set_time_method_tolerance, METH_O, 0},
  {"_get_time_total", (PyCFunction)__pyx_pw_6_agros_11__Problem___43_get_time_total, METH_NOARGS, 0},
  {"_set_time_total", (PyCFunction)__pyx_pw_6_agros_11__Problem___45_set_time_total, METH_O, 0},
  {"_get_time_steps", (PyCFunction)__pyx_pw_6_agros_11__Problem___47_get_time_steps, METH_NOARGS, 0},
  {"_set_time_steps", (PyCFunction)__pyx_pw_6_agros_11__Problem___49_set_time_steps, METH_O, 0},
  {"_get_initial_time_step", (PyCFunction)__pyx_pw_6_agros_11__Problem___51_get_initial_time_step, METH_NOARGS, 0},
  {"_set_initial_time_step", (PyCFunction)__pyx_pw_6_agros_11__Problem___53_set_initial_time_step, METH_O, 0},
  {"get_coupling_type", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6_agros_11__Problem___55get_coupling_type, METH_VARARGS|METH_KEYWORDS, __pyx_doc_6_agros_11__Problem___54get_coupling_type},
  {"set_coupling_type", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6_agros_11__Problem___57set_coupling_type, METH_VARARGS|METH_KEYWORDS, __pyx_doc_6_agros_11__Problem___56set_coupling_type},
  {"add_study", (PyCFunction)__pyx_pw_6_agros_11__Problem___59add_study, METH_O, __pyx_doc_6_agros_11__Problem___58add_study},
  {"study", (PyCFunction)__pyx_pw_6_agros_11__Problem___61study, METH_O, __pyx_doc_6_agros_11__Problem___60study},
  {"load", (PyCFunction)__pyx_pw_6_agros_11__Problem___63load, METH_O, __pyx_doc_6_agros_11__Problem___62load},
  {"save", (PyCFunction)__pyx_pw_6_agros_11__Problem___65save, METH_O, __pyx_doc_6_agros_11__Problem___64save},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_6_agros_11__Problem___67__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_6_agros_11__Problem___69__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_6_agros___Problem__[] = {
  {(char *)"parameters", __pyx_getprop_6_agros_11__Problem___parameters, 0, (char *)0, 0},
  {0, 0, 0, 0, 0}
};

static PyTypeObject __pyx_type_6_agros___Problem__ = {
  PyVarObject_HEAD_INIT(0, 0)
  "_agros.__Problem__", /*tp_name*/
  sizeof(struct __pyx_obj_6_agros___Problem__), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_6_agros___Problem__, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_6_agros___Problem__, /*tp_traverse*/
  __pyx_tp_clear_6_agros___Problem__, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_6_agros___Problem__, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_6_agros___Problem__, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_6_agros___Problem__, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};

static PyObject *__pyx_tp_new_6_agros___Computation__(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_6_agros___Computation__ *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_6_agros___Computation__ *)o);
  p->_solutions = Py_None; Py_INCREF(Py_None);
  p->parameters = Py_None; Py_INCREF(Py_None);
  p->results = Py_None; Py_INCREF(Py_None);
  if (unlikely(__pyx_pw_6_agros_15__Computation___1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_6_agros___Computation__(PyObject *o) {
  struct __pyx_obj_6_agros___Computation__ *p = (struct __pyx_obj_6_agros___Computation__ *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) + 1);
    __pyx_pw_6_agros_15__Computation___3__dealloc__(o);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) - 1);
    PyErr_Restore(etype, eval, etb);
  }
  Py_CLEAR(p->_solutions);
  Py_CLEAR(p->parameters);
  Py_CLEAR(p->results);
  (*Py_TYPE(o)->tp_free)(o);
}

static int __pyx_tp_traverse_6_agros___Computation__(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_6_agros___Computation__ *p = (struct __pyx_obj_6_agros___Computation__ *)o;
  if (p->_solutions) {
    e = (*v)(p->_solutions, a); if (e) return e;
  }
  if (p->parameters) {
    e = (*v)(p->parameters, a); if (e) return e;
  }
  if (p->results) {
    e = (*v)(p->results, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_6_agros___Computation__(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_6_agros___Computation__ *p = (struct __pyx_obj_6_agros___Computation__ *)o;
  tmp = ((PyObject*)p->_solutions);
  p->_solutions = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->parameters);
  p->parameters = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->results);
  p->results = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyObject *__pyx_getprop_6_agros_15__Computation___results(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6_agros_15__Computation___7results_1__get__(o);
}

static PyObject *__pyx_getprop_6_agros_15__Computation___parameters(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6_agros_15__Computation___10parameters_1__get__(o);
}

static PyMethodDef __pyx_methods_6_agros___Computation__[] = {
  {"__unauthorized__", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6_agros_15__Computation___5__unauthorized__, METH_VARARGS|METH_KEYWORDS, 0},
  {"clear", (PyCFunction)__pyx_pw_6_agros_15__Computation___7clear, METH_NOARGS, __pyx_doc_6_agros_15__Computation___6clear},
  {"solve", (PyCFunction)__pyx_pw_6_agros_15__Computation___9solve, METH_NOARGS, __pyx_doc_6_agros_15__Computation___8solve},
  {"solution", (PyCFunction)__pyx_pw_6_agros_15__Computation___11solution, METH_O, __pyx_doc_6_agros_15__Computation___10solution},
  {"particle_tracing", (PyCFunction)__pyx_pw_6_agros_15__Computation___13particle_tracing, METH_NOARGS, __pyx_doc_6_agros_15__Computation___12particle_tracing},
  {"elapsed_time", (PyCFunction)__pyx_pw_6_agros_15__Computation___15elapsed_time, METH_NOARGS, __pyx_doc_6_agros_15__Computation___14elapsed_time},
  {"time_steps_length", (PyCFunction)__pyx_pw_6_agros_15__Computation___17time_steps_length, METH_NOARGS, __pyx_doc_6_agros_15__Computation___16time_steps_length},
  {"time_steps_total", (PyCFunction)__pyx_pw_6_agros_15__Computation___19time_steps_total, METH_NOARGS, __pyx_doc_6_agros_15__Computation___18time_steps_total},
  {"__get_results__", (PyCFunction)__pyx_pw_6_agros_15__Computation___21__get_results__, METH_NOARGS, 0},
  {"__set_results__", (PyCFunction)__pyx_pw_6_agros_15__Computation___23__set_results__, METH_O, 0},
  {"__get_parameters__", (PyCFunction)__pyx_pw_6_agros_15__Computation___25__get_parameters__, METH_NOARGS, 0},
  {"_get_coordinate_type", (PyCFunction)__pyx_pw_6_agros_15__Computation___27_get_coordinate_type, METH_NOARGS, 0},
  {"_get_mesh_type", (PyCFunction)__pyx_pw_6_agros_15__Computation___29_get_mesh_type, METH_NOARGS, 0},
  {"_get_frequency", (PyCFunction)__pyx_pw_6_agros_15__Computation___31_get_frequency, METH_NOARGS, 0},
  {"_get_time_step_method", (PyCFunction)__pyx_pw_6_agros_15__Computation___33_get_time_step_method, METH_NOARGS, 0},
  {"_get_time_method_order", (PyCFunction)__pyx_pw_6_agros_15__Computation___35_get_time_method_order, METH_NOARGS, 0},
  {"_get_time_method_tolerance", (PyCFunction)__pyx_pw_6_agros_15__Computation___37_get_time_method_tolerance, METH_NOARGS, 0},
  {"_get_time_total", (PyCFunction)__pyx_pw_6_agros_15__Computation___39_get_time_total, METH_NOARGS, 0},
  {"_get_time_steps", (PyCFunction)__pyx_pw_6_agros_15__Computation___41_get_time_steps, METH_NOARGS, 0},
  {"_get_initial_time_step", (PyCFunction)__pyx_pw_6_agros_15__Computation___43_get_initial_time_step, METH_NOARGS, 0},
  {"get_coupling_type", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6_agros_15__Computation___45get_coupling_type, METH_VARARGS|METH_KEYWORDS, __pyx_doc_6_agros_15__Computation___44get_coupling_type},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_6_agros_15__Computation___47__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_6_agros_15__Computation___49__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_6_agros___Computation__[] = {
  {(char *)"results", __pyx_getprop_6_agros_15__Computation___results, 0, (char *)0, 0},
  {(char *)"parameters", __pyx_getprop_6_agros_15__Computation___parameters, 0, (char *)0, 0},
  {0, 0, 0, 0, 0}
};

static PyTypeObject __pyx_type_6_agros___Computation__ = {
  PyVarObject_HEAD_INIT(0, 0)
  "_agros.__Computation__", /*tp_name*/
  sizeof(struct __pyx_obj_6_agros___Computation__), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_6_agros___Computation__, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_6_agros___Computation__, /*tp_traverse*/
  __pyx_tp_clear_6_agros___Computation__, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_6_agros___Computation__, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_6_agros___Computation__, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_6_agros___Computation__, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};

static PyObject *__pyx_tp_new_6_agros___Solution__(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  if (unlikely(__pyx_pw_6_agros_12__Solution___1__cinit__(o, __pyx_empty_tuple, NULL) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_6_agros___Solution__(PyObject *o) {
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) + 1);
    __pyx_pw_6_agros_12__Solution___3__dealloc__(o);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) - 1);
    PyErr_Restore(etype, eval, etb);
  }
  (*Py_TYPE(o)->tp_free)(o);
}

static PyMethodDef __pyx_methods_6_agros___Solution__[] = {
  {"local_values", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6_agros_12__Solution___5local_values, METH_VARARGS|METH_KEYWORDS, __pyx_doc_6_agros_12__Solution___4local_values},
  {"surface_integrals", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6_agros_12__Solution___7surface_integrals, METH_VARARGS|METH_KEYWORDS, __pyx_doc_6_agros_12__Solution___6surface_integrals},
  {"volume_integrals", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6_agros_12__Solution___9volume_integrals, METH_VARARGS|METH_KEYWORDS, __pyx_doc_6_agros_12__Solution___8volume_integrals},
  {"initial_mesh_info", (PyCFunction)__pyx_pw_6_agros_12__Solution___11initial_mesh_info, METH_NOARGS, __pyx_doc_6_agros_12__Solution___10initial_mesh_info},
  {"solution_mesh_info", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6_agros_12__Solution___13solution_mesh_info, METH_VARARGS|METH_KEYWORDS, __pyx_doc_6_agros_12__Solution___12solution_mesh_info},
  {"solver_info", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6_agros_12__Solution___15solver_info, METH_VARARGS|METH_KEYWORDS, __pyx_doc_6_agros_12__Solution___14solver_info},
  {"adaptivity_info", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6_agros_12__Solution___17adaptivity_info, METH_VARARGS|METH_KEYWORDS, __pyx_doc_6_agros_12__Solution___16adaptivity_info},
  {"export_vtk", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6_agros_12__Solution___19export_vtk, METH_VARARGS|METH_KEYWORDS, 0},
  {"solution", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6_agros_12__Solution___21solution, METH_VARARGS|METH_KEYWORDS, 0},
  {"setSolution", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6_agros_12__Solution___23setSolution, METH_VARARGS|METH_KEYWORDS, 0},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_6_agros_12__Solution___25__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_6_agros_12__Solution___27__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_6_agros___Solution__ = {
  PyVarObject_HEAD_INIT(0, 0)
  "_agros.__Solution__", /*tp_name*/
  sizeof(struct __pyx_obj_6_agros___Solution__), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_6_agros___Solution__, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_6_agros___Solution__, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_6_agros___Solution__, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};

static PyObject *__pyx_tp_new_6_agros___ParticleTracing__(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  if (unlikely(__pyx_pw_6_agros_19__ParticleTracing___1__cinit__(o, __pyx_empty_tuple, NULL) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_6_agros___ParticleTracing__(PyObject *o) {
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) + 1);
    __pyx_pw_6_agros_19__ParticleTracing___3__dealloc__(o);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) - 1);
    PyErr_Restore(etype, eval, etb);
  }
  (*Py_TYPE(o)->tp_free)(o);
}

static PyObject *__pyx_getprop_6_agros_19__ParticleTracing___number_of_particles(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6_agros_19__ParticleTracing___19number_of_particles_1__get__(o);
}

static int __pyx_setprop_6_agros_19__ParticleTracing___number_of_particles(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_6_agros_19__ParticleTracing___19number_of_particles_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_6_agros_19__ParticleTracing___particles_dispersion(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6_agros_19__ParticleTracing___20particles_dispersion_1__get__(o);
}

static int __pyx_setprop_6_agros_19__ParticleTracing___particles_dispersion(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_6_agros_19__ParticleTracing___20particles_dispersion_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_6_agros_19__ParticleTracing___initial_position(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6_agros_19__ParticleTracing___16initial_position_1__get__(o);
}

static int __pyx_setprop_6_agros_19__ParticleTracing___initial_position(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_6_agros_19__ParticleTracing___16initial_position_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_6_agros_19__ParticleTracing___initial_velocity(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6_agros_19__ParticleTracing___16initial_velocity_1__get__(o);
}

static int __pyx_setprop_6_agros_19__ParticleTracing___initial_velocity(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_6_agros_19__ParticleTracing___16initial_velocity_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_6_agros_19__ParticleTracing___mass(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6_agros_19__ParticleTracing___4mass_1__get__(o);
}

static int __pyx_setprop_6_agros_19__ParticleTracing___mass(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_6_agros_19__ParticleTracing___4mass_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_6_agros_19__ParticleTracing___charge(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6_agros_19__ParticleTracing___6charge_1__get__(o);
}

static int __pyx_setprop_6_agros_19__ParticleTracing___charge(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_6_agros_19__ParticleTracing___6charge_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_6_agros_19__ParticleTracing___include_relativistic_correction(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6_agros_19__ParticleTracing___31include_relativistic_correction_1__get__(o);
}

static int __pyx_setprop_6_agros_19__ParticleTracing___include_relativistic_correction(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_6_agros_19__ParticleTracing___31include_relativistic_correction_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_6_agros_19__ParticleTracing___reflect_on_different_material(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6_agros_19__ParticleTracing___29reflect_on_different_material_1__get__(o);
}

static int __pyx_setprop_6_agros_19__ParticleTracing___reflect_on_different_material(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_6_agros_19__ParticleTracing___29reflect_on_different_material_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_6_agros_19__ParticleTracing___reflect_on_boundary(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6_agros_19__ParticleTracing___19reflect_on_boundary_1__get__(o);
}

static int __pyx_setprop_6_agros_19__ParticleTracing___reflect_on_boundary(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_6_agros_19__ParticleTracing___19reflect_on_boundary_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_6_agros_19__ParticleTracing___coefficient_of_restitution(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6_agros_19__ParticleTracing___26coefficient_of_restitution_1__get__(o);
}

static int __pyx_setprop_6_agros_19__ParticleTracing___coefficient_of_restitution(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_6_agros_19__ParticleTracing___26coefficient_of_restitution_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_6_agros_19__ParticleTracing___drag_force_density(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6_agros_19__ParticleTracing___18drag_force_density_1__get__(o);
}

static int __pyx_setprop_6_agros_19__ParticleTracing___drag_force_density(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_6_agros_19__ParticleTracing___18drag_force_density_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_6_agros_19__ParticleTracing___drag_force_reference_area(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6_agros_19__ParticleTracing___25drag_force_reference_area_1__get__(o);
}

static int __pyx_setprop_6_agros_19__ParticleTracing___drag_force_reference_area(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_6_agros_19__ParticleTracing___25drag_force_reference_area_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_6_agros_19__ParticleTracing___drag_force_coefficient(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6_agros_19__ParticleTracing___22drag_force_coefficient_1__get__(o);
}

static int __pyx_setprop_6_agros_19__ParticleTracing___drag_force_coefficient(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_6_agros_19__ParticleTracing___22drag_force_coefficient_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_6_agros_19__ParticleTracing___custom_force(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6_agros_19__ParticleTracing___12custom_force_1__get__(o);
}

static int __pyx_setprop_6_agros_19__ParticleTracing___custom_force(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_6_agros_19__ParticleTracing___12custom_force_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_6_agros_19__ParticleTracing___electrostatic_interaction(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6_agros_19__ParticleTracing___25electrostatic_interaction_1__get__(o);
}

static int __pyx_setprop_6_agros_19__ParticleTracing___electrostatic_interaction(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_6_agros_19__ParticleTracing___25electrostatic_interaction_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_6_agros_19__ParticleTracing___magnetic_interaction(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6_agros_19__ParticleTracing___20magnetic_interaction_1__get__(o);
}

static int __pyx_setprop_6_agros_19__ParticleTracing___magnetic_interaction(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_6_agros_19__ParticleTracing___20magnetic_interaction_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_6_agros_19__ParticleTracing___butcher_table_type(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6_agros_19__ParticleTracing___18butcher_table_type_1__get__(o);
}

static int __pyx_setprop_6_agros_19__ParticleTracing___butcher_table_type(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_6_agros_19__ParticleTracing___18butcher_table_type_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_6_agros_19__ParticleTracing___maximum_number_of_steps(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6_agros_19__ParticleTracing___23maximum_number_of_steps_1__get__(o);
}

static int __pyx_setprop_6_agros_19__ParticleTracing___maximum_number_of_steps(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_6_agros_19__ParticleTracing___23maximum_number_of_steps_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_6_agros_19__ParticleTracing___maximum_relative_error(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6_agros_19__ParticleTracing___22maximum_relative_error_1__get__(o);
}

static int __pyx_setprop_6_agros_19__ParticleTracing___maximum_relative_error(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_6_agros_19__ParticleTracing___22maximum_relative_error_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_6_agros_19__ParticleTracing___maximum_step(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6_agros_19__ParticleTracing___12maximum_step_1__get__(o);
}

static int __pyx_setprop_6_agros_19__ParticleTracing___maximum_step(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_6_agros_19__ParticleTracing___12maximum_step_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_6_agros_19__ParticleTracing___collor_by_velocity(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6_agros_19__ParticleTracing___18collor_by_velocity_1__get__(o);
}

static int __pyx_setprop_6_agros_19__ParticleTracing___collor_by_velocity(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_6_agros_19__ParticleTracing___18collor_by_velocity_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_6_agros_19__ParticleTracing___show_points(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6_agros_19__ParticleTracing___11show_points_1__get__(o);
}

static int __pyx_setprop_6_agros_19__ParticleTracing___show_points(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_6_agros_19__ParticleTracing___11show_points_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_6_agros_19__ParticleTracing___blended_faces(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6_agros_19__ParticleTracing___13blended_faces_1__get__(o);
}

static int __pyx_setprop_6_agros_19__ParticleTracing___blended_faces(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_6_agros_19__ParticleTracing___13blended_faces_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_6_agros_19__ParticleTracing___multiple_show_particles(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6_agros_19__ParticleTracing___23multiple_show_particles_1__get__(o);
}

static int __pyx_setprop_6_agros_19__ParticleTracing___multiple_show_particles(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_6_agros_19__ParticleTracing___23multiple_show_particles_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyMethodDef __pyx_methods_6_agros___ParticleTracing__[] = {
  {"solve", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6_agros_19__ParticleTracing___5solve, METH_VARARGS|METH_KEYWORDS, 0},
  {"positions", (PyCFunction)__pyx_pw_6_agros_19__ParticleTracing___7positions, METH_NOARGS, 0},
  {"velocities", (PyCFunction)__pyx_pw_6_agros_19__ParticleTracing___9velocities, METH_NOARGS, 0},
  {"times", (PyCFunction)__pyx_pw_6_agros_19__ParticleTracing___11times, METH_NOARGS, 0},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_6_agros_19__ParticleTracing___13__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_6_agros_19__ParticleTracing___15__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_6_agros___ParticleTracing__[] = {
  {(char *)"number_of_particles", __pyx_getprop_6_agros_19__ParticleTracing___number_of_particles, __pyx_setprop_6_agros_19__ParticleTracing___number_of_particles, (char *)0, 0},
  {(char *)"particles_dispersion", __pyx_getprop_6_agros_19__ParticleTracing___particles_dispersion, __pyx_setprop_6_agros_19__ParticleTracing___particles_dispersion, (char *)0, 0},
  {(char *)"initial_position", __pyx_getprop_6_agros_19__ParticleTracing___initial_position, __pyx_setprop_6_agros_19__ParticleTracing___initial_position, (char *)0, 0},
  {(char *)"initial_velocity", __pyx_getprop_6_agros_19__ParticleTracing___initial_velocity, __pyx_setprop_6_agros_19__ParticleTracing___initial_velocity, (char *)0, 0},
  {(char *)"mass", __pyx_getprop_6_agros_19__ParticleTracing___mass, __pyx_setprop_6_agros_19__ParticleTracing___mass, (char *)0, 0},
  {(char *)"charge", __pyx_getprop_6_agros_19__ParticleTracing___charge, __pyx_setprop_6_agros_19__ParticleTracing___charge, (char *)0, 0},
  {(char *)"include_relativistic_correction", __pyx_getprop_6_agros_19__ParticleTracing___include_relativistic_correction, __pyx_setprop_6_agros_19__ParticleTracing___include_relativistic_correction, (char *)0, 0},
  {(char *)"reflect_on_different_material", __pyx_getprop_6_agros_19__ParticleTracing___reflect_on_different_material, __pyx_setprop_6_agros_19__ParticleTracing___reflect_on_different_material, (char *)0, 0},
  {(char *)"reflect_on_boundary", __pyx_getprop_6_agros_19__ParticleTracing___reflect_on_boundary, __pyx_setprop_6_agros_19__ParticleTracing___reflect_on_boundary, (char *)0, 0},
  {(char *)"coefficient_of_restitution", __pyx_getprop_6_agros_19__ParticleTracing___coefficient_of_restitution, __pyx_setprop_6_agros_19__ParticleTracing___coefficient_of_restitution, (char *)0, 0},
  {(char *)"drag_force_density", __pyx_getprop_6_agros_19__ParticleTracing___drag_force_density, __pyx_setprop_6_agros_19__ParticleTracing___drag_force_density, (char *)0, 0},
  {(char *)"drag_force_reference_area", __pyx_getprop_6_agros_19__ParticleTracing___drag_force_reference_area, __pyx_setprop_6_agros_19__ParticleTracing___drag_force_reference_area, (char *)0, 0},
  {(char *)"drag_force_coefficient", __pyx_getprop_6_agros_19__ParticleTracing___drag_force_coefficient, __pyx_setprop_6_agros_19__ParticleTracing___drag_force_coefficient, (char *)0, 0},
  {(char *)"custom_force", __pyx_getprop_6_agros_19__ParticleTracing___custom_force, __pyx_setprop_6_agros_19__ParticleTracing___custom_force, (char *)0, 0},
  {(char *)"electrostatic_interaction", __pyx_getprop_6_agros_19__ParticleTracing___electrostatic_interaction, __pyx_setprop_6_agros_19__ParticleTracing___electrostatic_interaction, (char *)0, 0},
  {(char *)"magnetic_interaction", __pyx_getprop_6_agros_19__ParticleTracing___magnetic_interaction, __pyx_setprop_6_agros_19__ParticleTracing___magnetic_interaction, (char *)0, 0},
  {(char *)"butcher_table_type", __pyx_getprop_6_agros_19__ParticleTracing___butcher_table_type, __pyx_setprop_6_agros_19__ParticleTracing___butcher_table_type, (char *)0, 0},
  {(char *)"maximum_number_of_steps", __pyx_getprop_6_agros_19__ParticleTracing___maximum_number_of_steps, __pyx_setprop_6_agros_19__ParticleTracing___maximum_number_of_steps, (char *)0, 0},
  {(char *)"maximum_relative_error", __pyx_getprop_6_agros_19__ParticleTracing___maximum_relative_error, __pyx_setprop_6_agros_19__ParticleTracing___maximum_relative_error, (char *)0, 0},
  {(char *)"maximum_step", __pyx_getprop_6_agros_19__ParticleTracing___maximum_step, __pyx_setprop_6_agros_19__ParticleTracing___maximum_step, (char *)0, 0},
  {(char *)"collor_by_velocity", __pyx_getprop_6_agros_19__ParticleTracing___collor_by_velocity, __pyx_setprop_6_agros_19__ParticleTracing___collor_by_velocity, (char *)0, 0},
  {(char *)"show_points", __pyx_getprop_6_agros_19__ParticleTracing___show_points, __pyx_setprop_6_agros_19__ParticleTracing___show_points, (char *)0, 0},
  {(char *)"blended_faces", __pyx_getprop_6_agros_19__ParticleTracing___blended_faces, __pyx_setprop_6_agros_19__ParticleTracing___blended_faces, (char *)0, 0},
  {(char *)"multiple_show_particles", __pyx_getprop_6_agros_19__ParticleTracing___multiple_show_particles, __pyx_setprop_6_agros_19__ParticleTracing___multiple_show_particles, (char *)0, 0},
  {0, 0, 0, 0, 0}
};

static PyTypeObject __pyx_type_6_agros___ParticleTracing__ = {
  PyVarObject_HEAD_INIT(0, 0)
  "_agros.__ParticleTracing__", /*tp_name*/
  sizeof(struct __pyx_obj_6_agros___ParticleTracing__), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_6_agros___ParticleTracing__, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_6_agros___ParticleTracing__, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_6_agros___ParticleTracing__, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_6_agros___ParticleTracing__, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};

static PyObject *__pyx_tp_new_6_agros___Study__(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_6_agros___Study__ *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_6_agros___Study__ *)o);
  p->settings = Py_None; Py_INCREF(Py_None);
  return o;
}

static void __pyx_tp_dealloc_6_agros___Study__(PyObject *o) {
  struct __pyx_obj_6_agros___Study__ *p = (struct __pyx_obj_6_agros___Study__ *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) + 1);
    __pyx_pw_6_agros_9__Study___1__dealloc__(o);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) - 1);
    PyErr_Restore(etype, eval, etb);
  }
  Py_CLEAR(p->settings);
  (*Py_TYPE(o)->tp_free)(o);
}

static int __pyx_tp_traverse_6_agros___Study__(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_6_agros___Study__ *p = (struct __pyx_obj_6_agros___Study__ *)o;
  if (p->settings) {
    e = (*v)(p->settings, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_6_agros___Study__(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_6_agros___Study__ *p = (struct __pyx_obj_6_agros___Study__ *)o;
  tmp = ((PyObject*)p->settings);
  p->settings = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyObject *__pyx_getprop_6_agros_9__Study___settings(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6_agros_9__Study___8settings_1__get__(o);
}

static PyObject *__pyx_getprop_6_agros_9__Study___clear_solution(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6_agros_9__Study___14clear_solution_1__get__(o);
}

static int __pyx_setprop_6_agros_9__Study___clear_solution(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_6_agros_9__Study___14clear_solution_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_6_agros_9__Study___solve_problem(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6_agros_9__Study___13solve_problem_1__get__(o);
}

static int __pyx_setprop_6_agros_9__Study___solve_problem(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_6_agros_9__Study___13solve_problem_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_6_agros_9__Study___doe(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6_agros_9__Study___3doe_1__get__(o);
}

static int __pyx_setprop_6_agros_9__Study___doe(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_6_agros_9__Study___3doe_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_6_agros_9__Study___doe_deviation(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6_agros_9__Study___13doe_deviation_1__get__(o);
}

static int __pyx_setprop_6_agros_9__Study___doe_deviation(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_6_agros_9__Study___13doe_deviation_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_6_agros_9__Study___doe_sweep_samples(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6_agros_9__Study___17doe_sweep_samples_1__get__(o);
}

static int __pyx_setprop_6_agros_9__Study___doe_sweep_samples(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_6_agros_9__Study___17doe_sweep_samples_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyMethodDef __pyx_methods_6_agros___Study__[] = {
  {"add_parameter", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6_agros_9__Study___3add_parameter, METH_VARARGS|METH_KEYWORDS, 0},
  {"add_functional", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6_agros_9__Study___5add_functional, METH_VARARGS|METH_KEYWORDS, 0},
  {"type", (PyCFunction)__pyx_pw_6_agros_9__Study___7type, METH_NOARGS, 0},
  {"solve", (PyCFunction)__pyx_pw_6_agros_9__Study___9solve, METH_NOARGS, 0},
  {"find_extreme", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6_agros_9__Study___11find_extreme, METH_VARARGS|METH_KEYWORDS, 0},
  {"steps", (PyCFunction)__pyx_pw_6_agros_9__Study___13steps, METH_NOARGS, 0},
  {"values", (PyCFunction)__pyx_pw_6_agros_9__Study___15values, METH_O, 0},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_6_agros_9__Study___17__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_6_agros_9__Study___19__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_6_agros___Study__[] = {
  {(char *)"settings", __pyx_getprop_6_agros_9__Study___settings, 0, (char *)0, 0},
  {(char *)"clear_solution", __pyx_getprop_6_agros_9__Study___clear_solution, __pyx_setprop_6_agros_9__Study___clear_solution, (char *)0, 0},
  {(char *)"solve_problem", __pyx_getprop_6_agros_9__Study___solve_problem, __pyx_setprop_6_agros_9__Study___solve_problem, (char *)0, 0},
  {(char *)"doe", __pyx_getprop_6_agros_9__Study___doe, __pyx_setprop_6_agros_9__Study___doe, (char *)0, 0},
  {(char *)"doe_deviation", __pyx_getprop_6_agros_9__Study___doe_deviation, __pyx_setprop_6_agros_9__Study___doe_deviation, (char *)0, 0},
  {(char *)"doe_sweep_samples", __pyx_getprop_6_agros_9__Study___doe_sweep_samples, __pyx_setprop_6_agros_9__Study___doe_sweep_samples, (char *)0, 0},
  {0, 0, 0, 0, 0}
};

static PyTypeObject __pyx_type_6_agros___Study__ = {
  PyVarObject_HEAD_INIT(0, 0)
  "_agros.__Study__", /*tp_name*/
  sizeof(struct __pyx_obj_6_agros___Study__), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_6_agros___Study__, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_6_agros___Study__, /*tp_traverse*/
  __pyx_tp_clear_6_agros___Study__, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_6_agros___Study__, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_6_agros___Study__, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_6_agros___Study__, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};

static PyObject *__pyx_tp_new_6_agros___StudyBayesOpt__(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o = __pyx_tp_new_6_agros___Study__(t, a, k);
  if (unlikely(!o)) return 0;
  if (unlikely(__pyx_pw_6_agros_17__StudyBayesOpt___1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static PyMethodDef __pyx_methods_6_agros___StudyBayesOpt__[] = {
  {"__get_settings__", (PyCFunction)__pyx_pw_6_agros_17__StudyBayesOpt___3__get_settings__, METH_NOARGS, 0},
  {"__set_settings__", (PyCFunction)__pyx_pw_6_agros_17__StudyBayesOpt___5__set_settings__, METH_O, 0},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_6_agros_17__StudyBayesOpt___7__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_6_agros_17__StudyBayesOpt___9__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_6_agros___StudyBayesOpt__ = {
  PyVarObject_HEAD_INIT(0, 0)
  "_agros.__StudyBayesOpt__", /*tp_name*/
  sizeof(struct __pyx_obj_6_agros___StudyBayesOpt__), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_6_agros___Study__, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_6_agros___Study__, /*tp_traverse*/
  __pyx_tp_clear_6_agros___Study__, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_6_agros___StudyBayesOpt__, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_6_agros___StudyBayesOpt__, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};

static PyObject *__pyx_tp_new_6_agros___StudyNLopt__(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o = __pyx_tp_new_6_agros___Study__(t, a, k);
  if (unlikely(!o)) return 0;
  if (unlikely(__pyx_pw_6_agros_14__StudyNLopt___1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static PyMethodDef __pyx_methods_6_agros___StudyNLopt__[] = {
  {"__get_settings__", (PyCFunction)__pyx_pw_6_agros_14__StudyNLopt___3__get_settings__, METH_NOARGS, 0},
  {"__set_settings__", (PyCFunction)__pyx_pw_6_agros_14__StudyNLopt___5__set_settings__, METH_O, 0},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_6_agros_14__StudyNLopt___7__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_6_agros_14__StudyNLopt___9__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_6_agros___StudyNLopt__ = {
  PyVarObject_HEAD_INIT(0, 0)
  "_agros.__StudyNLopt__", /*tp_name*/
  sizeof(struct __pyx_obj_6_agros___StudyNLopt__), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_6_agros___Study__, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_6_agros___Study__, /*tp_traverse*/
  __pyx_tp_clear_6_agros___Study__, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_6_agros___StudyNLopt__, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_6_agros___StudyNLopt__, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};

static PyObject *__pyx_tp_new_6_agros___StudyNSGA2__(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o = __pyx_tp_new_6_agros___Study__(t, a, k);
  if (unlikely(!o)) return 0;
  if (unlikely(__pyx_pw_6_agros_14__StudyNSGA2___1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static PyMethodDef __pyx_methods_6_agros___StudyNSGA2__[] = {
  {"__get_settings__", (PyCFunction)__pyx_pw_6_agros_14__StudyNSGA2___3__get_settings__, METH_NOARGS, 0},
  {"__set_settings__", (PyCFunction)__pyx_pw_6_agros_14__StudyNSGA2___5__set_settings__, METH_O, 0},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_6_agros_14__StudyNSGA2___7__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_6_agros_14__StudyNSGA2___9__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_6_agros___StudyNSGA2__ = {
  PyVarObject_HEAD_INIT(0, 0)
  "_agros.__StudyNSGA2__", /*tp_name*/
  sizeof(struct __pyx_obj_6_agros___StudyNSGA2__), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_6_agros___Study__, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_6_agros___Study__, /*tp_traverse*/
  __pyx_tp_clear_6_agros___Study__, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_6_agros___StudyNSGA2__, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_6_agros___StudyNSGA2__, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};

static PyObject *__pyx_tp_new_6_agros___StudySweep__(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o = __pyx_tp_new_6_agros___Study__(t, a, k);
  if (unlikely(!o)) return 0;
  if (unlikely(__pyx_pw_6_agros_14__StudySweep___1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static PyMethodDef __pyx_methods_6_agros___StudySweep__[] = {
  {"__get_settings__", (PyCFunction)__pyx_pw_6_agros_14__StudySweep___3__get_settings__, METH_NOARGS, 0},
  {"__set_settings__", (PyCFunction)__pyx_pw_6_agros_14__StudySweep___5__set_settings__, METH_O, 0},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_6_agros_14__StudySweep___7__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_6_agros_14__StudySweep___9__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_6_agros___StudySweep__ = {
  PyVarObject_HEAD_INIT(0, 0)
  "_agros.__StudySweep__", /*tp_name*/
  sizeof(struct __pyx_obj_6_agros___StudySweep__), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_6_agros___Study__, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_6_agros___Study__, /*tp_traverse*/
  __pyx_tp_clear_6_agros___Study__, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_6_agros___StudySweep__, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_6_agros___StudySweep__, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};

static PyObject *__pyx_tp_new_6_agros___Options__(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  if (unlikely(__pyx_pw_6_agros_11__Options___1__cinit__(o, __pyx_empty_tuple, NULL) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_6_agros___Options__(PyObject *o) {
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) + 1);
    __pyx_pw_6_agros_11__Options___3__dealloc__(o);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) - 1);
    PyErr_Restore(etype, eval, etb);
  }
  (*Py_TYPE(o)->tp_free)(o);
}

static PyObject *__pyx_getprop_6_agros_11__Options___cache_size(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6_agros_11__Options___10cache_size_1__get__(o);
}

static int __pyx_setprop_6_agros_11__Options___cache_size(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_6_agros_11__Options___10cache_size_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_6_agros_11__Options___save_matrix_and_rhs(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6_agros_11__Options___19save_matrix_and_rhs_1__get__(o);
}

static int __pyx_setprop_6_agros_11__Options___save_matrix_and_rhs(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_6_agros_11__Options___19save_matrix_and_rhs_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_6_agros_11__Options___save_system(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6_agros_11__Options___11save_system_1__get__(o);
}

static int __pyx_setprop_6_agros_11__Options___save_system(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_6_agros_11__Options___11save_system_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_6_agros_11__Options___dump_format(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6_agros_11__Options___11dump_format_1__get__(o);
}

static int __pyx_setprop_6_agros_11__Options___dump_format(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_6_agros_11__Options___11dump_format_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyMethodDef __pyx_methods_6_agros___Options__[] = {
  {"__reduce_cython__", (PyCFunction)__pyx_pw_6_agros_11__Options___5__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_6_agros_11__Options___7__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_6_agros___Options__[] = {
  {(char *)"cache_size", __pyx_getprop_6_agros_11__Options___cache_size, __pyx_setprop_6_agros_11__Options___cache_size, (char *)0, 0},
  {(char *)"save_matrix_and_rhs", __pyx_getprop_6_agros_11__Options___save_matrix_and_rhs, __pyx_setprop_6_agros_11__Options___save_matrix_and_rhs, (char *)0, 0},
  {(char *)"save_system", __pyx_getprop_6_agros_11__Options___save_system, __pyx_setprop_6_agros_11__Options___save_system, (char *)0, 0},
  {(char *)"dump_format", __pyx_getprop_6_agros_11__Options___dump_format, __pyx_setprop_6_agros_11__Options___dump_format, (char *)0, 0},
  {0, 0, 0, 0, 0}
};

static PyTypeObject __pyx_type_6_agros___Options__ = {
  PyVarObject_HEAD_INIT(0, 0)
  "_agros.__Options__", /*tp_name*/
  sizeof(struct __pyx_obj_6_agros___Options__), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_6_agros___Options__, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_6_agros___Options__, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_6_agros___Options__, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_6_agros___Options__, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};

static PyMethodDef __pyx_methods[] = {
  {0, 0, 0, 0}
};

#if PY_MAJOR_VERSION >= 3
#if CYTHON_PEP489_MULTI_PHASE_INIT
static PyObject* __pyx_pymod_create(PyObject *spec, PyModuleDef *def); /*proto*/
static int __pyx_pymod_exec__agros(PyObject* module); /*proto*/
static PyModuleDef_Slot __pyx_moduledef_slots[] = {
  {Py_mod_create, (void*)__pyx_pymod_create},
  {Py_mod_exec, (void*)__pyx_pymod_exec__agros},
  {0, NULL}
};
#endif

static struct PyModuleDef __pyx_moduledef = {
    PyModuleDef_HEAD_INIT,
    "_agros",
    0, /* m_doc */
  #if CYTHON_PEP489_MULTI_PHASE_INIT
    0, /* m_size */
  #else
    -1, /* m_size */
  #endif
    __pyx_methods /* m_methods */,
  #if CYTHON_PEP489_MULTI_PHASE_INIT
    __pyx_moduledef_slots, /* m_slots */
  #else
    NULL, /* m_reload */
  #endif
    NULL, /* m_traverse */
    NULL, /* m_clear */
    NULL /* m_free */
};
#endif
#ifndef CYTHON_SMALL_CODE
#if defined(__clang__)
    #define CYTHON_SMALL_CODE
#elif defined(__GNUC__) && (__GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ >= 3))
    #define CYTHON_SMALL_CODE __attribute__((cold))
#else
    #define CYTHON_SMALL_CODE
#endif
#endif

static __Pyx_StringTabEntry __pyx_string_tab[] = {
  {&__pyx_kp_s_0_1, __pyx_k_0_1, sizeof(__pyx_k_0_1), 0, 0, 1, 0},
  {&__pyx_n_b_AdaptivityCoarsePercentage, __pyx_k_AdaptivityCoarsePercentage, sizeof(__pyx_k_AdaptivityCoarsePercentage), 0, 0, 0, 1},
  {&__pyx_n_b_AdaptivityFinePercentage, __pyx_k_AdaptivityFinePercentage, sizeof(__pyx_k_AdaptivityFinePercentage), 0, 0, 0, 1},
  {&__pyx_n_b_AdaptivitySteps, __pyx_k_AdaptivitySteps, sizeof(__pyx_k_AdaptivitySteps), 0, 0, 0, 1},
  {&__pyx_n_b_AdaptivityTolerance, __pyx_k_AdaptivityTolerance, sizeof(__pyx_k_AdaptivityTolerance), 0, 0, 0, 1},
  {&__pyx_n_b_AdaptivityTransientBackSteps, __pyx_k_AdaptivityTransientBackSteps, sizeof(__pyx_k_AdaptivityTransientBackSteps), 0, 0, 0, 1},
  {&__pyx_n_b_AdaptivityTransientRedoneEach, __pyx_k_AdaptivityTransientRedoneEach, sizeof(__pyx_k_AdaptivityTransientRedoneEach), 0, 0, 0, 1},
  {&__pyx_n_b_BayesOpt_n_init_samples, __pyx_k_BayesOpt_n_init_samples, sizeof(__pyx_k_BayesOpt_n_init_samples), 0, 0, 0, 1},
  {&__pyx_n_b_BayesOpt_n_iter_relearn, __pyx_k_BayesOpt_n_iter_relearn, sizeof(__pyx_k_BayesOpt_n_iter_relearn), 0, 0, 0, 1},
  {&__pyx_n_b_BayesOpt_n_iterations, __pyx_k_BayesOpt_n_iterations, sizeof(__pyx_k_BayesOpt_n_iterations), 0, 0, 0, 1},
  {&__pyx_n_b_BayesOpt_surr_noise, __pyx_k_BayesOpt_surr_noise, sizeof(__pyx_k_BayesOpt_surr_noise), 0, 0, 0, 1},
  {&__pyx_n_s_Computation, __pyx_k_Computation, sizeof(__pyx_k_Computation), 0, 0, 1, 1},
  {&__pyx_n_s_Field, __pyx_k_Field, sizeof(__pyx_k_Field), 0, 0, 1, 1},
  {&__pyx_n_b_General_ClearSolution, __pyx_k_General_ClearSolution, sizeof(__pyx_k_General_ClearSolution), 0, 0, 0, 1},
  {&__pyx_n_b_General_DoE, __pyx_k_General_DoE, sizeof(__pyx_k_General_DoE), 0, 0, 0, 1},
  {&__pyx_n_b_General_DoE_Deviation, __pyx_k_General_DoE_Deviation, sizeof(__pyx_k_General_DoE_Deviation), 0, 0, 0, 1},
  {&__pyx_n_b_General_DoE_SweepSamples, __pyx_k_General_DoE_SweepSamples, sizeof(__pyx_k_General_DoE_SweepSamples), 0, 0, 0, 1},
  {&__pyx_n_b_General_SolveProblem, __pyx_k_General_SolveProblem, sizeof(__pyx_k_General_SolveProblem), 0, 0, 0, 1},
  {&__pyx_n_s_Geometry, __pyx_k_Geometry, sizeof(__pyx_k_Geometry), 0, 0, 1, 1},
  {&__pyx_n_s_IndexError, __pyx_k_IndexError, sizeof(__pyx_k_IndexError), 0, 0, 1, 1},
  {&__pyx_kp_s_Invalid_key_Valid_keys_0, __pyx_k_Invalid_key_Valid_keys_0, sizeof(__pyx_k_Invalid_key_Valid_keys_0), 0, 0, 1, 0},
  {&__pyx_n_s_KeyError, __pyx_k_KeyError, sizeof(__pyx_k_KeyError), 0, 0, 1, 1},
  {&__pyx_kp_s_Key_0_is_invalid_Valid_keys_1, __pyx_k_Key_0_is_invalid_Valid_keys_1, sizeof(__pyx_k_Key_0_is_invalid_Valid_keys_1), 0, 0, 1, 0},
  {&__pyx_n_b_LinearSolverIterIters, __pyx_k_LinearSolverIterIters, sizeof(__pyx_k_LinearSolverIterIters), 0, 0, 0, 1},
  {&__pyx_n_b_LinearSolverIterToleranceAbsolut, __pyx_k_LinearSolverIterToleranceAbsolut, sizeof(__pyx_k_LinearSolverIterToleranceAbsolut), 0, 0, 0, 1},
  {&__pyx_n_b_NLopt_ftol_abs, __pyx_k_NLopt_ftol_abs, sizeof(__pyx_k_NLopt_ftol_abs), 0, 0, 0, 1},
  {&__pyx_n_b_NLopt_ftol_rel, __pyx_k_NLopt_ftol_rel, sizeof(__pyx_k_NLopt_ftol_rel), 0, 0, 0, 1},
  {&__pyx_n_b_NLopt_n_iterations, __pyx_k_NLopt_n_iterations, sizeof(__pyx_k_NLopt_n_iterations), 0, 0, 0, 1},
  {&__pyx_n_b_NLopt_xtol_abs, __pyx_k_NLopt_xtol_abs, sizeof(__pyx_k_NLopt_xtol_abs), 0, 0, 0, 1},
  {&__pyx_n_b_NLopt_xtol_rel, __pyx_k_NLopt_xtol_rel, sizeof(__pyx_k_NLopt_xtol_rel), 0, 0, 0, 1},
  {&__pyx_n_b_NSGA2_crowdobj, __pyx_k_NSGA2_crowdobj, sizeof(__pyx_k_NSGA2_crowdobj), 0, 0, 0, 1},
  {&__pyx_n_b_NSGA2_eta_c, __pyx_k_NSGA2_eta_c, sizeof(__pyx_k_NSGA2_eta_c), 0, 0, 0, 1},
  {&__pyx_n_b_NSGA2_eta_m, __pyx_k_NSGA2_eta_m, sizeof(__pyx_k_NSGA2_eta_m), 0, 0, 0, 1},
  {&__pyx_n_b_NSGA2_ngen, __pyx_k_NSGA2_ngen, sizeof(__pyx_k_NSGA2_ngen), 0, 0, 0, 1},
  {&__pyx_n_b_NSGA2_pcross, __pyx_k_NSGA2_pcross, sizeof(__pyx_k_NSGA2_pcross), 0, 0, 0, 1},
  {&__pyx_n_b_NSGA2_pmut, __pyx_k_NSGA2_pmut, sizeof(__pyx_k_NSGA2_pmut), 0, 0, 0, 1},
  {&__pyx_n_b_NSGA2_popsize, __pyx_k_NSGA2_popsize, sizeof(__pyx_k_NSGA2_popsize), 0, 0, 0, 1},
  {&__pyx_n_b_NewtonJacobianReuseRatio, __pyx_k_NewtonJacobianReuseRatio, sizeof(__pyx_k_NewtonJacobianReuseRatio), 0, 0, 0, 1},
  {&__pyx_n_b_NewtonMaxStepsReuseJacobian, __pyx_k_NewtonMaxStepsReuseJacobian, sizeof(__pyx_k_NewtonMaxStepsReuseJacobian), 0, 0, 0, 1},
  {&__pyx_n_b_NewtonReuseJacobian, __pyx_k_NewtonReuseJacobian, sizeof(__pyx_k_NewtonReuseJacobian), 0, 0, 0, 1},
  {&__pyx_n_b_NonlinearDampingCoeff, __pyx_k_NonlinearDampingCoeff, sizeof(__pyx_k_NonlinearDampingCoeff), 0, 0, 0, 1},
  {&__pyx_n_b_NonlinearDampingFactorDecreaseRa, __pyx_k_NonlinearDampingFactorDecreaseRa, sizeof(__pyx_k_NonlinearDampingFactorDecreaseRa), 0, 0, 0, 1},
  {&__pyx_n_b_NonlinearRelativeChangeOfSolutio, __pyx_k_NonlinearRelativeChangeOfSolutio, sizeof(__pyx_k_NonlinearRelativeChangeOfSolutio), 0, 0, 0, 1},
  {&__pyx_n_b_NonlinearResidualNorm, __pyx_k_NonlinearResidualNorm, sizeof(__pyx_k_NonlinearResidualNorm), 0, 0, 0, 1},
  {&__pyx_n_b_NonlinearStepsToIncreaseDampingF, __pyx_k_NonlinearStepsToIncreaseDampingF, sizeof(__pyx_k_NonlinearStepsToIncreaseDampingF), 0, 0, 0, 1},
  {&__pyx_n_s_Options, __pyx_k_Options, sizeof(__pyx_k_Options), 0, 0, 1, 1},
  {&__pyx_kp_s_Parameter_type_is_not_supported, __pyx_k_Parameter_type_is_not_supported, sizeof(__pyx_k_Parameter_type_is_not_supported), 0, 0, 1, 0},
  {&__pyx_n_s_Parameters, __pyx_k_Parameters, sizeof(__pyx_k_Parameters), 0, 0, 1, 1},
  {&__pyx_n_s_Parameters_____getitem, __pyx_k_Parameters_____getitem, sizeof(__pyx_k_Parameters_____getitem), 0, 0, 1, 1},
  {&__pyx_n_s_Parameters_____init, __pyx_k_Parameters_____init, sizeof(__pyx_k_Parameters_____init), 0, 0, 1, 1},
  {&__pyx_n_s_Parameters_____setitem, __pyx_k_Parameters_____setitem, sizeof(__pyx_k_Parameters_____setitem), 0, 0, 1, 1},
  {&__pyx_n_s_Parameters_____update, __pyx_k_Parameters_____update, sizeof(__pyx_k_Parameters_____update), 0, 0, 1, 1},
  {&__pyx_n_s_Parameters___get_parameters, __pyx_k_Parameters___get_parameters, sizeof(__pyx_k_Parameters___get_parameters), 0, 0, 1, 1},
  {&__pyx_n_s_ParticleTracing, __pyx_k_ParticleTracing, sizeof(__pyx_k_ParticleTracing), 0, 0, 1, 1},
  {&__pyx_n_b_PicardAndersonAcceleration, __pyx_k_PicardAndersonAcceleration, sizeof(__pyx_k_PicardAndersonAcceleration), 0, 0, 0, 1},
  {&__pyx_n_b_PicardAndersonBeta, __pyx_k_PicardAndersonBeta, sizeof(__pyx_k_PicardAndersonBeta), 0, 0, 0, 1},
  {&__pyx_n_b_PicardAndersonNumberOfLastVector, __pyx_k_PicardAndersonNumberOfLastVector, sizeof(__pyx_k_PicardAndersonNumberOfLastVector), 0, 0, 0, 1},
  {&__pyx_n_s_Problem, __pyx_k_Problem, sizeof(__pyx_k_Problem), 0, 0, 1, 1},
  {&__pyx_n_s_Solution, __pyx_k_Solution, sizeof(__pyx_k_Solution), 0, 0, 1, 1},
  {&__pyx_n_s_Study, __pyx_k_Study, sizeof(__pyx_k_Study), 0, 0, 1, 1},
  {&__pyx_n_s_StudyBayesOpt, __pyx_k_StudyBayesOpt, sizeof(__pyx_k_StudyBayesOpt), 0, 0, 1, 1},
  {&__pyx_n_s_StudyNLopt, __pyx_k_StudyNLopt, sizeof(__pyx_k_StudyNLopt), 0, 0, 1, 1},
  {&__pyx_n_s_StudyNSGA2, __pyx_k_StudyNSGA2, sizeof(__pyx_k_StudyNSGA2), 0, 0, 1, 1},
  {&__pyx_n_s_StudySweep, __pyx_k_StudySweep, sizeof(__pyx_k_StudySweep), 0, 0, 1, 1},
  {&__pyx_kp_s_Study_type_is_not_supported, __pyx_k_Study_type_is_not_supported, sizeof(__pyx_k_Study_type_is_not_supported), 0, 0, 1, 0},
  {&__pyx_n_b_Sweep_num_samples, __pyx_k_Sweep_num_samples, sizeof(__pyx_k_Sweep_num_samples), 0, 0, 0, 1},
  {&__pyx_n_s_TypeError, __pyx_k_TypeError, sizeof(__pyx_k_TypeError), 0, 0, 1, 1},
  {&__pyx_kp_s_Value_can_not_be_changed, __pyx_k_Value_can_not_be_changed, sizeof(__pyx_k_Value_can_not_be_changed), 0, 0, 1, 0},
  {&__pyx_kp_s_Value_of_0_is_out_of_range_1_2, __pyx_k_Value_of_0_is_out_of_range_1_2, sizeof(__pyx_k_Value_of_0_is_out_of_range_1_2), 0, 0, 1, 0},
  {&__pyx_kp_s_Value_of_0_must_be_possitive, __pyx_k_Value_of_0_must_be_possitive, sizeof(__pyx_k_Value_of_0_must_be_possitive), 0, 0, 1, 0},
  {&__pyx_kp_s__25, __pyx_k__25, sizeof(__pyx_k__25), 0, 0, 1, 0},
  {&__pyx_n_s_adaptivity_step, __pyx_k_adaptivity_step, sizeof(__pyx_k_adaptivity_step), 0, 0, 1, 1},
  {&__pyx_n_s_add_edge, __pyx_k_add_edge, sizeof(__pyx_k_add_edge), 0, 0, 1, 1},
  {&__pyx_n_s_add_label, __pyx_k_add_label, sizeof(__pyx_k_add_label), 0, 0, 1, 1},
  {&__pyx_n_s_agros, __pyx_k_agros, sizeof(__pyx_k_agros), 0, 0, 1, 1},
  {&__pyx_n_s_algorithm, __pyx_k_algorithm, sizeof(__pyx_k_algorithm), 0, 0, 1, 1},
  {&__pyx_n_s_anderson_acceleration, __pyx_k_anderson_acceleration, sizeof(__pyx_k_anderson_acceleration), 0, 0, 1, 1},
  {&__pyx_n_s_anderson_beta, __pyx_k_anderson_beta, sizeof(__pyx_k_anderson_beta), 0, 0, 1, 1},
  {&__pyx_n_s_anderson_last_vectors, __pyx_k_anderson_last_vectors, sizeof(__pyx_k_anderson_last_vectors), 0, 0, 1, 1},
  {&__pyx_n_s_angle, __pyx_k_angle, sizeof(__pyx_k_angle), 0, 0, 1, 1},
  {&__pyx_n_s_append, __pyx_k_append, sizeof(__pyx_k_append), 0, 0, 1, 1},
  {&__pyx_n_s_area, __pyx_k_area, sizeof(__pyx_k_area), 0, 0, 1, 1},
  {&__pyx_n_s_bayesopt, __pyx_k_bayesopt, sizeof(__pyx_k_bayesopt), 0, 0, 1, 1},
  {&__pyx_n_s_boundaries, __pyx_k_boundaries, sizeof(__pyx_k_boundaries), 0, 0, 1, 1},
  {&__pyx_n_s_cachedir, __pyx_k_cachedir, sizeof(__pyx_k_cachedir), 0, 0, 1, 1},
  {&__pyx_n_s_check_set, __pyx_k_check_set, sizeof(__pyx_k_check_set), 0, 0, 1, 1},
  {&__pyx_n_s_clear, __pyx_k_clear, sizeof(__pyx_k_clear), 0, 0, 1, 1},
  {&__pyx_n_s_cline_in_traceback, __pyx_k_cline_in_traceback, sizeof(__pyx_k_cline_in_traceback), 0, 0, 1, 1},
  {&__pyx_n_s_coarse_percentage, __pyx_k_coarse_percentage, sizeof(__pyx_k_coarse_percentage), 0, 0, 1, 1},
  {&__pyx_n_s_component, __pyx_k_component, sizeof(__pyx_k_component), 0, 0, 1, 1},
  {&__pyx_n_s_computation, __pyx_k_computation, sizeof(__pyx_k_computation), 0, 0, 1, 1},
  {&__pyx_n_s_coordinate_type, __pyx_k_coordinate_type, sizeof(__pyx_k_coordinate_type), 0, 0, 1, 1},
  {&__pyx_n_s_copy, __pyx_k_copy, sizeof(__pyx_k_copy), 0, 0, 1, 1},
  {&__pyx_n_s_crowdobj, __pyx_k_crowdobj, sizeof(__pyx_k_crowdobj), 0, 0, 1, 1},
  {&__pyx_n_s_damping, __pyx_k_damping, sizeof(__pyx_k_damping), 0, 0, 1, 1},
  {&__pyx_n_s_damping_factor, __pyx_k_damping_factor, sizeof(__pyx_k_damping_factor), 0, 0, 1, 1},
  {&__pyx_n_s_damping_factor_decrease_ratio, __pyx_k_damping_factor_decrease_ratio, sizeof(__pyx_k_damping_factor_decrease_ratio), 0, 0, 1, 1},
  {&__pyx_n_s_damping_factor_increase_steps, __pyx_k_damping_factor_increase_steps, sizeof(__pyx_k_damping_factor_increase_steps), 0, 0, 1, 1},
  {&__pyx_n_s_datadir, __pyx_k_datadir, sizeof(__pyx_k_datadir), 0, 0, 1, 1},
  {&__pyx_n_s_dealii_iterations, __pyx_k_dealii_iterations, sizeof(__pyx_k_dealii_iterations), 0, 0, 1, 1},
  {&__pyx_n_s_dealii_method, __pyx_k_dealii_method, sizeof(__pyx_k_dealii_method), 0, 0, 1, 1},
  {&__pyx_n_s_dealii_preconditioner, __pyx_k_dealii_preconditioner, sizeof(__pyx_k_dealii_preconditioner), 0, 0, 1, 1},
  {&__pyx_n_s_dealii_tolerance, __pyx_k_dealii_tolerance, sizeof(__pyx_k_dealii_tolerance), 0, 0, 1, 1},
  {&__pyx_n_b_derivative_at_endpoints, __pyx_k_derivative_at_endpoints, sizeof(__pyx_k_derivative_at_endpoints), 0, 0, 0, 1},
  {&__pyx_n_s_derivative_at_endpoints, __pyx_k_derivative_at_endpoints, sizeof(__pyx_k_derivative_at_endpoints), 0, 0, 1, 1},
  {&__pyx_n_s_dir, __pyx_k_dir, sizeof(__pyx_k_dir), 0, 0, 1, 1},
  {&__pyx_n_s_doc, __pyx_k_doc, sizeof(__pyx_k_doc), 0, 0, 1, 1},
  {&__pyx_n_s_doe_deviation, __pyx_k_doe_deviation, sizeof(__pyx_k_doe_deviation), 0, 0, 1, 1},
  {&__pyx_n_s_doe_sweep_samples, __pyx_k_doe_sweep_samples, sizeof(__pyx_k_doe_sweep_samples), 0, 0, 1, 1},
  {&__pyx_n_s_dofs, __pyx_k_dofs, sizeof(__pyx_k_dofs), 0, 0, 1, 1},
  {&__pyx_n_s_dx, __pyx_k_dx, sizeof(__pyx_k_dx), 0, 0, 1, 1},
  {&__pyx_n_s_dy, __pyx_k_dy, sizeof(__pyx_k_dy), 0, 0, 1, 1},
  {&__pyx_n_s_edges, __pyx_k_edges, sizeof(__pyx_k_edges), 0, 0, 1, 1},
  {&__pyx_n_s_encode, __pyx_k_encode, sizeof(__pyx_k_encode), 0, 0, 1, 1},
  {&__pyx_n_s_end_node_index, __pyx_k_end_node_index, sizeof(__pyx_k_end_node_index), 0, 0, 1, 1},
  {&__pyx_n_s_error, __pyx_k_error, sizeof(__pyx_k_error), 0, 0, 1, 1},
  {&__pyx_n_s_estimator, __pyx_k_estimator, sizeof(__pyx_k_estimator), 0, 0, 1, 1},
  {&__pyx_n_s_eta_c, __pyx_k_eta_c, sizeof(__pyx_k_eta_c), 0, 0, 1, 1},
  {&__pyx_n_s_eta_m, __pyx_k_eta_m, sizeof(__pyx_k_eta_m), 0, 0, 1, 1},
  {&__pyx_n_s_expression, __pyx_k_expression, sizeof(__pyx_k_expression), 0, 0, 1, 1},
  {&__pyx_n_s_external_method, __pyx_k_external_method, sizeof(__pyx_k_external_method), 0, 0, 1, 1},
  {&__pyx_n_s_external_parameters, __pyx_k_external_parameters, sizeof(__pyx_k_external_parameters), 0, 0, 1, 1},
  {&__pyx_n_s_external_solver, __pyx_k_external_solver, sizeof(__pyx_k_external_solver), 0, 0, 1, 1},
  {&__pyx_n_b_extrapolation, __pyx_k_extrapolation, sizeof(__pyx_k_extrapolation), 0, 0, 0, 1},
  {&__pyx_n_s_extrapolation, __pyx_k_extrapolation, sizeof(__pyx_k_extrapolation), 0, 0, 1, 1},
  {&__pyx_n_s_field_id, __pyx_k_field_id, sizeof(__pyx_k_field_id), 0, 0, 1, 1},
  {&__pyx_n_s_file, __pyx_k_file, sizeof(__pyx_k_file), 0, 0, 1, 1},
  {&__pyx_n_s_fileName, __pyx_k_fileName, sizeof(__pyx_k_fileName), 0, 0, 1, 1},
  {&__pyx_n_s_fine_percentage, __pyx_k_fine_percentage, sizeof(__pyx_k_fine_percentage), 0, 0, 1, 1},
  {&__pyx_n_s_format, __pyx_k_format, sizeof(__pyx_k_format), 0, 0, 1, 1},
  {&__pyx_n_s_frequency, __pyx_k_frequency, sizeof(__pyx_k_frequency), 0, 0, 1, 1},
  {&__pyx_n_s_ftol_abs, __pyx_k_ftol_abs, sizeof(__pyx_k_ftol_abs), 0, 0, 1, 1},
  {&__pyx_n_s_ftol_rel, __pyx_k_ftol_rel, sizeof(__pyx_k_ftol_rel), 0, 0, 1, 1},
  {&__pyx_n_s_get, __pyx_k_get, sizeof(__pyx_k_get), 0, 0, 1, 1},
  {&__pyx_n_s_get_adaptivity_parameters, __pyx_k_get_adaptivity_parameters, sizeof(__pyx_k_get_adaptivity_parameters), 0, 0, 1, 1},
  {&__pyx_n_s_get_coordinate_type, __pyx_k_get_coordinate_type, sizeof(__pyx_k_get_coordinate_type), 0, 0, 1, 1},
  {&__pyx_n_s_get_frequency, __pyx_k_get_frequency, sizeof(__pyx_k_get_frequency), 0, 0, 1, 1},
  {&__pyx_n_s_get_initial_time_step, __pyx_k_get_initial_time_step, sizeof(__pyx_k_get_initial_time_step), 0, 0, 1, 1},
  {&__pyx_n_s_get_matrix_solver_parameters, __pyx_k_get_matrix_solver_parameters, sizeof(__pyx_k_get_matrix_solver_parameters), 0, 0, 1, 1},
  {&__pyx_n_s_get_mesh_type, __pyx_k_get_mesh_type, sizeof(__pyx_k_get_mesh_type), 0, 0, 1, 1},
  {&__pyx_n_s_get_method, __pyx_k_get_method, sizeof(__pyx_k_get_method), 0, 0, 1, 1},
  {&__pyx_n_s_get_parameters, __pyx_k_get_parameters, sizeof(__pyx_k_get_parameters), 0, 0, 1, 1},
  {&__pyx_n_s_get_parameters_2, __pyx_k_get_parameters_2, sizeof(__pyx_k_get_parameters_2), 0, 0, 1, 1},
  {&__pyx_n_s_get_results, __pyx_k_get_results, sizeof(__pyx_k_get_results), 0, 0, 1, 1},
  {&__pyx_n_s_get_script_from_model, __pyx_k_get_script_from_model, sizeof(__pyx_k_get_script_from_model), 0, 0, 1, 1},
  {&__pyx_n_s_get_settings, __pyx_k_get_settings, sizeof(__pyx_k_get_settings), 0, 0, 1, 1},
  {&__pyx_n_s_get_solver_parameters, __pyx_k_get_solver_parameters, sizeof(__pyx_k_get_solver_parameters), 0, 0, 1, 1},
  {&__pyx_n_s_get_time_method_order, __pyx_k_get_time_method_order, sizeof(__pyx_k_get_time_method_order), 0, 0, 1, 1},
  {&__pyx_n_s_get_time_method_tolerance, __pyx_k_get_time_method_tolerance, sizeof(__pyx_k_get_time_method_tolerance), 0, 0, 1, 1},
  {&__pyx_n_s_get_time_step_method, __pyx_k_get_time_step_method, sizeof(__pyx_k_get_time_step_method), 0, 0, 1, 1},
  {&__pyx_n_s_get_time_steps, __pyx_k_get_time_steps, sizeof(__pyx_k_get_time_steps), 0, 0, 1, 1},
  {&__pyx_n_s_get_time_total, __pyx_k_get_time_total, sizeof(__pyx_k_get_time_total), 0, 0, 1, 1},
  {&__pyx_n_s_getitem, __pyx_k_getitem, sizeof(__pyx_k_getitem), 0, 0, 1, 1},
  {&__pyx_n_s_getstate, __pyx_k_getstate, sizeof(__pyx_k_getstate), 0, 0, 1, 1},
  {&__pyx_n_s_height, __pyx_k_height, sizeof(__pyx_k_height), 0, 0, 1, 1},
  {&__pyx_kp_s_home_karban_Projects_agros2d_de, __pyx_k_home_karban_Projects_agros2d_de, sizeof(__pyx_k_home_karban_Projects_agros2d_de), 0, 0, 1, 0},
  {&__pyx_kp_s_home_karban_Projects_agros2d_de_2, __pyx_k_home_karban_Projects_agros2d_de_2, sizeof(__pyx_k_home_karban_Projects_agros2d_de_2), 0, 0, 1, 0},
  {&__pyx_kp_s_home_karban_Projects_agros2d_de_3, __pyx_k_home_karban_Projects_agros2d_de_3, sizeof(__pyx_k_home_karban_Projects_agros2d_de_3), 0, 0, 1, 0},
  {&__pyx_n_s_index, __pyx_k_index, sizeof(__pyx_k_index), 0, 0, 1, 1},
  {&__pyx_n_s_init, __pyx_k_init, sizeof(__pyx_k_init), 0, 0, 1, 1},
  {&__pyx_n_s_init_method, __pyx_k_init_method, sizeof(__pyx_k_init_method), 0, 0, 1, 1},
  {&__pyx_n_s_initial_positions, __pyx_k_initial_positions, sizeof(__pyx_k_initial_positions), 0, 0, 1, 1},
  {&__pyx_n_s_initial_time_step, __pyx_k_initial_time_step, sizeof(__pyx_k_initial_time_step), 0, 0, 1, 1},
  {&__pyx_n_s_initial_velocities, __pyx_k_initial_velocities, sizeof(__pyx_k_initial_velocities), 0, 0, 1, 1},
  {&__pyx_n_b_interpolation, __pyx_k_interpolation, sizeof(__pyx_k_interpolation), 0, 0, 0, 1},
  {&__pyx_n_s_interpolation, __pyx_k_interpolation, sizeof(__pyx_k_interpolation), 0, 0, 1, 1},
  {&__pyx_n_s_item, __pyx_k_item, sizeof(__pyx_k_item), 0, 0, 1, 1},
  {&__pyx_n_s_jacobian_calculations, __pyx_k_jacobian_calculations, sizeof(__pyx_k_jacobian_calculations), 0, 0, 1, 1},
  {&__pyx_n_s_jacobian_reuse, __pyx_k_jacobian_reuse, sizeof(__pyx_k_jacobian_reuse), 0, 0, 1, 1},
  {&__pyx_n_s_jacobian_reuse_ratio, __pyx_k_jacobian_reuse_ratio, sizeof(__pyx_k_jacobian_reuse_ratio), 0, 0, 1, 1},
  {&__pyx_n_s_jacobian_reuse_steps, __pyx_k_jacobian_reuse_steps, sizeof(__pyx_k_jacobian_reuse_steps), 0, 0, 1, 1},
  {&__pyx_n_s_key, __pyx_k_key, sizeof(__pyx_k_key), 0, 0, 1, 1},
  {&__pyx_n_s_keys, __pyx_k_keys, sizeof(__pyx_k_keys), 0, 0, 1, 1},
  {&__pyx_n_s_l_type, __pyx_k_l_type, sizeof(__pyx_k_l_type), 0, 0, 1, 1},
  {&__pyx_n_s_labels, __pyx_k_labels, sizeof(__pyx_k_labels), 0, 0, 1, 1},
  {&__pyx_n_s_list, __pyx_k_list, sizeof(__pyx_k_list), 0, 0, 1, 1},
  {&__pyx_n_s_lower_bound, __pyx_k_lower_bound, sizeof(__pyx_k_lower_bound), 0, 0, 1, 1},
  {&__pyx_n_s_main, __pyx_k_main, sizeof(__pyx_k_main), 0, 0, 1, 1},
  {&__pyx_n_s_materials, __pyx_k_materials, sizeof(__pyx_k_materials), 0, 0, 1, 1},
  {&__pyx_n_s_max, __pyx_k_max, sizeof(__pyx_k_max), 0, 0, 1, 1},
  {&__pyx_n_s_mesh_type, __pyx_k_mesh_type, sizeof(__pyx_k_mesh_type), 0, 0, 1, 1},
  {&__pyx_n_s_metaclass, __pyx_k_metaclass, sizeof(__pyx_k_metaclass), 0, 0, 1, 1},
  {&__pyx_n_s_min, __pyx_k_min, sizeof(__pyx_k_min), 0, 0, 1, 1},
  {&__pyx_n_s_minimum, __pyx_k_minimum, sizeof(__pyx_k_minimum), 0, 0, 1, 1},
  {&__pyx_n_s_module, __pyx_k_module, sizeof(__pyx_k_module), 0, 0, 1, 1},
  {&__pyx_n_s_n_init_samples, __pyx_k_n_init_samples, sizeof(__pyx_k_n_init_samples), 0, 0, 1, 1},
  {&__pyx_n_s_n_iter_relearn, __pyx_k_n_iter_relearn, sizeof(__pyx_k_n_iter_relearn), 0, 0, 1, 1},
  {&__pyx_n_s_n_iterations, __pyx_k_n_iterations, sizeof(__pyx_k_n_iterations), 0, 0, 1, 1},
  {&__pyx_n_s_name, __pyx_k_name, sizeof(__pyx_k_name), 0, 0, 1, 1},
  {&__pyx_n_s_name_2, __pyx_k_name_2, sizeof(__pyx_k_name_2), 0, 0, 1, 1},
  {&__pyx_n_s_new_computation, __pyx_k_new_computation, sizeof(__pyx_k_new_computation), 0, 0, 1, 1},
  {&__pyx_n_s_ngen, __pyx_k_ngen, sizeof(__pyx_k_ngen), 0, 0, 1, 1},
  {&__pyx_n_s_nlopt, __pyx_k_nlopt, sizeof(__pyx_k_nlopt), 0, 0, 1, 1},
  {&__pyx_kp_s_no_default___reduce___due_to_non, __pyx_k_no_default___reduce___due_to_non, sizeof(__pyx_k_no_default___reduce___due_to_non), 0, 0, 1, 0},
  {&__pyx_n_s_nodes, __pyx_k_nodes, sizeof(__pyx_k_nodes), 0, 0, 1, 1},
  {&__pyx_n_s_nsga2, __pyx_k_nsga2, sizeof(__pyx_k_nsga2), 0, 0, 1, 1},
  {&__pyx_n_s_num_samples, __pyx_k_num_samples, sizeof(__pyx_k_num_samples), 0, 0, 1, 1},
  {&__pyx_n_s_open_file, __pyx_k_open_file, sizeof(__pyx_k_open_file), 0, 0, 1, 1},
  {&__pyx_n_s_open_with_solution, __pyx_k_open_with_solution, sizeof(__pyx_k_open_with_solution), 0, 0, 1, 1},
  {&__pyx_n_s_options, __pyx_k_options, sizeof(__pyx_k_options), 0, 0, 1, 1},
  {&__pyx_n_s_orders, __pyx_k_orders, sizeof(__pyx_k_orders), 0, 0, 1, 1},
  {&__pyx_n_s_parameters, __pyx_k_parameters, sizeof(__pyx_k_parameters), 0, 0, 1, 1},
  {&__pyx_n_s_parameters_key, __pyx_k_parameters_key, sizeof(__pyx_k_parameters_key), 0, 0, 1, 1},
  {&__pyx_n_s_particle_charges, __pyx_k_particle_charges, sizeof(__pyx_k_particle_charges), 0, 0, 1, 1},
  {&__pyx_n_s_particle_masses, __pyx_k_particle_masses, sizeof(__pyx_k_particle_masses), 0, 0, 1, 1},
  {&__pyx_n_s_pcross, __pyx_k_pcross, sizeof(__pyx_k_pcross), 0, 0, 1, 1},
  {&__pyx_n_s_pmut, __pyx_k_pmut, sizeof(__pyx_k_pmut), 0, 0, 1, 1},
  {&__pyx_n_s_popsize, __pyx_k_popsize, sizeof(__pyx_k_popsize), 0, 0, 1, 1},
  {&__pyx_n_s_positive_value, __pyx_k_positive_value, sizeof(__pyx_k_positive_value), 0, 0, 1, 1},
  {&__pyx_n_s_prepare, __pyx_k_prepare, sizeof(__pyx_k_prepare), 0, 0, 1, 1},
  {&__pyx_n_s_problem, __pyx_k_problem, sizeof(__pyx_k_problem), 0, 0, 1, 1},
  {&__pyx_n_s_problem_2, __pyx_k_problem_2, sizeof(__pyx_k_problem_2), 0, 0, 1, 1},
  {&__pyx_n_s_property, __pyx_k_property, sizeof(__pyx_k_property), 0, 0, 1, 1},
  {&__pyx_n_s_qualname, __pyx_k_qualname, sizeof(__pyx_k_qualname), 0, 0, 1, 1},
  {&__pyx_n_s_radius, __pyx_k_radius, sizeof(__pyx_k_radius), 0, 0, 1, 1},
  {&__pyx_n_s_range, __pyx_k_range, sizeof(__pyx_k_range), 0, 0, 1, 1},
  {&__pyx_n_s_read_plugins, __pyx_k_read_plugins, sizeof(__pyx_k_read_plugins), 0, 0, 1, 1},
  {&__pyx_n_s_reduce, __pyx_k_reduce, sizeof(__pyx_k_reduce), 0, 0, 1, 1},
  {&__pyx_n_s_reduce_cython, __pyx_k_reduce_cython, sizeof(__pyx_k_reduce_cython), 0, 0, 1, 1},
  {&__pyx_n_s_reduce_ex, __pyx_k_reduce_ex, sizeof(__pyx_k_reduce_ex), 0, 0, 1, 1},
  {&__pyx_n_s_refinements, __pyx_k_refinements, sizeof(__pyx_k_refinements), 0, 0, 1, 1},
  {&__pyx_n_s_relative_change_of_solutions, __pyx_k_relative_change_of_solutions, sizeof(__pyx_k_relative_change_of_solutions), 0, 0, 1, 1},
  {&__pyx_n_s_residual, __pyx_k_residual, sizeof(__pyx_k_residual), 0, 0, 1, 1},
  {&__pyx_n_s_save_file, __pyx_k_save_file, sizeof(__pyx_k_save_file), 0, 0, 1, 1},
  {&__pyx_n_s_save_with_solution, __pyx_k_save_with_solution, sizeof(__pyx_k_save_with_solution), 0, 0, 1, 1},
  {&__pyx_n_s_sc_type, __pyx_k_sc_type, sizeof(__pyx_k_sc_type), 0, 0, 1, 1},
  {&__pyx_n_s_scale, __pyx_k_scale, sizeof(__pyx_k_scale), 0, 0, 1, 1},
  {&__pyx_n_s_segments, __pyx_k_segments, sizeof(__pyx_k_segments), 0, 0, 1, 1},
  {&__pyx_n_s_self, __pyx_k_self, sizeof(__pyx_k_self), 0, 0, 1, 1},
  {&__pyx_kp_s_self_thisptr_cannot_be_converted, __pyx_k_self_thisptr_cannot_be_converted, sizeof(__pyx_k_self_thisptr_cannot_be_converted), 0, 0, 1, 0},
  {&__pyx_n_s_set, __pyx_k_set, sizeof(__pyx_k_set), 0, 0, 1, 1},
  {&__pyx_n_s_set_adaptivity_parameters, __pyx_k_set_adaptivity_parameters, sizeof(__pyx_k_set_adaptivity_parameters), 0, 0, 1, 1},
  {&__pyx_n_s_set_coordinate_type, __pyx_k_set_coordinate_type, sizeof(__pyx_k_set_coordinate_type), 0, 0, 1, 1},
  {&__pyx_n_s_set_datadir, __pyx_k_set_datadir, sizeof(__pyx_k_set_datadir), 0, 0, 1, 1},
  {&__pyx_n_s_set_frequency, __pyx_k_set_frequency, sizeof(__pyx_k_set_frequency), 0, 0, 1, 1},
  {&__pyx_n_s_set_initial_time_step, __pyx_k_set_initial_time_step, sizeof(__pyx_k_set_initial_time_step), 0, 0, 1, 1},
  {&__pyx_n_s_set_matrix_solver_parameters, __pyx_k_set_matrix_solver_parameters, sizeof(__pyx_k_set_matrix_solver_parameters), 0, 0, 1, 1},
  {&__pyx_n_s_set_mesh_type, __pyx_k_set_mesh_type, sizeof(__pyx_k_set_mesh_type), 0, 0, 1, 1},
  {&__pyx_n_s_set_method, __pyx_k_set_method, sizeof(__pyx_k_set_method), 0, 0, 1, 1},
  {&__pyx_n_s_set_parameters, __pyx_k_set_parameters, sizeof(__pyx_k_set_parameters), 0, 0, 1, 1},
  {&__pyx_n_s_set_results, __pyx_k_set_results, sizeof(__pyx_k_set_results), 0, 0, 1, 1},
  {&__pyx_n_s_set_settings, __pyx_k_set_settings, sizeof(__pyx_k_set_settings), 0, 0, 1, 1},
  {&__pyx_n_s_set_solver_parameters, __pyx_k_set_solver_parameters, sizeof(__pyx_k_set_solver_parameters), 0, 0, 1, 1},
  {&__pyx_n_s_set_time_method_order, __pyx_k_set_time_method_order, sizeof(__pyx_k_set_time_method_order), 0, 0, 1, 1},
  {&__pyx_n_s_set_time_method_tolerance, __pyx_k_set_time_method_tolerance, sizeof(__pyx_k_set_time_method_tolerance), 0, 0, 1, 1},
  {&__pyx_n_s_set_time_step_method, __pyx_k_set_time_step_method, sizeof(__pyx_k_set_time_step_method), 0, 0, 1, 1},
  {&__pyx_n_s_set_time_steps, __pyx_k_set_time_steps, sizeof(__pyx_k_set_time_steps), 0, 0, 1, 1},
  {&__pyx_n_s_set_time_total, __pyx_k_set_time_total, sizeof(__pyx_k_set_time_total), 0, 0, 1, 1},
  {&__pyx_n_s_setitem, __pyx_k_setitem, sizeof(__pyx_k_setitem), 0, 0, 1, 1},
  {&__pyx_n_s_setstate, __pyx_k_setstate, sizeof(__pyx_k_setstate), 0, 0, 1, 1},
  {&__pyx_n_s_setstate_cython, __pyx_k_setstate_cython, sizeof(__pyx_k_setstate_cython), 0, 0, 1, 1},
  {&__pyx_n_s_sln, __pyx_k_sln, sizeof(__pyx_k_sln), 0, 0, 1, 1},
  {&__pyx_n_s_solution_change, __pyx_k_solution_change, sizeof(__pyx_k_solution_change), 0, 0, 1, 1},
  {&__pyx_n_s_source_field, __pyx_k_source_field, sizeof(__pyx_k_source_field), 0, 0, 1, 1},
  {&__pyx_n_s_start_node_index, __pyx_k_start_node_index, sizeof(__pyx_k_start_node_index), 0, 0, 1, 1},
  {&__pyx_n_s_steps, __pyx_k_steps, sizeof(__pyx_k_steps), 0, 0, 1, 1},
  {&__pyx_n_s_str, __pyx_k_str, sizeof(__pyx_k_str), 0, 0, 1, 1},
  {&__pyx_n_s_strategy, __pyx_k_strategy, sizeof(__pyx_k_strategy), 0, 0, 1, 1},
  {&__pyx_n_s_strategy_hp, __pyx_k_strategy_hp, sizeof(__pyx_k_strategy_hp), 0, 0, 1, 1},
  {&__pyx_n_s_surr_name, __pyx_k_surr_name, sizeof(__pyx_k_surr_name), 0, 0, 1, 1},
  {&__pyx_n_s_surr_noise, __pyx_k_surr_noise, sizeof(__pyx_k_surr_noise), 0, 0, 1, 1},
  {&__pyx_n_s_sweep, __pyx_k_sweep, sizeof(__pyx_k_sweep), 0, 0, 1, 1},
  {&__pyx_n_s_target_field, __pyx_k_target_field, sizeof(__pyx_k_target_field), 0, 0, 1, 1},
  {&__pyx_n_s_tempdir, __pyx_k_tempdir, sizeof(__pyx_k_tempdir), 0, 0, 1, 1},
  {&__pyx_n_s_test, __pyx_k_test, sizeof(__pyx_k_test), 0, 0, 1, 1},
  {&__pyx_n_s_time_method_order, __pyx_k_time_method_order, sizeof(__pyx_k_time_method_order), 0, 0, 1, 1},
  {&__pyx_n_s_time_method_tolerance, __pyx_k_time_method_tolerance, sizeof(__pyx_k_time_method_tolerance), 0, 0, 1, 1},
  {&__pyx_n_s_time_step, __pyx_k_time_step, sizeof(__pyx_k_time_step), 0, 0, 1, 1},
  {&__pyx_n_s_time_step_method, __pyx_k_time_step_method, sizeof(__pyx_k_time_step_method), 0, 0, 1, 1},
  {&__pyx_n_s_time_steps, __pyx_k_time_steps, sizeof(__pyx_k_time_steps), 0, 0, 1, 1},
  {&__pyx_n_s_time_total, __pyx_k_time_total, sizeof(__pyx_k_time_total), 0, 0, 1, 1},
  {&__pyx_n_s_tolerance, __pyx_k_tolerance, sizeof(__pyx_k_tolerance), 0, 0, 1, 1},
  {&__pyx_n_s_transient_back_steps, __pyx_k_transient_back_steps, sizeof(__pyx_k_transient_back_steps), 0, 0, 1, 1},
  {&__pyx_n_s_transient_redone_steps, __pyx_k_transient_redone_steps, sizeof(__pyx_k_transient_redone_steps), 0, 0, 1, 1},
  {&__pyx_n_s_type, __pyx_k_type, sizeof(__pyx_k_type), 0, 0, 1, 1},
  {&__pyx_n_s_unauthorized, __pyx_k_unauthorized, sizeof(__pyx_k_unauthorized), 0, 0, 1, 1},
  {&__pyx_n_s_update, __pyx_k_update, sizeof(__pyx_k_update), 0, 0, 1, 1},
  {&__pyx_n_s_upper_bound, __pyx_k_upper_bound, sizeof(__pyx_k_upper_bound), 0, 0, 1, 1},
  {&__pyx_n_s_value, __pyx_k_value, sizeof(__pyx_k_value), 0, 0, 1, 1},
  {&__pyx_n_s_value_in_list, __pyx_k_value_in_list, sizeof(__pyx_k_value_in_list), 0, 0, 1, 1},
  {&__pyx_n_s_value_in_range, __pyx_k_value_in_range, sizeof(__pyx_k_value_in_range), 0, 0, 1, 1},
  {&__pyx_n_s_variable, __pyx_k_variable, sizeof(__pyx_k_variable), 0, 0, 1, 1},
  {&__pyx_n_s_variableComp, __pyx_k_variableComp, sizeof(__pyx_k_variableComp), 0, 0, 1, 1},
  {&__pyx_n_s_version, __pyx_k_version, sizeof(__pyx_k_version), 0, 0, 1, 1},
  {&__pyx_n_s_weight, __pyx_k_weight, sizeof(__pyx_k_weight), 0, 0, 1, 1},
  {&__pyx_n_s_width, __pyx_k_width, sizeof(__pyx_k_width), 0, 0, 1, 1},
  {&__pyx_n_s_withMarkers, __pyx_k_withMarkers, sizeof(__pyx_k_withMarkers), 0, 0, 1, 1},
  {&__pyx_n_s_x, __pyx_k_x, sizeof(__pyx_k_x), 0, 0, 1, 1},
  {&__pyx_n_s_x0, __pyx_k_x0, sizeof(__pyx_k_x0), 0, 0, 1, 1},
  {&__pyx_n_s_x1, __pyx_k_x1, sizeof(__pyx_k_x1), 0, 0, 1, 1},
  {&__pyx_n_s_x2, __pyx_k_x2, sizeof(__pyx_k_x2), 0, 0, 1, 1},
  {&__pyx_n_s_xtol_abs, __pyx_k_xtol_abs, sizeof(__pyx_k_xtol_abs), 0, 0, 1, 1},
  {&__pyx_n_s_xtol_rel, __pyx_k_xtol_rel, sizeof(__pyx_k_xtol_rel), 0, 0, 1, 1},
  {&__pyx_n_s_y, __pyx_k_y, sizeof(__pyx_k_y), 0, 0, 1, 1},
  {&__pyx_n_s_y0, __pyx_k_y0, sizeof(__pyx_k_y0), 0, 0, 1, 1},
  {&__pyx_n_s_y1, __pyx_k_y1, sizeof(__pyx_k_y1), 0, 0, 1, 1},
  {&__pyx_n_s_y2, __pyx_k_y2, sizeof(__pyx_k_y2), 0, 0, 1, 1},
  {0, 0, 0, 0, 0, 0, 0}
};
static CYTHON_SMALL_CODE int __Pyx_InitCachedBuiltins(void) {
  __pyx_builtin_property = __Pyx_GetBuiltinName(__pyx_n_s_property); if (!__pyx_builtin_property) __PYX_ERR(0, 122, __pyx_L1_error)
  __pyx_builtin_KeyError = __Pyx_GetBuiltinName(__pyx_n_s_KeyError); if (!__pyx_builtin_KeyError) __PYX_ERR(1, 42, __pyx_L1_error)
  __pyx_builtin_IndexError = __Pyx_GetBuiltinName(__pyx_n_s_IndexError); if (!__pyx_builtin_IndexError) __PYX_ERR(1, 54, __pyx_L1_error)
  __pyx_builtin_range = __Pyx_GetBuiltinName(__pyx_n_s_range); if (!__pyx_builtin_range) __PYX_ERR(1, 84, __pyx_L1_error)
  __pyx_builtin_TypeError = __Pyx_GetBuiltinName(__pyx_n_s_TypeError); if (!__pyx_builtin_TypeError) __PYX_ERR(2, 2, __pyx_L1_error)
  return 0;
  __pyx_L1_error:;
  return -1;
}

static CYTHON_SMALL_CODE int __Pyx_InitCachedConstants(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_InitCachedConstants", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__22 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__22)) __PYX_ERR(2, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__22);
  __Pyx_GIVEREF(__pyx_tuple__22);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__23 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__23)) __PYX_ERR(2, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__23);
  __Pyx_GIVEREF(__pyx_tuple__23);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__31 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__31)) __PYX_ERR(2, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__31);
  __Pyx_GIVEREF(__pyx_tuple__31);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__32 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__32)) __PYX_ERR(2, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__32);
  __Pyx_GIVEREF(__pyx_tuple__32);

  /* "../resources_source/python/pyproblem.pxi":234
 *             return __StudySweep__()
 * 
 *         raise TypeError("Study type is not supported.")             # <<<<<<<<<<<<<<
 * 
 *     def study(self, index):
 */
  __pyx_tuple__33 = PyTuple_Pack(1, __pyx_kp_s_Study_type_is_not_supported); if (unlikely(!__pyx_tuple__33)) __PYX_ERR(0, 234, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__33);
  __Pyx_GIVEREF(__pyx_tuple__33);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__34 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__34)) __PYX_ERR(2, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__34);
  __Pyx_GIVEREF(__pyx_tuple__34);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__35 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__35)) __PYX_ERR(2, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__35);
  __Pyx_GIVEREF(__pyx_tuple__35);

  /* "../resources_source/python/pycomputation.pxi":43
 *             self._computation = new PyComputation(<string> computation.encode())
 *         else:
 *             raise TypeError("Parameter type is not supported.")             # <<<<<<<<<<<<<<
 * 
 *         self._solutions = dict()
 */
  __pyx_tuple__36 = PyTuple_Pack(1, __pyx_kp_s_Parameter_type_is_not_supported); if (unlikely(!__pyx_tuple__36)) __PYX_ERR(5, 43, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__36);
  __Pyx_GIVEREF(__pyx_tuple__36);

  /* "../resources_source/python/pycomputation.pxi":55
 * 
 *     def __unauthorized__(self, value = None):
 *         raise Exception("Value can not be changed.")             # <<<<<<<<<<<<<<
 * 
 *     def clear(self):
 */
  __pyx_tuple__37 = PyTuple_Pack(1, __pyx_kp_s_Value_can_not_be_changed); if (unlikely(!__pyx_tuple__37)) __PYX_ERR(5, 55, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__37);
  __Pyx_GIVEREF(__pyx_tuple__37);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__38 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__38)) __PYX_ERR(2, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__38);
  __Pyx_GIVEREF(__pyx_tuple__38);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__39 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__39)) __PYX_ERR(2, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__39);
  __Pyx_GIVEREF(__pyx_tuple__39);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__42 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__42)) __PYX_ERR(2, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__42);
  __Pyx_GIVEREF(__pyx_tuple__42);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__43 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__43)) __PYX_ERR(2, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__43);
  __Pyx_GIVEREF(__pyx_tuple__43);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__48 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__48)) __PYX_ERR(2, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__48);
  __Pyx_GIVEREF(__pyx_tuple__48);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__49 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__49)) __PYX_ERR(2, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__49);
  __Pyx_GIVEREF(__pyx_tuple__49);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.thisptr cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.thisptr cannot be converted to a Python object for pickling")
 */
  __pyx_tuple__50 = PyTuple_Pack(1, __pyx_kp_s_self_thisptr_cannot_be_converted); if (unlikely(!__pyx_tuple__50)) __PYX_ERR(2, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__50);
  __Pyx_GIVEREF(__pyx_tuple__50);

  /* "(tree fragment)":4
 *     raise TypeError("self.thisptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.thisptr cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__51 = PyTuple_Pack(1, __pyx_kp_s_self_thisptr_cannot_be_converted); if (unlikely(!__pyx_tuple__51)) __PYX_ERR(2, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__51);
  __Pyx_GIVEREF(__pyx_tuple__51);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__52 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__52)) __PYX_ERR(2, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__52);
  __Pyx_GIVEREF(__pyx_tuple__52);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__53 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__53)) __PYX_ERR(2, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__53);
  __Pyx_GIVEREF(__pyx_tuple__53);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__54 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__54)) __PYX_ERR(2, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__54);
  __Pyx_GIVEREF(__pyx_tuple__54);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__55 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__55)) __PYX_ERR(2, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__55);
  __Pyx_GIVEREF(__pyx_tuple__55);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__56 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__56)) __PYX_ERR(2, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__56);
  __Pyx_GIVEREF(__pyx_tuple__56);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__57 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__57)) __PYX_ERR(2, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__57);
  __Pyx_GIVEREF(__pyx_tuple__57);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__58 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__58)) __PYX_ERR(2, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__58);
  __Pyx_GIVEREF(__pyx_tuple__58);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__59 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__59)) __PYX_ERR(2, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__59);
  __Pyx_GIVEREF(__pyx_tuple__59);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__60 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__60)) __PYX_ERR(2, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__60);
  __Pyx_GIVEREF(__pyx_tuple__60);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__61 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__61)) __PYX_ERR(2, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__61);
  __Pyx_GIVEREF(__pyx_tuple__61);

  /* "_agros.pyx":24
 * # Parameters class
 * class __Parameters__(dict):
 *     def __init__(self, get_method, set_method, check_set = True):             # <<<<<<<<<<<<<<
 *         self.get = get_method
 *         self.set = set_method
 */
  __pyx_tuple__62 = PyTuple_Pack(4, __pyx_n_s_self, __pyx_n_s_get_method, __pyx_n_s_set_method, __pyx_n_s_check_set); if (unlikely(!__pyx_tuple__62)) __PYX_ERR(1, 24, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__62);
  __Pyx_GIVEREF(__pyx_tuple__62);
  __pyx_codeobj__63 = (PyObject*)__Pyx_PyCode_New(4, 0, 4, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__62, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_karban_Projects_agros2d_de, __pyx_n_s_init, 24, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__63)) __PYX_ERR(1, 24, __pyx_L1_error)
  __pyx_tuple__64 = PyTuple_Pack(1, ((PyObject *)Py_True)); if (unlikely(!__pyx_tuple__64)) __PYX_ERR(1, 24, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__64);
  __Pyx_GIVEREF(__pyx_tuple__64);

  /* "_agros.pyx":30
 *         dict.__init__(self, self.get())
 * 
 *     def __update__(self):             # <<<<<<<<<<<<<<
 *         parameters = self.get()
 *         for parameters_key in parameters:
 */
  __pyx_tuple__65 = PyTuple_Pack(3, __pyx_n_s_self, __pyx_n_s_parameters, __pyx_n_s_parameters_key); if (unlikely(!__pyx_tuple__65)) __PYX_ERR(1, 30, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__65);
  __Pyx_GIVEREF(__pyx_tuple__65);
  __pyx_codeobj__66 = (PyObject*)__Pyx_PyCode_New(1, 0, 3, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__65, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_karban_Projects_agros2d_de, __pyx_n_s_update, 30, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__66)) __PYX_ERR(1, 30, __pyx_L1_error)

  /* "_agros.pyx":35
 *             dict.__setitem__(self, parameters_key, parameters[parameters_key])
 * 
 *     def __getitem__(self, key):             # <<<<<<<<<<<<<<
 *         self.__update__()
 *         return dict.__getitem__(self, key)
 */
  __pyx_tuple__67 = PyTuple_Pack(2, __pyx_n_s_self, __pyx_n_s_key); if (unlikely(!__pyx_tuple__67)) __PYX_ERR(1, 35, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__67);
  __Pyx_GIVEREF(__pyx_tuple__67);
  __pyx_codeobj__68 = (PyObject*)__Pyx_PyCode_New(2, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__67, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_karban_Projects_agros2d_de, __pyx_n_s_getitem, 35, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__68)) __PYX_ERR(1, 35, __pyx_L1_error)

  /* "_agros.pyx":39
 *         return dict.__getitem__(self, key)
 * 
 *     def __setitem__(self, key, value):             # <<<<<<<<<<<<<<
 *         if (self.check_set):
 *             if (not key in self):
 */
  __pyx_tuple__69 = PyTuple_Pack(3, __pyx_n_s_self, __pyx_n_s_key, __pyx_n_s_value); if (unlikely(!__pyx_tuple__69)) __PYX_ERR(1, 39, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__69);
  __Pyx_GIVEREF(__pyx_tuple__69);
  __pyx_codeobj__70 = (PyObject*)__Pyx_PyCode_New(3, 0, 3, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__69, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_karban_Projects_agros2d_de, __pyx_n_s_setitem, 39, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__70)) __PYX_ERR(1, 39, __pyx_L1_error)

  /* "_agros.pyx":47
 *         self.set(dict(self))
 * 
 *     def get_parameters(self):             # <<<<<<<<<<<<<<
 *         self.__update__()
 *         return self
 */
  __pyx_tuple__71 = PyTuple_Pack(1, __pyx_n_s_self); if (unlikely(!__pyx_tuple__71)) __PYX_ERR(1, 47, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__71);
  __Pyx_GIVEREF(__pyx_tuple__71);
  __pyx_codeobj__72 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__71, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_karban_Projects_agros2d_de, __pyx_n_s_get_parameters, 47, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__72)) __PYX_ERR(1, 47, __pyx_L1_error)

  /* "_agros.pyx":52
 * 
 * # test functions
 * def value_in_range(value, min, max, key):             # <<<<<<<<<<<<<<
 *     if (value < min or value > max):
 *         raise IndexError("Value of '{0}' is out of range ({1} - {2})".format(key, min, max))
 */
  __pyx_tuple__73 = PyTuple_Pack(4, __pyx_n_s_value, __pyx_n_s_min, __pyx_n_s_max, __pyx_n_s_key); if (unlikely(!__pyx_tuple__73)) __PYX_ERR(1, 52, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__73);
  __Pyx_GIVEREF(__pyx_tuple__73);
  __pyx_codeobj__74 = (PyObject*)__Pyx_PyCode_New(4, 0, 4, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__73, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_karban_Projects_agros2d_de, __pyx_n_s_value_in_range, 52, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__74)) __PYX_ERR(1, 52, __pyx_L1_error)

  /* "_agros.pyx":56
 *         raise IndexError("Value of '{0}' is out of range ({1} - {2})".format(key, min, max))
 * 
 * def value_in_list(value, list, key):             # <<<<<<<<<<<<<<
 *     for item in list:
 *         if (value == item):
 */
  __pyx_tuple__75 = PyTuple_Pack(4, __pyx_n_s_value, __pyx_n_s_list, __pyx_n_s_key, __pyx_n_s_item); if (unlikely(!__pyx_tuple__75)) __PYX_ERR(1, 56, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__75);
  __Pyx_GIVEREF(__pyx_tuple__75);
  __pyx_codeobj__76 = (PyObject*)__Pyx_PyCode_New(3, 0, 4, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__75, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_karban_Projects_agros2d_de, __pyx_n_s_value_in_list, 56, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__76)) __PYX_ERR(1, 56, __pyx_L1_error)

  /* "_agros.pyx":63
 *     raise KeyError("Key '{0}' is invalid. Valid keys: {1}".format(list, key))
 * 
 * def positive_value(value, key):             # <<<<<<<<<<<<<<
 *     if (value < 0):
 *         raise IndexError("Value of {0} must be possitive.".format(key))
 */
  __pyx_tuple__77 = PyTuple_Pack(2, __pyx_n_s_value, __pyx_n_s_key); if (unlikely(!__pyx_tuple__77)) __PYX_ERR(1, 63, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__77);
  __Pyx_GIVEREF(__pyx_tuple__77);
  __pyx_codeobj__78 = (PyObject*)__Pyx_PyCode_New(2, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__77, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_karban_Projects_agros2d_de, __pyx_n_s_positive_value, 63, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__78)) __PYX_ERR(1, 63, __pyx_L1_error)

  /* "../resources_source/python/pyproblem.pxi":281
 * 
 * __problem__ = __Problem__()
 * def problem(clear = False):             # <<<<<<<<<<<<<<
 *     if (clear):
 *         __problem__.clear()
 */
  __pyx_tuple__79 = PyTuple_Pack(1, __pyx_n_s_clear); if (unlikely(!__pyx_tuple__79)) __PYX_ERR(0, 281, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__79);
  __Pyx_GIVEREF(__pyx_tuple__79);
  __pyx_codeobj__80 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__79, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_karban_Projects_agros2d_de_2, __pyx_n_s_problem_2, 281, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__80)) __PYX_ERR(0, 281, __pyx_L1_error)

  /* "../resources_source/python/pycomputation.pxi":198
 *         return self._computation.getCouplingType(source_field.encode(), target_field.encode()).decode()
 * 
 * def computation(computation):             # <<<<<<<<<<<<<<
 *     return __Computation__(computation=computation)
 */
  __pyx_tuple__81 = PyTuple_Pack(1, __pyx_n_s_computation); if (unlikely(!__pyx_tuple__81)) __PYX_ERR(5, 198, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__81);
  __Pyx_GIVEREF(__pyx_tuple__81);
  __pyx_codeobj__82 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__81, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_karban_Projects_agros2d_de_3, __pyx_n_s_computation, 198, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__82)) __PYX_ERR(5, 198, __pyx_L1_error)

  /* "_agros.pyx":148
 *         void setDumpFormat(string format) except +
 * 
 * def open_file(file, open_with_solution = False):             # <<<<<<<<<<<<<<
 *     openFile(file.encode(), open_with_solution)
 * 
 */
  __pyx_tuple__83 = PyTuple_Pack(2, __pyx_n_s_file, __pyx_n_s_open_with_solution); if (unlikely(!__pyx_tuple__83)) __PYX_ERR(1, 148, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__83);
  __Pyx_GIVEREF(__pyx_tuple__83);
  __pyx_codeobj__84 = (PyObject*)__Pyx_PyCode_New(2, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__83, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_karban_Projects_agros2d_de, __pyx_n_s_open_file, 148, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__84)) __PYX_ERR(1, 148, __pyx_L1_error)

  /* "_agros.pyx":151
 *     openFile(file.encode(), open_with_solution)
 * 
 * def save_file(file, save_with_solution = False):             # <<<<<<<<<<<<<<
 *     saveFile(file.encode(), save_with_solution)
 * 
 */
  __pyx_tuple__85 = PyTuple_Pack(2, __pyx_n_s_file, __pyx_n_s_save_with_solution); if (unlikely(!__pyx_tuple__85)) __PYX_ERR(1, 151, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__85);
  __Pyx_GIVEREF(__pyx_tuple__85);
  __pyx_codeobj__86 = (PyObject*)__Pyx_PyCode_New(2, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__85, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_karban_Projects_agros2d_de, __pyx_n_s_save_file, 151, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__86)) __PYX_ERR(1, 151, __pyx_L1_error)

  /* "_agros.pyx":154
 *     saveFile(file.encode(), save_with_solution)
 * 
 * def get_script_from_model():             # <<<<<<<<<<<<<<
 *     return getScriptFromModel().decode()
 * 
 */
  __pyx_codeobj__87 = (PyObject*)__Pyx_PyCode_New(0, 0, 0, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_karban_Projects_agros2d_de, __pyx_n_s_get_script_from_model, 154, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__87)) __PYX_ERR(1, 154, __pyx_L1_error)

  /* "_agros.pyx":157
 *     return getScriptFromModel().decode()
 * 
 * def tempdir(dir = ""):             # <<<<<<<<<<<<<<
 *     return "{0}/{1}".format(tempDir().decode(), dir)
 * 
 */
  __pyx_tuple__88 = PyTuple_Pack(1, __pyx_n_s_dir); if (unlikely(!__pyx_tuple__88)) __PYX_ERR(1, 157, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__88);
  __Pyx_GIVEREF(__pyx_tuple__88);
  __pyx_codeobj__89 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__88, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_karban_Projects_agros2d_de, __pyx_n_s_tempdir, 157, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__89)) __PYX_ERR(1, 157, __pyx_L1_error)

  /* "_agros.pyx":160
 *     return "{0}/{1}".format(tempDir().decode(), dir)
 * 
 * def cachedir(dir = ""):             # <<<<<<<<<<<<<<
 *     return "{0}/{1}".format(cacheDir().decode(), dir)
 * 
 */
  __pyx_tuple__90 = PyTuple_Pack(1, __pyx_n_s_dir); if (unlikely(!__pyx_tuple__90)) __PYX_ERR(1, 160, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__90);
  __Pyx_GIVEREF(__pyx_tuple__90);
  __pyx_codeobj__91 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__90, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_karban_Projects_agros2d_de, __pyx_n_s_cachedir, 160, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__91)) __PYX_ERR(1, 160, __pyx_L1_error)

  /* "_agros.pyx":164
 * 
 * # datadir()
 * def datadir(str = ""):             # <<<<<<<<<<<<<<
 *     return dataDir().decode()
 * def _set_datadir(str):
 */
  __pyx_tuple__92 = PyTuple_Pack(1, __pyx_n_s_str); if (unlikely(!__pyx_tuple__92)) __PYX_ERR(1, 164, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__92);
  __Pyx_GIVEREF(__pyx_tuple__92);
  __pyx_codeobj__93 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__92, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_karban_Projects_agros2d_de, __pyx_n_s_datadir, 164, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__93)) __PYX_ERR(1, 164, __pyx_L1_error)

  /* "_agros.pyx":166
 * def datadir(str = ""):
 *     return dataDir().decode()
 * def _set_datadir(str):             # <<<<<<<<<<<<<<
 *     setDataDir(str.encode())
 * def _read_plugins():
 */
  __pyx_tuple__94 = PyTuple_Pack(1, __pyx_n_s_str); if (unlikely(!__pyx_tuple__94)) __PYX_ERR(1, 166, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__94);
  __Pyx_GIVEREF(__pyx_tuple__94);
  __pyx_codeobj__95 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__94, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_karban_Projects_agros2d_de, __pyx_n_s_set_datadir, 166, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__95)) __PYX_ERR(1, 166, __pyx_L1_error)

  /* "_agros.pyx":168
 * def _set_datadir(str):
 *     setDataDir(str.encode())
 * def _read_plugins():             # <<<<<<<<<<<<<<
 *     readPlugins()
 * 
 */
  __pyx_codeobj__96 = (PyObject*)__Pyx_PyCode_New(0, 0, 0, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_karban_Projects_agros2d_de, __pyx_n_s_read_plugins, 168, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__96)) __PYX_ERR(1, 168, __pyx_L1_error)

  /* "_agros.pyx":172
 * 
 * 
 * def version():             # <<<<<<<<<<<<<<
 *     return pyVersion()
 * 
 */
  __pyx_codeobj__97 = (PyObject*)__Pyx_PyCode_New(0, 0, 0, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_karban_Projects_agros2d_de, __pyx_n_s_version, 172, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__97)) __PYX_ERR(1, 172, __pyx_L1_error)
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}

static CYTHON_SMALL_CODE int __Pyx_InitGlobals(void) {
  if (__Pyx_InitStrings(__pyx_string_tab) < 0) __PYX_ERR(1, 1, __pyx_L1_error);
  __pyx_float_0_0 = PyFloat_FromDouble(0.0); if (unlikely(!__pyx_float_0_0)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_float_1_0 = PyFloat_FromDouble(1.0); if (unlikely(!__pyx_float_1_0)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_float_1e4 = PyFloat_FromDouble(1e4); if (unlikely(!__pyx_float_1e4)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_float_2_0 = PyFloat_FromDouble(2.0); if (unlikely(!__pyx_float_2_0)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_int_0 = PyInt_FromLong(0); if (unlikely(!__pyx_int_0)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_int_1 = PyInt_FromLong(1); if (unlikely(!__pyx_int_1)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_int_4 = PyInt_FromLong(4); if (unlikely(!__pyx_int_4)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_int_5 = PyInt_FromLong(5); if (unlikely(!__pyx_int_5)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_int_90 = PyInt_FromLong(90); if (unlikely(!__pyx_int_90)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_int_100 = PyInt_FromLong(100); if (unlikely(!__pyx_int_100)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_int_neg_1 = PyInt_FromLong(-1); if (unlikely(!__pyx_int_neg_1)) __PYX_ERR(1, 1, __pyx_L1_error)
  return 0;
  __pyx_L1_error:;
  return -1;
}

static CYTHON_SMALL_CODE int __Pyx_modinit_global_init_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_variable_export_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_function_export_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_type_init_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_type_import_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_variable_import_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_function_import_code(void); /*proto*/

static int __Pyx_modinit_global_init_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_global_init_code", 0);
  /*--- Global init code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_variable_export_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_variable_export_code", 0);
  /*--- Variable export code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_function_export_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_function_export_code", 0);
  /*--- Function export code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_type_init_code(void) {
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__Pyx_modinit_type_init_code", 0);
  /*--- Type init code ---*/
  if (PyType_Ready(&__pyx_type_6_agros___Geometry__) < 0) __PYX_ERR(3, 40, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_6_agros___Geometry__.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_6_agros___Geometry__.tp_dictoffset && __pyx_type_6_agros___Geometry__.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_6_agros___Geometry__.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_Geometry, (PyObject *)&__pyx_type_6_agros___Geometry__) < 0) __PYX_ERR(3, 40, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_6_agros___Geometry__) < 0) __PYX_ERR(3, 40, __pyx_L1_error)
  __pyx_ptype_6_agros___Geometry__ = &__pyx_type_6_agros___Geometry__;
  if (PyType_Ready(&__pyx_type_6_agros___Field__) < 0) __PYX_ERR(4, 187, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_6_agros___Field__.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_6_agros___Field__.tp_dictoffset && __pyx_type_6_agros___Field__.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_6_agros___Field__.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_Field, (PyObject *)&__pyx_type_6_agros___Field__) < 0) __PYX_ERR(4, 187, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_6_agros___Field__) < 0) __PYX_ERR(4, 187, __pyx_L1_error)
  __pyx_ptype_6_agros___Field__ = &__pyx_type_6_agros___Field__;
  if (PyType_Ready(&__pyx_type_6_agros___Problem__) < 0) __PYX_ERR(0, 46, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_6_agros___Problem__.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_6_agros___Problem__.tp_dictoffset && __pyx_type_6_agros___Problem__.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_6_agros___Problem__.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_Problem, (PyObject *)&__pyx_type_6_agros___Problem__) < 0) __PYX_ERR(0, 46, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_6_agros___Problem__) < 0) __PYX_ERR(0, 46, __pyx_L1_error)
  __pyx_ptype_6_agros___Problem__ = &__pyx_type_6_agros___Problem__;
  if (PyType_Ready(&__pyx_type_6_agros___Computation__) < 0) __PYX_ERR(5, 31, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_6_agros___Computation__.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_6_agros___Computation__.tp_dictoffset && __pyx_type_6_agros___Computation__.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_6_agros___Computation__.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_Computation, (PyObject *)&__pyx_type_6_agros___Computation__) < 0) __PYX_ERR(5, 31, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_6_agros___Computation__) < 0) __PYX_ERR(5, 31, __pyx_L1_error)
  __pyx_ptype_6_agros___Computation__ = &__pyx_type_6_agros___Computation__;
  if (PyType_Ready(&__pyx_type_6_agros___Solution__) < 0) __PYX_ERR(6, 27, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_6_agros___Solution__.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_6_agros___Solution__.tp_dictoffset && __pyx_type_6_agros___Solution__.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_6_agros___Solution__.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_Solution, (PyObject *)&__pyx_type_6_agros___Solution__) < 0) __PYX_ERR(6, 27, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_6_agros___Solution__) < 0) __PYX_ERR(6, 27, __pyx_L1_error)
  __pyx_ptype_6_agros___Solution__ = &__pyx_type_6_agros___Solution__;
  if (PyType_Ready(&__pyx_type_6_agros___ParticleTracing__) < 0) __PYX_ERR(7, 75, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_6_agros___ParticleTracing__.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_6_agros___ParticleTracing__.tp_dictoffset && __pyx_type_6_agros___ParticleTracing__.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_6_agros___ParticleTracing__.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_ParticleTracing, (PyObject *)&__pyx_type_6_agros___ParticleTracing__) < 0) __PYX_ERR(7, 75, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_6_agros___ParticleTracing__) < 0) __PYX_ERR(7, 75, __pyx_L1_error)
  __pyx_ptype_6_agros___ParticleTracing__ = &__pyx_type_6_agros___ParticleTracing__;
  if (PyType_Ready(&__pyx_type_6_agros___Study__) < 0) __PYX_ERR(8, 56, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_6_agros___Study__.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_6_agros___Study__.tp_dictoffset && __pyx_type_6_agros___Study__.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_6_agros___Study__.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_Study, (PyObject *)&__pyx_type_6_agros___Study__) < 0) __PYX_ERR(8, 56, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_6_agros___Study__) < 0) __PYX_ERR(8, 56, __pyx_L1_error)
  __pyx_ptype_6_agros___Study__ = &__pyx_type_6_agros___Study__;
  __pyx_type_6_agros___StudyBayesOpt__.tp_base = __pyx_ptype_6_agros___Study__;
  if (PyType_Ready(&__pyx_type_6_agros___StudyBayesOpt__) < 0) __PYX_ERR(8, 139, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_6_agros___StudyBayesOpt__.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_6_agros___StudyBayesOpt__.tp_dictoffset && __pyx_type_6_agros___StudyBayesOpt__.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_6_agros___StudyBayesOpt__.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_StudyBayesOpt, (PyObject *)&__pyx_type_6_agros___StudyBayesOpt__) < 0) __PYX_ERR(8, 139, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_6_agros___StudyBayesOpt__) < 0) __PYX_ERR(8, 139, __pyx_L1_error)
  __pyx_ptype_6_agros___StudyBayesOpt__ = &__pyx_type_6_agros___StudyBayesOpt__;
  __pyx_type_6_agros___StudyNLopt__.tp_base = __pyx_ptype_6_agros___Study__;
  if (PyType_Ready(&__pyx_type_6_agros___StudyNLopt__) < 0) __PYX_ERR(8, 174, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_6_agros___StudyNLopt__.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_6_agros___StudyNLopt__.tp_dictoffset && __pyx_type_6_agros___StudyNLopt__.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_6_agros___StudyNLopt__.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_StudyNLopt, (PyObject *)&__pyx_type_6_agros___StudyNLopt__) < 0) __PYX_ERR(8, 174, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_6_agros___StudyNLopt__) < 0) __PYX_ERR(8, 174, __pyx_L1_error)
  __pyx_ptype_6_agros___StudyNLopt__ = &__pyx_type_6_agros___StudyNLopt__;
  __pyx_type_6_agros___StudyNSGA2__.tp_base = __pyx_ptype_6_agros___Study__;
  if (PyType_Ready(&__pyx_type_6_agros___StudyNSGA2__) < 0) __PYX_ERR(8, 207, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_6_agros___StudyNSGA2__.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_6_agros___StudyNSGA2__.tp_dictoffset && __pyx_type_6_agros___StudyNSGA2__.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_6_agros___StudyNSGA2__.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_StudyNSGA2, (PyObject *)&__pyx_type_6_agros___StudyNSGA2__) < 0) __PYX_ERR(8, 207, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_6_agros___StudyNSGA2__) < 0) __PYX_ERR(8, 207, __pyx_L1_error)
  __pyx_ptype_6_agros___StudyNSGA2__ = &__pyx_type_6_agros___StudyNSGA2__;
  __pyx_type_6_agros___StudySweep__.tp_base = __pyx_ptype_6_agros___Study__;
  if (PyType_Ready(&__pyx_type_6_agros___StudySweep__) < 0) __PYX_ERR(8, 245, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_6_agros___StudySweep__.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_6_agros___StudySweep__.tp_dictoffset && __pyx_type_6_agros___StudySweep__.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_6_agros___StudySweep__.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_StudySweep, (PyObject *)&__pyx_type_6_agros___StudySweep__) < 0) __PYX_ERR(8, 245, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_6_agros___StudySweep__) < 0) __PYX_ERR(8, 245, __pyx_L1_error)
  __pyx_ptype_6_agros___StudySweep__ = &__pyx_type_6_agros___StudySweep__;
  if (PyType_Ready(&__pyx_type_6_agros___Options__) < 0) __PYX_ERR(1, 175, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_6_agros___Options__.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_6_agros___Options__.tp_dictoffset && __pyx_type_6_agros___Options__.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_6_agros___Options__.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_Options, (PyObject *)&__pyx_type_6_agros___Options__) < 0) __PYX_ERR(1, 175, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_6_agros___Options__) < 0) __PYX_ERR(1, 175, __pyx_L1_error)
  __pyx_ptype_6_agros___Options__ = &__pyx_type_6_agros___Options__;
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_modinit_type_import_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_type_import_code", 0);
  /*--- Type import code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_variable_import_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_variable_import_code", 0);
  /*--- Variable import code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_function_import_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_function_import_code", 0);
  /*--- Function import code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}


#ifndef CYTHON_NO_PYINIT_EXPORT
#define __Pyx_PyMODINIT_FUNC PyMODINIT_FUNC
#elif PY_MAJOR_VERSION < 3
#ifdef __cplusplus
#define __Pyx_PyMODINIT_FUNC extern "C" void
#else
#define __Pyx_PyMODINIT_FUNC void
#endif
#else
#ifdef __cplusplus
#define __Pyx_PyMODINIT_FUNC extern "C" PyObject *
#else
#define __Pyx_PyMODINIT_FUNC PyObject *
#endif
#endif


#if PY_MAJOR_VERSION < 3
__Pyx_PyMODINIT_FUNC init_agros(void) CYTHON_SMALL_CODE; /*proto*/
__Pyx_PyMODINIT_FUNC init_agros(void)
#else
__Pyx_PyMODINIT_FUNC PyInit__agros(void) CYTHON_SMALL_CODE; /*proto*/
__Pyx_PyMODINIT_FUNC PyInit__agros(void)
#if CYTHON_PEP489_MULTI_PHASE_INIT
{
  return PyModuleDef_Init(&__pyx_moduledef);
}
static CYTHON_SMALL_CODE int __Pyx_check_single_interpreter(void) {
    #if PY_VERSION_HEX >= 0x030700A1
    static PY_INT64_T main_interpreter_id = -1;
    PY_INT64_T current_id = PyInterpreterState_GetID(PyThreadState_Get()->interp);
    if (main_interpreter_id == -1) {
        main_interpreter_id = current_id;
        return (unlikely(current_id == -1)) ? -1 : 0;
    } else if (unlikely(main_interpreter_id != current_id))
    #else
    static PyInterpreterState *main_interpreter = NULL;
    PyInterpreterState *current_interpreter = PyThreadState_Get()->interp;
    if (!main_interpreter) {
        main_interpreter = current_interpreter;
    } else if (unlikely(main_interpreter != current_interpreter))
    #endif
    {
        PyErr_SetString(
            PyExc_ImportError,
            "Interpreter change detected - this module can only be loaded into one interpreter per process.");
        return -1;
    }
    return 0;
}
static CYTHON_SMALL_CODE int __Pyx_copy_spec_to_module(PyObject *spec, PyObject *moddict, const char* from_name, const char* to_name, int allow_none) {
    PyObject *value = PyObject_GetAttrString(spec, from_name);
    int result = 0;
    if (likely(value)) {
        if (allow_none || value != Py_None) {
            result = PyDict_SetItemString(moddict, to_name, value);
        }
        Py_DECREF(value);
    } else if (PyErr_ExceptionMatches(PyExc_AttributeError)) {
        PyErr_Clear();
    } else {
        result = -1;
    }
    return result;
}
static CYTHON_SMALL_CODE PyObject* __pyx_pymod_create(PyObject *spec, CYTHON_UNUSED PyModuleDef *def) {
    PyObject *module = NULL, *moddict, *modname;
    if (__Pyx_check_single_interpreter())
        return NULL;
    if (__pyx_m)
        return __Pyx_NewRef(__pyx_m);
    modname = PyObject_GetAttrString(spec, "name");
    if (unlikely(!modname)) goto bad;
    module = PyModule_NewObject(modname);
    Py_DECREF(modname);
    if (unlikely(!module)) goto bad;
    moddict = PyModule_GetDict(module);
    if (unlikely(!moddict)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "loader", "__loader__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "origin", "__file__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "parent", "__package__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "submodule_search_locations", "__path__", 0) < 0)) goto bad;
    return module;
bad:
    Py_XDECREF(module);
    return NULL;
}


static CYTHON_SMALL_CODE int __pyx_pymod_exec__agros(PyObject *__pyx_pyinit_module)
#endif
#endif
{
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  if (__pyx_m) {
    if (__pyx_m == __pyx_pyinit_module) return 0;
    PyErr_SetString(PyExc_RuntimeError, "Module '_agros' has already been imported. Re-initialisation is not supported.");
    return -1;
  }
  #elif PY_MAJOR_VERSION >= 3
  if (__pyx_m) return __Pyx_NewRef(__pyx_m);
  #endif
  #if CYTHON_REFNANNY
__Pyx_RefNanny = __Pyx_RefNannyImportAPI("refnanny");
if (!__Pyx_RefNanny) {
  PyErr_Clear();
  __Pyx_RefNanny = __Pyx_RefNannyImportAPI("Cython.Runtime.refnanny");
  if (!__Pyx_RefNanny)
      Py_FatalError("failed to import 'refnanny' module");
}
#endif
  __Pyx_RefNannySetupContext("__Pyx_PyMODINIT_FUNC PyInit__agros(void)", 0);
  if (__Pyx_check_binary_version() < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  #ifdef __Pxy_PyFrame_Initialize_Offsets
  __Pxy_PyFrame_Initialize_Offsets();
  #endif
  __pyx_empty_tuple = PyTuple_New(0); if (unlikely(!__pyx_empty_tuple)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_empty_bytes = PyBytes_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_bytes)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_empty_unicode = PyUnicode_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_unicode)) __PYX_ERR(1, 1, __pyx_L1_error)
  #ifdef __Pyx_CyFunction_USED
  if (__pyx_CyFunction_init() < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_FusedFunction_USED
  if (__pyx_FusedFunction_init() < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Coroutine_USED
  if (__pyx_Coroutine_init() < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Generator_USED
  if (__pyx_Generator_init() < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_AsyncGen_USED
  if (__pyx_AsyncGen_init() < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_StopAsyncIteration_USED
  if (__pyx_StopAsyncIteration_init() < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  #endif
  /*--- Library function declarations ---*/
  /*--- Threads initialization code ---*/
  #if defined(__PYX_FORCE_INIT_THREADS) && __PYX_FORCE_INIT_THREADS
  #ifdef WITH_THREAD /* Python build with threading support? */
  PyEval_InitThreads();
  #endif
  #endif
  /*--- Module creation code ---*/
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  __pyx_m = __pyx_pyinit_module;
  Py_INCREF(__pyx_m);
  #else
  #if PY_MAJOR_VERSION < 3
  __pyx_m = Py_InitModule4("_agros", __pyx_methods, 0, 0, PYTHON_API_VERSION); Py_XINCREF(__pyx_m);
  #else
  __pyx_m = PyModule_Create(&__pyx_moduledef);
  #endif
  if (unlikely(!__pyx_m)) __PYX_ERR(1, 1, __pyx_L1_error)
  #endif
  __pyx_d = PyModule_GetDict(__pyx_m); if (unlikely(!__pyx_d)) __PYX_ERR(1, 1, __pyx_L1_error)
  Py_INCREF(__pyx_d);
  __pyx_b = PyImport_AddModule(__Pyx_BUILTIN_MODULE_NAME); if (unlikely(!__pyx_b)) __PYX_ERR(1, 1, __pyx_L1_error)
  Py_INCREF(__pyx_b);
  __pyx_cython_runtime = PyImport_AddModule((char *) "cython_runtime"); if (unlikely(!__pyx_cython_runtime)) __PYX_ERR(1, 1, __pyx_L1_error)
  Py_INCREF(__pyx_cython_runtime);
  if (PyObject_SetAttrString(__pyx_m, "__builtins__", __pyx_b) < 0) __PYX_ERR(1, 1, __pyx_L1_error);
  /*--- Initialize various global constants etc. ---*/
  if (__Pyx_InitGlobals() < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  #if PY_MAJOR_VERSION < 3 && (__PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT)
  if (__Pyx_init_sys_getdefaultencoding_params() < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  #endif
  if (__pyx_module_is_main__agros) {
    if (PyObject_SetAttr(__pyx_m, __pyx_n_s_name_2, __pyx_n_s_main) < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  }
  #if PY_MAJOR_VERSION >= 3
  {
    PyObject *modules = PyImport_GetModuleDict(); if (unlikely(!modules)) __PYX_ERR(1, 1, __pyx_L1_error)
    if (!PyDict_GetItemString(modules, "_agros")) {
      if (unlikely(PyDict_SetItemString(modules, "_agros", __pyx_m) < 0)) __PYX_ERR(1, 1, __pyx_L1_error)
    }
  }
  #endif
  /*--- Builtin init code ---*/
  if (__Pyx_InitCachedBuiltins() < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  /*--- Constants init code ---*/
  if (__Pyx_InitCachedConstants() < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  /*--- Global type/function init code ---*/
  (void)__Pyx_modinit_global_init_code();
  (void)__Pyx_modinit_variable_export_code();
  (void)__Pyx_modinit_function_export_code();
  if (unlikely(__Pyx_modinit_type_init_code() < 0)) __PYX_ERR(1, 1, __pyx_L1_error)
  (void)__Pyx_modinit_type_import_code();
  (void)__Pyx_modinit_variable_import_code();
  (void)__Pyx_modinit_function_import_code();
  /*--- Execution code ---*/
  #if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
  if (__Pyx_patch_abc() < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  #endif

  /* "_agros.pyx":23
 * 
 * # Parameters class
 * class __Parameters__(dict):             # <<<<<<<<<<<<<<
 *     def __init__(self, get_method, set_method, check_set = True):
 *         self.get = get_method
 */
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 23, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(((PyObject *)(&PyDict_Type)));
  __Pyx_GIVEREF(((PyObject *)(&PyDict_Type)));
  PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)(&PyDict_Type)));
  __pyx_t_2 = __Pyx_CalculateMetaclass(NULL, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 23, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_Py3MetaclassPrepare(__pyx_t_2, __pyx_t_1, __pyx_n_s_Parameters, __pyx_n_s_Parameters, (PyObject *) NULL, __pyx_n_s_agros, (PyObject *) NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 23, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);

  /* "_agros.pyx":24
 * # Parameters class
 * class __Parameters__(dict):
 *     def __init__(self, get_method, set_method, check_set = True):             # <<<<<<<<<<<<<<
 *         self.get = get_method
 *         self.set = set_method
 */
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_6_agros_14__Parameters___1__init__, 0, __pyx_n_s_Parameters_____init, NULL, __pyx_n_s_agros, __pyx_d, ((PyObject *)__pyx_codeobj__63)); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 24, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_CyFunction_SetDefaultsTuple(__pyx_t_4, __pyx_tuple__64);
  if (__Pyx_SetNameInClass(__pyx_t_3, __pyx_n_s_init, __pyx_t_4) < 0) __PYX_ERR(1, 24, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "_agros.pyx":30
 *         dict.__init__(self, self.get())
 * 
 *     def __update__(self):             # <<<<<<<<<<<<<<
 *         parameters = self.get()
 *         for parameters_key in parameters:
 */
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_6_agros_14__Parameters___3__update__, 0, __pyx_n_s_Parameters_____update, NULL, __pyx_n_s_agros, __pyx_d, ((PyObject *)__pyx_codeobj__66)); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 30, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (__Pyx_SetNameInClass(__pyx_t_3, __pyx_n_s_update, __pyx_t_4) < 0) __PYX_ERR(1, 30, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "_agros.pyx":35
 *             dict.__setitem__(self, parameters_key, parameters[parameters_key])
 * 
 *     def __getitem__(self, key):             # <<<<<<<<<<<<<<
 *         self.__update__()
 *         return dict.__getitem__(self, key)
 */
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_6_agros_14__Parameters___5__getitem__, 0, __pyx_n_s_Parameters_____getitem, NULL, __pyx_n_s_agros, __pyx_d, ((PyObject *)__pyx_codeobj__68)); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 35, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (__Pyx_SetNameInClass(__pyx_t_3, __pyx_n_s_getitem, __pyx_t_4) < 0) __PYX_ERR(1, 35, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "_agros.pyx":39
 *         return dict.__getitem__(self, key)
 * 
 *     def __setitem__(self, key, value):             # <<<<<<<<<<<<<<
 *         if (self.check_set):
 *             if (not key in self):
 */
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_6_agros_14__Parameters___7__setitem__, 0, __pyx_n_s_Parameters_____setitem, NULL, __pyx_n_s_agros, __pyx_d, ((PyObject *)__pyx_codeobj__70)); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 39, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (__Pyx_SetNameInClass(__pyx_t_3, __pyx_n_s_setitem, __pyx_t_4) < 0) __PYX_ERR(1, 39, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "_agros.pyx":47
 *         self.set(dict(self))
 * 
 *     def get_parameters(self):             # <<<<<<<<<<<<<<
 *         self.__update__()
 *         return self
 */
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_6_agros_14__Parameters___9get_parameters, 0, __pyx_n_s_Parameters___get_parameters, NULL, __pyx_n_s_agros, __pyx_d, ((PyObject *)__pyx_codeobj__72)); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 47, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (__Pyx_SetNameInClass(__pyx_t_3, __pyx_n_s_get_parameters, __pyx_t_4) < 0) __PYX_ERR(1, 47, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "_agros.pyx":23
 * 
 * # Parameters class
 * class __Parameters__(dict):             # <<<<<<<<<<<<<<
 *     def __init__(self, get_method, set_method, check_set = True):
 *         self.get = get_method
 */
  __pyx_t_4 = __Pyx_Py3ClassCreate(__pyx_t_2, __pyx_n_s_Parameters, __pyx_t_1, __pyx_t_3, NULL, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 23, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_Parameters, __pyx_t_4) < 0) __PYX_ERR(1, 23, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "_agros.pyx":52
 * 
 * # test functions
 * def value_in_range(value, min, max, key):             # <<<<<<<<<<<<<<
 *     if (value < min or value > max):
 *         raise IndexError("Value of '{0}' is out of range ({1} - {2})".format(key, min, max))
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_6_agros_1value_in_range, NULL, __pyx_n_s_agros); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 52, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_value_in_range, __pyx_t_1) < 0) __PYX_ERR(1, 52, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "_agros.pyx":56
 *         raise IndexError("Value of '{0}' is out of range ({1} - {2})".format(key, min, max))
 * 
 * def value_in_list(value, list, key):             # <<<<<<<<<<<<<<
 *     for item in list:
 *         if (value == item):
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_6_agros_3value_in_list, NULL, __pyx_n_s_agros); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 56, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_value_in_list, __pyx_t_1) < 0) __PYX_ERR(1, 56, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "_agros.pyx":63
 *     raise KeyError("Key '{0}' is invalid. Valid keys: {1}".format(list, key))
 * 
 * def positive_value(value, key):             # <<<<<<<<<<<<<<
 *     if (value < 0):
 *         raise IndexError("Value of {0} must be possitive.".format(key))
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_6_agros_5positive_value, NULL, __pyx_n_s_agros); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 63, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_positive_value, __pyx_t_1) < 0) __PYX_ERR(1, 63, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "../resources_source/python/pygeometry.pxi":59
 *         return self.thisptr.addNode(str(x).encode(), str(y).encode())
 * 
 *     def remove_nodes(self, nodes = []):             # <<<<<<<<<<<<<<
 *         """Remove nodes according to their indexes.
 * 
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 59, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_k_ = __pyx_t_1;
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;

  /* "../resources_source/python/pygeometry.pxi":70
 *         self.thisptr.removeNodes(nodes_vector)
 * 
 *     def add_edge(self, x1, y1, x2, y2, angle = 0.0, segments = 4, refinements = {}, boundaries = {}):             # <<<<<<<<<<<<<<
 *         """Add a new edge according to coordinates and return its index.
 * 
 */
  __pyx_t_1 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 70, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_k__2 = __pyx_t_1;
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 70, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_k__3 = __pyx_t_1;
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;

  /* "../resources_source/python/pygeometry.pxi":90
 *             segments, refinements_map, boundaries_map)
 * 
 *     def add_edge_by_nodes(self, start_node_index, end_node_index, angle = 0.0, segments = 4, refinements = {}, boundaries = {}):             # <<<<<<<<<<<<<<
 *         """Add a new edge according to indexes of start and end node and return the index of edge.
 * 
 */
  __pyx_t_1 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 90, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_k__4 = __pyx_t_1;
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 90, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_k__5 = __pyx_t_1;
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;

  /* "../resources_source/python/pygeometry.pxi":107
 *         return self.thisptr.addEdgeByNodes(start_node_index, end_node_index, str(angle).encode(), segments, refinements_map, boundaries_map)
 * 
 *     def modify_edge(self, index, angle = 0.0, segments = 4, refinements = {}, boundaries = {}):             # <<<<<<<<<<<<<<
 *         """Modify parameters of existing edge.
 * 
 */
  __pyx_t_1 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 107, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_k__6 = __pyx_t_1;
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 107, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_k__7 = __pyx_t_1;
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;

  /* "../resources_source/python/pygeometry.pxi":123
 *         self.thisptr.modifyEdge(index, str(angle).encode(), segments, refinements_map, boundaries_map)
 * 
 *     def remove_edges(self, edges = []):             # <<<<<<<<<<<<<<
 *         """Remove edges according to their indexes.
 * 
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 123, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_k__8 = __pyx_t_1;
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;

  /* "../resources_source/python/pygeometry.pxi":135
 *         self.thisptr.removeEdges(edges_vector)
 * 
 *     def add_label(self, x, y, area = 0.0, refinements = {}, orders = {}, materials = {}):             # <<<<<<<<<<<<<<
 *         """Add a new label according to coordinates and return its index.
 * 
 */
  __pyx_t_1 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 135, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_k__9 = __pyx_t_1;
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 135, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_k__10 = __pyx_t_1;
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 135, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_k__11 = __pyx_t_1;
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;

  /* "../resources_source/python/pygeometry.pxi":154
 *         return self.thisptr.addLabel(str(x).encode(), str(y).encode(), area, refinements_map, orders_map, materials_map)
 * 
 *     def modify_label(self, index, area = 0.0, refinements = {}, orders = {}, materials = {}):             # <<<<<<<<<<<<<<
 *         """Modify parameters of existing label.
 * 
 */
  __pyx_t_1 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 154, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_k__12 = __pyx_t_1;
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 154, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_k__13 = __pyx_t_1;
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 154, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_k__14 = __pyx_t_1;
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;

  /* "../resources_source/python/pygeometry.pxi":172
 *         self.thisptr.modifyLabel(index, area, refinements_map, orders_map, materials_map)
 * 
 *     def remove_labels(self, labels = []):             # <<<<<<<<<<<<<<
 *         """Remove labels according to their indexes.
 * 
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 172, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_k__15 = __pyx_t_1;
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;

  /* "../resources_source/python/pygeometry.pxi":184
 *         self.thisptr.removeLabels(labels_vector)
 * 
 *     def add_rect(self, x0, y0, width, height, boundaries = {}, materials = None):             # <<<<<<<<<<<<<<
 *         """Add rect by start point (lower left node), width and height.
 * 
 */
  __pyx_t_1 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 184, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_k__16 = __pyx_t_1;
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;

  /* "../resources_source/python/pygeometry.pxi":205
 *             self.add_label((x0)+(width/2.0), (y0)+(height/2.0), materials=materials)
 * 
 *     def add_circle(self, x0, y0, radius, boundaries = {}, materials = None):             # <<<<<<<<<<<<<<
 *         """Add circle by center point and radius.
 * 
 */
  __pyx_t_1 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 205, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_k__17 = __pyx_t_1;
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;

  /* "../resources_source/python/pygeometry.pxi":225
 *             self.add_label(x0, y0, materials=materials)
 * 
 *     def add_semicircle(self, x0, y0, radius, boundaries = {}, materials = None):             # <<<<<<<<<<<<<<
 *         """Add semicircle by center point of full circle and radius.
 * 
 */
  __pyx_t_1 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 225, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_k__18 = __pyx_t_1;
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;

  /* "../resources_source/python/pygeometry.pxi":256
 *         return self.thisptr.labelsCount()
 * 
 *     def select_nodes(self, nodes = []):             # <<<<<<<<<<<<<<
 *         """Select nodes according to their indexes.
 * 
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 256, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_k__19 = __pyx_t_1;
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;

  /* "../resources_source/python/pygeometry.pxi":268
 *         self.thisptr.selectNodes(nodes_vector)
 * 
 *     def select_edges(self, edges = []):             # <<<<<<<<<<<<<<
 *         """Select edges according to their indexes.
 * 
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 268, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_k__20 = __pyx_t_1;
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;

  /* "../resources_source/python/pygeometry.pxi":280
 *         self.thisptr.selectEdges(edges_vector)
 * 
 *     def select_labels(self, labels = []):             # <<<<<<<<<<<<<<
 *         """Select labels according to their indexes.
 * 
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 280, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_k__21 = __pyx_t_1;
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;

  /* "../resources_source/python/pyfield.pxi":413
 * 
 *     # boundaries
 *     def add_boundary(self, name, type, parameters = {}):             # <<<<<<<<<<<<<<
 *         """Add new boundary condition.
 * 
 */
  __pyx_t_1 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 413, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_k__24 = __pyx_t_1;
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;

  /* "../resources_source/python/pyfield.pxi":428
 *         self.thisptr.addBoundary(name.encode(), type.encode(), parameters_map, expression_map)
 * 
 *     def modify_boundary(self, name, type = "", parameters = {}):             # <<<<<<<<<<<<<<
 *         """Modify existing boundary condition.
 * 
 */
  __pyx_t_1 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 428, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_k__26 = __pyx_t_1;
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;

  /* "../resources_source/python/pyfield.pxi":454
 * 
 *     # materials
 *     def add_material(self, name, parameters = {}):             # <<<<<<<<<<<<<<
 *         """Add new material.
 * 
 */
  __pyx_t_1 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 454, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_k__27 = __pyx_t_1;
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;

  /* "../resources_source/python/pyfield.pxi":472
 *         self.thisptr.addMaterial(name.encode(), parameters_map, expression_map, nonlin_x_map, nonlin_y_map, settings_map)
 * 
 *     def modify_material(self, name, parameters = {}):             # <<<<<<<<<<<<<<
 *         """Modify existing material.
 * 
 */
  __pyx_t_1 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 472, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_k__28 = __pyx_t_1;
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;

  /* "../resources_source/python/pyfield.pxi":501
 * 
 *     # recipes
 *     def add_recipe_volume_integral(self, name, variable, labels = [], time_step = -1, adaptivity_step = -1):             # <<<<<<<<<<<<<<
 *         cdef vector[int] labels_vector
 *         for index in labels:
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 501, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_k__29 = __pyx_t_1;
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;

  /* "../resources_source/python/pyfield.pxi":508
 *         self.thisptr.addRecipeVolumeIntegral(name.encode(), variable.encode(), labels_vector, time_step, adaptivity_step)
 * 
 *     def add_recipe_surface_integral(self, name, variable, edges = [], time_step = -1, adaptivity_step = -1):             # <<<<<<<<<<<<<<
 *         cdef vector[int] edges_vector
 *         for index in edges:
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 508, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_k__30 = __pyx_t_1;
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;

  /* "../resources_source/python/pyproblem.pxi":122
 * 
 *     # coordinate type
 *     coordinate_type = property(_get_coordinate_type, _set_coordinate_type)             # <<<<<<<<<<<<<<
 *     def _get_coordinate_type(self):
 *         return self._problem.getCoordinateType().decode()
 */
  __Pyx_GetNameInClass(__pyx_t_1, (PyObject *)__pyx_ptype_6_agros___Problem__, __pyx_n_s_get_coordinate_type); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 122, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GetNameInClass(__pyx_t_2, (PyObject *)__pyx_ptype_6_agros___Problem__, __pyx_n_s_set_coordinate_type); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 122, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 122, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_2);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_property, __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 122, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_6_agros___Problem__->tp_dict, __pyx_n_s_coordinate_type, __pyx_t_2) < 0) __PYX_ERR(0, 122, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_6_agros___Problem__);

  /* "../resources_source/python/pyproblem.pxi":129
 * 
 *     # mesh type
 *     mesh_type = property(_get_mesh_type, _set_mesh_type)             # <<<<<<<<<<<<<<
 *     def _get_mesh_type(self):
 *         return self._problem.getMeshType().decode()
 */
  __Pyx_GetNameInClass(__pyx_t_2, (PyObject *)__pyx_ptype_6_agros___Problem__, __pyx_n_s_get_mesh_type); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 129, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GetNameInClass(__pyx_t_3, (PyObject *)__pyx_ptype_6_agros___Problem__, __pyx_n_s_set_mesh_type); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 129, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 129, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_t_3);
  __pyx_t_2 = 0;
  __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_property, __pyx_t_1, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 129, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_6_agros___Problem__->tp_dict, __pyx_n_s_mesh_type, __pyx_t_3) < 0) __PYX_ERR(0, 129, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  PyType_Modified(__pyx_ptype_6_agros___Problem__);

  /* "../resources_source/python/pyproblem.pxi":136
 * 
 *     # frequency
 *     frequency = property(_get_frequency, _set_frequency)             # <<<<<<<<<<<<<<
 *     def _get_frequency(self):
 *             return self._problem.getFrequency()
 */
  __Pyx_GetNameInClass(__pyx_t_3, (PyObject *)__pyx_ptype_6_agros___Problem__, __pyx_n_s_get_frequency); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GetNameInClass(__pyx_t_1, (PyObject *)__pyx_ptype_6_agros___Problem__, __pyx_n_s_set_frequency); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_t_1);
  __pyx_t_3 = 0;
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_property, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_6_agros___Problem__->tp_dict, __pyx_n_s_frequency, __pyx_t_1) < 0) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_6_agros___Problem__);

  /* "../resources_source/python/pyproblem.pxi":143
 * 
 *     # time step method
 *     time_step_method = property(_get_time_step_method, _set_time_step_method)             # <<<<<<<<<<<<<<
 *     def _get_time_step_method(self):
 *         return self._problem.getTimeStepMethod().decode()
 */
  __Pyx_GetNameInClass(__pyx_t_1, (PyObject *)__pyx_ptype_6_agros___Problem__, __pyx_n_s_get_time_step_method); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 143, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GetNameInClass(__pyx_t_2, (PyObject *)__pyx_ptype_6_agros___Problem__, __pyx_n_s_set_time_step_method); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 143, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 143, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_2);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_property, __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 143, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_6_agros___Problem__->tp_dict, __pyx_n_s_time_step_method, __pyx_t_2) < 0) __PYX_ERR(0, 143, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_6_agros___Problem__);

  /* "../resources_source/python/pyproblem.pxi":150
 * 
 *     # time method order
 *     time_method_order = property(_get_time_method_order, _set_time_method_order)             # <<<<<<<<<<<<<<
 *     def _get_time_method_order(self):
 *         return self._problem.getTimeMethodOrder()
 */
  __Pyx_GetNameInClass(__pyx_t_2, (PyObject *)__pyx_ptype_6_agros___Problem__, __pyx_n_s_get_time_method_order); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 150, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GetNameInClass(__pyx_t_3, (PyObject *)__pyx_ptype_6_agros___Problem__, __pyx_n_s_set_time_method_order); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 150, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 150, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_t_3);
  __pyx_t_2 = 0;
  __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_property, __pyx_t_1, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 150, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_6_agros___Problem__->tp_dict, __pyx_n_s_time_method_order, __pyx_t_3) < 0) __PYX_ERR(0, 150, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  PyType_Modified(__pyx_ptype_6_agros___Problem__);

  /* "../resources_source/python/pyproblem.pxi":157
 * 
 *     # time method tolerance
 *     time_method_tolerance = property(_get_time_method_tolerance, _set_time_method_tolerance)             # <<<<<<<<<<<<<<
 *     def _get_time_method_tolerance(self):
 *         return self._problem.getTimeMethodTolerance()
 */
  __Pyx_GetNameInClass(__pyx_t_3, (PyObject *)__pyx_ptype_6_agros___Problem__, __pyx_n_s_get_time_method_tolerance); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 157, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GetNameInClass(__pyx_t_1, (PyObject *)__pyx_ptype_6_agros___Problem__, __pyx_n_s_set_time_method_tolerance); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 157, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 157, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_t_1);
  __pyx_t_3 = 0;
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_property, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 157, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_6_agros___Problem__->tp_dict, __pyx_n_s_time_method_tolerance, __pyx_t_1) < 0) __PYX_ERR(0, 157, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_6_agros___Problem__);

  /* "../resources_source/python/pyproblem.pxi":164
 * 
 *     # time total
 *     time_total = property(_get_time_total, _set_time_total)             # <<<<<<<<<<<<<<
 *     def _get_time_total(self):
 *         return self._problem.getTimeTotal()
 */
  __Pyx_GetNameInClass(__pyx_t_1, (PyObject *)__pyx_ptype_6_agros___Problem__, __pyx_n_s_get_time_total); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 164, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GetNameInClass(__pyx_t_2, (PyObject *)__pyx_ptype_6_agros___Problem__, __pyx_n_s_set_time_total); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 164, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 164, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_2);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_property, __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 164, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_6_agros___Problem__->tp_dict, __pyx_n_s_time_total, __pyx_t_2) < 0) __PYX_ERR(0, 164, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_6_agros___Problem__);

  /* "../resources_source/python/pyproblem.pxi":171
 * 
 *     # time steps
 *     time_steps = property(_get_time_steps, _set_time_steps)             # <<<<<<<<<<<<<<
 *     def _get_time_steps(self):
 *         return self._problem.getNumConstantTimeSteps()
 */
  __Pyx_GetNameInClass(__pyx_t_2, (PyObject *)__pyx_ptype_6_agros___Problem__, __pyx_n_s_get_time_steps); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 171, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GetNameInClass(__pyx_t_3, (PyObject *)__pyx_ptype_6_agros___Problem__, __pyx_n_s_set_time_steps); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 171, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 171, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_t_3);
  __pyx_t_2 = 0;
  __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_property, __pyx_t_1, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 171, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_6_agros___Problem__->tp_dict, __pyx_n_s_time_steps, __pyx_t_3) < 0) __PYX_ERR(0, 171, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  PyType_Modified(__pyx_ptype_6_agros___Problem__);

  /* "../resources_source/python/pyproblem.pxi":178
 * 
 *     # initial time step
 *     initial_time_step = property(_get_initial_time_step, _set_initial_time_step)             # <<<<<<<<<<<<<<
 *     def _get_initial_time_step(self):
 *         return self._problem.getInitialTimeStep()
 */
  __Pyx_GetNameInClass(__pyx_t_3, (PyObject *)__pyx_ptype_6_agros___Problem__, __pyx_n_s_get_initial_time_step); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 178, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GetNameInClass(__pyx_t_1, (PyObject *)__pyx_ptype_6_agros___Problem__, __pyx_n_s_set_initial_time_step); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 178, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 178, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_t_1);
  __pyx_t_3 = 0;
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_property, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 178, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_6_agros___Problem__->tp_dict, __pyx_n_s_initial_time_step, __pyx_t_1) < 0) __PYX_ERR(0, 178, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_6_agros___Problem__);

  /* "../resources_source/python/pyproblem.pxi":280
 *         self._problem.save(fn.encode())
 * 
 * __problem__ = __Problem__()             # <<<<<<<<<<<<<<
 * def problem(clear = False):
 *     if (clear):
 */
  __pyx_t_1 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_6_agros___Problem__)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 280, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_problem, __pyx_t_1) < 0) __PYX_ERR(0, 280, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "../resources_source/python/pyproblem.pxi":281
 * 
 * __problem__ = __Problem__()
 * def problem(clear = False):             # <<<<<<<<<<<<<<
 *     if (clear):
 *         __problem__.clear()
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_6_agros_7problem, NULL, __pyx_n_s_agros); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 281, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_problem_2, __pyx_t_1) < 0) __PYX_ERR(0, 281, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "../resources_source/python/pycomputation.pxi":143
 * 
 *     # coordinate type
 *     coordinate_type = property(_get_coordinate_type, __unauthorized__)             # <<<<<<<<<<<<<<
 *     def _get_coordinate_type(self):
 *         return self._computation.getCoordinateType().decode()
 */
  __Pyx_GetNameInClass(__pyx_t_1, (PyObject *)__pyx_ptype_6_agros___Computation__, __pyx_n_s_get_coordinate_type); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 143, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GetNameInClass(__pyx_t_2, (PyObject *)__pyx_ptype_6_agros___Computation__, __pyx_n_s_unauthorized); if (unlikely(!__pyx_t_2)) __PYX_ERR(5, 143, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(5, 143, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_2);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_property, __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(5, 143, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_6_agros___Computation__->tp_dict, __pyx_n_s_coordinate_type, __pyx_t_2) < 0) __PYX_ERR(5, 143, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_6_agros___Computation__);

  /* "../resources_source/python/pycomputation.pxi":148
 * 
 *     # mesh type
 *     mesh_type = property(_get_mesh_type, __unauthorized__)             # <<<<<<<<<<<<<<
 *     def _get_mesh_type(self):
 *             return self._computation.getMeshType().decode()
 */
  __Pyx_GetNameInClass(__pyx_t_2, (PyObject *)__pyx_ptype_6_agros___Computation__, __pyx_n_s_get_mesh_type); if (unlikely(!__pyx_t_2)) __PYX_ERR(5, 148, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GetNameInClass(__pyx_t_3, (PyObject *)__pyx_ptype_6_agros___Computation__, __pyx_n_s_unauthorized); if (unlikely(!__pyx_t_3)) __PYX_ERR(5, 148, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 148, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_t_3);
  __pyx_t_2 = 0;
  __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_property, __pyx_t_1, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(5, 148, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_6_agros___Computation__->tp_dict, __pyx_n_s_mesh_type, __pyx_t_3) < 0) __PYX_ERR(5, 148, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  PyType_Modified(__pyx_ptype_6_agros___Computation__);

  /* "../resources_source/python/pycomputation.pxi":153
 * 
 *     # frequency
 *     frequency = property(_get_frequency, __unauthorized__)             # <<<<<<<<<<<<<<
 *     def _get_frequency(self):
 *             return self._computation.getFrequency()
 */
  __Pyx_GetNameInClass(__pyx_t_3, (PyObject *)__pyx_ptype_6_agros___Computation__, __pyx_n_s_get_frequency); if (unlikely(!__pyx_t_3)) __PYX_ERR(5, 153, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GetNameInClass(__pyx_t_1, (PyObject *)__pyx_ptype_6_agros___Computation__, __pyx_n_s_unauthorized); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 153, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(5, 153, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_t_1);
  __pyx_t_3 = 0;
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_property, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 153, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_6_agros___Computation__->tp_dict, __pyx_n_s_frequency, __pyx_t_1) < 0) __PYX_ERR(5, 153, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_6_agros___Computation__);

  /* "../resources_source/python/pycomputation.pxi":158
 * 
 *     # time step method
 *     time_step_method = property(_get_time_step_method, __unauthorized__)             # <<<<<<<<<<<<<<
 *     def _get_time_step_method(self):
 *             return self._computation.getTimeStepMethod().decode()
 */
  __Pyx_GetNameInClass(__pyx_t_1, (PyObject *)__pyx_ptype_6_agros___Computation__, __pyx_n_s_get_time_step_method); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 158, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GetNameInClass(__pyx_t_2, (PyObject *)__pyx_ptype_6_agros___Computation__, __pyx_n_s_unauthorized); if (unlikely(!__pyx_t_2)) __PYX_ERR(5, 158, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(5, 158, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_2);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_property, __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(5, 158, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_6_agros___Computation__->tp_dict, __pyx_n_s_time_step_method, __pyx_t_2) < 0) __PYX_ERR(5, 158, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_6_agros___Computation__);

  /* "../resources_source/python/pycomputation.pxi":163
 * 
 *     # time method order
 *     time_method_order = property(_get_time_method_order, __unauthorized__)             # <<<<<<<<<<<<<<
 *     def _get_time_method_order(self):
 *             return self._computation.getTimeMethodOrder()
 */
  __Pyx_GetNameInClass(__pyx_t_2, (PyObject *)__pyx_ptype_6_agros___Computation__, __pyx_n_s_get_time_method_order); if (unlikely(!__pyx_t_2)) __PYX_ERR(5, 163, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GetNameInClass(__pyx_t_3, (PyObject *)__pyx_ptype_6_agros___Computation__, __pyx_n_s_unauthorized); if (unlikely(!__pyx_t_3)) __PYX_ERR(5, 163, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 163, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_t_3);
  __pyx_t_2 = 0;
  __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_property, __pyx_t_1, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(5, 163, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_6_agros___Computation__->tp_dict, __pyx_n_s_time_method_order, __pyx_t_3) < 0) __PYX_ERR(5, 163, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  PyType_Modified(__pyx_ptype_6_agros___Computation__);

  /* "../resources_source/python/pycomputation.pxi":168
 * 
 *     # time method tolerance
 *     time_method_tolerance = property(_get_time_method_tolerance, __unauthorized__)             # <<<<<<<<<<<<<<
 *     def _get_time_method_tolerance(self):
 *             return self._computation.getTimeMethodTolerance()
 */
  __Pyx_GetNameInClass(__pyx_t_3, (PyObject *)__pyx_ptype_6_agros___Computation__, __pyx_n_s_get_time_method_tolerance); if (unlikely(!__pyx_t_3)) __PYX_ERR(5, 168, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GetNameInClass(__pyx_t_1, (PyObject *)__pyx_ptype_6_agros___Computation__, __pyx_n_s_unauthorized); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 168, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(5, 168, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_t_1);
  __pyx_t_3 = 0;
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_property, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 168, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_6_agros___Computation__->tp_dict, __pyx_n_s_time_method_tolerance, __pyx_t_1) < 0) __PYX_ERR(5, 168, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_6_agros___Computation__);

  /* "../resources_source/python/pycomputation.pxi":173
 * 
 *     # time total
 *     time_total = property(_get_time_total, __unauthorized__)             # <<<<<<<<<<<<<<
 *     def _get_time_total(self):
 *             return self._computation.getTimeTotal()
 */
  __Pyx_GetNameInClass(__pyx_t_1, (PyObject *)__pyx_ptype_6_agros___Computation__, __pyx_n_s_get_time_total); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 173, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GetNameInClass(__pyx_t_2, (PyObject *)__pyx_ptype_6_agros___Computation__, __pyx_n_s_unauthorized); if (unlikely(!__pyx_t_2)) __PYX_ERR(5, 173, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(5, 173, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_2);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_property, __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(5, 173, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_6_agros___Computation__->tp_dict, __pyx_n_s_time_total, __pyx_t_2) < 0) __PYX_ERR(5, 173, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_6_agros___Computation__);

  /* "../resources_source/python/pycomputation.pxi":178
 * 
 *     # time steps
 *     time_steps = property(_get_time_steps, __unauthorized__)             # <<<<<<<<<<<<<<
 *     def _get_time_steps(self):
 *             return self._computation.getNumConstantTimeSteps()
 */
  __Pyx_GetNameInClass(__pyx_t_2, (PyObject *)__pyx_ptype_6_agros___Computation__, __pyx_n_s_get_time_steps); if (unlikely(!__pyx_t_2)) __PYX_ERR(5, 178, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GetNameInClass(__pyx_t_3, (PyObject *)__pyx_ptype_6_agros___Computation__, __pyx_n_s_unauthorized); if (unlikely(!__pyx_t_3)) __PYX_ERR(5, 178, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 178, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_t_3);
  __pyx_t_2 = 0;
  __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_property, __pyx_t_1, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(5, 178, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_6_agros___Computation__->tp_dict, __pyx_n_s_time_steps, __pyx_t_3) < 0) __PYX_ERR(5, 178, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  PyType_Modified(__pyx_ptype_6_agros___Computation__);

  /* "../resources_source/python/pycomputation.pxi":183
 * 
 *     # initial time step
 *     initial_time_step = property(_get_initial_time_step, __unauthorized__)             # <<<<<<<<<<<<<<
 *     def _get_initial_time_step(self):
 *             return self._computation.getInitialTimeStep()
 */
  __Pyx_GetNameInClass(__pyx_t_3, (PyObject *)__pyx_ptype_6_agros___Computation__, __pyx_n_s_get_initial_time_step); if (unlikely(!__pyx_t_3)) __PYX_ERR(5, 183, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GetNameInClass(__pyx_t_1, (PyObject *)__pyx_ptype_6_agros___Computation__, __pyx_n_s_unauthorized); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 183, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(5, 183, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_t_1);
  __pyx_t_3 = 0;
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_property, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 183, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_6_agros___Computation__->tp_dict, __pyx_n_s_initial_time_step, __pyx_t_1) < 0) __PYX_ERR(5, 183, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_6_agros___Computation__);

  /* "../resources_source/python/pycomputation.pxi":198
 *         return self._computation.getCouplingType(source_field.encode(), target_field.encode()).decode()
 * 
 * def computation(computation):             # <<<<<<<<<<<<<<
 *     return __Computation__(computation=computation)
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_6_agros_9computation, NULL, __pyx_n_s_agros); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 198, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_computation, __pyx_t_1) < 0) __PYX_ERR(5, 198, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "../resources_source/python/pysolution.pxi":64
 * 
 *     # surface integrals
 *     def surface_integrals(self, edges = [], time_step = None, adaptivity_step = None):             # <<<<<<<<<<<<<<
 *         """Compute surface integrals on edges and return dictionary with results.
 * 
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(6, 64, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_k__40 = __pyx_t_1;
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;

  /* "../resources_source/python/pysolution.pxi":93
 * 
 *     # volume integrals
 *     def volume_integrals(self, labels = [], time_step = None, adaptivity_step = None):             # <<<<<<<<<<<<<<
 *         """Compute volume integrals on labels and return dictionary with results.
 * 
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(6, 93, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_k__41 = __pyx_t_1;
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;

  /* "../resources_source/python/pyparticletracing.pxi":83
 *         del self._tracing
 * 
 *     def solve(self, initial_positions = [], initial_velocities = [],             # <<<<<<<<<<<<<<
 *                     particle_charges = [], particle_masses = []):
 * 
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(7, 83, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_k__44 = __pyx_t_1;
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(7, 83, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_k__45 = __pyx_t_1;
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;

  /* "../resources_source/python/pyparticletracing.pxi":84
 * 
 *     def solve(self, initial_positions = [], initial_velocities = [],
 *                     particle_charges = [], particle_masses = []):             # <<<<<<<<<<<<<<
 * 
 *         cdef vector[vector[double]] initial_positions_vector, initial_velocities_vector
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(7, 84, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_k__46 = __pyx_t_1;
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(7, 84, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_k__47 = __pyx_t_1;
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;

  /* "_agros.pyx":148
 *         void setDumpFormat(string format) except +
 * 
 * def open_file(file, open_with_solution = False):             # <<<<<<<<<<<<<<
 *     openFile(file.encode(), open_with_solution)
 * 
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_6_agros_11open_file, NULL, __pyx_n_s_agros); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 148, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_open_file, __pyx_t_1) < 0) __PYX_ERR(1, 148, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "_agros.pyx":151
 *     openFile(file.encode(), open_with_solution)
 * 
 * def save_file(file, save_with_solution = False):             # <<<<<<<<<<<<<<
 *     saveFile(file.encode(), save_with_solution)
 * 
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_6_agros_13save_file, NULL, __pyx_n_s_agros); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 151, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_save_file, __pyx_t_1) < 0) __PYX_ERR(1, 151, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "_agros.pyx":154
 *     saveFile(file.encode(), save_with_solution)
 * 
 * def get_script_from_model():             # <<<<<<<<<<<<<<
 *     return getScriptFromModel().decode()
 * 
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_6_agros_15get_script_from_model, NULL, __pyx_n_s_agros); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 154, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_get_script_from_model, __pyx_t_1) < 0) __PYX_ERR(1, 154, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "_agros.pyx":157
 *     return getScriptFromModel().decode()
 * 
 * def tempdir(dir = ""):             # <<<<<<<<<<<<<<
 *     return "{0}/{1}".format(tempDir().decode(), dir)
 * 
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_6_agros_17tempdir, NULL, __pyx_n_s_agros); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 157, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_tempdir, __pyx_t_1) < 0) __PYX_ERR(1, 157, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "_agros.pyx":160
 *     return "{0}/{1}".format(tempDir().decode(), dir)
 * 
 * def cachedir(dir = ""):             # <<<<<<<<<<<<<<
 *     return "{0}/{1}".format(cacheDir().decode(), dir)
 * 
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_6_agros_19cachedir, NULL, __pyx_n_s_agros); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 160, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_cachedir, __pyx_t_1) < 0) __PYX_ERR(1, 160, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "_agros.pyx":164
 * 
 * # datadir()
 * def datadir(str = ""):             # <<<<<<<<<<<<<<
 *     return dataDir().decode()
 * def _set_datadir(str):
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_6_agros_21datadir, NULL, __pyx_n_s_agros); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 164, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_datadir, __pyx_t_1) < 0) __PYX_ERR(1, 164, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "_agros.pyx":166
 * def datadir(str = ""):
 *     return dataDir().decode()
 * def _set_datadir(str):             # <<<<<<<<<<<<<<
 *     setDataDir(str.encode())
 * def _read_plugins():
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_6_agros_23_set_datadir, NULL, __pyx_n_s_agros); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 166, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_set_datadir, __pyx_t_1) < 0) __PYX_ERR(1, 166, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "_agros.pyx":168
 * def _set_datadir(str):
 *     setDataDir(str.encode())
 * def _read_plugins():             # <<<<<<<<<<<<<<
 *     readPlugins()
 * 
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_6_agros_25_read_plugins, NULL, __pyx_n_s_agros); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 168, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_read_plugins, __pyx_t_1) < 0) __PYX_ERR(1, 168, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "_agros.pyx":172
 * 
 * 
 * def version():             # <<<<<<<<<<<<<<
 *     return pyVersion()
 * 
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_6_agros_27version, NULL, __pyx_n_s_agros); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 172, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_version, __pyx_t_1) < 0) __PYX_ERR(1, 172, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "_agros.pyx":207
 *             self.thisptr.setDumpFormat(format.encode())
 * 
 * options = __Options__()             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_6_agros___Options__)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 207, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_options, __pyx_t_1) < 0) __PYX_ERR(1, 207, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "_agros.pyx":1
 * # imports             # <<<<<<<<<<<<<<
 * from libcpp cimport bool
 * from libcpp.pair cimport pair
 */
  __pyx_t_1 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_test, __pyx_t_1) < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "vector.from_py":45
 * 
 * @cname("__pyx_convert_vector_from_py_double")
 * cdef vector[X] __pyx_convert_vector_from_py_double(object o) except *:             # <<<<<<<<<<<<<<
 *     cdef vector[X] v
 *     for item in o:
 */

  /*--- Wrapped vars code ---*/

  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  if (__pyx_m) {
    if (__pyx_d) {
      __Pyx_AddTraceback("init _agros", __pyx_clineno, __pyx_lineno, __pyx_filename);
    }
    Py_CLEAR(__pyx_m);
  } else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_ImportError, "init _agros");
  }
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  return (__pyx_m != NULL) ? 0 : -1;
  #elif PY_MAJOR_VERSION >= 3
  return __pyx_m;
  #else
  return;
  #endif
}

/* --- Runtime support code --- */
/* Refnanny */
#if CYTHON_REFNANNY
static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname) {
    PyObject *m = NULL, *p = NULL;
    void *r = NULL;
    m = PyImport_ImportModule(modname);
    if (!m) goto end;
    p = PyObject_GetAttrString(m, "RefNannyAPI");
    if (!p) goto end;
    r = PyLong_AsVoidPtr(p);
end:
    Py_XDECREF(p);
    Py_XDECREF(m);
    return (__Pyx_RefNannyAPIStruct *)r;
}
#endif

/* PyObjectGetAttrStr */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name) {
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_getattro))
        return tp->tp_getattro(obj, attr_name);
#if PY_MAJOR_VERSION < 3
    if (likely(tp->tp_getattr))
        return tp->tp_getattr(obj, PyString_AS_STRING(attr_name));
#endif
    return PyObject_GetAttr(obj, attr_name);
}
#endif

/* GetBuiltinName */
static PyObject *__Pyx_GetBuiltinName(PyObject *name) {
    PyObject* result = __Pyx_PyObject_GetAttrStr(__pyx_b, name);
    if (unlikely(!result)) {
        PyErr_Format(PyExc_NameError,
#if PY_MAJOR_VERSION >= 3
            "name '%U' is not defined", name);
#else
            "name '%.200s' is not defined", PyString_AS_STRING(name));
#endif
    }
    return result;
}

/* RaiseArgTupleInvalid */
static void __Pyx_RaiseArgtupleInvalid(
    const char* func_name,
    int exact,
    Py_ssize_t num_min,
    Py_ssize_t num_max,
    Py_ssize_t num_found)
{
    Py_ssize_t num_expected;
    const char *more_or_less;
    if (num_found < num_min) {
        num_expected = num_min;
        more_or_less = "at least";
    } else {
        num_expected = num_max;
        more_or_less = "at most";
    }
    if (exact) {
        more_or_less = "exactly";
    }
    PyErr_Format(PyExc_TypeError,
                 "%.200s() takes %.8s %" CYTHON_FORMAT_SSIZE_T "d positional argument%.1s (%" CYTHON_FORMAT_SSIZE_T "d given)",
                 func_name, more_or_less, num_expected,
                 (num_expected == 1) ? "" : "s", num_found);
}

/* RaiseDoubleKeywords */
static void __Pyx_RaiseDoubleKeywordsError(
    const char* func_name,
    PyObject* kw_name)
{
    PyErr_Format(PyExc_TypeError,
        #if PY_MAJOR_VERSION >= 3
        "%s() got multiple values for keyword argument '%U'", func_name, kw_name);
        #else
        "%s() got multiple values for keyword argument '%s'", func_name,
        PyString_AsString(kw_name));
        #endif
}

/* ParseKeywords */
static int __Pyx_ParseOptionalKeywords(
    PyObject *kwds,
    PyObject **argnames[],
    PyObject *kwds2,
    PyObject *values[],
    Py_ssize_t num_pos_args,
    const char* function_name)
{
    PyObject *key = 0, *value = 0;
    Py_ssize_t pos = 0;
    PyObject*** name;
    PyObject*** first_kw_arg = argnames + num_pos_args;
    while (PyDict_Next(kwds, &pos, &key, &value)) {
        name = first_kw_arg;
        while (*name && (**name != key)) name++;
        if (*name) {
            values[name-argnames] = value;
            continue;
        }
        name = first_kw_arg;
        #if PY_MAJOR_VERSION < 3
        if (likely(PyString_Check(key))) {
            while (*name) {
                if ((CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**name) == PyString_GET_SIZE(key))
                        && _PyString_Eq(**name, key)) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    if ((**argname == key) || (
                            (CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**argname) == PyString_GET_SIZE(key))
                             && _PyString_Eq(**argname, key))) {
                        goto arg_passed_twice;
                    }
                    argname++;
                }
            }
        } else
        #endif
        if (likely(PyUnicode_Check(key))) {
            while (*name) {
                int cmp = (**name == key) ? 0 :
                #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                    (__Pyx_PyUnicode_GET_LENGTH(**name) != __Pyx_PyUnicode_GET_LENGTH(key)) ? 1 :
                #endif
                    PyUnicode_Compare(**name, key);
                if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                if (cmp == 0) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    int cmp = (**argname == key) ? 0 :
                    #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                        (__Pyx_PyUnicode_GET_LENGTH(**argname) != __Pyx_PyUnicode_GET_LENGTH(key)) ? 1 :
                    #endif
                        PyUnicode_Compare(**argname, key);
                    if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                    if (cmp == 0) goto arg_passed_twice;
                    argname++;
                }
            }
        } else
            goto invalid_keyword_type;
        if (kwds2) {
            if (unlikely(PyDict_SetItem(kwds2, key, value))) goto bad;
        } else {
            goto invalid_keyword;
        }
    }
    return 0;
arg_passed_twice:
    __Pyx_RaiseDoubleKeywordsError(function_name, key);
    goto bad;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%.200s() keywords must be strings", function_name);
    goto bad;
invalid_keyword:
    PyErr_Format(PyExc_TypeError,
    #if PY_MAJOR_VERSION < 3
        "%.200s() got an unexpected keyword argument '%.200s'",
        function_name, PyString_AsString(key));
    #else
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
bad:
    return -1;
}

/* PyObjectSetAttrStr */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE int __Pyx_PyObject_SetAttrStr(PyObject* obj, PyObject* attr_name, PyObject* value) {
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_setattro))
        return tp->tp_setattro(obj, attr_name, value);
#if PY_MAJOR_VERSION < 3
    if (likely(tp->tp_setattr))
        return tp->tp_setattr(obj, PyString_AS_STRING(attr_name), value);
#endif
    return PyObject_SetAttr(obj, attr_name, value);
}
#endif

/* PyFunctionFastCall */
#if CYTHON_FAST_PYCALL
static PyObject* __Pyx_PyFunction_FastCallNoKw(PyCodeObject *co, PyObject **args, Py_ssize_t na,
                                               PyObject *globals) {
    PyFrameObject *f;
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    PyObject **fastlocals;
    Py_ssize_t i;
    PyObject *result;
    assert(globals != NULL);
    /* XXX Perhaps we should create a specialized
       PyFrame_New() that doesn't take locals, but does
       take builtins without sanity checking them.
       */
    assert(tstate != NULL);
    f = PyFrame_New(tstate, co, globals, NULL);
    if (f == NULL) {
        return NULL;
    }
    fastlocals = __Pyx_PyFrame_GetLocalsplus(f);
    for (i = 0; i < na; i++) {
        Py_INCREF(*args);
        fastlocals[i] = *args++;
    }
    result = PyEval_EvalFrameEx(f,0);
    ++tstate->recursion_depth;
    Py_DECREF(f);
    --tstate->recursion_depth;
    return result;
}
#if 1 || PY_VERSION_HEX < 0x030600B1
static PyObject *__Pyx_PyFunction_FastCallDict(PyObject *func, PyObject **args, Py_ssize_t nargs, PyObject *kwargs) {
    PyCodeObject *co = (PyCodeObject *)PyFunction_GET_CODE(func);
    PyObject *globals = PyFunction_GET_GLOBALS(func);
    PyObject *argdefs = PyFunction_GET_DEFAULTS(func);
    PyObject *closure;
#if PY_MAJOR_VERSION >= 3
    PyObject *kwdefs;
#endif
    PyObject *kwtuple, **k;
    PyObject **d;
    Py_ssize_t nd;
    Py_ssize_t nk;
    PyObject *result;
    assert(kwargs == NULL || PyDict_Check(kwargs));
    nk = kwargs ? PyDict_Size(kwargs) : 0;
    if (Py_EnterRecursiveCall((char*)" while calling a Python object")) {
        return NULL;
    }
    if (
#if PY_MAJOR_VERSION >= 3
            co->co_kwonlyargcount == 0 &&
#endif
            likely(kwargs == NULL || nk == 0) &&
            co->co_flags == (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)) {
        if (argdefs == NULL && co->co_argcount == nargs) {
            result = __Pyx_PyFunction_FastCallNoKw(co, args, nargs, globals);
            goto done;
        }
        else if (nargs == 0 && argdefs != NULL
                 && co->co_argcount == Py_SIZE(argdefs)) {
            /* function called with no arguments, but all parameters have
               a default value: use default values as arguments .*/
            args = &PyTuple_GET_ITEM(argdefs, 0);
            result =__Pyx_PyFunction_FastCallNoKw(co, args, Py_SIZE(argdefs), globals);
            goto done;
        }
    }
    if (kwargs != NULL) {
        Py_ssize_t pos, i;
        kwtuple = PyTuple_New(2 * nk);
        if (kwtuple == NULL) {
            result = NULL;
            goto done;
        }
        k = &PyTuple_GET_ITEM(kwtuple, 0);
        pos = i = 0;
        while (PyDict_Next(kwargs, &pos, &k[i], &k[i+1])) {
            Py_INCREF(k[i]);
            Py_INCREF(k[i+1]);
            i += 2;
        }
        nk = i / 2;
    }
    else {
        kwtuple = NULL;
        k = NULL;
    }
    closure = PyFunction_GET_CLOSURE(func);
#if PY_MAJOR_VERSION >= 3
    kwdefs = PyFunction_GET_KW_DEFAULTS(func);
#endif
    if (argdefs != NULL) {
        d = &PyTuple_GET_ITEM(argdefs, 0);
        nd = Py_SIZE(argdefs);
    }
    else {
        d = NULL;
        nd = 0;
    }
#if PY_MAJOR_VERSION >= 3
    result = PyEval_EvalCodeEx((PyObject*)co, globals, (PyObject *)NULL,
                               args, (int)nargs,
                               k, (int)nk,
                               d, (int)nd, kwdefs, closure);
#else
    result = PyEval_EvalCodeEx(co, globals, (PyObject *)NULL,
                               args, (int)nargs,
                               k, (int)nk,
                               d, (int)nd, closure);
#endif
    Py_XDECREF(kwtuple);
done:
    Py_LeaveRecursiveCall();
    return result;
}
#endif
#endif

/* PyObjectCall */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw) {
    PyObject *result;
    ternaryfunc call = func->ob_type->tp_call;
    if (unlikely(!call))
        return PyObject_Call(func, arg, kw);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = (*call)(func, arg, kw);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* PyObjectCallMethO */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg) {
    PyObject *self, *result;
    PyCFunction cfunc;
    cfunc = PyCFunction_GET_FUNCTION(func);
    self = PyCFunction_GET_SELF(func);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = cfunc(self, arg);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* PyObjectCallNoArg */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func) {
#if CYTHON_FAST_PYCALL
    if (PyFunction_Check(func)) {
        return __Pyx_PyFunction_FastCall(func, NULL, 0);
    }
#endif
#ifdef __Pyx_CyFunction_USED
    if (likely(PyCFunction_Check(func) || __Pyx_CyFunction_Check(func)))
#else
    if (likely(PyCFunction_Check(func)))
#endif
    {
        if (likely(PyCFunction_GET_FLAGS(func) & METH_NOARGS)) {
            return __Pyx_PyObject_CallMethO(func, NULL);
        }
    }
    return __Pyx_PyObject_Call(func, __pyx_empty_tuple, NULL);
}
#endif

/* PyCFunctionFastCall */
#if CYTHON_FAST_PYCCALL
static CYTHON_INLINE PyObject * __Pyx_PyCFunction_FastCall(PyObject *func_obj, PyObject **args, Py_ssize_t nargs) {
    PyCFunctionObject *func = (PyCFunctionObject*)func_obj;
    PyCFunction meth = PyCFunction_GET_FUNCTION(func);
    PyObject *self = PyCFunction_GET_SELF(func);
    int flags = PyCFunction_GET_FLAGS(func);
    assert(PyCFunction_Check(func));
    assert(METH_FASTCALL == (flags & ~(METH_CLASS | METH_STATIC | METH_COEXIST | METH_KEYWORDS | METH_STACKLESS)));
    assert(nargs >= 0);
    assert(nargs == 0 || args != NULL);
    /* _PyCFunction_FastCallDict() must not be called with an exception set,
       because it may clear it (directly or indirectly) and so the
       caller loses its exception */
    assert(!PyErr_Occurred());
    if ((PY_VERSION_HEX < 0x030700A0) || unlikely(flags & METH_KEYWORDS)) {
        return (*((__Pyx_PyCFunctionFastWithKeywords)(void*)meth)) (self, args, nargs, NULL);
    } else {
        return (*((__Pyx_PyCFunctionFast)(void*)meth)) (self, args, nargs);
    }
}
#endif

/* PyObjectCallOneArg */
#if CYTHON_COMPILING_IN_CPYTHON
static PyObject* __Pyx__PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject *result;
    PyObject *args = PyTuple_New(1);
    if (unlikely(!args)) return NULL;
    Py_INCREF(arg);
    PyTuple_SET_ITEM(args, 0, arg);
    result = __Pyx_PyObject_Call(func, args, NULL);
    Py_DECREF(args);
    return result;
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
#if CYTHON_FAST_PYCALL
    if (PyFunction_Check(func)) {
        return __Pyx_PyFunction_FastCall(func, &arg, 1);
    }
#endif
    if (likely(PyCFunction_Check(func))) {
        if (likely(PyCFunction_GET_FLAGS(func) & METH_O)) {
            return __Pyx_PyObject_CallMethO(func, arg);
#if CYTHON_FAST_PYCCALL
        } else if (PyCFunction_GET_FLAGS(func) & METH_FASTCALL) {
            return __Pyx_PyCFunction_FastCall(func, &arg, 1);
#endif
        }
    }
    return __Pyx__PyObject_CallOneArg(func, arg);
}
#else
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject *result;
    PyObject *args = PyTuple_Pack(1, arg);
    if (unlikely(!args)) return NULL;
    result = __Pyx_PyObject_Call(func, args, NULL);
    Py_DECREF(args);
    return result;
}
#endif

/* GetItemInt */
static PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j) {
    PyObject *r;
    if (!j) return NULL;
    r = PyObject_GetItem(o, j);
    Py_DECREF(j);
    return r;
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i,
                                                              CYTHON_NCP_UNUSED int wraparound,
                                                              CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    Py_ssize_t wrapped_i = i;
    if (wraparound & unlikely(i < 0)) {
        wrapped_i += PyList_GET_SIZE(o);
    }
    if ((!boundscheck) || likely(__Pyx_is_valid_index(wrapped_i, PyList_GET_SIZE(o)))) {
        PyObject *r = PyList_GET_ITEM(o, wrapped_i);
        Py_INCREF(r);
        return r;
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
#else
    return PySequence_GetItem(o, i);
#endif
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i,
                                                              CYTHON_NCP_UNUSED int wraparound,
                                                              CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    Py_ssize_t wrapped_i = i;
    if (wraparound & unlikely(i < 0)) {
        wrapped_i += PyTuple_GET_SIZE(o);
    }
    if ((!boundscheck) || likely(__Pyx_is_valid_index(wrapped_i, PyTuple_GET_SIZE(o)))) {
        PyObject *r = PyTuple_GET_ITEM(o, wrapped_i);
        Py_INCREF(r);
        return r;
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
#else
    return PySequence_GetItem(o, i);
#endif
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i, int is_list,
                                                     CYTHON_NCP_UNUSED int wraparound,
                                                     CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS && CYTHON_USE_TYPE_SLOTS
    if (is_list || PyList_CheckExact(o)) {
        Py_ssize_t n = ((!wraparound) | likely(i >= 0)) ? i : i + PyList_GET_SIZE(o);
        if ((!boundscheck) || (likely(__Pyx_is_valid_index(n, PyList_GET_SIZE(o))))) {
            PyObject *r = PyList_GET_ITEM(o, n);
            Py_INCREF(r);
            return r;
        }
    }
    else if (PyTuple_CheckExact(o)) {
        Py_ssize_t n = ((!wraparound) | likely(i >= 0)) ? i : i + PyTuple_GET_SIZE(o);
        if ((!boundscheck) || likely(__Pyx_is_valid_index(n, PyTuple_GET_SIZE(o)))) {
            PyObject *r = PyTuple_GET_ITEM(o, n);
            Py_INCREF(r);
            return r;
        }
    } else {
        PySequenceMethods *m = Py_TYPE(o)->tp_as_sequence;
        if (likely(m && m->sq_item)) {
            if (wraparound && unlikely(i < 0) && likely(m->sq_length)) {
                Py_ssize_t l = m->sq_length(o);
                if (likely(l >= 0)) {
                    i += l;
                } else {
                    if (!PyErr_ExceptionMatches(PyExc_OverflowError))
                        return NULL;
                    PyErr_Clear();
                }
            }
            return m->sq_item(o, i);
        }
    }
#else
    if (is_list || PySequence_Check(o)) {
        return PySequence_GetItem(o, i);
    }
#endif
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
}

/* ObjectGetItem */
#if CYTHON_USE_TYPE_SLOTS
static PyObject *__Pyx_PyObject_GetIndex(PyObject *obj, PyObject* index) {
    PyObject *runerr;
    Py_ssize_t key_value;
    PySequenceMethods *m = Py_TYPE(obj)->tp_as_sequence;
    if (unlikely(!(m && m->sq_item))) {
        PyErr_Format(PyExc_TypeError, "'%.200s' object is not subscriptable", Py_TYPE(obj)->tp_name);
        return NULL;
    }
    key_value = __Pyx_PyIndex_AsSsize_t(index);
    if (likely(key_value != -1 || !(runerr = PyErr_Occurred()))) {
        return __Pyx_GetItemInt_Fast(obj, key_value, 0, 1, 1);
    }
    if (PyErr_GivenExceptionMatches(runerr, PyExc_OverflowError)) {
        PyErr_Clear();
        PyErr_Format(PyExc_IndexError, "cannot fit '%.200s' into an index-sized integer", Py_TYPE(index)->tp_name);
    }
    return NULL;
}
static PyObject *__Pyx_PyObject_GetItem(PyObject *obj, PyObject* key) {
    PyMappingMethods *m = Py_TYPE(obj)->tp_as_mapping;
    if (likely(m && m->mp_subscript)) {
        return m->mp_subscript(obj, key);
    }
    return __Pyx_PyObject_GetIndex(obj, key);
}
#endif

/* PyObjectCall2Args */
static CYTHON_UNUSED PyObject* __Pyx_PyObject_Call2Args(PyObject* function, PyObject* arg1, PyObject* arg2) {
    PyObject *args, *result = NULL;
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(function)) {
        PyObject *args[2] = {arg1, arg2};
        return __Pyx_PyFunction_FastCall(function, args, 2);
    }
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(function)) {
        PyObject *args[2] = {arg1, arg2};
        return __Pyx_PyCFunction_FastCall(function, args, 2);
    }
    #endif
    args = PyTuple_New(2);
    if (unlikely(!args)) goto done;
    Py_INCREF(arg1);
    PyTuple_SET_ITEM(args, 0, arg1);
    Py_INCREF(arg2);
    PyTuple_SET_ITEM(args, 1, arg2);
    Py_INCREF(function);
    result = __Pyx_PyObject_Call(function, args, NULL);
    Py_DECREF(args);
    Py_DECREF(function);
done:
    return result;
}

/* PyErrFetchRestore */
#if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    tmp_type = tstate->curexc_type;
    tmp_value = tstate->curexc_value;
    tmp_tb = tstate->curexc_traceback;
    tstate->curexc_type = type;
    tstate->curexc_value = value;
    tstate->curexc_traceback = tb;
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
}
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
    *type = tstate->curexc_type;
    *value = tstate->curexc_value;
    *tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
}
#endif

/* RaiseException */
#if PY_MAJOR_VERSION < 3
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb,
                        CYTHON_UNUSED PyObject *cause) {
    __Pyx_PyThreadState_declare
    Py_XINCREF(type);
    if (!value || value == Py_None)
        value = NULL;
    else
        Py_INCREF(value);
    if (!tb || tb == Py_None)
        tb = NULL;
    else {
        Py_INCREF(tb);
        if (!PyTraceBack_Check(tb)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: arg 3 must be a traceback or None");
            goto raise_error;
        }
    }
    if (PyType_Check(type)) {
#if CYTHON_COMPILING_IN_PYPY
        if (!value) {
            Py_INCREF(Py_None);
            value = Py_None;
        }
#endif
        PyErr_NormalizeException(&type, &value, &tb);
    } else {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto raise_error;
        }
        value = type;
        type = (PyObject*) Py_TYPE(type);
        Py_INCREF(type);
        if (!PyType_IsSubtype((PyTypeObject *)type, (PyTypeObject *)PyExc_BaseException)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: exception class must be a subclass of BaseException");
            goto raise_error;
        }
    }
    __Pyx_PyThreadState_assign
    __Pyx_ErrRestore(type, value, tb);
    return;
raise_error:
    Py_XDECREF(value);
    Py_XDECREF(type);
    Py_XDECREF(tb);
    return;
}
#else
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause) {
    PyObject* owned_instance = NULL;
    if (tb == Py_None) {
        tb = 0;
    } else if (tb && !PyTraceBack_Check(tb)) {
        PyErr_SetString(PyExc_TypeError,
            "raise: arg 3 must be a traceback or None");
        goto bad;
    }
    if (value == Py_None)
        value = 0;
    if (PyExceptionInstance_Check(type)) {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto bad;
        }
        value = type;
        type = (PyObject*) Py_TYPE(value);
    } else if (PyExceptionClass_Check(type)) {
        PyObject *instance_class = NULL;
        if (value && PyExceptionInstance_Check(value)) {
            instance_class = (PyObject*) Py_TYPE(value);
            if (instance_class != type) {
                int is_subclass = PyObject_IsSubclass(instance_class, type);
                if (!is_subclass) {
                    instance_class = NULL;
                } else if (unlikely(is_subclass == -1)) {
                    goto bad;
                } else {
                    type = instance_class;
                }
            }
        }
        if (!instance_class) {
            PyObject *args;
            if (!value)
                args = PyTuple_New(0);
            else if (PyTuple_Check(value)) {
                Py_INCREF(value);
                args = value;
            } else
                args = PyTuple_Pack(1, value);
            if (!args)
                goto bad;
            owned_instance = PyObject_Call(type, args, NULL);
            Py_DECREF(args);
            if (!owned_instance)
                goto bad;
            value = owned_instance;
            if (!PyExceptionInstance_Check(value)) {
                PyErr_Format(PyExc_TypeError,
                             "calling %R should have returned an instance of "
                             "BaseException, not %R",
                             type, Py_TYPE(value));
                goto bad;
            }
        }
    } else {
        PyErr_SetString(PyExc_TypeError,
            "raise: exception class must be a subclass of BaseException");
        goto bad;
    }
    if (cause) {
        PyObject *fixed_cause;
        if (cause == Py_None) {
            fixed_cause = NULL;
        } else if (PyExceptionClass_Check(cause)) {
            fixed_cause = PyObject_CallObject(cause, NULL);
            if (fixed_cause == NULL)
                goto bad;
        } else if (PyExceptionInstance_Check(cause)) {
            fixed_cause = cause;
            Py_INCREF(fixed_cause);
        } else {
            PyErr_SetString(PyExc_TypeError,
                            "exception causes must derive from "
                            "BaseException");
            goto bad;
        }
        PyException_SetCause(value, fixed_cause);
    }
    PyErr_SetObject(type, value);
    if (tb) {
#if CYTHON_COMPILING_IN_PYPY
        PyObject *tmp_type, *tmp_value, *tmp_tb;
        PyErr_Fetch(&tmp_type, &tmp_value, &tmp_tb);
        Py_INCREF(tb);
        PyErr_Restore(tmp_type, tmp_value, tb);
        Py_XDECREF(tmp_tb);
#else
        PyThreadState *tstate = __Pyx_PyThreadState_Current;
        PyObject* tmp_tb = tstate->curexc_traceback;
        if (tb != tmp_tb) {
            Py_INCREF(tb);
            tstate->curexc_traceback = tb;
            Py_XDECREF(tmp_tb);
        }
#endif
    }
bad:
    Py_XDECREF(owned_instance);
    return;
}
#endif

/* WriteUnraisableException */
static void __Pyx_WriteUnraisable(const char *name, CYTHON_UNUSED int clineno,
                                  CYTHON_UNUSED int lineno, CYTHON_UNUSED const char *filename,
                                  int full_traceback, CYTHON_UNUSED int nogil) {
    PyObject *old_exc, *old_val, *old_tb;
    PyObject *ctx;
    __Pyx_PyThreadState_declare
#ifdef WITH_THREAD
    PyGILState_STATE state;
    if (nogil)
        state = PyGILState_Ensure();
#ifdef _MSC_VER
    else state = (PyGILState_STATE)-1;
#endif
#endif
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&old_exc, &old_val, &old_tb);
    if (full_traceback) {
        Py_XINCREF(old_exc);
        Py_XINCREF(old_val);
        Py_XINCREF(old_tb);
        __Pyx_ErrRestore(old_exc, old_val, old_tb);
        PyErr_PrintEx(1);
    }
    #if PY_MAJOR_VERSION < 3
    ctx = PyString_FromString(name);
    #else
    ctx = PyUnicode_FromString(name);
    #endif
    __Pyx_ErrRestore(old_exc, old_val, old_tb);
    if (!ctx) {
        PyErr_WriteUnraisable(Py_None);
    } else {
        PyErr_WriteUnraisable(ctx);
        Py_DECREF(ctx);
    }
#ifdef WITH_THREAD
    if (nogil)
        PyGILState_Release(state);
#endif
}

/* KeywordStringCheck */
static int __Pyx_CheckKeywordStrings(
    PyObject *kwdict,
    const char* function_name,
    int kw_allowed)
{
    PyObject* key = 0;
    Py_ssize_t pos = 0;
#if CYTHON_COMPILING_IN_PYPY
    if (!kw_allowed && PyDict_Next(kwdict, &pos, &key, 0))
        goto invalid_keyword;
    return 1;
#else
    while (PyDict_Next(kwdict, &pos, &key, 0)) {
        #if PY_MAJOR_VERSION < 3
        if (unlikely(!PyString_Check(key)))
        #endif
            if (unlikely(!PyUnicode_Check(key)))
                goto invalid_keyword_type;
    }
    if ((!kw_allowed) && unlikely(key))
        goto invalid_keyword;
    return 1;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%.200s() keywords must be strings", function_name);
    return 0;
#endif
invalid_keyword:
    PyErr_Format(PyExc_TypeError,
    #if PY_MAJOR_VERSION < 3
        "%.200s() got an unexpected keyword argument '%.200s'",
        function_name, PyString_AsString(key));
    #else
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
    return 0;
}

/* PyFloatBinop */
#if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyFloat_DivideObjC(PyObject *op1, PyObject *op2, double floatval, int inplace, int zerodivision_check) {
    const double b = floatval;
    double a, result;
    (void)inplace;
    (void)zerodivision_check;
    if (likely(PyFloat_CheckExact(op1))) {
        a = PyFloat_AS_DOUBLE(op1);
        
    } else
    #if PY_MAJOR_VERSION < 3
    if (likely(PyInt_CheckExact(op1))) {
        a = (double) PyInt_AS_LONG(op1);
        
    } else
    #endif
    if (likely(PyLong_CheckExact(op1))) {
        #if CYTHON_USE_PYLONG_INTERNALS
        const digit* digits = ((PyLongObject*)op1)->ob_digit;
        const Py_ssize_t size = Py_SIZE(op1);
        switch (size) {
            case  0: a = 0.0; break;
            case -1: a = -(double) digits[0]; break;
            case  1: a = (double) digits[0]; break;
            case -2:
            case 2:
                if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT && ((8 * sizeof(unsigned long) < 53) || (1 * PyLong_SHIFT < 53))) {
                    a = (double) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                    if ((8 * sizeof(unsigned long) < 53) || (2 * PyLong_SHIFT < 53) || (a < (double) ((PY_LONG_LONG)1 << 53))) {
                        if (size == -2)
                            a = -a;
                        break;
                    }
                }
                CYTHON_FALLTHROUGH;
            case -3:
            case 3:
                if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT && ((8 * sizeof(unsigned long) < 53) || (2 * PyLong_SHIFT < 53))) {
                    a = (double) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                    if ((8 * sizeof(unsigned long) < 53) || (3 * PyLong_SHIFT < 53) || (a < (double) ((PY_LONG_LONG)1 << 53))) {
                        if (size == -3)
                            a = -a;
                        break;
                    }
                }
                CYTHON_FALLTHROUGH;
            case -4:
            case 4:
                if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT && ((8 * sizeof(unsigned long) < 53) || (3 * PyLong_SHIFT < 53))) {
                    a = (double) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                    if ((8 * sizeof(unsigned long) < 53) || (4 * PyLong_SHIFT < 53) || (a < (double) ((PY_LONG_LONG)1 << 53))) {
                        if (size == -4)
                            a = -a;
                        break;
                    }
                }
                CYTHON_FALLTHROUGH;
            default:
        #else
        {
        #endif
            a = PyLong_AsDouble(op1);
            if (unlikely(a == -1.0 && PyErr_Occurred())) return NULL;
            
        }
    } else {
        return (inplace ? __Pyx_PyNumber_InPlaceDivide(op1, op2) : __Pyx_PyNumber_Divide(op1, op2));
    }
        
        PyFPE_START_PROTECT("divide", return NULL)
        result = a / b;
        PyFPE_END_PROTECT(result)
        return PyFloat_FromDouble(result);
}
#endif

/* decode_c_bytes */
  static CYTHON_INLINE PyObject* __Pyx_decode_c_bytes(
         const char* cstring, Py_ssize_t length, Py_ssize_t start, Py_ssize_t stop,
         const char* encoding, const char* errors,
         PyObject* (*decode_func)(const char *s, Py_ssize_t size, const char *errors)) {
    if (unlikely((start < 0) | (stop < 0))) {
        if (start < 0) {
            start += length;
            if (start < 0)
                start = 0;
        }
        if (stop < 0)
            stop += length;
    }
    if (stop > length)
        stop = length;
    if (unlikely(stop <= start))
        return __Pyx_NewRef(__pyx_empty_unicode);
    length = stop - start;
    cstring += start;
    if (decode_func) {
        return decode_func(cstring, length, errors);
    } else {
        return PyUnicode_Decode(cstring, length, encoding, errors);
    }
}

/* DictGetItem */
  #if PY_MAJOR_VERSION >= 3 && !CYTHON_COMPILING_IN_PYPY
static PyObject *__Pyx_PyDict_GetItem(PyObject *d, PyObject* key) {
    PyObject *value;
    value = PyDict_GetItemWithError(d, key);
    if (unlikely(!value)) {
        if (!PyErr_Occurred()) {
            if (unlikely(PyTuple_Check(key))) {
                PyObject* args = PyTuple_Pack(1, key);
                if (likely(args)) {
                    PyErr_SetObject(PyExc_KeyError, args);
                    Py_DECREF(args);
                }
            } else {
                PyErr_SetObject(PyExc_KeyError, key);
            }
        }
        return NULL;
    }
    Py_INCREF(value);
    return value;
}
#endif

/* PyDictVersioning */
  #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PY_UINT64_T __Pyx_get_tp_dict_version(PyObject *obj) {
    PyObject *dict = Py_TYPE(obj)->tp_dict;
    return likely(dict) ? __PYX_GET_DICT_VERSION(dict) : 0;
}
static CYTHON_INLINE PY_UINT64_T __Pyx_get_object_dict_version(PyObject *obj) {
    PyObject **dictptr = NULL;
    Py_ssize_t offset = Py_TYPE(obj)->tp_dictoffset;
    if (offset) {
#if CYTHON_COMPILING_IN_CPYTHON
        dictptr = (likely(offset > 0)) ? (PyObject **) ((char *)obj + offset) : _PyObject_GetDictPtr(obj);
#else
        dictptr = _PyObject_GetDictPtr(obj);
#endif
    }
    return (dictptr && *dictptr) ? __PYX_GET_DICT_VERSION(*dictptr) : 0;
}
static CYTHON_INLINE int __Pyx_object_dict_version_matches(PyObject* obj, PY_UINT64_T tp_dict_version, PY_UINT64_T obj_dict_version) {
    PyObject *dict = Py_TYPE(obj)->tp_dict;
    if (unlikely(!dict) || unlikely(tp_dict_version != __PYX_GET_DICT_VERSION(dict)))
        return 0;
    return obj_dict_version == __Pyx_get_object_dict_version(obj);
}
#endif

/* GetModuleGlobalName */
  #if CYTHON_USE_DICT_VERSIONS
static PyObject *__Pyx__GetModuleGlobalName(PyObject *name, PY_UINT64_T *dict_version, PyObject **dict_cached_value)
#else
static CYTHON_INLINE PyObject *__Pyx__GetModuleGlobalName(PyObject *name)
#endif
{
    PyObject *result;
#if !CYTHON_AVOID_BORROWED_REFS
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030500A1
    result = _PyDict_GetItem_KnownHash(__pyx_d, name, ((PyASCIIObject *) name)->hash);
    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    } else if (unlikely(PyErr_Occurred())) {
        return NULL;
    }
#else
    result = PyDict_GetItem(__pyx_d, name);
    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    }
#endif
#else
    result = PyObject_GetItem(__pyx_d, name);
    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    }
    PyErr_Clear();
#endif
    return __Pyx_GetBuiltinName(name);
}

/* BytesEquals */
  static CYTHON_INLINE int __Pyx_PyBytes_Equals(PyObject* s1, PyObject* s2, int equals) {
#if CYTHON_COMPILING_IN_PYPY
    return PyObject_RichCompareBool(s1, s2, equals);
#else
    if (s1 == s2) {
        return (equals == Py_EQ);
    } else if (PyBytes_CheckExact(s1) & PyBytes_CheckExact(s2)) {
        const char *ps1, *ps2;
        Py_ssize_t length = PyBytes_GET_SIZE(s1);
        if (length != PyBytes_GET_SIZE(s2))
            return (equals == Py_NE);
        ps1 = PyBytes_AS_STRING(s1);
        ps2 = PyBytes_AS_STRING(s2);
        if (ps1[0] != ps2[0]) {
            return (equals == Py_NE);
        } else if (length == 1) {
            return (equals == Py_EQ);
        } else {
            int result;
#if CYTHON_USE_UNICODE_INTERNALS
            Py_hash_t hash1, hash2;
            hash1 = ((PyBytesObject*)s1)->ob_shash;
            hash2 = ((PyBytesObject*)s2)->ob_shash;
            if (hash1 != hash2 && hash1 != -1 && hash2 != -1) {
                return (equals == Py_NE);
            }
#endif
            result = memcmp(ps1, ps2, (size_t)length);
            return (equals == Py_EQ) ? (result == 0) : (result != 0);
        }
    } else if ((s1 == Py_None) & PyBytes_CheckExact(s2)) {
        return (equals == Py_NE);
    } else if ((s2 == Py_None) & PyBytes_CheckExact(s1)) {
        return (equals == Py_NE);
    } else {
        int result;
        PyObject* py_result = PyObject_RichCompare(s1, s2, equals);
        if (!py_result)
            return -1;
        result = __Pyx_PyObject_IsTrue(py_result);
        Py_DECREF(py_result);
        return result;
    }
#endif
}

/* UnicodeEquals */
  static CYTHON_INLINE int __Pyx_PyUnicode_Equals(PyObject* s1, PyObject* s2, int equals) {
#if CYTHON_COMPILING_IN_PYPY
    return PyObject_RichCompareBool(s1, s2, equals);
#else
#if PY_MAJOR_VERSION < 3
    PyObject* owned_ref = NULL;
#endif
    int s1_is_unicode, s2_is_unicode;
    if (s1 == s2) {
        goto return_eq;
    }
    s1_is_unicode = PyUnicode_CheckExact(s1);
    s2_is_unicode = PyUnicode_CheckExact(s2);
#if PY_MAJOR_VERSION < 3
    if ((s1_is_unicode & (!s2_is_unicode)) && PyString_CheckExact(s2)) {
        owned_ref = PyUnicode_FromObject(s2);
        if (unlikely(!owned_ref))
            return -1;
        s2 = owned_ref;
        s2_is_unicode = 1;
    } else if ((s2_is_unicode & (!s1_is_unicode)) && PyString_CheckExact(s1)) {
        owned_ref = PyUnicode_FromObject(s1);
        if (unlikely(!owned_ref))
            return -1;
        s1 = owned_ref;
        s1_is_unicode = 1;
    } else if (((!s2_is_unicode) & (!s1_is_unicode))) {
        return __Pyx_PyBytes_Equals(s1, s2, equals);
    }
#endif
    if (s1_is_unicode & s2_is_unicode) {
        Py_ssize_t length;
        int kind;
        void *data1, *data2;
        if (unlikely(__Pyx_PyUnicode_READY(s1) < 0) || unlikely(__Pyx_PyUnicode_READY(s2) < 0))
            return -1;
        length = __Pyx_PyUnicode_GET_LENGTH(s1);
        if (length != __Pyx_PyUnicode_GET_LENGTH(s2)) {
            goto return_ne;
        }
#if CYTHON_USE_UNICODE_INTERNALS
        {
            Py_hash_t hash1, hash2;
        #if CYTHON_PEP393_ENABLED
            hash1 = ((PyASCIIObject*)s1)->hash;
            hash2 = ((PyASCIIObject*)s2)->hash;
        #else
            hash1 = ((PyUnicodeObject*)s1)->hash;
            hash2 = ((PyUnicodeObject*)s2)->hash;
        #endif
            if (hash1 != hash2 && hash1 != -1 && hash2 != -1) {
                goto return_ne;
            }
        }
#endif
        kind = __Pyx_PyUnicode_KIND(s1);
        if (kind != __Pyx_PyUnicode_KIND(s2)) {
            goto return_ne;
        }
        data1 = __Pyx_PyUnicode_DATA(s1);
        data2 = __Pyx_PyUnicode_DATA(s2);
        if (__Pyx_PyUnicode_READ(kind, data1, 0) != __Pyx_PyUnicode_READ(kind, data2, 0)) {
            goto return_ne;
        } else if (length == 1) {
            goto return_eq;
        } else {
            int result = memcmp(data1, data2, (size_t)(length * kind));
            #if PY_MAJOR_VERSION < 3
            Py_XDECREF(owned_ref);
            #endif
            return (equals == Py_EQ) ? (result == 0) : (result != 0);
        }
    } else if ((s1 == Py_None) & s2_is_unicode) {
        goto return_ne;
    } else if ((s2 == Py_None) & s1_is_unicode) {
        goto return_ne;
    } else {
        int result;
        PyObject* py_result = PyObject_RichCompare(s1, s2, equals);
        #if PY_MAJOR_VERSION < 3
        Py_XDECREF(owned_ref);
        #endif
        if (!py_result)
            return -1;
        result = __Pyx_PyObject_IsTrue(py_result);
        Py_DECREF(py_result);
        return result;
    }
return_eq:
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(owned_ref);
    #endif
    return (equals == Py_EQ);
return_ne:
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(owned_ref);
    #endif
    return (equals == Py_NE);
#endif
}

/* PyObjectGetMethod */
  static int __Pyx_PyObject_GetMethod(PyObject *obj, PyObject *name, PyObject **method) {
    PyObject *attr;
#if CYTHON_UNPACK_METHODS && CYTHON_COMPILING_IN_CPYTHON && CYTHON_USE_PYTYPE_LOOKUP
    PyTypeObject *tp = Py_TYPE(obj);
    PyObject *descr;
    descrgetfunc f = NULL;
    PyObject **dictptr, *dict;
    int meth_found = 0;
    assert (*method == NULL);
    if (unlikely(tp->tp_getattro != PyObject_GenericGetAttr)) {
        attr = __Pyx_PyObject_GetAttrStr(obj, name);
        goto try_unpack;
    }
    if (unlikely(tp->tp_dict == NULL) && unlikely(PyType_Ready(tp) < 0)) {
        return 0;
    }
    descr = _PyType_Lookup(tp, name);
    if (likely(descr != NULL)) {
        Py_INCREF(descr);
#if PY_MAJOR_VERSION >= 3
        #ifdef __Pyx_CyFunction_USED
        if (likely(PyFunction_Check(descr) || (Py_TYPE(descr) == &PyMethodDescr_Type) || __Pyx_CyFunction_Check(descr)))
        #else
        if (likely(PyFunction_Check(descr) || (Py_TYPE(descr) == &PyMethodDescr_Type)))
        #endif
#else
        #ifdef __Pyx_CyFunction_USED
        if (likely(PyFunction_Check(descr) || __Pyx_CyFunction_Check(descr)))
        #else
        if (likely(PyFunction_Check(descr)))
        #endif
#endif
        {
            meth_found = 1;
        } else {
            f = Py_TYPE(descr)->tp_descr_get;
            if (f != NULL && PyDescr_IsData(descr)) {
                attr = f(descr, obj, (PyObject *)Py_TYPE(obj));
                Py_DECREF(descr);
                goto try_unpack;
            }
        }
    }
    dictptr = _PyObject_GetDictPtr(obj);
    if (dictptr != NULL && (dict = *dictptr) != NULL) {
        Py_INCREF(dict);
        attr = __Pyx_PyDict_GetItemStr(dict, name);
        if (attr != NULL) {
            Py_INCREF(attr);
            Py_DECREF(dict);
            Py_XDECREF(descr);
            goto try_unpack;
        }
        Py_DECREF(dict);
    }
    if (meth_found) {
        *method = descr;
        return 1;
    }
    if (f != NULL) {
        attr = f(descr, obj, (PyObject *)Py_TYPE(obj));
        Py_DECREF(descr);
        goto try_unpack;
    }
    if (descr != NULL) {
        *method = descr;
        return 0;
    }
    PyErr_Format(PyExc_AttributeError,
#if PY_MAJOR_VERSION >= 3
                 "'%.50s' object has no attribute '%U'",
                 tp->tp_name, name);
#else
                 "'%.50s' object has no attribute '%.400s'",
                 tp->tp_name, PyString_AS_STRING(name));
#endif
    return 0;
#else
    attr = __Pyx_PyObject_GetAttrStr(obj, name);
    goto try_unpack;
#endif
try_unpack:
#if CYTHON_UNPACK_METHODS
    if (likely(attr) && PyMethod_Check(attr) && likely(PyMethod_GET_SELF(attr) == obj)) {
        PyObject *function = PyMethod_GET_FUNCTION(attr);
        Py_INCREF(function);
        Py_DECREF(attr);
        *method = function;
        return 1;
    }
#endif
    *method = attr;
    return 0;
}

/* PyObjectCallMethod1 */
  static PyObject* __Pyx__PyObject_CallMethod1(PyObject* method, PyObject* arg) {
    PyObject *result = __Pyx_PyObject_CallOneArg(method, arg);
    Py_DECREF(method);
    return result;
}
static PyObject* __Pyx_PyObject_CallMethod1(PyObject* obj, PyObject* method_name, PyObject* arg) {
    PyObject *method = NULL, *result;
    int is_method = __Pyx_PyObject_GetMethod(obj, method_name, &method);
    if (likely(is_method)) {
        result = __Pyx_PyObject_Call2Args(method, obj, arg);
        Py_DECREF(method);
        return result;
    }
    if (unlikely(!method)) return NULL;
    return __Pyx__PyObject_CallMethod1(method, arg);
}

/* append */
  static CYTHON_INLINE int __Pyx_PyObject_Append(PyObject* L, PyObject* x) {
    if (likely(PyList_CheckExact(L))) {
        if (unlikely(__Pyx_PyList_Append(L, x) < 0)) return -1;
    } else {
        PyObject* retval = __Pyx_PyObject_CallMethod1(L, __pyx_n_s_append, x);
        if (unlikely(!retval))
            return -1;
        Py_DECREF(retval);
    }
    return 0;
}

/* PyObject_GenericGetAttrNoDict */
  #if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static PyObject *__Pyx_RaiseGenericGetAttributeError(PyTypeObject *tp, PyObject *attr_name) {
    PyErr_Format(PyExc_AttributeError,
#if PY_MAJOR_VERSION >= 3
                 "'%.50s' object has no attribute '%U'",
                 tp->tp_name, attr_name);
#else
                 "'%.50s' object has no attribute '%.400s'",
                 tp->tp_name, PyString_AS_STRING(attr_name));
#endif
    return NULL;
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_GenericGetAttrNoDict(PyObject* obj, PyObject* attr_name) {
    PyObject *descr;
    PyTypeObject *tp = Py_TYPE(obj);
    if (unlikely(!PyString_Check(attr_name))) {
        return PyObject_GenericGetAttr(obj, attr_name);
    }
    assert(!tp->tp_dictoffset);
    descr = _PyType_Lookup(tp, attr_name);
    if (unlikely(!descr)) {
        return __Pyx_RaiseGenericGetAttributeError(tp, attr_name);
    }
    Py_INCREF(descr);
    #if PY_MAJOR_VERSION < 3
    if (likely(PyType_HasFeature(Py_TYPE(descr), Py_TPFLAGS_HAVE_CLASS)))
    #endif
    {
        descrgetfunc f = Py_TYPE(descr)->tp_descr_get;
        if (unlikely(f)) {
            PyObject *res = f(descr, obj, (PyObject *)tp);
            Py_DECREF(descr);
            return res;
        }
    }
    return descr;
}
#endif

/* PyObject_GenericGetAttr */
  #if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static PyObject* __Pyx_PyObject_GenericGetAttr(PyObject* obj, PyObject* attr_name) {
    if (unlikely(Py_TYPE(obj)->tp_dictoffset)) {
        return PyObject_GenericGetAttr(obj, attr_name);
    }
    return __Pyx_PyObject_GenericGetAttrNoDict(obj, attr_name);
}
#endif

/* PyErrExceptionMatches */
  #if CYTHON_FAST_THREAD_STATE
static int __Pyx_PyErr_ExceptionMatchesTuple(PyObject *exc_type, PyObject *tuple) {
    Py_ssize_t i, n;
    n = PyTuple_GET_SIZE(tuple);
#if PY_MAJOR_VERSION >= 3
    for (i=0; i<n; i++) {
        if (exc_type == PyTuple_GET_ITEM(tuple, i)) return 1;
    }
#endif
    for (i=0; i<n; i++) {
        if (__Pyx_PyErr_GivenExceptionMatches(exc_type, PyTuple_GET_ITEM(tuple, i))) return 1;
    }
    return 0;
}
static CYTHON_INLINE int __Pyx_PyErr_ExceptionMatchesInState(PyThreadState* tstate, PyObject* err) {
    PyObject *exc_type = tstate->curexc_type;
    if (exc_type == err) return 1;
    if (unlikely(!exc_type)) return 0;
    if (unlikely(PyTuple_Check(err)))
        return __Pyx_PyErr_ExceptionMatchesTuple(exc_type, err);
    return __Pyx_PyErr_GivenExceptionMatches(exc_type, err);
}
#endif

/* PyObjectGetAttrStrNoError */
  static void __Pyx_PyObject_GetAttrStr_ClearAttributeError(void) {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    if (likely(__Pyx_PyErr_ExceptionMatches(PyExc_AttributeError)))
        __Pyx_PyErr_Clear();
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStrNoError(PyObject* obj, PyObject* attr_name) {
    PyObject *result;
#if CYTHON_COMPILING_IN_CPYTHON && CYTHON_USE_TYPE_SLOTS && PY_VERSION_HEX >= 0x030700B1
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_getattro == PyObject_GenericGetAttr)) {
        return _PyObject_GenericGetAttrWithDict(obj, attr_name, NULL, 1);
    }
#endif
    result = __Pyx_PyObject_GetAttrStr(obj, attr_name);
    if (unlikely(!result)) {
        __Pyx_PyObject_GetAttrStr_ClearAttributeError();
    }
    return result;
}

/* SetupReduce */
  static int __Pyx_setup_reduce_is_named(PyObject* meth, PyObject* name) {
  int ret;
  PyObject *name_attr;
  name_attr = __Pyx_PyObject_GetAttrStr(meth, __pyx_n_s_name_2);
  if (likely(name_attr)) {
      ret = PyObject_RichCompareBool(name_attr, name, Py_EQ);
  } else {
      ret = -1;
  }
  if (unlikely(ret < 0)) {
      PyErr_Clear();
      ret = 0;
  }
  Py_XDECREF(name_attr);
  return ret;
}
static int __Pyx_setup_reduce(PyObject* type_obj) {
    int ret = 0;
    PyObject *object_reduce = NULL;
    PyObject *object_reduce_ex = NULL;
    PyObject *reduce = NULL;
    PyObject *reduce_ex = NULL;
    PyObject *reduce_cython = NULL;
    PyObject *setstate = NULL;
    PyObject *setstate_cython = NULL;
#if CYTHON_USE_PYTYPE_LOOKUP
    if (_PyType_Lookup((PyTypeObject*)type_obj, __pyx_n_s_getstate)) goto __PYX_GOOD;
#else
    if (PyObject_HasAttr(type_obj, __pyx_n_s_getstate)) goto __PYX_GOOD;
#endif
#if CYTHON_USE_PYTYPE_LOOKUP
    object_reduce_ex = _PyType_Lookup(&PyBaseObject_Type, __pyx_n_s_reduce_ex); if (!object_reduce_ex) goto __PYX_BAD;
#else
    object_reduce_ex = __Pyx_PyObject_GetAttrStr((PyObject*)&PyBaseObject_Type, __pyx_n_s_reduce_ex); if (!object_reduce_ex) goto __PYX_BAD;
#endif
    reduce_ex = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_reduce_ex); if (unlikely(!reduce_ex)) goto __PYX_BAD;
    if (reduce_ex == object_reduce_ex) {
#if CYTHON_USE_PYTYPE_LOOKUP
        object_reduce = _PyType_Lookup(&PyBaseObject_Type, __pyx_n_s_reduce); if (!object_reduce) goto __PYX_BAD;
#else
        object_reduce = __Pyx_PyObject_GetAttrStr((PyObject*)&PyBaseObject_Type, __pyx_n_s_reduce); if (!object_reduce) goto __PYX_BAD;
#endif
        reduce = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_reduce); if (unlikely(!reduce)) goto __PYX_BAD;
        if (reduce == object_reduce || __Pyx_setup_reduce_is_named(reduce, __pyx_n_s_reduce_cython)) {
            reduce_cython = __Pyx_PyObject_GetAttrStrNoError(type_obj, __pyx_n_s_reduce_cython);
            if (likely(reduce_cython)) {
                ret = PyDict_SetItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_reduce, reduce_cython); if (unlikely(ret < 0)) goto __PYX_BAD;
                ret = PyDict_DelItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_reduce_cython); if (unlikely(ret < 0)) goto __PYX_BAD;
            } else if (reduce == object_reduce || PyErr_Occurred()) {
                goto __PYX_BAD;
            }
            setstate = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_setstate);
            if (!setstate) PyErr_Clear();
            if (!setstate || __Pyx_setup_reduce_is_named(setstate, __pyx_n_s_setstate_cython)) {
                setstate_cython = __Pyx_PyObject_GetAttrStrNoError(type_obj, __pyx_n_s_setstate_cython);
                if (likely(setstate_cython)) {
                    ret = PyDict_SetItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_setstate, setstate_cython); if (unlikely(ret < 0)) goto __PYX_BAD;
                    ret = PyDict_DelItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_setstate_cython); if (unlikely(ret < 0)) goto __PYX_BAD;
                } else if (!setstate || PyErr_Occurred()) {
                    goto __PYX_BAD;
                }
            }
            PyType_Modified((PyTypeObject*)type_obj);
        }
    }
    goto __PYX_GOOD;
__PYX_BAD:
    if (!PyErr_Occurred())
        PyErr_Format(PyExc_RuntimeError, "Unable to initialize pickling for %s", ((PyTypeObject*)type_obj)->tp_name);
    ret = -1;
__PYX_GOOD:
#if !CYTHON_USE_PYTYPE_LOOKUP
    Py_XDECREF(object_reduce);
    Py_XDECREF(object_reduce_ex);
#endif
    Py_XDECREF(reduce);
    Py_XDECREF(reduce_ex);
    Py_XDECREF(reduce_cython);
    Py_XDECREF(setstate);
    Py_XDECREF(setstate_cython);
    return ret;
}

/* CalculateMetaclass */
  static PyObject *__Pyx_CalculateMetaclass(PyTypeObject *metaclass, PyObject *bases) {
    Py_ssize_t i, nbases = PyTuple_GET_SIZE(bases);
    for (i=0; i < nbases; i++) {
        PyTypeObject *tmptype;
        PyObject *tmp = PyTuple_GET_ITEM(bases, i);
        tmptype = Py_TYPE(tmp);
#if PY_MAJOR_VERSION < 3
        if (tmptype == &PyClass_Type)
            continue;
#endif
        if (!metaclass) {
            metaclass = tmptype;
            continue;
        }
        if (PyType_IsSubtype(metaclass, tmptype))
            continue;
        if (PyType_IsSubtype(tmptype, metaclass)) {
            metaclass = tmptype;
            continue;
        }
        PyErr_SetString(PyExc_TypeError,
                        "metaclass conflict: "
                        "the metaclass of a derived class "
                        "must be a (non-strict) subclass "
                        "of the metaclasses of all its bases");
        return NULL;
    }
    if (!metaclass) {
#if PY_MAJOR_VERSION < 3
        metaclass = &PyClass_Type;
#else
        metaclass = &PyType_Type;
#endif
    }
    Py_INCREF((PyObject*) metaclass);
    return (PyObject*) metaclass;
}

/* FetchCommonType */
  static PyTypeObject* __Pyx_FetchCommonType(PyTypeObject* type) {
    PyObject* fake_module;
    PyTypeObject* cached_type = NULL;
    fake_module = PyImport_AddModule((char*) "_cython_" CYTHON_ABI);
    if (!fake_module) return NULL;
    Py_INCREF(fake_module);
    cached_type = (PyTypeObject*) PyObject_GetAttrString(fake_module, type->tp_name);
    if (cached_type) {
        if (!PyType_Check((PyObject*)cached_type)) {
            PyErr_Format(PyExc_TypeError,
                "Shared Cython type %.200s is not a type object",
                type->tp_name);
            goto bad;
        }
        if (cached_type->tp_basicsize != type->tp_basicsize) {
            PyErr_Format(PyExc_TypeError,
                "Shared Cython type %.200s has the wrong size, try recompiling",
                type->tp_name);
            goto bad;
        }
    } else {
        if (!PyErr_ExceptionMatches(PyExc_AttributeError)) goto bad;
        PyErr_Clear();
        if (PyType_Ready(type) < 0) goto bad;
        if (PyObject_SetAttrString(fake_module, type->tp_name, (PyObject*) type) < 0)
            goto bad;
        Py_INCREF(type);
        cached_type = type;
    }
done:
    Py_DECREF(fake_module);
    return cached_type;
bad:
    Py_XDECREF(cached_type);
    cached_type = NULL;
    goto done;
}

/* CythonFunctionShared */
  #include <structmember.h>
static PyObject *
__Pyx_CyFunction_get_doc(__pyx_CyFunctionObject *op, CYTHON_UNUSED void *closure)
{
    if (unlikely(op->func_doc == NULL)) {
        if (op->func.m_ml->ml_doc) {
#if PY_MAJOR_VERSION >= 3
            op->func_doc = PyUnicode_FromString(op->func.m_ml->ml_doc);
#else
            op->func_doc = PyString_FromString(op->func.m_ml->ml_doc);
#endif
            if (unlikely(op->func_doc == NULL))
                return NULL;
        } else {
            Py_INCREF(Py_None);
            return Py_None;
        }
    }
    Py_INCREF(op->func_doc);
    return op->func_doc;
}
static int
__Pyx_CyFunction_set_doc(__pyx_CyFunctionObject *op, PyObject *value, CYTHON_UNUSED void *context)
{
    PyObject *tmp = op->func_doc;
    if (value == NULL) {
        value = Py_None;
    }
    Py_INCREF(value);
    op->func_doc = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_name(__pyx_CyFunctionObject *op, CYTHON_UNUSED void *context)
{
    if (unlikely(op->func_name == NULL)) {
#if PY_MAJOR_VERSION >= 3
        op->func_name = PyUnicode_InternFromString(op->func.m_ml->ml_name);
#else
        op->func_name = PyString_InternFromString(op->func.m_ml->ml_name);
#endif
        if (unlikely(op->func_name == NULL))
            return NULL;
    }
    Py_INCREF(op->func_name);
    return op->func_name;
}
static int
__Pyx_CyFunction_set_name(__pyx_CyFunctionObject *op, PyObject *value, CYTHON_UNUSED void *context)
{
    PyObject *tmp;
#if PY_MAJOR_VERSION >= 3
    if (unlikely(value == NULL || !PyUnicode_Check(value)))
#else
    if (unlikely(value == NULL || !PyString_Check(value)))
#endif
    {
        PyErr_SetString(PyExc_TypeError,
                        "__name__ must be set to a string object");
        return -1;
    }
    tmp = op->func_name;
    Py_INCREF(value);
    op->func_name = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_qualname(__pyx_CyFunctionObject *op, CYTHON_UNUSED void *context)
{
    Py_INCREF(op->func_qualname);
    return op->func_qualname;
}
static int
__Pyx_CyFunction_set_qualname(__pyx_CyFunctionObject *op, PyObject *value, CYTHON_UNUSED void *context)
{
    PyObject *tmp;
#if PY_MAJOR_VERSION >= 3
    if (unlikely(value == NULL || !PyUnicode_Check(value)))
#else
    if (unlikely(value == NULL || !PyString_Check(value)))
#endif
    {
        PyErr_SetString(PyExc_TypeError,
                        "__qualname__ must be set to a string object");
        return -1;
    }
    tmp = op->func_qualname;
    Py_INCREF(value);
    op->func_qualname = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_self(__pyx_CyFunctionObject *m, CYTHON_UNUSED void *closure)
{
    PyObject *self;
    self = m->func_closure;
    if (self == NULL)
        self = Py_None;
    Py_INCREF(self);
    return self;
}
static PyObject *
__Pyx_CyFunction_get_dict(__pyx_CyFunctionObject *op, CYTHON_UNUSED void *context)
{
    if (unlikely(op->func_dict == NULL)) {
        op->func_dict = PyDict_New();
        if (unlikely(op->func_dict == NULL))
            return NULL;
    }
    Py_INCREF(op->func_dict);
    return op->func_dict;
}
static int
__Pyx_CyFunction_set_dict(__pyx_CyFunctionObject *op, PyObject *value, CYTHON_UNUSED void *context)
{
    PyObject *tmp;
    if (unlikely(value == NULL)) {
        PyErr_SetString(PyExc_TypeError,
               "function's dictionary may not be deleted");
        return -1;
    }
    if (unlikely(!PyDict_Check(value))) {
        PyErr_SetString(PyExc_TypeError,
               "setting function's dictionary to a non-dict");
        return -1;
    }
    tmp = op->func_dict;
    Py_INCREF(value);
    op->func_dict = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_globals(__pyx_CyFunctionObject *op, CYTHON_UNUSED void *context)
{
    Py_INCREF(op->func_globals);
    return op->func_globals;
}
static PyObject *
__Pyx_CyFunction_get_closure(CYTHON_UNUSED __pyx_CyFunctionObject *op, CYTHON_UNUSED void *context)
{
    Py_INCREF(Py_None);
    return Py_None;
}
static PyObject *
__Pyx_CyFunction_get_code(__pyx_CyFunctionObject *op, CYTHON_UNUSED void *context)
{
    PyObject* result = (op->func_code) ? op->func_code : Py_None;
    Py_INCREF(result);
    return result;
}
static int
__Pyx_CyFunction_init_defaults(__pyx_CyFunctionObject *op) {
    int result = 0;
    PyObject *res = op->defaults_getter((PyObject *) op);
    if (unlikely(!res))
        return -1;
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    op->defaults_tuple = PyTuple_GET_ITEM(res, 0);
    Py_INCREF(op->defaults_tuple);
    op->defaults_kwdict = PyTuple_GET_ITEM(res, 1);
    Py_INCREF(op->defaults_kwdict);
    #else
    op->defaults_tuple = PySequence_ITEM(res, 0);
    if (unlikely(!op->defaults_tuple)) result = -1;
    else {
        op->defaults_kwdict = PySequence_ITEM(res, 1);
        if (unlikely(!op->defaults_kwdict)) result = -1;
    }
    #endif
    Py_DECREF(res);
    return result;
}
static int
__Pyx_CyFunction_set_defaults(__pyx_CyFunctionObject *op, PyObject* value, CYTHON_UNUSED void *context) {
    PyObject* tmp;
    if (!value) {
        value = Py_None;
    } else if (value != Py_None && !PyTuple_Check(value)) {
        PyErr_SetString(PyExc_TypeError,
                        "__defaults__ must be set to a tuple object");
        return -1;
    }
    Py_INCREF(value);
    tmp = op->defaults_tuple;
    op->defaults_tuple = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_defaults(__pyx_CyFunctionObject *op, CYTHON_UNUSED void *context) {
    PyObject* result = op->defaults_tuple;
    if (unlikely(!result)) {
        if (op->defaults_getter) {
            if (__Pyx_CyFunction_init_defaults(op) < 0) return NULL;
            result = op->defaults_tuple;
        } else {
            result = Py_None;
        }
    }
    Py_INCREF(result);
    return result;
}
static int
__Pyx_CyFunction_set_kwdefaults(__pyx_CyFunctionObject *op, PyObject* value, CYTHON_UNUSED void *context) {
    PyObject* tmp;
    if (!value) {
        value = Py_None;
    } else if (value != Py_None && !PyDict_Check(value)) {
        PyErr_SetString(PyExc_TypeError,
                        "__kwdefaults__ must be set to a dict object");
        return -1;
    }
    Py_INCREF(value);
    tmp = op->defaults_kwdict;
    op->defaults_kwdict = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_kwdefaults(__pyx_CyFunctionObject *op, CYTHON_UNUSED void *context) {
    PyObject* result = op->defaults_kwdict;
    if (unlikely(!result)) {
        if (op->defaults_getter) {
            if (__Pyx_CyFunction_init_defaults(op) < 0) return NULL;
            result = op->defaults_kwdict;
        } else {
            result = Py_None;
        }
    }
    Py_INCREF(result);
    return result;
}
static int
__Pyx_CyFunction_set_annotations(__pyx_CyFunctionObject *op, PyObject* value, CYTHON_UNUSED void *context) {
    PyObject* tmp;
    if (!value || value == Py_None) {
        value = NULL;
    } else if (!PyDict_Check(value)) {
        PyErr_SetString(PyExc_TypeError,
                        "__annotations__ must be set to a dict object");
        return -1;
    }
    Py_XINCREF(value);
    tmp = op->func_annotations;
    op->func_annotations = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_annotations(__pyx_CyFunctionObject *op, CYTHON_UNUSED void *context) {
    PyObject* result = op->func_annotations;
    if (unlikely(!result)) {
        result = PyDict_New();
        if (unlikely(!result)) return NULL;
        op->func_annotations = result;
    }
    Py_INCREF(result);
    return result;
}
static PyGetSetDef __pyx_CyFunction_getsets[] = {
    {(char *) "func_doc", (getter)__Pyx_CyFunction_get_doc, (setter)__Pyx_CyFunction_set_doc, 0, 0},
    {(char *) "__doc__",  (getter)__Pyx_CyFunction_get_doc, (setter)__Pyx_CyFunction_set_doc, 0, 0},
    {(char *) "func_name", (getter)__Pyx_CyFunction_get_name, (setter)__Pyx_CyFunction_set_name, 0, 0},
    {(char *) "__name__", (getter)__Pyx_CyFunction_get_name, (setter)__Pyx_CyFunction_set_name, 0, 0},
    {(char *) "__qualname__", (getter)__Pyx_CyFunction_get_qualname, (setter)__Pyx_CyFunction_set_qualname, 0, 0},
    {(char *) "__self__", (getter)__Pyx_CyFunction_get_self, 0, 0, 0},
    {(char *) "func_dict", (getter)__Pyx_CyFunction_get_dict, (setter)__Pyx_CyFunction_set_dict, 0, 0},
    {(char *) "__dict__", (getter)__Pyx_CyFunction_get_dict, (setter)__Pyx_CyFunction_set_dict, 0, 0},
    {(char *) "func_globals", (getter)__Pyx_CyFunction_get_globals, 0, 0, 0},
    {(char *) "__globals__", (getter)__Pyx_CyFunction_get_globals, 0, 0, 0},
    {(char *) "func_closure", (getter)__Pyx_CyFunction_get_closure, 0, 0, 0},
    {(char *) "__closure__", (getter)__Pyx_CyFunction_get_closure, 0, 0, 0},
    {(char *) "func_code", (getter)__Pyx_CyFunction_get_code, 0, 0, 0},
    {(char *) "__code__", (getter)__Pyx_CyFunction_get_code, 0, 0, 0},
    {(char *) "func_defaults", (getter)__Pyx_CyFunction_get_defaults, (setter)__Pyx_CyFunction_set_defaults, 0, 0},
    {(char *) "__defaults__", (getter)__Pyx_CyFunction_get_defaults, (setter)__Pyx_CyFunction_set_defaults, 0, 0},
    {(char *) "__kwdefaults__", (getter)__Pyx_CyFunction_get_kwdefaults, (setter)__Pyx_CyFunction_set_kwdefaults, 0, 0},
    {(char *) "__annotations__", (getter)__Pyx_CyFunction_get_annotations, (setter)__Pyx_CyFunction_set_annotations, 0, 0},
    {0, 0, 0, 0, 0}
};
static PyMemberDef __pyx_CyFunction_members[] = {
    {(char *) "__module__", T_OBJECT, offsetof(PyCFunctionObject, m_module), PY_WRITE_RESTRICTED, 0},
    {0, 0, 0,  0, 0}
};
static PyObject *
__Pyx_CyFunction_reduce(__pyx_CyFunctionObject *m, CYTHON_UNUSED PyObject *args)
{
#if PY_MAJOR_VERSION >= 3
    return PyUnicode_FromString(m->func.m_ml->ml_name);
#else
    return PyString_FromString(m->func.m_ml->ml_name);
#endif
}
static PyMethodDef __pyx_CyFunction_methods[] = {
    {"__reduce__", (PyCFunction)__Pyx_CyFunction_reduce, METH_VARARGS, 0},
    {0, 0, 0, 0}
};
#if PY_VERSION_HEX < 0x030500A0
#define __Pyx_CyFunction_weakreflist(cyfunc) ((cyfunc)->func_weakreflist)
#else
#define __Pyx_CyFunction_weakreflist(cyfunc) ((cyfunc)->func.m_weakreflist)
#endif
static PyObject *__Pyx_CyFunction_Init(__pyx_CyFunctionObject *op, PyMethodDef *ml, int flags, PyObject* qualname,
                                       PyObject *closure, PyObject *module, PyObject* globals, PyObject* code) {
    if (unlikely(op == NULL))
        return NULL;
    op->flags = flags;
    __Pyx_CyFunction_weakreflist(op) = NULL;
    op->func.m_ml = ml;
    op->func.m_self = (PyObject *) op;
    Py_XINCREF(closure);
    op->func_closure = closure;
    Py_XINCREF(module);
    op->func.m_module = module;
    op->func_dict = NULL;
    op->func_name = NULL;
    Py_INCREF(qualname);
    op->func_qualname = qualname;
    op->func_doc = NULL;
    op->func_classobj = NULL;
    op->func_globals = globals;
    Py_INCREF(op->func_globals);
    Py_XINCREF(code);
    op->func_code = code;
    op->defaults_pyobjects = 0;
    op->defaults_size = 0;
    op->defaults = NULL;
    op->defaults_tuple = NULL;
    op->defaults_kwdict = NULL;
    op->defaults_getter = NULL;
    op->func_annotations = NULL;
    return (PyObject *) op;
}
static int
__Pyx_CyFunction_clear(__pyx_CyFunctionObject *m)
{
    Py_CLEAR(m->func_closure);
    Py_CLEAR(m->func.m_module);
    Py_CLEAR(m->func_dict);
    Py_CLEAR(m->func_name);
    Py_CLEAR(m->func_qualname);
    Py_CLEAR(m->func_doc);
    Py_CLEAR(m->func_globals);
    Py_CLEAR(m->func_code);
    Py_CLEAR(m->func_classobj);
    Py_CLEAR(m->defaults_tuple);
    Py_CLEAR(m->defaults_kwdict);
    Py_CLEAR(m->func_annotations);
    if (m->defaults) {
        PyObject **pydefaults = __Pyx_CyFunction_Defaults(PyObject *, m);
        int i;
        for (i = 0; i < m->defaults_pyobjects; i++)
            Py_XDECREF(pydefaults[i]);
        PyObject_Free(m->defaults);
        m->defaults = NULL;
    }
    return 0;
}
static void __Pyx__CyFunction_dealloc(__pyx_CyFunctionObject *m)
{
    if (__Pyx_CyFunction_weakreflist(m) != NULL)
        PyObject_ClearWeakRefs((PyObject *) m);
    __Pyx_CyFunction_clear(m);
    PyObject_GC_Del(m);
}
static void __Pyx_CyFunction_dealloc(__pyx_CyFunctionObject *m)
{
    PyObject_GC_UnTrack(m);
    __Pyx__CyFunction_dealloc(m);
}
static int __Pyx_CyFunction_traverse(__pyx_CyFunctionObject *m, visitproc visit, void *arg)
{
    Py_VISIT(m->func_closure);
    Py_VISIT(m->func.m_module);
    Py_VISIT(m->func_dict);
    Py_VISIT(m->func_name);
    Py_VISIT(m->func_qualname);
    Py_VISIT(m->func_doc);
    Py_VISIT(m->func_globals);
    Py_VISIT(m->func_code);
    Py_VISIT(m->func_classobj);
    Py_VISIT(m->defaults_tuple);
    Py_VISIT(m->defaults_kwdict);
    if (m->defaults) {
        PyObject **pydefaults = __Pyx_CyFunction_Defaults(PyObject *, m);
        int i;
        for (i = 0; i < m->defaults_pyobjects; i++)
            Py_VISIT(pydefaults[i]);
    }
    return 0;
}
static PyObject *__Pyx_CyFunction_descr_get(PyObject *func, PyObject *obj, PyObject *type)
{
#if PY_MAJOR_VERSION < 3
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    if (m->flags & __Pyx_CYFUNCTION_STATICMETHOD) {
        Py_INCREF(func);
        return func;
    }
    if (m->flags & __Pyx_CYFUNCTION_CLASSMETHOD) {
        if (type == NULL)
            type = (PyObject *)(Py_TYPE(obj));
        return __Pyx_PyMethod_New(func, type, (PyObject *)(Py_TYPE(type)));
    }
    if (obj == Py_None)
        obj = NULL;
#endif
    return __Pyx_PyMethod_New(func, obj, type);
}
static PyObject*
__Pyx_CyFunction_repr(__pyx_CyFunctionObject *op)
{
#if PY_MAJOR_VERSION >= 3
    return PyUnicode_FromFormat("<cyfunction %U at %p>",
                                op->func_qualname, (void *)op);
#else
    return PyString_FromFormat("<cyfunction %s at %p>",
                               PyString_AsString(op->func_qualname), (void *)op);
#endif
}
static PyObject * __Pyx_CyFunction_CallMethod(PyObject *func, PyObject *self, PyObject *arg, PyObject *kw) {
    PyCFunctionObject* f = (PyCFunctionObject*)func;
    PyCFunction meth = f->m_ml->ml_meth;
    Py_ssize_t size;
    switch (f->m_ml->ml_flags & (METH_VARARGS | METH_KEYWORDS | METH_NOARGS | METH_O)) {
    case METH_VARARGS:
        if (likely(kw == NULL || PyDict_Size(kw) == 0))
            return (*meth)(self, arg);
        break;
    case METH_VARARGS | METH_KEYWORDS:
        return (*(PyCFunctionWithKeywords)(void*)meth)(self, arg, kw);
    case METH_NOARGS:
        if (likely(kw == NULL || PyDict_Size(kw) == 0)) {
            size = PyTuple_GET_SIZE(arg);
            if (likely(size == 0))
                return (*meth)(self, NULL);
            PyErr_Format(PyExc_TypeError,
                "%.200s() takes no arguments (%" CYTHON_FORMAT_SSIZE_T "d given)",
                f->m_ml->ml_name, size);
            return NULL;
        }
        break;
    case METH_O:
        if (likely(kw == NULL || PyDict_Size(kw) == 0)) {
            size = PyTuple_GET_SIZE(arg);
            if (likely(size == 1)) {
                PyObject *result, *arg0;
                #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                arg0 = PyTuple_GET_ITEM(arg, 0);
                #else
                arg0 = PySequence_ITEM(arg, 0); if (unlikely(!arg0)) return NULL;
                #endif
                result = (*meth)(self, arg0);
                #if !(CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS)
                Py_DECREF(arg0);
                #endif
                return result;
            }
            PyErr_Format(PyExc_TypeError,
                "%.200s() takes exactly one argument (%" CYTHON_FORMAT_SSIZE_T "d given)",
                f->m_ml->ml_name, size);
            return NULL;
        }
        break;
    default:
        PyErr_SetString(PyExc_SystemError, "Bad call flags in "
                        "__Pyx_CyFunction_Call. METH_OLDARGS is no "
                        "longer supported!");
        return NULL;
    }
    PyErr_Format(PyExc_TypeError, "%.200s() takes no keyword arguments",
                 f->m_ml->ml_name);
    return NULL;
}
static CYTHON_INLINE PyObject *__Pyx_CyFunction_Call(PyObject *func, PyObject *arg, PyObject *kw) {
    return __Pyx_CyFunction_CallMethod(func, ((PyCFunctionObject*)func)->m_self, arg, kw);
}
static PyObject *__Pyx_CyFunction_CallAsMethod(PyObject *func, PyObject *args, PyObject *kw) {
    PyObject *result;
    __pyx_CyFunctionObject *cyfunc = (__pyx_CyFunctionObject *) func;
    if ((cyfunc->flags & __Pyx_CYFUNCTION_CCLASS) && !(cyfunc->flags & __Pyx_CYFUNCTION_STATICMETHOD)) {
        Py_ssize_t argc;
        PyObject *new_args;
        PyObject *self;
        argc = PyTuple_GET_SIZE(args);
        new_args = PyTuple_GetSlice(args, 1, argc);
        if (unlikely(!new_args))
            return NULL;
        self = PyTuple_GetItem(args, 0);
        if (unlikely(!self)) {
            Py_DECREF(new_args);
            return NULL;
        }
        result = __Pyx_CyFunction_CallMethod(func, self, new_args, kw);
        Py_DECREF(new_args);
    } else {
        result = __Pyx_CyFunction_Call(func, args, kw);
    }
    return result;
}
static PyTypeObject __pyx_CyFunctionType_type = {
    PyVarObject_HEAD_INIT(0, 0)
    "cython_function_or_method",
    sizeof(__pyx_CyFunctionObject),
    0,
    (destructor) __Pyx_CyFunction_dealloc,
    0,
    0,
    0,
#if PY_MAJOR_VERSION < 3
    0,
#else
    0,
#endif
    (reprfunc) __Pyx_CyFunction_repr,
    0,
    0,
    0,
    0,
    __Pyx_CyFunction_CallAsMethod,
    0,
    0,
    0,
    0,
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_HAVE_GC,
    0,
    (traverseproc) __Pyx_CyFunction_traverse,
    (inquiry) __Pyx_CyFunction_clear,
    0,
#if PY_VERSION_HEX < 0x030500A0
    offsetof(__pyx_CyFunctionObject, func_weakreflist),
#else
    offsetof(PyCFunctionObject, m_weakreflist),
#endif
    0,
    0,
    __pyx_CyFunction_methods,
    __pyx_CyFunction_members,
    __pyx_CyFunction_getsets,
    0,
    0,
    __Pyx_CyFunction_descr_get,
    0,
    offsetof(__pyx_CyFunctionObject, func_dict),
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
#if PY_VERSION_HEX >= 0x030400a1
    0,
#endif
#if PY_VERSION_HEX >= 0x030800b1
    0,
#endif
#if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
    0,
#endif
};
static int __pyx_CyFunction_init(void) {
    __pyx_CyFunctionType = __Pyx_FetchCommonType(&__pyx_CyFunctionType_type);
    if (unlikely(__pyx_CyFunctionType == NULL)) {
        return -1;
    }
    return 0;
}
static CYTHON_INLINE void *__Pyx_CyFunction_InitDefaults(PyObject *func, size_t size, int pyobjects) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->defaults = PyObject_Malloc(size);
    if (unlikely(!m->defaults))
        return PyErr_NoMemory();
    memset(m->defaults, 0, size);
    m->defaults_pyobjects = pyobjects;
    m->defaults_size = size;
    return m->defaults;
}
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsTuple(PyObject *func, PyObject *tuple) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->defaults_tuple = tuple;
    Py_INCREF(tuple);
}
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsKwDict(PyObject *func, PyObject *dict) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->defaults_kwdict = dict;
    Py_INCREF(dict);
}
static CYTHON_INLINE void __Pyx_CyFunction_SetAnnotationsDict(PyObject *func, PyObject *dict) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->func_annotations = dict;
    Py_INCREF(dict);
}

/* CythonFunction */
  static PyObject *__Pyx_CyFunction_New(PyMethodDef *ml, int flags, PyObject* qualname,
                                      PyObject *closure, PyObject *module, PyObject* globals, PyObject* code) {
    PyObject *op = __Pyx_CyFunction_Init(
        PyObject_GC_New(__pyx_CyFunctionObject, __pyx_CyFunctionType),
        ml, flags, qualname, closure, module, globals, code
    );
    if (likely(op)) {
        PyObject_GC_Track(op);
    }
    return op;
}

/* Py3ClassCreate */
  static PyObject *__Pyx_Py3MetaclassPrepare(PyObject *metaclass, PyObject *bases, PyObject *name,
                                           PyObject *qualname, PyObject *mkw, PyObject *modname, PyObject *doc) {
    PyObject *ns;
    if (metaclass) {
        PyObject *prep = __Pyx_PyObject_GetAttrStr(metaclass, __pyx_n_s_prepare);
        if (prep) {
            PyObject *pargs = PyTuple_Pack(2, name, bases);
            if (unlikely(!pargs)) {
                Py_DECREF(prep);
                return NULL;
            }
            ns = PyObject_Call(prep, pargs, mkw);
            Py_DECREF(prep);
            Py_DECREF(pargs);
        } else {
            if (unlikely(!PyErr_ExceptionMatches(PyExc_AttributeError)))
                return NULL;
            PyErr_Clear();
            ns = PyDict_New();
        }
    } else {
        ns = PyDict_New();
    }
    if (unlikely(!ns))
        return NULL;
    if (unlikely(PyObject_SetItem(ns, __pyx_n_s_module, modname) < 0)) goto bad;
    if (unlikely(PyObject_SetItem(ns, __pyx_n_s_qualname, qualname) < 0)) goto bad;
    if (unlikely(doc && PyObject_SetItem(ns, __pyx_n_s_doc, doc) < 0)) goto bad;
    return ns;
bad:
    Py_DECREF(ns);
    return NULL;
}
static PyObject *__Pyx_Py3ClassCreate(PyObject *metaclass, PyObject *name, PyObject *bases,
                                      PyObject *dict, PyObject *mkw,
                                      int calculate_metaclass, int allow_py2_metaclass) {
    PyObject *result, *margs;
    PyObject *owned_metaclass = NULL;
    if (allow_py2_metaclass) {
        owned_metaclass = PyObject_GetItem(dict, __pyx_n_s_metaclass);
        if (owned_metaclass) {
            metaclass = owned_metaclass;
        } else if (likely(PyErr_ExceptionMatches(PyExc_KeyError))) {
            PyErr_Clear();
        } else {
            return NULL;
        }
    }
    if (calculate_metaclass && (!metaclass || PyType_Check(metaclass))) {
        metaclass = __Pyx_CalculateMetaclass((PyTypeObject*) metaclass, bases);
        Py_XDECREF(owned_metaclass);
        if (unlikely(!metaclass))
            return NULL;
        owned_metaclass = metaclass;
    }
    margs = PyTuple_Pack(3, name, bases, dict);
    if (unlikely(!margs)) {
        result = NULL;
    } else {
        result = PyObject_Call(metaclass, margs, mkw);
        Py_DECREF(margs);
    }
    Py_XDECREF(owned_metaclass);
    return result;
}

/* GetNameInClass */
  static PyObject *__Pyx_GetGlobalNameAfterAttributeLookup(PyObject *name) {
    PyObject *result;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    if (unlikely(!__Pyx_PyErr_ExceptionMatches(PyExc_AttributeError)))
        return NULL;
    __Pyx_PyErr_Clear();
    __Pyx_GetModuleGlobalNameUncached(result, name);
    return result;
}
static PyObject *__Pyx__GetNameInClass(PyObject *nmspace, PyObject *name) {
    PyObject *result;
    result = __Pyx_PyObject_GetAttrStr(nmspace, name);
    if (!result) {
        result = __Pyx_GetGlobalNameAfterAttributeLookup(name);
    }
    return result;
}

/* CLineInTraceback */
  #ifndef CYTHON_CLINE_IN_TRACEBACK
static int __Pyx_CLineForTraceback(CYTHON_NCP_UNUSED PyThreadState *tstate, int c_line) {
    PyObject *use_cline;
    PyObject *ptype, *pvalue, *ptraceback;
#if CYTHON_COMPILING_IN_CPYTHON
    PyObject **cython_runtime_dict;
#endif
    if (unlikely(!__pyx_cython_runtime)) {
        return c_line;
    }
    __Pyx_ErrFetchInState(tstate, &ptype, &pvalue, &ptraceback);
#if CYTHON_COMPILING_IN_CPYTHON
    cython_runtime_dict = _PyObject_GetDictPtr(__pyx_cython_runtime);
    if (likely(cython_runtime_dict)) {
        __PYX_PY_DICT_LOOKUP_IF_MODIFIED(
            use_cline, *cython_runtime_dict,
            __Pyx_PyDict_GetItemStr(*cython_runtime_dict, __pyx_n_s_cline_in_traceback))
    } else
#endif
    {
      PyObject *use_cline_obj = __Pyx_PyObject_GetAttrStr(__pyx_cython_runtime, __pyx_n_s_cline_in_traceback);
      if (use_cline_obj) {
        use_cline = PyObject_Not(use_cline_obj) ? Py_False : Py_True;
        Py_DECREF(use_cline_obj);
      } else {
        PyErr_Clear();
        use_cline = NULL;
      }
    }
    if (!use_cline) {
        c_line = 0;
        PyObject_SetAttr(__pyx_cython_runtime, __pyx_n_s_cline_in_traceback, Py_False);
    }
    else if (use_cline == Py_False || (use_cline != Py_True && PyObject_Not(use_cline) != 0)) {
        c_line = 0;
    }
    __Pyx_ErrRestoreInState(tstate, ptype, pvalue, ptraceback);
    return c_line;
}
#endif

/* CodeObjectCache */
  static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line) {
    int start = 0, mid = 0, end = count - 1;
    if (end >= 0 && code_line > entries[end].code_line) {
        return count;
    }
    while (start < end) {
        mid = start + (end - start) / 2;
        if (code_line < entries[mid].code_line) {
            end = mid;
        } else if (code_line > entries[mid].code_line) {
             start = mid + 1;
        } else {
            return mid;
        }
    }
    if (code_line <= entries[mid].code_line) {
        return mid;
    } else {
        return mid + 1;
    }
}
static PyCodeObject *__pyx_find_code_object(int code_line) {
    PyCodeObject* code_object;
    int pos;
    if (unlikely(!code_line) || unlikely(!__pyx_code_cache.entries)) {
        return NULL;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if (unlikely(pos >= __pyx_code_cache.count) || unlikely(__pyx_code_cache.entries[pos].code_line != code_line)) {
        return NULL;
    }
    code_object = __pyx_code_cache.entries[pos].code_object;
    Py_INCREF(code_object);
    return code_object;
}
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object) {
    int pos, i;
    __Pyx_CodeObjectCacheEntry* entries = __pyx_code_cache.entries;
    if (unlikely(!code_line)) {
        return;
    }
    if (unlikely(!entries)) {
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Malloc(64*sizeof(__Pyx_CodeObjectCacheEntry));
        if (likely(entries)) {
            __pyx_code_cache.entries = entries;
            __pyx_code_cache.max_count = 64;
            __pyx_code_cache.count = 1;
            entries[0].code_line = code_line;
            entries[0].code_object = code_object;
            Py_INCREF(code_object);
        }
        return;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if ((pos < __pyx_code_cache.count) && unlikely(__pyx_code_cache.entries[pos].code_line == code_line)) {
        PyCodeObject* tmp = entries[pos].code_object;
        entries[pos].code_object = code_object;
        Py_DECREF(tmp);
        return;
    }
    if (__pyx_code_cache.count == __pyx_code_cache.max_count) {
        int new_max = __pyx_code_cache.max_count + 64;
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Realloc(
            __pyx_code_cache.entries, ((size_t)new_max) * sizeof(__Pyx_CodeObjectCacheEntry));
        if (unlikely(!entries)) {
            return;
        }
        __pyx_code_cache.entries = entries;
        __pyx_code_cache.max_count = new_max;
    }
    for (i=__pyx_code_cache.count; i>pos; i--) {
        entries[i] = entries[i-1];
    }
    entries[pos].code_line = code_line;
    entries[pos].code_object = code_object;
    __pyx_code_cache.count++;
    Py_INCREF(code_object);
}

/* AddTraceback */
  #include "compile.h"
#include "frameobject.h"
#include "traceback.h"
static PyCodeObject* __Pyx_CreateCodeObjectForTraceback(
            const char *funcname, int c_line,
            int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyObject *py_srcfile = 0;
    PyObject *py_funcname = 0;
    #if PY_MAJOR_VERSION < 3
    py_srcfile = PyString_FromString(filename);
    #else
    py_srcfile = PyUnicode_FromString(filename);
    #endif
    if (!py_srcfile) goto bad;
    if (c_line) {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #else
        py_funcname = PyUnicode_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #endif
    }
    else {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromString(funcname);
        #else
        py_funcname = PyUnicode_FromString(funcname);
        #endif
    }
    if (!py_funcname) goto bad;
    py_code = __Pyx_PyCode_New(
        0,
        0,
        0,
        0,
        0,
        __pyx_empty_bytes, /*PyObject *code,*/
        __pyx_empty_tuple, /*PyObject *consts,*/
        __pyx_empty_tuple, /*PyObject *names,*/
        __pyx_empty_tuple, /*PyObject *varnames,*/
        __pyx_empty_tuple, /*PyObject *freevars,*/
        __pyx_empty_tuple, /*PyObject *cellvars,*/
        py_srcfile,   /*PyObject *filename,*/
        py_funcname,  /*PyObject *name,*/
        py_line,
        __pyx_empty_bytes  /*PyObject *lnotab*/
    );
    Py_DECREF(py_srcfile);
    Py_DECREF(py_funcname);
    return py_code;
bad:
    Py_XDECREF(py_srcfile);
    Py_XDECREF(py_funcname);
    return NULL;
}
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyFrameObject *py_frame = 0;
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    if (c_line) {
        c_line = __Pyx_CLineForTraceback(tstate, c_line);
    }
    py_code = __pyx_find_code_object(c_line ? -c_line : py_line);
    if (!py_code) {
        py_code = __Pyx_CreateCodeObjectForTraceback(
            funcname, c_line, py_line, filename);
        if (!py_code) goto bad;
        __pyx_insert_code_object(c_line ? -c_line : py_line, py_code);
    }
    py_frame = PyFrame_New(
        tstate,            /*PyThreadState *tstate,*/
        py_code,           /*PyCodeObject *code,*/
        __pyx_d,    /*PyObject *globals,*/
        0                  /*PyObject *locals*/
    );
    if (!py_frame) goto bad;
    __Pyx_PyFrame_SetLineNumber(py_frame, py_line);
    PyTraceBack_Here(py_frame);
bad:
    Py_XDECREF(py_code);
    Py_XDECREF(py_frame);
}

/* CIntFromPyVerify */
  #define __PYX_VERIFY_RETURN_INT(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 0)
#define __PYX_VERIFY_RETURN_INT_EXC(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 1)
#define __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, exc)\
    {\
        func_type value = func_value;\
        if (sizeof(target_type) < sizeof(func_type)) {\
            if (unlikely(value != (func_type) (target_type) value)) {\
                func_type zero = 0;\
                if (exc && unlikely(value == (func_type)-1 && PyErr_Occurred()))\
                    return (target_type) -1;\
                if (is_unsigned && unlikely(value < zero))\
                    goto raise_neg_overflow;\
                else\
                    goto raise_overflow;\
            }\
        }\
        return (target_type) value;\
    }

/* CIntToPy */
  static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value) {
    const int neg_one = (int) ((int) 0 - (int) 1), const_zero = (int) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(int) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(int) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(int) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(int) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(int) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(int),
                                     little, !is_unsigned);
    }
}

/* CIntToPy */
  static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value) {
    const long neg_one = (long) ((long) 0 - (long) 1), const_zero = (long) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(long) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(long) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(long) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(long),
                                     little, !is_unsigned);
    }
}

/* CIntFromPy */
  static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *x) {
    const int neg_one = (int) ((int) 0 - (int) 1), const_zero = (int) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(int) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(int, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (int) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case  1: __PYX_VERIFY_RETURN_INT(int, digit, digits[0])
                case 2:
                    if (8 * sizeof(int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 2 * PyLong_SHIFT) {
                            return (int) (((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 3 * PyLong_SHIFT) {
                            return (int) (((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 4 * PyLong_SHIFT) {
                            return (int) (((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (int) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(int) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(int) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case -1: __PYX_VERIFY_RETURN_INT(int, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(int,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(int) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                            return (int) ((((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                            return (int) ((((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {
                            return (int) ((((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(int) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(int) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            int val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (int) -1;
        }
    } else {
        int val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (int) -1;
        val = __Pyx_PyInt_As_int(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to int");
    return (int) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to int");
    return (int) -1;
}

/* CIntFromPy */
  static CYTHON_INLINE size_t __Pyx_PyInt_As_size_t(PyObject *x) {
    const size_t neg_one = (size_t) ((size_t) 0 - (size_t) 1), const_zero = (size_t) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(size_t) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(size_t, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (size_t) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (size_t) 0;
                case  1: __PYX_VERIFY_RETURN_INT(size_t, digit, digits[0])
                case 2:
                    if (8 * sizeof(size_t) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) >= 2 * PyLong_SHIFT) {
                            return (size_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(size_t) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) >= 3 * PyLong_SHIFT) {
                            return (size_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(size_t) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) >= 4 * PyLong_SHIFT) {
                            return (size_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (size_t) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(size_t) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(size_t) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (size_t) 0;
                case -1: __PYX_VERIFY_RETURN_INT(size_t, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(size_t,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(size_t) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 2 * PyLong_SHIFT) {
                            return (size_t) (((size_t)-1)*(((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(size_t) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 2 * PyLong_SHIFT) {
                            return (size_t) ((((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(size_t) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 3 * PyLong_SHIFT) {
                            return (size_t) (((size_t)-1)*(((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(size_t) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 3 * PyLong_SHIFT) {
                            return (size_t) ((((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(size_t) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 4 * PyLong_SHIFT) {
                            return (size_t) (((size_t)-1)*(((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(size_t) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 4 * PyLong_SHIFT) {
                            return (size_t) ((((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(size_t) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(size_t) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            size_t val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (size_t) -1;
        }
    } else {
        size_t val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (size_t) -1;
        val = __Pyx_PyInt_As_size_t(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to size_t");
    return (size_t) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to size_t");
    return (size_t) -1;
}

/* CIntFromPy */
  static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *x) {
    const long neg_one = (long) ((long) 0 - (long) 1), const_zero = (long) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(long) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(long, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (long) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case  1: __PYX_VERIFY_RETURN_INT(long, digit, digits[0])
                case 2:
                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 2 * PyLong_SHIFT) {
                            return (long) (((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 3 * PyLong_SHIFT) {
                            return (long) (((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 4 * PyLong_SHIFT) {
                            return (long) (((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (long) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(long) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case -1: __PYX_VERIFY_RETURN_INT(long, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(long,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(long) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                            return (long) ((((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                            return (long) ((((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                            return (long) ((((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(long) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            long val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (long) -1;
        }
    } else {
        long val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (long) -1;
        val = __Pyx_PyInt_As_long(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to long");
    return (long) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to long");
    return (long) -1;
}

/* FastTypeChecks */
  #if CYTHON_COMPILING_IN_CPYTHON
static int __Pyx_InBases(PyTypeObject *a, PyTypeObject *b) {
    while (a) {
        a = a->tp_base;
        if (a == b)
            return 1;
    }
    return b == &PyBaseObject_Type;
}
static CYTHON_INLINE int __Pyx_IsSubtype(PyTypeObject *a, PyTypeObject *b) {
    PyObject *mro;
    if (a == b) return 1;
    mro = a->tp_mro;
    if (likely(mro)) {
        Py_ssize_t i, n;
        n = PyTuple_GET_SIZE(mro);
        for (i = 0; i < n; i++) {
            if (PyTuple_GET_ITEM(mro, i) == (PyObject *)b)
                return 1;
        }
        return 0;
    }
    return __Pyx_InBases(a, b);
}
#if PY_MAJOR_VERSION == 2
static int __Pyx_inner_PyErr_GivenExceptionMatches2(PyObject *err, PyObject* exc_type1, PyObject* exc_type2) {
    PyObject *exception, *value, *tb;
    int res;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&exception, &value, &tb);
    res = exc_type1 ? PyObject_IsSubclass(err, exc_type1) : 0;
    if (unlikely(res == -1)) {
        PyErr_WriteUnraisable(err);
        res = 0;
    }
    if (!res) {
        res = PyObject_IsSubclass(err, exc_type2);
        if (unlikely(res == -1)) {
            PyErr_WriteUnraisable(err);
            res = 0;
        }
    }
    __Pyx_ErrRestore(exception, value, tb);
    return res;
}
#else
static CYTHON_INLINE int __Pyx_inner_PyErr_GivenExceptionMatches2(PyObject *err, PyObject* exc_type1, PyObject *exc_type2) {
    int res = exc_type1 ? __Pyx_IsSubtype((PyTypeObject*)err, (PyTypeObject*)exc_type1) : 0;
    if (!res) {
        res = __Pyx_IsSubtype((PyTypeObject*)err, (PyTypeObject*)exc_type2);
    }
    return res;
}
#endif
static int __Pyx_PyErr_GivenExceptionMatchesTuple(PyObject *exc_type, PyObject *tuple) {
    Py_ssize_t i, n;
    assert(PyExceptionClass_Check(exc_type));
    n = PyTuple_GET_SIZE(tuple);
#if PY_MAJOR_VERSION >= 3
    for (i=0; i<n; i++) {
        if (exc_type == PyTuple_GET_ITEM(tuple, i)) return 1;
    }
#endif
    for (i=0; i<n; i++) {
        PyObject *t = PyTuple_GET_ITEM(tuple, i);
        #if PY_MAJOR_VERSION < 3
        if (likely(exc_type == t)) return 1;
        #endif
        if (likely(PyExceptionClass_Check(t))) {
            if (__Pyx_inner_PyErr_GivenExceptionMatches2(exc_type, NULL, t)) return 1;
        } else {
        }
    }
    return 0;
}
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches(PyObject *err, PyObject* exc_type) {
    if (likely(err == exc_type)) return 1;
    if (likely(PyExceptionClass_Check(err))) {
        if (likely(PyExceptionClass_Check(exc_type))) {
            return __Pyx_inner_PyErr_GivenExceptionMatches2(err, NULL, exc_type);
        } else if (likely(PyTuple_Check(exc_type))) {
            return __Pyx_PyErr_GivenExceptionMatchesTuple(err, exc_type);
        } else {
        }
    }
    return PyErr_GivenExceptionMatches(err, exc_type);
}
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches2(PyObject *err, PyObject *exc_type1, PyObject *exc_type2) {
    assert(PyExceptionClass_Check(exc_type1));
    assert(PyExceptionClass_Check(exc_type2));
    if (likely(err == exc_type1 || err == exc_type2)) return 1;
    if (likely(PyExceptionClass_Check(err))) {
        return __Pyx_inner_PyErr_GivenExceptionMatches2(err, exc_type1, exc_type2);
    }
    return (PyErr_GivenExceptionMatches(err, exc_type1) || PyErr_GivenExceptionMatches(err, exc_type2));
}
#endif

/* CheckBinaryVersion */
  static int __Pyx_check_binary_version(void) {
    char ctversion[4], rtversion[4];
    PyOS_snprintf(ctversion, 4, "%d.%d", PY_MAJOR_VERSION, PY_MINOR_VERSION);
    PyOS_snprintf(rtversion, 4, "%s", Py_GetVersion());
    if (ctversion[0] != rtversion[0] || ctversion[2] != rtversion[2]) {
        char message[200];
        PyOS_snprintf(message, sizeof(message),
                      "compiletime version %s of module '%.100s' "
                      "does not match runtime version %s",
                      ctversion, __Pyx_MODULE_NAME, rtversion);
        return PyErr_WarnEx(NULL, message, 1);
    }
    return 0;
}

/* InitStrings */
  static int __Pyx_InitStrings(__Pyx_StringTabEntry *t) {
    while (t->p) {
        #if PY_MAJOR_VERSION < 3
        if (t->is_unicode) {
            *t->p = PyUnicode_DecodeUTF8(t->s, t->n - 1, NULL);
        } else if (t->intern) {
            *t->p = PyString_InternFromString(t->s);
        } else {
            *t->p = PyString_FromStringAndSize(t->s, t->n - 1);
        }
        #else
        if (t->is_unicode | t->is_str) {
            if (t->intern) {
                *t->p = PyUnicode_InternFromString(t->s);
            } else if (t->encoding) {
                *t->p = PyUnicode_Decode(t->s, t->n - 1, t->encoding, NULL);
            } else {
                *t->p = PyUnicode_FromStringAndSize(t->s, t->n - 1);
            }
        } else {
            *t->p = PyBytes_FromStringAndSize(t->s, t->n - 1);
        }
        #endif
        if (!*t->p)
            return -1;
        if (PyObject_Hash(*t->p) == -1)
            return -1;
        ++t;
    }
    return 0;
}

static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char* c_str) {
    return __Pyx_PyUnicode_FromStringAndSize(c_str, (Py_ssize_t)strlen(c_str));
}
static CYTHON_INLINE const char* __Pyx_PyObject_AsString(PyObject* o) {
    Py_ssize_t ignore;
    return __Pyx_PyObject_AsStringAndSize(o, &ignore);
}
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
#if !CYTHON_PEP393_ENABLED
static const char* __Pyx_PyUnicode_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
    char* defenc_c;
    PyObject* defenc = _PyUnicode_AsDefaultEncodedString(o, NULL);
    if (!defenc) return NULL;
    defenc_c = PyBytes_AS_STRING(defenc);
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
    {
        char* end = defenc_c + PyBytes_GET_SIZE(defenc);
        char* c;
        for (c = defenc_c; c < end; c++) {
            if ((unsigned char) (*c) >= 128) {
                PyUnicode_AsASCIIString(o);
                return NULL;
            }
        }
    }
#endif
    *length = PyBytes_GET_SIZE(defenc);
    return defenc_c;
}
#else
static CYTHON_INLINE const char* __Pyx_PyUnicode_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
    if (unlikely(__Pyx_PyUnicode_READY(o) == -1)) return NULL;
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
    if (likely(PyUnicode_IS_ASCII(o))) {
        *length = PyUnicode_GET_LENGTH(o);
        return PyUnicode_AsUTF8(o);
    } else {
        PyUnicode_AsASCIIString(o);
        return NULL;
    }
#else
    return PyUnicode_AsUTF8AndSize(o, length);
#endif
}
#endif
#endif
static CYTHON_INLINE const char* __Pyx_PyObject_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
    if (
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
            __Pyx_sys_getdefaultencoding_not_ascii &&
#endif
            PyUnicode_Check(o)) {
        return __Pyx_PyUnicode_AsStringAndSize(o, length);
    } else
#endif
#if (!CYTHON_COMPILING_IN_PYPY) || (defined(PyByteArray_AS_STRING) && defined(PyByteArray_GET_SIZE))
    if (PyByteArray_Check(o)) {
        *length = PyByteArray_GET_SIZE(o);
        return PyByteArray_AS_STRING(o);
    } else
#endif
    {
        char* result;
        int r = PyBytes_AsStringAndSize(o, &result, length);
        if (unlikely(r < 0)) {
            return NULL;
        } else {
            return result;
        }
    }
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject* x) {
   int is_true = x == Py_True;
   if (is_true | (x == Py_False) | (x == Py_None)) return is_true;
   else return PyObject_IsTrue(x);
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrueAndDecref(PyObject* x) {
    int retval;
    if (unlikely(!x)) return -1;
    retval = __Pyx_PyObject_IsTrue(x);
    Py_DECREF(x);
    return retval;
}
static PyObject* __Pyx_PyNumber_IntOrLongWrongResultType(PyObject* result, const char* type_name) {
#if PY_MAJOR_VERSION >= 3
    if (PyLong_Check(result)) {
        if (PyErr_WarnFormat(PyExc_DeprecationWarning, 1,
                "__int__ returned non-int (type %.200s).  "
                "The ability to return an instance of a strict subclass of int "
                "is deprecated, and may be removed in a future version of Python.",
                Py_TYPE(result)->tp_name)) {
            Py_DECREF(result);
            return NULL;
        }
        return result;
    }
#endif
    PyErr_Format(PyExc_TypeError,
                 "__%.4s__ returned non-%.4s (type %.200s)",
                 type_name, type_name, Py_TYPE(result)->tp_name);
    Py_DECREF(result);
    return NULL;
}
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x) {
#if CYTHON_USE_TYPE_SLOTS
  PyNumberMethods *m;
#endif
  const char *name = NULL;
  PyObject *res = NULL;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_Check(x) || PyLong_Check(x)))
#else
  if (likely(PyLong_Check(x)))
#endif
    return __Pyx_NewRef(x);
#if CYTHON_USE_TYPE_SLOTS
  m = Py_TYPE(x)->tp_as_number;
  #if PY_MAJOR_VERSION < 3
  if (m && m->nb_int) {
    name = "int";
    res = m->nb_int(x);
  }
  else if (m && m->nb_long) {
    name = "long";
    res = m->nb_long(x);
  }
  #else
  if (likely(m && m->nb_int)) {
    name = "int";
    res = m->nb_int(x);
  }
  #endif
#else
  if (!PyBytes_CheckExact(x) && !PyUnicode_CheckExact(x)) {
    res = PyNumber_Int(x);
  }
#endif
  if (likely(res)) {
#if PY_MAJOR_VERSION < 3
    if (unlikely(!PyInt_Check(res) && !PyLong_Check(res))) {
#else
    if (unlikely(!PyLong_CheckExact(res))) {
#endif
        return __Pyx_PyNumber_IntOrLongWrongResultType(res, name);
    }
  }
  else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_TypeError,
                    "an integer is required");
  }
  return res;
}
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject* b) {
  Py_ssize_t ival;
  PyObject *x;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_CheckExact(b))) {
    if (sizeof(Py_ssize_t) >= sizeof(long))
        return PyInt_AS_LONG(b);
    else
        return PyInt_AsSsize_t(b);
  }
#endif
  if (likely(PyLong_CheckExact(b))) {
    #if CYTHON_USE_PYLONG_INTERNALS
    const digit* digits = ((PyLongObject*)b)->ob_digit;
    const Py_ssize_t size = Py_SIZE(b);
    if (likely(__Pyx_sst_abs(size) <= 1)) {
        ival = likely(size) ? digits[0] : 0;
        if (size == -1) ival = -ival;
        return ival;
    } else {
      switch (size) {
         case 2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
      }
    }
    #endif
    return PyLong_AsSsize_t(b);
  }
  x = PyNumber_Index(b);
  if (!x) return -1;
  ival = PyInt_AsSsize_t(x);
  Py_DECREF(x);
  return ival;
}
static CYTHON_INLINE PyObject * __Pyx_PyBool_FromLong(long b) {
  return b ? __Pyx_NewRef(Py_True) : __Pyx_NewRef(Py_False);
}
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t ival) {
    return PyInt_FromSize_t(ival);
}


#endif /* Py_PYTHON_H */
