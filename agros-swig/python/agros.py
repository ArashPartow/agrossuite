# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.0
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_agros')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_agros')
    _agros = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_agros', [dirname(__file__)])
        except ImportError:
            import _agros
            return _agros
        try:
            _mod = imp.load_module('_agros', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _agros = swig_import_helper()
    del swig_import_helper
else:
    import _agros
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _agros.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self):
        return _agros.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _agros.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _agros.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _agros.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _agros.SwigPyIterator_equal(self, x)

    def copy(self):
        return _agros.SwigPyIterator_copy(self)

    def next(self):
        return _agros.SwigPyIterator_next(self)

    def __next__(self):
        return _agros.SwigPyIterator___next__(self)

    def previous(self):
        return _agros.SwigPyIterator_previous(self)

    def advance(self, n):
        return _agros.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _agros.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _agros.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _agros.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _agros.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _agros.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _agros.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _agros.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class map_string_double(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, map_string_double, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, map_string_double, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _agros.map_string_double_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _agros.map_string_double___nonzero__(self)

    def __bool__(self):
        return _agros.map_string_double___bool__(self)

    def __len__(self):
        return _agros.map_string_double___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key):
        return _agros.map_string_double___getitem__(self, key)

    def __delitem__(self, key):
        return _agros.map_string_double___delitem__(self, key)

    def has_key(self, key):
        return _agros.map_string_double_has_key(self, key)

    def keys(self):
        return _agros.map_string_double_keys(self)

    def values(self):
        return _agros.map_string_double_values(self)

    def items(self):
        return _agros.map_string_double_items(self)

    def __contains__(self, key):
        return _agros.map_string_double___contains__(self, key)

    def key_iterator(self):
        return _agros.map_string_double_key_iterator(self)

    def value_iterator(self):
        return _agros.map_string_double_value_iterator(self)

    def __setitem__(self, *args):
        return _agros.map_string_double___setitem__(self, *args)

    def asdict(self):
        return _agros.map_string_double_asdict(self)

    def __init__(self, *args):
        this = _agros.new_map_string_double(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def empty(self):
        return _agros.map_string_double_empty(self)

    def size(self):
        return _agros.map_string_double_size(self)

    def swap(self, v):
        return _agros.map_string_double_swap(self, v)

    def begin(self):
        return _agros.map_string_double_begin(self)

    def end(self):
        return _agros.map_string_double_end(self)

    def rbegin(self):
        return _agros.map_string_double_rbegin(self)

    def rend(self):
        return _agros.map_string_double_rend(self)

    def clear(self):
        return _agros.map_string_double_clear(self)

    def get_allocator(self):
        return _agros.map_string_double_get_allocator(self)

    def count(self, x):
        return _agros.map_string_double_count(self, x)

    def erase(self, *args):
        return _agros.map_string_double_erase(self, *args)

    def find(self, x):
        return _agros.map_string_double_find(self, x)

    def lower_bound(self, x):
        return _agros.map_string_double_lower_bound(self, x)

    def upper_bound(self, x):
        return _agros.map_string_double_upper_bound(self, x)
    __swig_destroy__ = _agros.delete_map_string_double
    __del__ = lambda self: None
map_string_double_swigregister = _agros.map_string_double_swigregister
map_string_double_swigregister(map_string_double)

class map_string_int(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, map_string_int, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, map_string_int, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _agros.map_string_int_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _agros.map_string_int___nonzero__(self)

    def __bool__(self):
        return _agros.map_string_int___bool__(self)

    def __len__(self):
        return _agros.map_string_int___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key):
        return _agros.map_string_int___getitem__(self, key)

    def __delitem__(self, key):
        return _agros.map_string_int___delitem__(self, key)

    def has_key(self, key):
        return _agros.map_string_int_has_key(self, key)

    def keys(self):
        return _agros.map_string_int_keys(self)

    def values(self):
        return _agros.map_string_int_values(self)

    def items(self):
        return _agros.map_string_int_items(self)

    def __contains__(self, key):
        return _agros.map_string_int___contains__(self, key)

    def key_iterator(self):
        return _agros.map_string_int_key_iterator(self)

    def value_iterator(self):
        return _agros.map_string_int_value_iterator(self)

    def __setitem__(self, *args):
        return _agros.map_string_int___setitem__(self, *args)

    def asdict(self):
        return _agros.map_string_int_asdict(self)

    def __init__(self, *args):
        this = _agros.new_map_string_int(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def empty(self):
        return _agros.map_string_int_empty(self)

    def size(self):
        return _agros.map_string_int_size(self)

    def swap(self, v):
        return _agros.map_string_int_swap(self, v)

    def begin(self):
        return _agros.map_string_int_begin(self)

    def end(self):
        return _agros.map_string_int_end(self)

    def rbegin(self):
        return _agros.map_string_int_rbegin(self)

    def rend(self):
        return _agros.map_string_int_rend(self)

    def clear(self):
        return _agros.map_string_int_clear(self)

    def get_allocator(self):
        return _agros.map_string_int_get_allocator(self)

    def count(self, x):
        return _agros.map_string_int_count(self, x)

    def erase(self, *args):
        return _agros.map_string_int_erase(self, *args)

    def find(self, x):
        return _agros.map_string_int_find(self, x)

    def lower_bound(self, x):
        return _agros.map_string_int_lower_bound(self, x)

    def upper_bound(self, x):
        return _agros.map_string_int_upper_bound(self, x)
    __swig_destroy__ = _agros.delete_map_string_int
    __del__ = lambda self: None
map_string_int_swigregister = _agros.map_string_int_swigregister
map_string_int_swigregister(map_string_int)

class map_string_string(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, map_string_string, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, map_string_string, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _agros.map_string_string_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _agros.map_string_string___nonzero__(self)

    def __bool__(self):
        return _agros.map_string_string___bool__(self)

    def __len__(self):
        return _agros.map_string_string___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key):
        return _agros.map_string_string___getitem__(self, key)

    def __delitem__(self, key):
        return _agros.map_string_string___delitem__(self, key)

    def has_key(self, key):
        return _agros.map_string_string_has_key(self, key)

    def keys(self):
        return _agros.map_string_string_keys(self)

    def values(self):
        return _agros.map_string_string_values(self)

    def items(self):
        return _agros.map_string_string_items(self)

    def __contains__(self, key):
        return _agros.map_string_string___contains__(self, key)

    def key_iterator(self):
        return _agros.map_string_string_key_iterator(self)

    def value_iterator(self):
        return _agros.map_string_string_value_iterator(self)

    def __setitem__(self, *args):
        return _agros.map_string_string___setitem__(self, *args)

    def asdict(self):
        return _agros.map_string_string_asdict(self)

    def __init__(self, *args):
        this = _agros.new_map_string_string(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def empty(self):
        return _agros.map_string_string_empty(self)

    def size(self):
        return _agros.map_string_string_size(self)

    def swap(self, v):
        return _agros.map_string_string_swap(self, v)

    def begin(self):
        return _agros.map_string_string_begin(self)

    def end(self):
        return _agros.map_string_string_end(self)

    def rbegin(self):
        return _agros.map_string_string_rbegin(self)

    def rend(self):
        return _agros.map_string_string_rend(self)

    def clear(self):
        return _agros.map_string_string_clear(self)

    def get_allocator(self):
        return _agros.map_string_string_get_allocator(self)

    def count(self, x):
        return _agros.map_string_string_count(self, x)

    def erase(self, *args):
        return _agros.map_string_string_erase(self, *args)

    def find(self, x):
        return _agros.map_string_string_find(self, x)

    def lower_bound(self, x):
        return _agros.map_string_string_lower_bound(self, x)

    def upper_bound(self, x):
        return _agros.map_string_string_upper_bound(self, x)
    __swig_destroy__ = _agros.delete_map_string_string
    __del__ = lambda self: None
map_string_string_swigregister = _agros.map_string_string_swigregister
map_string_string_swigregister(map_string_string)


def version():
    return _agros.version()
version = _agros.version
class SwigProblemBase(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigProblemBase, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigProblemBase, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _agros.new_SwigProblemBase()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _agros.delete_SwigProblemBase
    __del__ = lambda self: None
SwigProblemBase_swigregister = _agros.SwigProblemBase_swigregister
SwigProblemBase_swigregister(SwigProblemBase)

class Field(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Field, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Field, name)
    __repr__ = _swig_repr

    def __init__(self, fieldId):
        this = _agros.new_Field(fieldId)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _agros.delete_Field
    __del__ = lambda self: None

    def fieldId(self):
        return _agros.Field_fieldId(self)

    def getAnalysisType(self):
        return _agros.Field_getAnalysisType(self)

    def setAnalysisType(self, analysisType):
        return _agros.Field_setAnalysisType(self, analysisType)

    def getLinearityType(self):
        return _agros.Field_getLinearityType(self)

    def setLinearityType(self, linearityType):
        return _agros.Field_setLinearityType(self, linearityType)

    def getNumberOfRefinements(self):
        return _agros.Field_getNumberOfRefinements(self)

    def setNumberOfRefinements(self, numberOfRefinements):
        return _agros.Field_setNumberOfRefinements(self, numberOfRefinements)

    def getPolynomialOrder(self):
        return _agros.Field_getPolynomialOrder(self)

    def setPolynomialOrder(self, polynomialOrder):
        return _agros.Field_setPolynomialOrder(self, polynomialOrder)

    def getMatrixSolver(self):
        return _agros.Field_getMatrixSolver(self)

    def setMatrixSolver(self, matrixSolver):
        return _agros.Field_setMatrixSolver(self, matrixSolver)

    def add_boundary(self, name, type, values):
        return _agros.Field_add_boundary(self, name, type, values)

    def add_material(self, name, values):
        return _agros.Field_add_material(self, name, values)

    __swig_getmethods__["field_id"] = fieldId
    if _newclass: field_id = property(fieldId, None)

    __swig_getmethods__["analysis_type"] = getAnalysisType
    __swig_setmethods__["analysis_type"] = setAnalysisType
    if _newclass: analysis_type = property(getAnalysisType, setAnalysisType)

    __swig_getmethods__["number_of_refinements"] = getNumberOfRefinements
    __swig_setmethods__["number_of_refinements"] = setNumberOfRefinements
    if _newclass: number_of_refinements = property(getNumberOfRefinements, setNumberOfRefinements)

    __swig_getmethods__["polynomial_order"] = getPolynomialOrder
    __swig_setmethods__["polynomial_order"] = setPolynomialOrder
    if _newclass: polynomial_order = property(getPolynomialOrder, setPolynomialOrder)

    __swig_getmethods__["solver"] = getLinearityType
    __swig_setmethods__["solver"] = setLinearityType
    if _newclass: solver = property(getLinearityType, setLinearityType)

Field_swigregister = _agros.Field_swigregister
Field_swigregister(Field)

class Geometry(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Geometry, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Geometry, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _agros.new_Geometry()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _agros.delete_Geometry
    __del__ = lambda self: None

    def add_node(self, x, y):
        return _agros.Geometry_add_node(self, x, y)

    def add_edge(self, *args):
        return _agros.Geometry_add_edge(self, *args)

    def add_label(self, x, y, materials, area):
        return _agros.Geometry_add_label(self, x, y, materials, area)
Geometry_swigregister = _agros.Geometry_swigregister
Geometry_swigregister(Geometry)

class Problem(SwigProblemBase):
    __swig_setmethods__ = {}
    for _s in [SwigProblemBase]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Problem, name, value)
    __swig_getmethods__ = {}
    for _s in [SwigProblemBase]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Problem, name)
    __repr__ = _swig_repr

    def __init__(self, clear=True):
        this = _agros.new_Problem(clear)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _agros.delete_Problem
    __del__ = lambda self: None

    def field(self, fieldId):
        return _agros.Problem_field(self, fieldId)

    def geometry(self):
        return _agros.Problem_geometry(self)

    def computation(self, newComputation=True):
        return _agros.Problem_computation(self, newComputation)

    def load(self, fn):
        return _agros.Problem_load(self, fn)

    def save(self, fn):
        return _agros.Problem_save(self, fn)

    def getCoordinateType(self):
        return _agros.Problem_getCoordinateType(self)

    def setCoordinateType(self, coordinateType):
        return _agros.Problem_setCoordinateType(self, coordinateType)

    def getMeshType(self):
        return _agros.Problem_getMeshType(self)

    def setMeshType(self, meshType):
        return _agros.Problem_setMeshType(self, meshType)

    __swig_getmethods__["coordinate_type"] = getCoordinateType
    __swig_setmethods__["coordinate_type"] = setCoordinateType
    if _newclass: coordinate_type = property(getCoordinateType, setCoordinateType)

    __swig_getmethods__["mesh_type"] = getMeshType
    __swig_setmethods__["mesh_type"] = setMeshType
    if _newclass: mesh_type = property(getMeshType, setMeshType)

Problem_swigregister = _agros.Problem_swigregister
Problem_swigregister(Problem)

class Computation(SwigProblemBase):
    __swig_setmethods__ = {}
    for _s in [SwigProblemBase]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Computation, name, value)
    __swig_getmethods__ = {}
    for _s in [SwigProblemBase]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Computation, name)
    __repr__ = _swig_repr

    def __init__(self, newComputation=True):
        this = _agros.new_Computation(newComputation)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _agros.delete_Computation
    __del__ = lambda self: None

    def solve(self):
        return _agros.Computation_solve(self)

    def clear(self):
        return _agros.Computation_clear(self)
Computation_swigregister = _agros.Computation_swigregister
Computation_swigregister(Computation)

# This file is compatible with both classic and new-style classes.


