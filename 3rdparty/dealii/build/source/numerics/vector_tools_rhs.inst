#if  1  <=  1 
 namespace VectorTools {
 template
 void create_right_hand_side< 1 , 1 >
 (const Mapping< 1 , 1 > &,
 const DoFHandler< 1 , 1 > &,
 const Quadrature< 1 > &,
 const Function< 1 > &,
 Vector<double> &);

 template
 void create_right_hand_side< 1 , 1 >
 (const DoFHandler< 1 , 1 > &,
 const Quadrature< 1 > &,
 const Function< 1 > &,
 Vector<double> &);

 }
#endif
 
#if  1  <=  2 
 namespace VectorTools {
 template
 void create_right_hand_side< 1 , 2 >
 (const Mapping< 1 , 2 > &,
 const DoFHandler< 1 , 2 > &,
 const Quadrature< 1 > &,
 const Function< 2 > &,
 Vector<double> &);

 template
 void create_right_hand_side< 1 , 2 >
 (const DoFHandler< 1 , 2 > &,
 const Quadrature< 1 > &,
 const Function< 2 > &,
 Vector<double> &);

 }
#endif
 
#if  1  <=  3 
 namespace VectorTools {
 template
 void create_right_hand_side< 1 , 3 >
 (const Mapping< 1 , 3 > &,
 const DoFHandler< 1 , 3 > &,
 const Quadrature< 1 > &,
 const Function< 3 > &,
 Vector<double> &);

 template
 void create_right_hand_side< 1 , 3 >
 (const DoFHandler< 1 , 3 > &,
 const Quadrature< 1 > &,
 const Function< 3 > &,
 Vector<double> &);

 }
#endif
 
#if  2  <=  1 
 namespace VectorTools {
 template
 void create_right_hand_side< 2 , 1 >
 (const Mapping< 2 , 1 > &,
 const DoFHandler< 2 , 1 > &,
 const Quadrature< 2 > &,
 const Function< 1 > &,
 Vector<double> &);

 template
 void create_right_hand_side< 2 , 1 >
 (const DoFHandler< 2 , 1 > &,
 const Quadrature< 2 > &,
 const Function< 1 > &,
 Vector<double> &);

 }
#endif
 
#if  2  <=  2 
 namespace VectorTools {
 template
 void create_right_hand_side< 2 , 2 >
 (const Mapping< 2 , 2 > &,
 const DoFHandler< 2 , 2 > &,
 const Quadrature< 2 > &,
 const Function< 2 > &,
 Vector<double> &);

 template
 void create_right_hand_side< 2 , 2 >
 (const DoFHandler< 2 , 2 > &,
 const Quadrature< 2 > &,
 const Function< 2 > &,
 Vector<double> &);

 }
#endif
 
#if  2  <=  3 
 namespace VectorTools {
 template
 void create_right_hand_side< 2 , 3 >
 (const Mapping< 2 , 3 > &,
 const DoFHandler< 2 , 3 > &,
 const Quadrature< 2 > &,
 const Function< 3 > &,
 Vector<double> &);

 template
 void create_right_hand_side< 2 , 3 >
 (const DoFHandler< 2 , 3 > &,
 const Quadrature< 2 > &,
 const Function< 3 > &,
 Vector<double> &);

 }
#endif
 
#if  3  <=  1 
 namespace VectorTools {
 template
 void create_right_hand_side< 3 , 1 >
 (const Mapping< 3 , 1 > &,
 const DoFHandler< 3 , 1 > &,
 const Quadrature< 3 > &,
 const Function< 1 > &,
 Vector<double> &);

 template
 void create_right_hand_side< 3 , 1 >
 (const DoFHandler< 3 , 1 > &,
 const Quadrature< 3 > &,
 const Function< 1 > &,
 Vector<double> &);

 }
#endif
 
#if  3  <=  2 
 namespace VectorTools {
 template
 void create_right_hand_side< 3 , 2 >
 (const Mapping< 3 , 2 > &,
 const DoFHandler< 3 , 2 > &,
 const Quadrature< 3 > &,
 const Function< 2 > &,
 Vector<double> &);

 template
 void create_right_hand_side< 3 , 2 >
 (const DoFHandler< 3 , 2 > &,
 const Quadrature< 3 > &,
 const Function< 2 > &,
 Vector<double> &);

 }
#endif
 
#if  3  <=  3 
 namespace VectorTools {
 template
 void create_right_hand_side< 3 , 3 >
 (const Mapping< 3 , 3 > &,
 const DoFHandler< 3 , 3 > &,
 const Quadrature< 3 > &,
 const Function< 3 > &,
 Vector<double> &);

 template
 void create_right_hand_side< 3 , 3 >
 (const DoFHandler< 3 , 3 > &,
 const Quadrature< 3 > &,
 const Function< 3 > &,
 Vector<double> &);

 }
#endif
 
namespace VectorTools {

#if  1  ==  1 
 template
 void create_right_hand_side< 1 >
 (const hp::MappingCollection< 1 > &,
 const hp::DoFHandler< 1 > &,
 const hp::QCollection< 1 > &,
 const Function< 1 > &,
 Vector<double> &);

 template
 void create_right_hand_side< 1 >
 (const hp::DoFHandler< 1 > &,
 const hp::QCollection< 1 > &,
 const Function< 1 > &,
 Vector<double> &);

#if  1  > 1
 template
 void
 create_boundary_right_hand_side< 1 >
 (const Mapping< 1 > &,
 const DoFHandler< 1 > &,
 const Quadrature< 1 -1> &,
 const Function< 1 > &,
 Vector<double> &,
 const std::set<types::boundary_id> &);
#endif

 template
 void
 create_boundary_right_hand_side< 1 >
 (const DoFHandler< 1 > &,
 const Quadrature< 1 -1> &,
 const Function< 1 > &,
 Vector<double> &,
 const std::set<types::boundary_id> &);

#if  1  > 1
 template
 void
 create_boundary_right_hand_side< 1 >
 (const hp::MappingCollection< 1 > &,
 const hp::DoFHandler< 1 > &,
 const hp::QCollection< 1 -1> &,
 const Function< 1 > &,
 Vector<double> &,
 const std::set<types::boundary_id> &);
#endif

 template
 void
 create_boundary_right_hand_side< 1 >
 (const hp::DoFHandler< 1 > &,
 const hp::QCollection< 1 -1> &,
 const Function< 1 > &,
 Vector<double> &,
 const std::set<types::boundary_id> &);


#endif
 }
 
namespace VectorTools {

#if  1  ==  2 
 template
 void create_right_hand_side< 1 >
 (const hp::MappingCollection< 1 > &,
 const hp::DoFHandler< 1 > &,
 const hp::QCollection< 1 > &,
 const Function< 1 > &,
 Vector<double> &);

 template
 void create_right_hand_side< 1 >
 (const hp::DoFHandler< 1 > &,
 const hp::QCollection< 1 > &,
 const Function< 1 > &,
 Vector<double> &);

#if  1  > 1
 template
 void
 create_boundary_right_hand_side< 1 >
 (const Mapping< 1 > &,
 const DoFHandler< 1 > &,
 const Quadrature< 1 -1> &,
 const Function< 1 > &,
 Vector<double> &,
 const std::set<types::boundary_id> &);
#endif

 template
 void
 create_boundary_right_hand_side< 1 >
 (const DoFHandler< 1 > &,
 const Quadrature< 1 -1> &,
 const Function< 1 > &,
 Vector<double> &,
 const std::set<types::boundary_id> &);

#if  1  > 1
 template
 void
 create_boundary_right_hand_side< 1 >
 (const hp::MappingCollection< 1 > &,
 const hp::DoFHandler< 1 > &,
 const hp::QCollection< 1 -1> &,
 const Function< 1 > &,
 Vector<double> &,
 const std::set<types::boundary_id> &);
#endif

 template
 void
 create_boundary_right_hand_side< 1 >
 (const hp::DoFHandler< 1 > &,
 const hp::QCollection< 1 -1> &,
 const Function< 1 > &,
 Vector<double> &,
 const std::set<types::boundary_id> &);


#endif
 }
 
namespace VectorTools {

#if  1  ==  3 
 template
 void create_right_hand_side< 1 >
 (const hp::MappingCollection< 1 > &,
 const hp::DoFHandler< 1 > &,
 const hp::QCollection< 1 > &,
 const Function< 1 > &,
 Vector<double> &);

 template
 void create_right_hand_side< 1 >
 (const hp::DoFHandler< 1 > &,
 const hp::QCollection< 1 > &,
 const Function< 1 > &,
 Vector<double> &);

#if  1  > 1
 template
 void
 create_boundary_right_hand_side< 1 >
 (const Mapping< 1 > &,
 const DoFHandler< 1 > &,
 const Quadrature< 1 -1> &,
 const Function< 1 > &,
 Vector<double> &,
 const std::set<types::boundary_id> &);
#endif

 template
 void
 create_boundary_right_hand_side< 1 >
 (const DoFHandler< 1 > &,
 const Quadrature< 1 -1> &,
 const Function< 1 > &,
 Vector<double> &,
 const std::set<types::boundary_id> &);

#if  1  > 1
 template
 void
 create_boundary_right_hand_side< 1 >
 (const hp::MappingCollection< 1 > &,
 const hp::DoFHandler< 1 > &,
 const hp::QCollection< 1 -1> &,
 const Function< 1 > &,
 Vector<double> &,
 const std::set<types::boundary_id> &);
#endif

 template
 void
 create_boundary_right_hand_side< 1 >
 (const hp::DoFHandler< 1 > &,
 const hp::QCollection< 1 -1> &,
 const Function< 1 > &,
 Vector<double> &,
 const std::set<types::boundary_id> &);


#endif
 }
 
namespace VectorTools {

#if  2  ==  1 
 template
 void create_right_hand_side< 2 >
 (const hp::MappingCollection< 2 > &,
 const hp::DoFHandler< 2 > &,
 const hp::QCollection< 2 > &,
 const Function< 2 > &,
 Vector<double> &);

 template
 void create_right_hand_side< 2 >
 (const hp::DoFHandler< 2 > &,
 const hp::QCollection< 2 > &,
 const Function< 2 > &,
 Vector<double> &);

#if  2  > 1
 template
 void
 create_boundary_right_hand_side< 2 >
 (const Mapping< 2 > &,
 const DoFHandler< 2 > &,
 const Quadrature< 2 -1> &,
 const Function< 2 > &,
 Vector<double> &,
 const std::set<types::boundary_id> &);
#endif

 template
 void
 create_boundary_right_hand_side< 2 >
 (const DoFHandler< 2 > &,
 const Quadrature< 2 -1> &,
 const Function< 2 > &,
 Vector<double> &,
 const std::set<types::boundary_id> &);

#if  2  > 1
 template
 void
 create_boundary_right_hand_side< 2 >
 (const hp::MappingCollection< 2 > &,
 const hp::DoFHandler< 2 > &,
 const hp::QCollection< 2 -1> &,
 const Function< 2 > &,
 Vector<double> &,
 const std::set<types::boundary_id> &);
#endif

 template
 void
 create_boundary_right_hand_side< 2 >
 (const hp::DoFHandler< 2 > &,
 const hp::QCollection< 2 -1> &,
 const Function< 2 > &,
 Vector<double> &,
 const std::set<types::boundary_id> &);


#endif
 }
 
namespace VectorTools {

#if  2  ==  2 
 template
 void create_right_hand_side< 2 >
 (const hp::MappingCollection< 2 > &,
 const hp::DoFHandler< 2 > &,
 const hp::QCollection< 2 > &,
 const Function< 2 > &,
 Vector<double> &);

 template
 void create_right_hand_side< 2 >
 (const hp::DoFHandler< 2 > &,
 const hp::QCollection< 2 > &,
 const Function< 2 > &,
 Vector<double> &);

#if  2  > 1
 template
 void
 create_boundary_right_hand_side< 2 >
 (const Mapping< 2 > &,
 const DoFHandler< 2 > &,
 const Quadrature< 2 -1> &,
 const Function< 2 > &,
 Vector<double> &,
 const std::set<types::boundary_id> &);
#endif

 template
 void
 create_boundary_right_hand_side< 2 >
 (const DoFHandler< 2 > &,
 const Quadrature< 2 -1> &,
 const Function< 2 > &,
 Vector<double> &,
 const std::set<types::boundary_id> &);

#if  2  > 1
 template
 void
 create_boundary_right_hand_side< 2 >
 (const hp::MappingCollection< 2 > &,
 const hp::DoFHandler< 2 > &,
 const hp::QCollection< 2 -1> &,
 const Function< 2 > &,
 Vector<double> &,
 const std::set<types::boundary_id> &);
#endif

 template
 void
 create_boundary_right_hand_side< 2 >
 (const hp::DoFHandler< 2 > &,
 const hp::QCollection< 2 -1> &,
 const Function< 2 > &,
 Vector<double> &,
 const std::set<types::boundary_id> &);


#endif
 }
 
namespace VectorTools {

#if  2  ==  3 
 template
 void create_right_hand_side< 2 >
 (const hp::MappingCollection< 2 > &,
 const hp::DoFHandler< 2 > &,
 const hp::QCollection< 2 > &,
 const Function< 2 > &,
 Vector<double> &);

 template
 void create_right_hand_side< 2 >
 (const hp::DoFHandler< 2 > &,
 const hp::QCollection< 2 > &,
 const Function< 2 > &,
 Vector<double> &);

#if  2  > 1
 template
 void
 create_boundary_right_hand_side< 2 >
 (const Mapping< 2 > &,
 const DoFHandler< 2 > &,
 const Quadrature< 2 -1> &,
 const Function< 2 > &,
 Vector<double> &,
 const std::set<types::boundary_id> &);
#endif

 template
 void
 create_boundary_right_hand_side< 2 >
 (const DoFHandler< 2 > &,
 const Quadrature< 2 -1> &,
 const Function< 2 > &,
 Vector<double> &,
 const std::set<types::boundary_id> &);

#if  2  > 1
 template
 void
 create_boundary_right_hand_side< 2 >
 (const hp::MappingCollection< 2 > &,
 const hp::DoFHandler< 2 > &,
 const hp::QCollection< 2 -1> &,
 const Function< 2 > &,
 Vector<double> &,
 const std::set<types::boundary_id> &);
#endif

 template
 void
 create_boundary_right_hand_side< 2 >
 (const hp::DoFHandler< 2 > &,
 const hp::QCollection< 2 -1> &,
 const Function< 2 > &,
 Vector<double> &,
 const std::set<types::boundary_id> &);


#endif
 }
 
namespace VectorTools {

#if  3  ==  1 
 template
 void create_right_hand_side< 3 >
 (const hp::MappingCollection< 3 > &,
 const hp::DoFHandler< 3 > &,
 const hp::QCollection< 3 > &,
 const Function< 3 > &,
 Vector<double> &);

 template
 void create_right_hand_side< 3 >
 (const hp::DoFHandler< 3 > &,
 const hp::QCollection< 3 > &,
 const Function< 3 > &,
 Vector<double> &);

#if  3  > 1
 template
 void
 create_boundary_right_hand_side< 3 >
 (const Mapping< 3 > &,
 const DoFHandler< 3 > &,
 const Quadrature< 3 -1> &,
 const Function< 3 > &,
 Vector<double> &,
 const std::set<types::boundary_id> &);
#endif

 template
 void
 create_boundary_right_hand_side< 3 >
 (const DoFHandler< 3 > &,
 const Quadrature< 3 -1> &,
 const Function< 3 > &,
 Vector<double> &,
 const std::set<types::boundary_id> &);

#if  3  > 1
 template
 void
 create_boundary_right_hand_side< 3 >
 (const hp::MappingCollection< 3 > &,
 const hp::DoFHandler< 3 > &,
 const hp::QCollection< 3 -1> &,
 const Function< 3 > &,
 Vector<double> &,
 const std::set<types::boundary_id> &);
#endif

 template
 void
 create_boundary_right_hand_side< 3 >
 (const hp::DoFHandler< 3 > &,
 const hp::QCollection< 3 -1> &,
 const Function< 3 > &,
 Vector<double> &,
 const std::set<types::boundary_id> &);


#endif
 }
 
namespace VectorTools {

#if  3  ==  2 
 template
 void create_right_hand_side< 3 >
 (const hp::MappingCollection< 3 > &,
 const hp::DoFHandler< 3 > &,
 const hp::QCollection< 3 > &,
 const Function< 3 > &,
 Vector<double> &);

 template
 void create_right_hand_side< 3 >
 (const hp::DoFHandler< 3 > &,
 const hp::QCollection< 3 > &,
 const Function< 3 > &,
 Vector<double> &);

#if  3  > 1
 template
 void
 create_boundary_right_hand_side< 3 >
 (const Mapping< 3 > &,
 const DoFHandler< 3 > &,
 const Quadrature< 3 -1> &,
 const Function< 3 > &,
 Vector<double> &,
 const std::set<types::boundary_id> &);
#endif

 template
 void
 create_boundary_right_hand_side< 3 >
 (const DoFHandler< 3 > &,
 const Quadrature< 3 -1> &,
 const Function< 3 > &,
 Vector<double> &,
 const std::set<types::boundary_id> &);

#if  3  > 1
 template
 void
 create_boundary_right_hand_side< 3 >
 (const hp::MappingCollection< 3 > &,
 const hp::DoFHandler< 3 > &,
 const hp::QCollection< 3 -1> &,
 const Function< 3 > &,
 Vector<double> &,
 const std::set<types::boundary_id> &);
#endif

 template
 void
 create_boundary_right_hand_side< 3 >
 (const hp::DoFHandler< 3 > &,
 const hp::QCollection< 3 -1> &,
 const Function< 3 > &,
 Vector<double> &,
 const std::set<types::boundary_id> &);


#endif
 }
 
namespace VectorTools {

#if  3  ==  3 
 template
 void create_right_hand_side< 3 >
 (const hp::MappingCollection< 3 > &,
 const hp::DoFHandler< 3 > &,
 const hp::QCollection< 3 > &,
 const Function< 3 > &,
 Vector<double> &);

 template
 void create_right_hand_side< 3 >
 (const hp::DoFHandler< 3 > &,
 const hp::QCollection< 3 > &,
 const Function< 3 > &,
 Vector<double> &);

#if  3  > 1
 template
 void
 create_boundary_right_hand_side< 3 >
 (const Mapping< 3 > &,
 const DoFHandler< 3 > &,
 const Quadrature< 3 -1> &,
 const Function< 3 > &,
 Vector<double> &,
 const std::set<types::boundary_id> &);
#endif

 template
 void
 create_boundary_right_hand_side< 3 >
 (const DoFHandler< 3 > &,
 const Quadrature< 3 -1> &,
 const Function< 3 > &,
 Vector<double> &,
 const std::set<types::boundary_id> &);

#if  3  > 1
 template
 void
 create_boundary_right_hand_side< 3 >
 (const hp::MappingCollection< 3 > &,
 const hp::DoFHandler< 3 > &,
 const hp::QCollection< 3 -1> &,
 const Function< 3 > &,
 Vector<double> &,
 const std::set<types::boundary_id> &);
#endif

 template
 void
 create_boundary_right_hand_side< 3 >
 (const hp::DoFHandler< 3 > &,
 const hp::QCollection< 3 -1> &,
 const Function< 3 > &,
 Vector<double> &,
 const std::set<types::boundary_id> &);


#endif
 }
 
