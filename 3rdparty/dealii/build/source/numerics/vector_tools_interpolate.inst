#if  1  <=  1 
 namespace VectorTools {

 template
 void interpolate
 (const Mapping< 1 , 1 > &,
 const DoFHandler< 1 , 1 >&,
 const Function< 1 >&,
  Vector<double> &);

 template
 void interpolate
 (const DoFHandler< 1 , 1 >&,
 const Function< 1 >&,
  Vector<double> &);
 }
#endif
 
#if  1  <=  2 
 namespace VectorTools {

 template
 void interpolate
 (const Mapping< 1 , 2 > &,
 const DoFHandler< 1 , 2 >&,
 const Function< 2 >&,
  Vector<double> &);

 template
 void interpolate
 (const DoFHandler< 1 , 2 >&,
 const Function< 2 >&,
  Vector<double> &);
 }
#endif
 
#if  1  <=  3 
 namespace VectorTools {

 template
 void interpolate
 (const Mapping< 1 , 3 > &,
 const DoFHandler< 1 , 3 >&,
 const Function< 3 >&,
  Vector<double> &);

 template
 void interpolate
 (const DoFHandler< 1 , 3 >&,
 const Function< 3 >&,
  Vector<double> &);
 }
#endif
 
#if  2  <=  1 
 namespace VectorTools {

 template
 void interpolate
 (const Mapping< 2 , 1 > &,
 const DoFHandler< 2 , 1 >&,
 const Function< 1 >&,
  Vector<double> &);

 template
 void interpolate
 (const DoFHandler< 2 , 1 >&,
 const Function< 1 >&,
  Vector<double> &);
 }
#endif
 
#if  2  <=  2 
 namespace VectorTools {

 template
 void interpolate
 (const Mapping< 2 , 2 > &,
 const DoFHandler< 2 , 2 >&,
 const Function< 2 >&,
  Vector<double> &);

 template
 void interpolate
 (const DoFHandler< 2 , 2 >&,
 const Function< 2 >&,
  Vector<double> &);
 }
#endif
 
#if  2  <=  3 
 namespace VectorTools {

 template
 void interpolate
 (const Mapping< 2 , 3 > &,
 const DoFHandler< 2 , 3 >&,
 const Function< 3 >&,
  Vector<double> &);

 template
 void interpolate
 (const DoFHandler< 2 , 3 >&,
 const Function< 3 >&,
  Vector<double> &);
 }
#endif
 
#if  3  <=  1 
 namespace VectorTools {

 template
 void interpolate
 (const Mapping< 3 , 1 > &,
 const DoFHandler< 3 , 1 >&,
 const Function< 1 >&,
  Vector<double> &);

 template
 void interpolate
 (const DoFHandler< 3 , 1 >&,
 const Function< 1 >&,
  Vector<double> &);
 }
#endif
 
#if  3  <=  2 
 namespace VectorTools {

 template
 void interpolate
 (const Mapping< 3 , 2 > &,
 const DoFHandler< 3 , 2 >&,
 const Function< 2 >&,
  Vector<double> &);

 template
 void interpolate
 (const DoFHandler< 3 , 2 >&,
 const Function< 2 >&,
  Vector<double> &);
 }
#endif
 
#if  3  <=  3 
 namespace VectorTools {

 template
 void interpolate
 (const Mapping< 3 , 3 > &,
 const DoFHandler< 3 , 3 >&,
 const Function< 3 >&,
  Vector<double> &);

 template
 void interpolate
 (const DoFHandler< 3 , 3 >&,
 const Function< 3 >&,
  Vector<double> &);
 }
#endif
 
#if  1  <=  1 
 namespace VectorTools {

 template
 void interpolate
 (const Mapping< 1 , 1 > &,
 const DoFHandler< 1 , 1 >&,
 const Function< 1 >&,
  Vector<float> &);

 template
 void interpolate
 (const DoFHandler< 1 , 1 >&,
 const Function< 1 >&,
  Vector<float> &);
 }
#endif
 
#if  1  <=  2 
 namespace VectorTools {

 template
 void interpolate
 (const Mapping< 1 , 2 > &,
 const DoFHandler< 1 , 2 >&,
 const Function< 2 >&,
  Vector<float> &);

 template
 void interpolate
 (const DoFHandler< 1 , 2 >&,
 const Function< 2 >&,
  Vector<float> &);
 }
#endif
 
#if  1  <=  3 
 namespace VectorTools {

 template
 void interpolate
 (const Mapping< 1 , 3 > &,
 const DoFHandler< 1 , 3 >&,
 const Function< 3 >&,
  Vector<float> &);

 template
 void interpolate
 (const DoFHandler< 1 , 3 >&,
 const Function< 3 >&,
  Vector<float> &);
 }
#endif
 
#if  2  <=  1 
 namespace VectorTools {

 template
 void interpolate
 (const Mapping< 2 , 1 > &,
 const DoFHandler< 2 , 1 >&,
 const Function< 1 >&,
  Vector<float> &);

 template
 void interpolate
 (const DoFHandler< 2 , 1 >&,
 const Function< 1 >&,
  Vector<float> &);
 }
#endif
 
#if  2  <=  2 
 namespace VectorTools {

 template
 void interpolate
 (const Mapping< 2 , 2 > &,
 const DoFHandler< 2 , 2 >&,
 const Function< 2 >&,
  Vector<float> &);

 template
 void interpolate
 (const DoFHandler< 2 , 2 >&,
 const Function< 2 >&,
  Vector<float> &);
 }
#endif
 
#if  2  <=  3 
 namespace VectorTools {

 template
 void interpolate
 (const Mapping< 2 , 3 > &,
 const DoFHandler< 2 , 3 >&,
 const Function< 3 >&,
  Vector<float> &);

 template
 void interpolate
 (const DoFHandler< 2 , 3 >&,
 const Function< 3 >&,
  Vector<float> &);
 }
#endif
 
#if  3  <=  1 
 namespace VectorTools {

 template
 void interpolate
 (const Mapping< 3 , 1 > &,
 const DoFHandler< 3 , 1 >&,
 const Function< 1 >&,
  Vector<float> &);

 template
 void interpolate
 (const DoFHandler< 3 , 1 >&,
 const Function< 1 >&,
  Vector<float> &);
 }
#endif
 
#if  3  <=  2 
 namespace VectorTools {

 template
 void interpolate
 (const Mapping< 3 , 2 > &,
 const DoFHandler< 3 , 2 >&,
 const Function< 2 >&,
  Vector<float> &);

 template
 void interpolate
 (const DoFHandler< 3 , 2 >&,
 const Function< 2 >&,
  Vector<float> &);
 }
#endif
 
#if  3  <=  3 
 namespace VectorTools {

 template
 void interpolate
 (const Mapping< 3 , 3 > &,
 const DoFHandler< 3 , 3 >&,
 const Function< 3 >&,
  Vector<float> &);

 template
 void interpolate
 (const DoFHandler< 3 , 3 >&,
 const Function< 3 >&,
  Vector<float> &);
 }
#endif
 
#if  1  <=  1 
 namespace VectorTools {

 template
 void interpolate
 (const Mapping< 1 , 1 > &,
 const DoFHandler< 1 , 1 >&,
 const Function< 1 >&,
  Vector<long double> &);

 template
 void interpolate
 (const DoFHandler< 1 , 1 >&,
 const Function< 1 >&,
  Vector<long double> &);
 }
#endif
 
#if  1  <=  2 
 namespace VectorTools {

 template
 void interpolate
 (const Mapping< 1 , 2 > &,
 const DoFHandler< 1 , 2 >&,
 const Function< 2 >&,
  Vector<long double> &);

 template
 void interpolate
 (const DoFHandler< 1 , 2 >&,
 const Function< 2 >&,
  Vector<long double> &);
 }
#endif
 
#if  1  <=  3 
 namespace VectorTools {

 template
 void interpolate
 (const Mapping< 1 , 3 > &,
 const DoFHandler< 1 , 3 >&,
 const Function< 3 >&,
  Vector<long double> &);

 template
 void interpolate
 (const DoFHandler< 1 , 3 >&,
 const Function< 3 >&,
  Vector<long double> &);
 }
#endif
 
#if  2  <=  1 
 namespace VectorTools {

 template
 void interpolate
 (const Mapping< 2 , 1 > &,
 const DoFHandler< 2 , 1 >&,
 const Function< 1 >&,
  Vector<long double> &);

 template
 void interpolate
 (const DoFHandler< 2 , 1 >&,
 const Function< 1 >&,
  Vector<long double> &);
 }
#endif
 
#if  2  <=  2 
 namespace VectorTools {

 template
 void interpolate
 (const Mapping< 2 , 2 > &,
 const DoFHandler< 2 , 2 >&,
 const Function< 2 >&,
  Vector<long double> &);

 template
 void interpolate
 (const DoFHandler< 2 , 2 >&,
 const Function< 2 >&,
  Vector<long double> &);
 }
#endif
 
#if  2  <=  3 
 namespace VectorTools {

 template
 void interpolate
 (const Mapping< 2 , 3 > &,
 const DoFHandler< 2 , 3 >&,
 const Function< 3 >&,
  Vector<long double> &);

 template
 void interpolate
 (const DoFHandler< 2 , 3 >&,
 const Function< 3 >&,
  Vector<long double> &);
 }
#endif
 
#if  3  <=  1 
 namespace VectorTools {

 template
 void interpolate
 (const Mapping< 3 , 1 > &,
 const DoFHandler< 3 , 1 >&,
 const Function< 1 >&,
  Vector<long double> &);

 template
 void interpolate
 (const DoFHandler< 3 , 1 >&,
 const Function< 1 >&,
  Vector<long double> &);
 }
#endif
 
#if  3  <=  2 
 namespace VectorTools {

 template
 void interpolate
 (const Mapping< 3 , 2 > &,
 const DoFHandler< 3 , 2 >&,
 const Function< 2 >&,
  Vector<long double> &);

 template
 void interpolate
 (const DoFHandler< 3 , 2 >&,
 const Function< 2 >&,
  Vector<long double> &);
 }
#endif
 
#if  3  <=  3 
 namespace VectorTools {

 template
 void interpolate
 (const Mapping< 3 , 3 > &,
 const DoFHandler< 3 , 3 >&,
 const Function< 3 >&,
  Vector<long double> &);

 template
 void interpolate
 (const DoFHandler< 3 , 3 >&,
 const Function< 3 >&,
  Vector<long double> &);
 }
#endif
 
#if  1  <=  1 
 namespace VectorTools {

 template
 void interpolate
 (const Mapping< 1 , 1 > &,
 const DoFHandler< 1 , 1 >&,
 const Function< 1 >&,
  BlockVector<double> &);

 template
 void interpolate
 (const DoFHandler< 1 , 1 >&,
 const Function< 1 >&,
  BlockVector<double> &);
 }
#endif
 
#if  1  <=  2 
 namespace VectorTools {

 template
 void interpolate
 (const Mapping< 1 , 2 > &,
 const DoFHandler< 1 , 2 >&,
 const Function< 2 >&,
  BlockVector<double> &);

 template
 void interpolate
 (const DoFHandler< 1 , 2 >&,
 const Function< 2 >&,
  BlockVector<double> &);
 }
#endif
 
#if  1  <=  3 
 namespace VectorTools {

 template
 void interpolate
 (const Mapping< 1 , 3 > &,
 const DoFHandler< 1 , 3 >&,
 const Function< 3 >&,
  BlockVector<double> &);

 template
 void interpolate
 (const DoFHandler< 1 , 3 >&,
 const Function< 3 >&,
  BlockVector<double> &);
 }
#endif
 
#if  2  <=  1 
 namespace VectorTools {

 template
 void interpolate
 (const Mapping< 2 , 1 > &,
 const DoFHandler< 2 , 1 >&,
 const Function< 1 >&,
  BlockVector<double> &);

 template
 void interpolate
 (const DoFHandler< 2 , 1 >&,
 const Function< 1 >&,
  BlockVector<double> &);
 }
#endif
 
#if  2  <=  2 
 namespace VectorTools {

 template
 void interpolate
 (const Mapping< 2 , 2 > &,
 const DoFHandler< 2 , 2 >&,
 const Function< 2 >&,
  BlockVector<double> &);

 template
 void interpolate
 (const DoFHandler< 2 , 2 >&,
 const Function< 2 >&,
  BlockVector<double> &);
 }
#endif
 
#if  2  <=  3 
 namespace VectorTools {

 template
 void interpolate
 (const Mapping< 2 , 3 > &,
 const DoFHandler< 2 , 3 >&,
 const Function< 3 >&,
  BlockVector<double> &);

 template
 void interpolate
 (const DoFHandler< 2 , 3 >&,
 const Function< 3 >&,
  BlockVector<double> &);
 }
#endif
 
#if  3  <=  1 
 namespace VectorTools {

 template
 void interpolate
 (const Mapping< 3 , 1 > &,
 const DoFHandler< 3 , 1 >&,
 const Function< 1 >&,
  BlockVector<double> &);

 template
 void interpolate
 (const DoFHandler< 3 , 1 >&,
 const Function< 1 >&,
  BlockVector<double> &);
 }
#endif
 
#if  3  <=  2 
 namespace VectorTools {

 template
 void interpolate
 (const Mapping< 3 , 2 > &,
 const DoFHandler< 3 , 2 >&,
 const Function< 2 >&,
  BlockVector<double> &);

 template
 void interpolate
 (const DoFHandler< 3 , 2 >&,
 const Function< 2 >&,
  BlockVector<double> &);
 }
#endif
 
#if  3  <=  3 
 namespace VectorTools {

 template
 void interpolate
 (const Mapping< 3 , 3 > &,
 const DoFHandler< 3 , 3 >&,
 const Function< 3 >&,
  BlockVector<double> &);

 template
 void interpolate
 (const DoFHandler< 3 , 3 >&,
 const Function< 3 >&,
  BlockVector<double> &);
 }
#endif
 
#if  1  <=  1 
 namespace VectorTools {

 template
 void interpolate
 (const Mapping< 1 , 1 > &,
 const DoFHandler< 1 , 1 >&,
 const Function< 1 >&,
  BlockVector<float> &);

 template
 void interpolate
 (const DoFHandler< 1 , 1 >&,
 const Function< 1 >&,
  BlockVector<float> &);
 }
#endif
 
#if  1  <=  2 
 namespace VectorTools {

 template
 void interpolate
 (const Mapping< 1 , 2 > &,
 const DoFHandler< 1 , 2 >&,
 const Function< 2 >&,
  BlockVector<float> &);

 template
 void interpolate
 (const DoFHandler< 1 , 2 >&,
 const Function< 2 >&,
  BlockVector<float> &);
 }
#endif
 
#if  1  <=  3 
 namespace VectorTools {

 template
 void interpolate
 (const Mapping< 1 , 3 > &,
 const DoFHandler< 1 , 3 >&,
 const Function< 3 >&,
  BlockVector<float> &);

 template
 void interpolate
 (const DoFHandler< 1 , 3 >&,
 const Function< 3 >&,
  BlockVector<float> &);
 }
#endif
 
#if  2  <=  1 
 namespace VectorTools {

 template
 void interpolate
 (const Mapping< 2 , 1 > &,
 const DoFHandler< 2 , 1 >&,
 const Function< 1 >&,
  BlockVector<float> &);

 template
 void interpolate
 (const DoFHandler< 2 , 1 >&,
 const Function< 1 >&,
  BlockVector<float> &);
 }
#endif
 
#if  2  <=  2 
 namespace VectorTools {

 template
 void interpolate
 (const Mapping< 2 , 2 > &,
 const DoFHandler< 2 , 2 >&,
 const Function< 2 >&,
  BlockVector<float> &);

 template
 void interpolate
 (const DoFHandler< 2 , 2 >&,
 const Function< 2 >&,
  BlockVector<float> &);
 }
#endif
 
#if  2  <=  3 
 namespace VectorTools {

 template
 void interpolate
 (const Mapping< 2 , 3 > &,
 const DoFHandler< 2 , 3 >&,
 const Function< 3 >&,
  BlockVector<float> &);

 template
 void interpolate
 (const DoFHandler< 2 , 3 >&,
 const Function< 3 >&,
  BlockVector<float> &);
 }
#endif
 
#if  3  <=  1 
 namespace VectorTools {

 template
 void interpolate
 (const Mapping< 3 , 1 > &,
 const DoFHandler< 3 , 1 >&,
 const Function< 1 >&,
  BlockVector<float> &);

 template
 void interpolate
 (const DoFHandler< 3 , 1 >&,
 const Function< 1 >&,
  BlockVector<float> &);
 }
#endif
 
#if  3  <=  2 
 namespace VectorTools {

 template
 void interpolate
 (const Mapping< 3 , 2 > &,
 const DoFHandler< 3 , 2 >&,
 const Function< 2 >&,
  BlockVector<float> &);

 template
 void interpolate
 (const DoFHandler< 3 , 2 >&,
 const Function< 2 >&,
  BlockVector<float> &);
 }
#endif
 
#if  3  <=  3 
 namespace VectorTools {

 template
 void interpolate
 (const Mapping< 3 , 3 > &,
 const DoFHandler< 3 , 3 >&,
 const Function< 3 >&,
  BlockVector<float> &);

 template
 void interpolate
 (const DoFHandler< 3 , 3 >&,
 const Function< 3 >&,
  BlockVector<float> &);
 }
#endif
 
#if  1  <=  1 
 namespace VectorTools {

 template
 void interpolate
 (const Mapping< 1 , 1 > &,
 const DoFHandler< 1 , 1 >&,
 const Function< 1 >&,
  BlockVector<long double> &);

 template
 void interpolate
 (const DoFHandler< 1 , 1 >&,
 const Function< 1 >&,
  BlockVector<long double> &);
 }
#endif
 
#if  1  <=  2 
 namespace VectorTools {

 template
 void interpolate
 (const Mapping< 1 , 2 > &,
 const DoFHandler< 1 , 2 >&,
 const Function< 2 >&,
  BlockVector<long double> &);

 template
 void interpolate
 (const DoFHandler< 1 , 2 >&,
 const Function< 2 >&,
  BlockVector<long double> &);
 }
#endif
 
#if  1  <=  3 
 namespace VectorTools {

 template
 void interpolate
 (const Mapping< 1 , 3 > &,
 const DoFHandler< 1 , 3 >&,
 const Function< 3 >&,
  BlockVector<long double> &);

 template
 void interpolate
 (const DoFHandler< 1 , 3 >&,
 const Function< 3 >&,
  BlockVector<long double> &);
 }
#endif
 
#if  2  <=  1 
 namespace VectorTools {

 template
 void interpolate
 (const Mapping< 2 , 1 > &,
 const DoFHandler< 2 , 1 >&,
 const Function< 1 >&,
  BlockVector<long double> &);

 template
 void interpolate
 (const DoFHandler< 2 , 1 >&,
 const Function< 1 >&,
  BlockVector<long double> &);
 }
#endif
 
#if  2  <=  2 
 namespace VectorTools {

 template
 void interpolate
 (const Mapping< 2 , 2 > &,
 const DoFHandler< 2 , 2 >&,
 const Function< 2 >&,
  BlockVector<long double> &);

 template
 void interpolate
 (const DoFHandler< 2 , 2 >&,
 const Function< 2 >&,
  BlockVector<long double> &);
 }
#endif
 
#if  2  <=  3 
 namespace VectorTools {

 template
 void interpolate
 (const Mapping< 2 , 3 > &,
 const DoFHandler< 2 , 3 >&,
 const Function< 3 >&,
  BlockVector<long double> &);

 template
 void interpolate
 (const DoFHandler< 2 , 3 >&,
 const Function< 3 >&,
  BlockVector<long double> &);
 }
#endif
 
#if  3  <=  1 
 namespace VectorTools {

 template
 void interpolate
 (const Mapping< 3 , 1 > &,
 const DoFHandler< 3 , 1 >&,
 const Function< 1 >&,
  BlockVector<long double> &);

 template
 void interpolate
 (const DoFHandler< 3 , 1 >&,
 const Function< 1 >&,
  BlockVector<long double> &);
 }
#endif
 
#if  3  <=  2 
 namespace VectorTools {

 template
 void interpolate
 (const Mapping< 3 , 2 > &,
 const DoFHandler< 3 , 2 >&,
 const Function< 2 >&,
  BlockVector<long double> &);

 template
 void interpolate
 (const DoFHandler< 3 , 2 >&,
 const Function< 2 >&,
  BlockVector<long double> &);
 }
#endif
 
#if  3  <=  3 
 namespace VectorTools {

 template
 void interpolate
 (const Mapping< 3 , 3 > &,
 const DoFHandler< 3 , 3 >&,
 const Function< 3 >&,
  BlockVector<long double> &);

 template
 void interpolate
 (const DoFHandler< 3 , 3 >&,
 const Function< 3 >&,
  BlockVector<long double> &);
 }
#endif
 
#if  1  <=  1 
 namespace VectorTools {

 template
 void interpolate
 (const Mapping< 1 , 1 > &,
 const DoFHandler< 1 , 1 >&,
 const Function< 1 >&,
  parallel::distributed::Vector<double> &);

 template
 void interpolate
 (const DoFHandler< 1 , 1 >&,
 const Function< 1 >&,
  parallel::distributed::Vector<double> &);
 }
#endif
 
#if  1  <=  2 
 namespace VectorTools {

 template
 void interpolate
 (const Mapping< 1 , 2 > &,
 const DoFHandler< 1 , 2 >&,
 const Function< 2 >&,
  parallel::distributed::Vector<double> &);

 template
 void interpolate
 (const DoFHandler< 1 , 2 >&,
 const Function< 2 >&,
  parallel::distributed::Vector<double> &);
 }
#endif
 
#if  1  <=  3 
 namespace VectorTools {

 template
 void interpolate
 (const Mapping< 1 , 3 > &,
 const DoFHandler< 1 , 3 >&,
 const Function< 3 >&,
  parallel::distributed::Vector<double> &);

 template
 void interpolate
 (const DoFHandler< 1 , 3 >&,
 const Function< 3 >&,
  parallel::distributed::Vector<double> &);
 }
#endif
 
#if  2  <=  1 
 namespace VectorTools {

 template
 void interpolate
 (const Mapping< 2 , 1 > &,
 const DoFHandler< 2 , 1 >&,
 const Function< 1 >&,
  parallel::distributed::Vector<double> &);

 template
 void interpolate
 (const DoFHandler< 2 , 1 >&,
 const Function< 1 >&,
  parallel::distributed::Vector<double> &);
 }
#endif
 
#if  2  <=  2 
 namespace VectorTools {

 template
 void interpolate
 (const Mapping< 2 , 2 > &,
 const DoFHandler< 2 , 2 >&,
 const Function< 2 >&,
  parallel::distributed::Vector<double> &);

 template
 void interpolate
 (const DoFHandler< 2 , 2 >&,
 const Function< 2 >&,
  parallel::distributed::Vector<double> &);
 }
#endif
 
#if  2  <=  3 
 namespace VectorTools {

 template
 void interpolate
 (const Mapping< 2 , 3 > &,
 const DoFHandler< 2 , 3 >&,
 const Function< 3 >&,
  parallel::distributed::Vector<double> &);

 template
 void interpolate
 (const DoFHandler< 2 , 3 >&,
 const Function< 3 >&,
  parallel::distributed::Vector<double> &);
 }
#endif
 
#if  3  <=  1 
 namespace VectorTools {

 template
 void interpolate
 (const Mapping< 3 , 1 > &,
 const DoFHandler< 3 , 1 >&,
 const Function< 1 >&,
  parallel::distributed::Vector<double> &);

 template
 void interpolate
 (const DoFHandler< 3 , 1 >&,
 const Function< 1 >&,
  parallel::distributed::Vector<double> &);
 }
#endif
 
#if  3  <=  2 
 namespace VectorTools {

 template
 void interpolate
 (const Mapping< 3 , 2 > &,
 const DoFHandler< 3 , 2 >&,
 const Function< 2 >&,
  parallel::distributed::Vector<double> &);

 template
 void interpolate
 (const DoFHandler< 3 , 2 >&,
 const Function< 2 >&,
  parallel::distributed::Vector<double> &);
 }
#endif
 
#if  3  <=  3 
 namespace VectorTools {

 template
 void interpolate
 (const Mapping< 3 , 3 > &,
 const DoFHandler< 3 , 3 >&,
 const Function< 3 >&,
  parallel::distributed::Vector<double> &);

 template
 void interpolate
 (const DoFHandler< 3 , 3 >&,
 const Function< 3 >&,
  parallel::distributed::Vector<double> &);
 }
#endif
 
#if  1  <=  1 
 namespace VectorTools {

 template
 void interpolate
 (const Mapping< 1 , 1 > &,
 const DoFHandler< 1 , 1 >&,
 const Function< 1 >&,
  parallel::distributed::Vector<float> &);

 template
 void interpolate
 (const DoFHandler< 1 , 1 >&,
 const Function< 1 >&,
  parallel::distributed::Vector<float> &);
 }
#endif
 
#if  1  <=  2 
 namespace VectorTools {

 template
 void interpolate
 (const Mapping< 1 , 2 > &,
 const DoFHandler< 1 , 2 >&,
 const Function< 2 >&,
  parallel::distributed::Vector<float> &);

 template
 void interpolate
 (const DoFHandler< 1 , 2 >&,
 const Function< 2 >&,
  parallel::distributed::Vector<float> &);
 }
#endif
 
#if  1  <=  3 
 namespace VectorTools {

 template
 void interpolate
 (const Mapping< 1 , 3 > &,
 const DoFHandler< 1 , 3 >&,
 const Function< 3 >&,
  parallel::distributed::Vector<float> &);

 template
 void interpolate
 (const DoFHandler< 1 , 3 >&,
 const Function< 3 >&,
  parallel::distributed::Vector<float> &);
 }
#endif
 
#if  2  <=  1 
 namespace VectorTools {

 template
 void interpolate
 (const Mapping< 2 , 1 > &,
 const DoFHandler< 2 , 1 >&,
 const Function< 1 >&,
  parallel::distributed::Vector<float> &);

 template
 void interpolate
 (const DoFHandler< 2 , 1 >&,
 const Function< 1 >&,
  parallel::distributed::Vector<float> &);
 }
#endif
 
#if  2  <=  2 
 namespace VectorTools {

 template
 void interpolate
 (const Mapping< 2 , 2 > &,
 const DoFHandler< 2 , 2 >&,
 const Function< 2 >&,
  parallel::distributed::Vector<float> &);

 template
 void interpolate
 (const DoFHandler< 2 , 2 >&,
 const Function< 2 >&,
  parallel::distributed::Vector<float> &);
 }
#endif
 
#if  2  <=  3 
 namespace VectorTools {

 template
 void interpolate
 (const Mapping< 2 , 3 > &,
 const DoFHandler< 2 , 3 >&,
 const Function< 3 >&,
  parallel::distributed::Vector<float> &);

 template
 void interpolate
 (const DoFHandler< 2 , 3 >&,
 const Function< 3 >&,
  parallel::distributed::Vector<float> &);
 }
#endif
 
#if  3  <=  1 
 namespace VectorTools {

 template
 void interpolate
 (const Mapping< 3 , 1 > &,
 const DoFHandler< 3 , 1 >&,
 const Function< 1 >&,
  parallel::distributed::Vector<float> &);

 template
 void interpolate
 (const DoFHandler< 3 , 1 >&,
 const Function< 1 >&,
  parallel::distributed::Vector<float> &);
 }
#endif
 
#if  3  <=  2 
 namespace VectorTools {

 template
 void interpolate
 (const Mapping< 3 , 2 > &,
 const DoFHandler< 3 , 2 >&,
 const Function< 2 >&,
  parallel::distributed::Vector<float> &);

 template
 void interpolate
 (const DoFHandler< 3 , 2 >&,
 const Function< 2 >&,
  parallel::distributed::Vector<float> &);
 }
#endif
 
#if  3  <=  3 
 namespace VectorTools {

 template
 void interpolate
 (const Mapping< 3 , 3 > &,
 const DoFHandler< 3 , 3 >&,
 const Function< 3 >&,
  parallel::distributed::Vector<float> &);

 template
 void interpolate
 (const DoFHandler< 3 , 3 >&,
 const Function< 3 >&,
  parallel::distributed::Vector<float> &);
 }
#endif
 
#if  1  <=  1 
 namespace VectorTools {

 template
 void interpolate
 (const Mapping< 1 , 1 > &,
 const DoFHandler< 1 , 1 >&,
 const Function< 1 >&,
  parallel::distributed::Vector<long double> &);

 template
 void interpolate
 (const DoFHandler< 1 , 1 >&,
 const Function< 1 >&,
  parallel::distributed::Vector<long double> &);
 }
#endif
 
#if  1  <=  2 
 namespace VectorTools {

 template
 void interpolate
 (const Mapping< 1 , 2 > &,
 const DoFHandler< 1 , 2 >&,
 const Function< 2 >&,
  parallel::distributed::Vector<long double> &);

 template
 void interpolate
 (const DoFHandler< 1 , 2 >&,
 const Function< 2 >&,
  parallel::distributed::Vector<long double> &);
 }
#endif
 
#if  1  <=  3 
 namespace VectorTools {

 template
 void interpolate
 (const Mapping< 1 , 3 > &,
 const DoFHandler< 1 , 3 >&,
 const Function< 3 >&,
  parallel::distributed::Vector<long double> &);

 template
 void interpolate
 (const DoFHandler< 1 , 3 >&,
 const Function< 3 >&,
  parallel::distributed::Vector<long double> &);
 }
#endif
 
#if  2  <=  1 
 namespace VectorTools {

 template
 void interpolate
 (const Mapping< 2 , 1 > &,
 const DoFHandler< 2 , 1 >&,
 const Function< 1 >&,
  parallel::distributed::Vector<long double> &);

 template
 void interpolate
 (const DoFHandler< 2 , 1 >&,
 const Function< 1 >&,
  parallel::distributed::Vector<long double> &);
 }
#endif
 
#if  2  <=  2 
 namespace VectorTools {

 template
 void interpolate
 (const Mapping< 2 , 2 > &,
 const DoFHandler< 2 , 2 >&,
 const Function< 2 >&,
  parallel::distributed::Vector<long double> &);

 template
 void interpolate
 (const DoFHandler< 2 , 2 >&,
 const Function< 2 >&,
  parallel::distributed::Vector<long double> &);
 }
#endif
 
#if  2  <=  3 
 namespace VectorTools {

 template
 void interpolate
 (const Mapping< 2 , 3 > &,
 const DoFHandler< 2 , 3 >&,
 const Function< 3 >&,
  parallel::distributed::Vector<long double> &);

 template
 void interpolate
 (const DoFHandler< 2 , 3 >&,
 const Function< 3 >&,
  parallel::distributed::Vector<long double> &);
 }
#endif
 
#if  3  <=  1 
 namespace VectorTools {

 template
 void interpolate
 (const Mapping< 3 , 1 > &,
 const DoFHandler< 3 , 1 >&,
 const Function< 1 >&,
  parallel::distributed::Vector<long double> &);

 template
 void interpolate
 (const DoFHandler< 3 , 1 >&,
 const Function< 1 >&,
  parallel::distributed::Vector<long double> &);
 }
#endif
 
#if  3  <=  2 
 namespace VectorTools {

 template
 void interpolate
 (const Mapping< 3 , 2 > &,
 const DoFHandler< 3 , 2 >&,
 const Function< 2 >&,
  parallel::distributed::Vector<long double> &);

 template
 void interpolate
 (const DoFHandler< 3 , 2 >&,
 const Function< 2 >&,
  parallel::distributed::Vector<long double> &);
 }
#endif
 
#if  3  <=  3 
 namespace VectorTools {

 template
 void interpolate
 (const Mapping< 3 , 3 > &,
 const DoFHandler< 3 , 3 >&,
 const Function< 3 >&,
  parallel::distributed::Vector<long double> &);

 template
 void interpolate
 (const DoFHandler< 3 , 3 >&,
 const Function< 3 >&,
  parallel::distributed::Vector<long double> &);
 }
#endif
 
#if  1  <=  1 
 namespace VectorTools {

 template
 void interpolate
 (const Mapping< 1 , 1 > &,
 const DoFHandler< 1 , 1 >&,
 const Function< 1 >&,
  parallel::distributed::BlockVector<double> &);

 template
 void interpolate
 (const DoFHandler< 1 , 1 >&,
 const Function< 1 >&,
  parallel::distributed::BlockVector<double> &);
 }
#endif
 
#if  1  <=  2 
 namespace VectorTools {

 template
 void interpolate
 (const Mapping< 1 , 2 > &,
 const DoFHandler< 1 , 2 >&,
 const Function< 2 >&,
  parallel::distributed::BlockVector<double> &);

 template
 void interpolate
 (const DoFHandler< 1 , 2 >&,
 const Function< 2 >&,
  parallel::distributed::BlockVector<double> &);
 }
#endif
 
#if  1  <=  3 
 namespace VectorTools {

 template
 void interpolate
 (const Mapping< 1 , 3 > &,
 const DoFHandler< 1 , 3 >&,
 const Function< 3 >&,
  parallel::distributed::BlockVector<double> &);

 template
 void interpolate
 (const DoFHandler< 1 , 3 >&,
 const Function< 3 >&,
  parallel::distributed::BlockVector<double> &);
 }
#endif
 
#if  2  <=  1 
 namespace VectorTools {

 template
 void interpolate
 (const Mapping< 2 , 1 > &,
 const DoFHandler< 2 , 1 >&,
 const Function< 1 >&,
  parallel::distributed::BlockVector<double> &);

 template
 void interpolate
 (const DoFHandler< 2 , 1 >&,
 const Function< 1 >&,
  parallel::distributed::BlockVector<double> &);
 }
#endif
 
#if  2  <=  2 
 namespace VectorTools {

 template
 void interpolate
 (const Mapping< 2 , 2 > &,
 const DoFHandler< 2 , 2 >&,
 const Function< 2 >&,
  parallel::distributed::BlockVector<double> &);

 template
 void interpolate
 (const DoFHandler< 2 , 2 >&,
 const Function< 2 >&,
  parallel::distributed::BlockVector<double> &);
 }
#endif
 
#if  2  <=  3 
 namespace VectorTools {

 template
 void interpolate
 (const Mapping< 2 , 3 > &,
 const DoFHandler< 2 , 3 >&,
 const Function< 3 >&,
  parallel::distributed::BlockVector<double> &);

 template
 void interpolate
 (const DoFHandler< 2 , 3 >&,
 const Function< 3 >&,
  parallel::distributed::BlockVector<double> &);
 }
#endif
 
#if  3  <=  1 
 namespace VectorTools {

 template
 void interpolate
 (const Mapping< 3 , 1 > &,
 const DoFHandler< 3 , 1 >&,
 const Function< 1 >&,
  parallel::distributed::BlockVector<double> &);

 template
 void interpolate
 (const DoFHandler< 3 , 1 >&,
 const Function< 1 >&,
  parallel::distributed::BlockVector<double> &);
 }
#endif
 
#if  3  <=  2 
 namespace VectorTools {

 template
 void interpolate
 (const Mapping< 3 , 2 > &,
 const DoFHandler< 3 , 2 >&,
 const Function< 2 >&,
  parallel::distributed::BlockVector<double> &);

 template
 void interpolate
 (const DoFHandler< 3 , 2 >&,
 const Function< 2 >&,
  parallel::distributed::BlockVector<double> &);
 }
#endif
 
#if  3  <=  3 
 namespace VectorTools {

 template
 void interpolate
 (const Mapping< 3 , 3 > &,
 const DoFHandler< 3 , 3 >&,
 const Function< 3 >&,
  parallel::distributed::BlockVector<double> &);

 template
 void interpolate
 (const DoFHandler< 3 , 3 >&,
 const Function< 3 >&,
  parallel::distributed::BlockVector<double> &);
 }
#endif
 
#if  1  <=  1 
 namespace VectorTools {

 template
 void interpolate
 (const Mapping< 1 , 1 > &,
 const DoFHandler< 1 , 1 >&,
 const Function< 1 >&,
  parallel::distributed::BlockVector<float> &);

 template
 void interpolate
 (const DoFHandler< 1 , 1 >&,
 const Function< 1 >&,
  parallel::distributed::BlockVector<float> &);
 }
#endif
 
#if  1  <=  2 
 namespace VectorTools {

 template
 void interpolate
 (const Mapping< 1 , 2 > &,
 const DoFHandler< 1 , 2 >&,
 const Function< 2 >&,
  parallel::distributed::BlockVector<float> &);

 template
 void interpolate
 (const DoFHandler< 1 , 2 >&,
 const Function< 2 >&,
  parallel::distributed::BlockVector<float> &);
 }
#endif
 
#if  1  <=  3 
 namespace VectorTools {

 template
 void interpolate
 (const Mapping< 1 , 3 > &,
 const DoFHandler< 1 , 3 >&,
 const Function< 3 >&,
  parallel::distributed::BlockVector<float> &);

 template
 void interpolate
 (const DoFHandler< 1 , 3 >&,
 const Function< 3 >&,
  parallel::distributed::BlockVector<float> &);
 }
#endif
 
#if  2  <=  1 
 namespace VectorTools {

 template
 void interpolate
 (const Mapping< 2 , 1 > &,
 const DoFHandler< 2 , 1 >&,
 const Function< 1 >&,
  parallel::distributed::BlockVector<float> &);

 template
 void interpolate
 (const DoFHandler< 2 , 1 >&,
 const Function< 1 >&,
  parallel::distributed::BlockVector<float> &);
 }
#endif
 
#if  2  <=  2 
 namespace VectorTools {

 template
 void interpolate
 (const Mapping< 2 , 2 > &,
 const DoFHandler< 2 , 2 >&,
 const Function< 2 >&,
  parallel::distributed::BlockVector<float> &);

 template
 void interpolate
 (const DoFHandler< 2 , 2 >&,
 const Function< 2 >&,
  parallel::distributed::BlockVector<float> &);
 }
#endif
 
#if  2  <=  3 
 namespace VectorTools {

 template
 void interpolate
 (const Mapping< 2 , 3 > &,
 const DoFHandler< 2 , 3 >&,
 const Function< 3 >&,
  parallel::distributed::BlockVector<float> &);

 template
 void interpolate
 (const DoFHandler< 2 , 3 >&,
 const Function< 3 >&,
  parallel::distributed::BlockVector<float> &);
 }
#endif
 
#if  3  <=  1 
 namespace VectorTools {

 template
 void interpolate
 (const Mapping< 3 , 1 > &,
 const DoFHandler< 3 , 1 >&,
 const Function< 1 >&,
  parallel::distributed::BlockVector<float> &);

 template
 void interpolate
 (const DoFHandler< 3 , 1 >&,
 const Function< 1 >&,
  parallel::distributed::BlockVector<float> &);
 }
#endif
 
#if  3  <=  2 
 namespace VectorTools {

 template
 void interpolate
 (const Mapping< 3 , 2 > &,
 const DoFHandler< 3 , 2 >&,
 const Function< 2 >&,
  parallel::distributed::BlockVector<float> &);

 template
 void interpolate
 (const DoFHandler< 3 , 2 >&,
 const Function< 2 >&,
  parallel::distributed::BlockVector<float> &);
 }
#endif
 
#if  3  <=  3 
 namespace VectorTools {

 template
 void interpolate
 (const Mapping< 3 , 3 > &,
 const DoFHandler< 3 , 3 >&,
 const Function< 3 >&,
  parallel::distributed::BlockVector<float> &);

 template
 void interpolate
 (const DoFHandler< 3 , 3 >&,
 const Function< 3 >&,
  parallel::distributed::BlockVector<float> &);
 }
#endif
 
#if  1  <=  1 
 namespace VectorTools {

 template
 void interpolate
 (const Mapping< 1 , 1 > &,
 const DoFHandler< 1 , 1 >&,
 const Function< 1 >&,
  parallel::distributed::BlockVector<long double> &);

 template
 void interpolate
 (const DoFHandler< 1 , 1 >&,
 const Function< 1 >&,
  parallel::distributed::BlockVector<long double> &);
 }
#endif
 
#if  1  <=  2 
 namespace VectorTools {

 template
 void interpolate
 (const Mapping< 1 , 2 > &,
 const DoFHandler< 1 , 2 >&,
 const Function< 2 >&,
  parallel::distributed::BlockVector<long double> &);

 template
 void interpolate
 (const DoFHandler< 1 , 2 >&,
 const Function< 2 >&,
  parallel::distributed::BlockVector<long double> &);
 }
#endif
 
#if  1  <=  3 
 namespace VectorTools {

 template
 void interpolate
 (const Mapping< 1 , 3 > &,
 const DoFHandler< 1 , 3 >&,
 const Function< 3 >&,
  parallel::distributed::BlockVector<long double> &);

 template
 void interpolate
 (const DoFHandler< 1 , 3 >&,
 const Function< 3 >&,
  parallel::distributed::BlockVector<long double> &);
 }
#endif
 
#if  2  <=  1 
 namespace VectorTools {

 template
 void interpolate
 (const Mapping< 2 , 1 > &,
 const DoFHandler< 2 , 1 >&,
 const Function< 1 >&,
  parallel::distributed::BlockVector<long double> &);

 template
 void interpolate
 (const DoFHandler< 2 , 1 >&,
 const Function< 1 >&,
  parallel::distributed::BlockVector<long double> &);
 }
#endif
 
#if  2  <=  2 
 namespace VectorTools {

 template
 void interpolate
 (const Mapping< 2 , 2 > &,
 const DoFHandler< 2 , 2 >&,
 const Function< 2 >&,
  parallel::distributed::BlockVector<long double> &);

 template
 void interpolate
 (const DoFHandler< 2 , 2 >&,
 const Function< 2 >&,
  parallel::distributed::BlockVector<long double> &);
 }
#endif
 
#if  2  <=  3 
 namespace VectorTools {

 template
 void interpolate
 (const Mapping< 2 , 3 > &,
 const DoFHandler< 2 , 3 >&,
 const Function< 3 >&,
  parallel::distributed::BlockVector<long double> &);

 template
 void interpolate
 (const DoFHandler< 2 , 3 >&,
 const Function< 3 >&,
  parallel::distributed::BlockVector<long double> &);
 }
#endif
 
#if  3  <=  1 
 namespace VectorTools {

 template
 void interpolate
 (const Mapping< 3 , 1 > &,
 const DoFHandler< 3 , 1 >&,
 const Function< 1 >&,
  parallel::distributed::BlockVector<long double> &);

 template
 void interpolate
 (const DoFHandler< 3 , 1 >&,
 const Function< 1 >&,
  parallel::distributed::BlockVector<long double> &);
 }
#endif
 
#if  3  <=  2 
 namespace VectorTools {

 template
 void interpolate
 (const Mapping< 3 , 2 > &,
 const DoFHandler< 3 , 2 >&,
 const Function< 2 >&,
  parallel::distributed::BlockVector<long double> &);

 template
 void interpolate
 (const DoFHandler< 3 , 2 >&,
 const Function< 2 >&,
  parallel::distributed::BlockVector<long double> &);
 }
#endif
 
#if  3  <=  3 
 namespace VectorTools {

 template
 void interpolate
 (const Mapping< 3 , 3 > &,
 const DoFHandler< 3 , 3 >&,
 const Function< 3 >&,
  parallel::distributed::BlockVector<long double> &);

 template
 void interpolate
 (const DoFHandler< 3 , 3 >&,
 const Function< 3 >&,
  parallel::distributed::BlockVector<long double> &);
 }
#endif
 
#if  1  ==  1 

 namespace VectorTools {

 template
 void interpolate
 (const Mapping< 1 >&,
 const hp::DoFHandler< 1 >&,
 const Function< 1 >&,
  Vector<double> &);
 template
 void interpolate
 (const hp::DoFHandler< 1 >&,
 const Function< 1 >&,
  Vector<double> &);

 template
 void interpolate
 (const DoFHandler< 1 >&,
 const DoFHandler< 1 >&,
 const FullMatrix<double>&,
 const  Vector<double> &,
  Vector<double> &);
 }
#endif
 
#if  1  ==  2 

 namespace VectorTools {

 template
 void interpolate
 (const Mapping< 1 >&,
 const hp::DoFHandler< 1 >&,
 const Function< 1 >&,
  Vector<double> &);
 template
 void interpolate
 (const hp::DoFHandler< 1 >&,
 const Function< 1 >&,
  Vector<double> &);

 template
 void interpolate
 (const DoFHandler< 1 >&,
 const DoFHandler< 1 >&,
 const FullMatrix<double>&,
 const  Vector<double> &,
  Vector<double> &);
 }
#endif
 
#if  1  ==  3 

 namespace VectorTools {

 template
 void interpolate
 (const Mapping< 1 >&,
 const hp::DoFHandler< 1 >&,
 const Function< 1 >&,
  Vector<double> &);
 template
 void interpolate
 (const hp::DoFHandler< 1 >&,
 const Function< 1 >&,
  Vector<double> &);

 template
 void interpolate
 (const DoFHandler< 1 >&,
 const DoFHandler< 1 >&,
 const FullMatrix<double>&,
 const  Vector<double> &,
  Vector<double> &);
 }
#endif
 
#if  2  ==  1 

 namespace VectorTools {

 template
 void interpolate
 (const Mapping< 2 >&,
 const hp::DoFHandler< 2 >&,
 const Function< 2 >&,
  Vector<double> &);
 template
 void interpolate
 (const hp::DoFHandler< 2 >&,
 const Function< 2 >&,
  Vector<double> &);

 template
 void interpolate
 (const DoFHandler< 2 >&,
 const DoFHandler< 2 >&,
 const FullMatrix<double>&,
 const  Vector<double> &,
  Vector<double> &);
 }
#endif
 
#if  2  ==  2 

 namespace VectorTools {

 template
 void interpolate
 (const Mapping< 2 >&,
 const hp::DoFHandler< 2 >&,
 const Function< 2 >&,
  Vector<double> &);
 template
 void interpolate
 (const hp::DoFHandler< 2 >&,
 const Function< 2 >&,
  Vector<double> &);

 template
 void interpolate
 (const DoFHandler< 2 >&,
 const DoFHandler< 2 >&,
 const FullMatrix<double>&,
 const  Vector<double> &,
  Vector<double> &);
 }
#endif
 
#if  2  ==  3 

 namespace VectorTools {

 template
 void interpolate
 (const Mapping< 2 >&,
 const hp::DoFHandler< 2 >&,
 const Function< 2 >&,
  Vector<double> &);
 template
 void interpolate
 (const hp::DoFHandler< 2 >&,
 const Function< 2 >&,
  Vector<double> &);

 template
 void interpolate
 (const DoFHandler< 2 >&,
 const DoFHandler< 2 >&,
 const FullMatrix<double>&,
 const  Vector<double> &,
  Vector<double> &);
 }
#endif
 
#if  3  ==  1 

 namespace VectorTools {

 template
 void interpolate
 (const Mapping< 3 >&,
 const hp::DoFHandler< 3 >&,
 const Function< 3 >&,
  Vector<double> &);
 template
 void interpolate
 (const hp::DoFHandler< 3 >&,
 const Function< 3 >&,
  Vector<double> &);

 template
 void interpolate
 (const DoFHandler< 3 >&,
 const DoFHandler< 3 >&,
 const FullMatrix<double>&,
 const  Vector<double> &,
  Vector<double> &);
 }
#endif
 
#if  3  ==  2 

 namespace VectorTools {

 template
 void interpolate
 (const Mapping< 3 >&,
 const hp::DoFHandler< 3 >&,
 const Function< 3 >&,
  Vector<double> &);
 template
 void interpolate
 (const hp::DoFHandler< 3 >&,
 const Function< 3 >&,
  Vector<double> &);

 template
 void interpolate
 (const DoFHandler< 3 >&,
 const DoFHandler< 3 >&,
 const FullMatrix<double>&,
 const  Vector<double> &,
  Vector<double> &);
 }
#endif
 
#if  3  ==  3 

 namespace VectorTools {

 template
 void interpolate
 (const Mapping< 3 >&,
 const hp::DoFHandler< 3 >&,
 const Function< 3 >&,
  Vector<double> &);
 template
 void interpolate
 (const hp::DoFHandler< 3 >&,
 const Function< 3 >&,
  Vector<double> &);

 template
 void interpolate
 (const DoFHandler< 3 >&,
 const DoFHandler< 3 >&,
 const FullMatrix<double>&,
 const  Vector<double> &,
  Vector<double> &);
 }
#endif
 
#if  1  ==  1 

 namespace VectorTools {

 template
 void interpolate
 (const Mapping< 1 >&,
 const hp::DoFHandler< 1 >&,
 const Function< 1 >&,
  Vector<float> &);
 template
 void interpolate
 (const hp::DoFHandler< 1 >&,
 const Function< 1 >&,
  Vector<float> &);

 template
 void interpolate
 (const DoFHandler< 1 >&,
 const DoFHandler< 1 >&,
 const FullMatrix<double>&,
 const  Vector<float> &,
  Vector<float> &);
 }
#endif
 
#if  1  ==  2 

 namespace VectorTools {

 template
 void interpolate
 (const Mapping< 1 >&,
 const hp::DoFHandler< 1 >&,
 const Function< 1 >&,
  Vector<float> &);
 template
 void interpolate
 (const hp::DoFHandler< 1 >&,
 const Function< 1 >&,
  Vector<float> &);

 template
 void interpolate
 (const DoFHandler< 1 >&,
 const DoFHandler< 1 >&,
 const FullMatrix<double>&,
 const  Vector<float> &,
  Vector<float> &);
 }
#endif
 
#if  1  ==  3 

 namespace VectorTools {

 template
 void interpolate
 (const Mapping< 1 >&,
 const hp::DoFHandler< 1 >&,
 const Function< 1 >&,
  Vector<float> &);
 template
 void interpolate
 (const hp::DoFHandler< 1 >&,
 const Function< 1 >&,
  Vector<float> &);

 template
 void interpolate
 (const DoFHandler< 1 >&,
 const DoFHandler< 1 >&,
 const FullMatrix<double>&,
 const  Vector<float> &,
  Vector<float> &);
 }
#endif
 
#if  2  ==  1 

 namespace VectorTools {

 template
 void interpolate
 (const Mapping< 2 >&,
 const hp::DoFHandler< 2 >&,
 const Function< 2 >&,
  Vector<float> &);
 template
 void interpolate
 (const hp::DoFHandler< 2 >&,
 const Function< 2 >&,
  Vector<float> &);

 template
 void interpolate
 (const DoFHandler< 2 >&,
 const DoFHandler< 2 >&,
 const FullMatrix<double>&,
 const  Vector<float> &,
  Vector<float> &);
 }
#endif
 
#if  2  ==  2 

 namespace VectorTools {

 template
 void interpolate
 (const Mapping< 2 >&,
 const hp::DoFHandler< 2 >&,
 const Function< 2 >&,
  Vector<float> &);
 template
 void interpolate
 (const hp::DoFHandler< 2 >&,
 const Function< 2 >&,
  Vector<float> &);

 template
 void interpolate
 (const DoFHandler< 2 >&,
 const DoFHandler< 2 >&,
 const FullMatrix<double>&,
 const  Vector<float> &,
  Vector<float> &);
 }
#endif
 
#if  2  ==  3 

 namespace VectorTools {

 template
 void interpolate
 (const Mapping< 2 >&,
 const hp::DoFHandler< 2 >&,
 const Function< 2 >&,
  Vector<float> &);
 template
 void interpolate
 (const hp::DoFHandler< 2 >&,
 const Function< 2 >&,
  Vector<float> &);

 template
 void interpolate
 (const DoFHandler< 2 >&,
 const DoFHandler< 2 >&,
 const FullMatrix<double>&,
 const  Vector<float> &,
  Vector<float> &);
 }
#endif
 
#if  3  ==  1 

 namespace VectorTools {

 template
 void interpolate
 (const Mapping< 3 >&,
 const hp::DoFHandler< 3 >&,
 const Function< 3 >&,
  Vector<float> &);
 template
 void interpolate
 (const hp::DoFHandler< 3 >&,
 const Function< 3 >&,
  Vector<float> &);

 template
 void interpolate
 (const DoFHandler< 3 >&,
 const DoFHandler< 3 >&,
 const FullMatrix<double>&,
 const  Vector<float> &,
  Vector<float> &);
 }
#endif
 
#if  3  ==  2 

 namespace VectorTools {

 template
 void interpolate
 (const Mapping< 3 >&,
 const hp::DoFHandler< 3 >&,
 const Function< 3 >&,
  Vector<float> &);
 template
 void interpolate
 (const hp::DoFHandler< 3 >&,
 const Function< 3 >&,
  Vector<float> &);

 template
 void interpolate
 (const DoFHandler< 3 >&,
 const DoFHandler< 3 >&,
 const FullMatrix<double>&,
 const  Vector<float> &,
  Vector<float> &);
 }
#endif
 
#if  3  ==  3 

 namespace VectorTools {

 template
 void interpolate
 (const Mapping< 3 >&,
 const hp::DoFHandler< 3 >&,
 const Function< 3 >&,
  Vector<float> &);
 template
 void interpolate
 (const hp::DoFHandler< 3 >&,
 const Function< 3 >&,
  Vector<float> &);

 template
 void interpolate
 (const DoFHandler< 3 >&,
 const DoFHandler< 3 >&,
 const FullMatrix<double>&,
 const  Vector<float> &,
  Vector<float> &);
 }
#endif
 
#if  1  ==  1 

 namespace VectorTools {

 template
 void interpolate
 (const Mapping< 1 >&,
 const hp::DoFHandler< 1 >&,
 const Function< 1 >&,
  Vector<long double> &);
 template
 void interpolate
 (const hp::DoFHandler< 1 >&,
 const Function< 1 >&,
  Vector<long double> &);

 template
 void interpolate
 (const DoFHandler< 1 >&,
 const DoFHandler< 1 >&,
 const FullMatrix<double>&,
 const  Vector<long double> &,
  Vector<long double> &);
 }
#endif
 
#if  1  ==  2 

 namespace VectorTools {

 template
 void interpolate
 (const Mapping< 1 >&,
 const hp::DoFHandler< 1 >&,
 const Function< 1 >&,
  Vector<long double> &);
 template
 void interpolate
 (const hp::DoFHandler< 1 >&,
 const Function< 1 >&,
  Vector<long double> &);

 template
 void interpolate
 (const DoFHandler< 1 >&,
 const DoFHandler< 1 >&,
 const FullMatrix<double>&,
 const  Vector<long double> &,
  Vector<long double> &);
 }
#endif
 
#if  1  ==  3 

 namespace VectorTools {

 template
 void interpolate
 (const Mapping< 1 >&,
 const hp::DoFHandler< 1 >&,
 const Function< 1 >&,
  Vector<long double> &);
 template
 void interpolate
 (const hp::DoFHandler< 1 >&,
 const Function< 1 >&,
  Vector<long double> &);

 template
 void interpolate
 (const DoFHandler< 1 >&,
 const DoFHandler< 1 >&,
 const FullMatrix<double>&,
 const  Vector<long double> &,
  Vector<long double> &);
 }
#endif
 
#if  2  ==  1 

 namespace VectorTools {

 template
 void interpolate
 (const Mapping< 2 >&,
 const hp::DoFHandler< 2 >&,
 const Function< 2 >&,
  Vector<long double> &);
 template
 void interpolate
 (const hp::DoFHandler< 2 >&,
 const Function< 2 >&,
  Vector<long double> &);

 template
 void interpolate
 (const DoFHandler< 2 >&,
 const DoFHandler< 2 >&,
 const FullMatrix<double>&,
 const  Vector<long double> &,
  Vector<long double> &);
 }
#endif
 
#if  2  ==  2 

 namespace VectorTools {

 template
 void interpolate
 (const Mapping< 2 >&,
 const hp::DoFHandler< 2 >&,
 const Function< 2 >&,
  Vector<long double> &);
 template
 void interpolate
 (const hp::DoFHandler< 2 >&,
 const Function< 2 >&,
  Vector<long double> &);

 template
 void interpolate
 (const DoFHandler< 2 >&,
 const DoFHandler< 2 >&,
 const FullMatrix<double>&,
 const  Vector<long double> &,
  Vector<long double> &);
 }
#endif
 
#if  2  ==  3 

 namespace VectorTools {

 template
 void interpolate
 (const Mapping< 2 >&,
 const hp::DoFHandler< 2 >&,
 const Function< 2 >&,
  Vector<long double> &);
 template
 void interpolate
 (const hp::DoFHandler< 2 >&,
 const Function< 2 >&,
  Vector<long double> &);

 template
 void interpolate
 (const DoFHandler< 2 >&,
 const DoFHandler< 2 >&,
 const FullMatrix<double>&,
 const  Vector<long double> &,
  Vector<long double> &);
 }
#endif
 
#if  3  ==  1 

 namespace VectorTools {

 template
 void interpolate
 (const Mapping< 3 >&,
 const hp::DoFHandler< 3 >&,
 const Function< 3 >&,
  Vector<long double> &);
 template
 void interpolate
 (const hp::DoFHandler< 3 >&,
 const Function< 3 >&,
  Vector<long double> &);

 template
 void interpolate
 (const DoFHandler< 3 >&,
 const DoFHandler< 3 >&,
 const FullMatrix<double>&,
 const  Vector<long double> &,
  Vector<long double> &);
 }
#endif
 
#if  3  ==  2 

 namespace VectorTools {

 template
 void interpolate
 (const Mapping< 3 >&,
 const hp::DoFHandler< 3 >&,
 const Function< 3 >&,
  Vector<long double> &);
 template
 void interpolate
 (const hp::DoFHandler< 3 >&,
 const Function< 3 >&,
  Vector<long double> &);

 template
 void interpolate
 (const DoFHandler< 3 >&,
 const DoFHandler< 3 >&,
 const FullMatrix<double>&,
 const  Vector<long double> &,
  Vector<long double> &);
 }
#endif
 
#if  3  ==  3 

 namespace VectorTools {

 template
 void interpolate
 (const Mapping< 3 >&,
 const hp::DoFHandler< 3 >&,
 const Function< 3 >&,
  Vector<long double> &);
 template
 void interpolate
 (const hp::DoFHandler< 3 >&,
 const Function< 3 >&,
  Vector<long double> &);

 template
 void interpolate
 (const DoFHandler< 3 >&,
 const DoFHandler< 3 >&,
 const FullMatrix<double>&,
 const  Vector<long double> &,
  Vector<long double> &);
 }
#endif
 
#if  1  ==  1 

 namespace VectorTools {

 template
 void interpolate
 (const Mapping< 1 >&,
 const hp::DoFHandler< 1 >&,
 const Function< 1 >&,
  BlockVector<double> &);
 template
 void interpolate
 (const hp::DoFHandler< 1 >&,
 const Function< 1 >&,
  BlockVector<double> &);

 template
 void interpolate
 (const DoFHandler< 1 >&,
 const DoFHandler< 1 >&,
 const FullMatrix<double>&,
 const  BlockVector<double> &,
  BlockVector<double> &);
 }
#endif
 
#if  1  ==  2 

 namespace VectorTools {

 template
 void interpolate
 (const Mapping< 1 >&,
 const hp::DoFHandler< 1 >&,
 const Function< 1 >&,
  BlockVector<double> &);
 template
 void interpolate
 (const hp::DoFHandler< 1 >&,
 const Function< 1 >&,
  BlockVector<double> &);

 template
 void interpolate
 (const DoFHandler< 1 >&,
 const DoFHandler< 1 >&,
 const FullMatrix<double>&,
 const  BlockVector<double> &,
  BlockVector<double> &);
 }
#endif
 
#if  1  ==  3 

 namespace VectorTools {

 template
 void interpolate
 (const Mapping< 1 >&,
 const hp::DoFHandler< 1 >&,
 const Function< 1 >&,
  BlockVector<double> &);
 template
 void interpolate
 (const hp::DoFHandler< 1 >&,
 const Function< 1 >&,
  BlockVector<double> &);

 template
 void interpolate
 (const DoFHandler< 1 >&,
 const DoFHandler< 1 >&,
 const FullMatrix<double>&,
 const  BlockVector<double> &,
  BlockVector<double> &);
 }
#endif
 
#if  2  ==  1 

 namespace VectorTools {

 template
 void interpolate
 (const Mapping< 2 >&,
 const hp::DoFHandler< 2 >&,
 const Function< 2 >&,
  BlockVector<double> &);
 template
 void interpolate
 (const hp::DoFHandler< 2 >&,
 const Function< 2 >&,
  BlockVector<double> &);

 template
 void interpolate
 (const DoFHandler< 2 >&,
 const DoFHandler< 2 >&,
 const FullMatrix<double>&,
 const  BlockVector<double> &,
  BlockVector<double> &);
 }
#endif
 
#if  2  ==  2 

 namespace VectorTools {

 template
 void interpolate
 (const Mapping< 2 >&,
 const hp::DoFHandler< 2 >&,
 const Function< 2 >&,
  BlockVector<double> &);
 template
 void interpolate
 (const hp::DoFHandler< 2 >&,
 const Function< 2 >&,
  BlockVector<double> &);

 template
 void interpolate
 (const DoFHandler< 2 >&,
 const DoFHandler< 2 >&,
 const FullMatrix<double>&,
 const  BlockVector<double> &,
  BlockVector<double> &);
 }
#endif
 
#if  2  ==  3 

 namespace VectorTools {

 template
 void interpolate
 (const Mapping< 2 >&,
 const hp::DoFHandler< 2 >&,
 const Function< 2 >&,
  BlockVector<double> &);
 template
 void interpolate
 (const hp::DoFHandler< 2 >&,
 const Function< 2 >&,
  BlockVector<double> &);

 template
 void interpolate
 (const DoFHandler< 2 >&,
 const DoFHandler< 2 >&,
 const FullMatrix<double>&,
 const  BlockVector<double> &,
  BlockVector<double> &);
 }
#endif
 
#if  3  ==  1 

 namespace VectorTools {

 template
 void interpolate
 (const Mapping< 3 >&,
 const hp::DoFHandler< 3 >&,
 const Function< 3 >&,
  BlockVector<double> &);
 template
 void interpolate
 (const hp::DoFHandler< 3 >&,
 const Function< 3 >&,
  BlockVector<double> &);

 template
 void interpolate
 (const DoFHandler< 3 >&,
 const DoFHandler< 3 >&,
 const FullMatrix<double>&,
 const  BlockVector<double> &,
  BlockVector<double> &);
 }
#endif
 
#if  3  ==  2 

 namespace VectorTools {

 template
 void interpolate
 (const Mapping< 3 >&,
 const hp::DoFHandler< 3 >&,
 const Function< 3 >&,
  BlockVector<double> &);
 template
 void interpolate
 (const hp::DoFHandler< 3 >&,
 const Function< 3 >&,
  BlockVector<double> &);

 template
 void interpolate
 (const DoFHandler< 3 >&,
 const DoFHandler< 3 >&,
 const FullMatrix<double>&,
 const  BlockVector<double> &,
  BlockVector<double> &);
 }
#endif
 
#if  3  ==  3 

 namespace VectorTools {

 template
 void interpolate
 (const Mapping< 3 >&,
 const hp::DoFHandler< 3 >&,
 const Function< 3 >&,
  BlockVector<double> &);
 template
 void interpolate
 (const hp::DoFHandler< 3 >&,
 const Function< 3 >&,
  BlockVector<double> &);

 template
 void interpolate
 (const DoFHandler< 3 >&,
 const DoFHandler< 3 >&,
 const FullMatrix<double>&,
 const  BlockVector<double> &,
  BlockVector<double> &);
 }
#endif
 
#if  1  ==  1 

 namespace VectorTools {

 template
 void interpolate
 (const Mapping< 1 >&,
 const hp::DoFHandler< 1 >&,
 const Function< 1 >&,
  BlockVector<float> &);
 template
 void interpolate
 (const hp::DoFHandler< 1 >&,
 const Function< 1 >&,
  BlockVector<float> &);

 template
 void interpolate
 (const DoFHandler< 1 >&,
 const DoFHandler< 1 >&,
 const FullMatrix<double>&,
 const  BlockVector<float> &,
  BlockVector<float> &);
 }
#endif
 
#if  1  ==  2 

 namespace VectorTools {

 template
 void interpolate
 (const Mapping< 1 >&,
 const hp::DoFHandler< 1 >&,
 const Function< 1 >&,
  BlockVector<float> &);
 template
 void interpolate
 (const hp::DoFHandler< 1 >&,
 const Function< 1 >&,
  BlockVector<float> &);

 template
 void interpolate
 (const DoFHandler< 1 >&,
 const DoFHandler< 1 >&,
 const FullMatrix<double>&,
 const  BlockVector<float> &,
  BlockVector<float> &);
 }
#endif
 
#if  1  ==  3 

 namespace VectorTools {

 template
 void interpolate
 (const Mapping< 1 >&,
 const hp::DoFHandler< 1 >&,
 const Function< 1 >&,
  BlockVector<float> &);
 template
 void interpolate
 (const hp::DoFHandler< 1 >&,
 const Function< 1 >&,
  BlockVector<float> &);

 template
 void interpolate
 (const DoFHandler< 1 >&,
 const DoFHandler< 1 >&,
 const FullMatrix<double>&,
 const  BlockVector<float> &,
  BlockVector<float> &);
 }
#endif
 
#if  2  ==  1 

 namespace VectorTools {

 template
 void interpolate
 (const Mapping< 2 >&,
 const hp::DoFHandler< 2 >&,
 const Function< 2 >&,
  BlockVector<float> &);
 template
 void interpolate
 (const hp::DoFHandler< 2 >&,
 const Function< 2 >&,
  BlockVector<float> &);

 template
 void interpolate
 (const DoFHandler< 2 >&,
 const DoFHandler< 2 >&,
 const FullMatrix<double>&,
 const  BlockVector<float> &,
  BlockVector<float> &);
 }
#endif
 
#if  2  ==  2 

 namespace VectorTools {

 template
 void interpolate
 (const Mapping< 2 >&,
 const hp::DoFHandler< 2 >&,
 const Function< 2 >&,
  BlockVector<float> &);
 template
 void interpolate
 (const hp::DoFHandler< 2 >&,
 const Function< 2 >&,
  BlockVector<float> &);

 template
 void interpolate
 (const DoFHandler< 2 >&,
 const DoFHandler< 2 >&,
 const FullMatrix<double>&,
 const  BlockVector<float> &,
  BlockVector<float> &);
 }
#endif
 
#if  2  ==  3 

 namespace VectorTools {

 template
 void interpolate
 (const Mapping< 2 >&,
 const hp::DoFHandler< 2 >&,
 const Function< 2 >&,
  BlockVector<float> &);
 template
 void interpolate
 (const hp::DoFHandler< 2 >&,
 const Function< 2 >&,
  BlockVector<float> &);

 template
 void interpolate
 (const DoFHandler< 2 >&,
 const DoFHandler< 2 >&,
 const FullMatrix<double>&,
 const  BlockVector<float> &,
  BlockVector<float> &);
 }
#endif
 
#if  3  ==  1 

 namespace VectorTools {

 template
 void interpolate
 (const Mapping< 3 >&,
 const hp::DoFHandler< 3 >&,
 const Function< 3 >&,
  BlockVector<float> &);
 template
 void interpolate
 (const hp::DoFHandler< 3 >&,
 const Function< 3 >&,
  BlockVector<float> &);

 template
 void interpolate
 (const DoFHandler< 3 >&,
 const DoFHandler< 3 >&,
 const FullMatrix<double>&,
 const  BlockVector<float> &,
  BlockVector<float> &);
 }
#endif
 
#if  3  ==  2 

 namespace VectorTools {

 template
 void interpolate
 (const Mapping< 3 >&,
 const hp::DoFHandler< 3 >&,
 const Function< 3 >&,
  BlockVector<float> &);
 template
 void interpolate
 (const hp::DoFHandler< 3 >&,
 const Function< 3 >&,
  BlockVector<float> &);

 template
 void interpolate
 (const DoFHandler< 3 >&,
 const DoFHandler< 3 >&,
 const FullMatrix<double>&,
 const  BlockVector<float> &,
  BlockVector<float> &);
 }
#endif
 
#if  3  ==  3 

 namespace VectorTools {

 template
 void interpolate
 (const Mapping< 3 >&,
 const hp::DoFHandler< 3 >&,
 const Function< 3 >&,
  BlockVector<float> &);
 template
 void interpolate
 (const hp::DoFHandler< 3 >&,
 const Function< 3 >&,
  BlockVector<float> &);

 template
 void interpolate
 (const DoFHandler< 3 >&,
 const DoFHandler< 3 >&,
 const FullMatrix<double>&,
 const  BlockVector<float> &,
  BlockVector<float> &);
 }
#endif
 
#if  1  ==  1 

 namespace VectorTools {

 template
 void interpolate
 (const Mapping< 1 >&,
 const hp::DoFHandler< 1 >&,
 const Function< 1 >&,
  BlockVector<long double> &);
 template
 void interpolate
 (const hp::DoFHandler< 1 >&,
 const Function< 1 >&,
  BlockVector<long double> &);

 template
 void interpolate
 (const DoFHandler< 1 >&,
 const DoFHandler< 1 >&,
 const FullMatrix<double>&,
 const  BlockVector<long double> &,
  BlockVector<long double> &);
 }
#endif
 
#if  1  ==  2 

 namespace VectorTools {

 template
 void interpolate
 (const Mapping< 1 >&,
 const hp::DoFHandler< 1 >&,
 const Function< 1 >&,
  BlockVector<long double> &);
 template
 void interpolate
 (const hp::DoFHandler< 1 >&,
 const Function< 1 >&,
  BlockVector<long double> &);

 template
 void interpolate
 (const DoFHandler< 1 >&,
 const DoFHandler< 1 >&,
 const FullMatrix<double>&,
 const  BlockVector<long double> &,
  BlockVector<long double> &);
 }
#endif
 
#if  1  ==  3 

 namespace VectorTools {

 template
 void interpolate
 (const Mapping< 1 >&,
 const hp::DoFHandler< 1 >&,
 const Function< 1 >&,
  BlockVector<long double> &);
 template
 void interpolate
 (const hp::DoFHandler< 1 >&,
 const Function< 1 >&,
  BlockVector<long double> &);

 template
 void interpolate
 (const DoFHandler< 1 >&,
 const DoFHandler< 1 >&,
 const FullMatrix<double>&,
 const  BlockVector<long double> &,
  BlockVector<long double> &);
 }
#endif
 
#if  2  ==  1 

 namespace VectorTools {

 template
 void interpolate
 (const Mapping< 2 >&,
 const hp::DoFHandler< 2 >&,
 const Function< 2 >&,
  BlockVector<long double> &);
 template
 void interpolate
 (const hp::DoFHandler< 2 >&,
 const Function< 2 >&,
  BlockVector<long double> &);

 template
 void interpolate
 (const DoFHandler< 2 >&,
 const DoFHandler< 2 >&,
 const FullMatrix<double>&,
 const  BlockVector<long double> &,
  BlockVector<long double> &);
 }
#endif
 
#if  2  ==  2 

 namespace VectorTools {

 template
 void interpolate
 (const Mapping< 2 >&,
 const hp::DoFHandler< 2 >&,
 const Function< 2 >&,
  BlockVector<long double> &);
 template
 void interpolate
 (const hp::DoFHandler< 2 >&,
 const Function< 2 >&,
  BlockVector<long double> &);

 template
 void interpolate
 (const DoFHandler< 2 >&,
 const DoFHandler< 2 >&,
 const FullMatrix<double>&,
 const  BlockVector<long double> &,
  BlockVector<long double> &);
 }
#endif
 
#if  2  ==  3 

 namespace VectorTools {

 template
 void interpolate
 (const Mapping< 2 >&,
 const hp::DoFHandler< 2 >&,
 const Function< 2 >&,
  BlockVector<long double> &);
 template
 void interpolate
 (const hp::DoFHandler< 2 >&,
 const Function< 2 >&,
  BlockVector<long double> &);

 template
 void interpolate
 (const DoFHandler< 2 >&,
 const DoFHandler< 2 >&,
 const FullMatrix<double>&,
 const  BlockVector<long double> &,
  BlockVector<long double> &);
 }
#endif
 
#if  3  ==  1 

 namespace VectorTools {

 template
 void interpolate
 (const Mapping< 3 >&,
 const hp::DoFHandler< 3 >&,
 const Function< 3 >&,
  BlockVector<long double> &);
 template
 void interpolate
 (const hp::DoFHandler< 3 >&,
 const Function< 3 >&,
  BlockVector<long double> &);

 template
 void interpolate
 (const DoFHandler< 3 >&,
 const DoFHandler< 3 >&,
 const FullMatrix<double>&,
 const  BlockVector<long double> &,
  BlockVector<long double> &);
 }
#endif
 
#if  3  ==  2 

 namespace VectorTools {

 template
 void interpolate
 (const Mapping< 3 >&,
 const hp::DoFHandler< 3 >&,
 const Function< 3 >&,
  BlockVector<long double> &);
 template
 void interpolate
 (const hp::DoFHandler< 3 >&,
 const Function< 3 >&,
  BlockVector<long double> &);

 template
 void interpolate
 (const DoFHandler< 3 >&,
 const DoFHandler< 3 >&,
 const FullMatrix<double>&,
 const  BlockVector<long double> &,
  BlockVector<long double> &);
 }
#endif
 
#if  3  ==  3 

 namespace VectorTools {

 template
 void interpolate
 (const Mapping< 3 >&,
 const hp::DoFHandler< 3 >&,
 const Function< 3 >&,
  BlockVector<long double> &);
 template
 void interpolate
 (const hp::DoFHandler< 3 >&,
 const Function< 3 >&,
  BlockVector<long double> &);

 template
 void interpolate
 (const DoFHandler< 3 >&,
 const DoFHandler< 3 >&,
 const FullMatrix<double>&,
 const  BlockVector<long double> &,
  BlockVector<long double> &);
 }
#endif
 
#if  1  ==  1 

 namespace VectorTools {

 template
 void interpolate
 (const Mapping< 1 >&,
 const hp::DoFHandler< 1 >&,
 const Function< 1 >&,
  parallel::distributed::Vector<double> &);
 template
 void interpolate
 (const hp::DoFHandler< 1 >&,
 const Function< 1 >&,
  parallel::distributed::Vector<double> &);

 template
 void interpolate
 (const DoFHandler< 1 >&,
 const DoFHandler< 1 >&,
 const FullMatrix<double>&,
 const  parallel::distributed::Vector<double> &,
  parallel::distributed::Vector<double> &);
 }
#endif
 
#if  1  ==  2 

 namespace VectorTools {

 template
 void interpolate
 (const Mapping< 1 >&,
 const hp::DoFHandler< 1 >&,
 const Function< 1 >&,
  parallel::distributed::Vector<double> &);
 template
 void interpolate
 (const hp::DoFHandler< 1 >&,
 const Function< 1 >&,
  parallel::distributed::Vector<double> &);

 template
 void interpolate
 (const DoFHandler< 1 >&,
 const DoFHandler< 1 >&,
 const FullMatrix<double>&,
 const  parallel::distributed::Vector<double> &,
  parallel::distributed::Vector<double> &);
 }
#endif
 
#if  1  ==  3 

 namespace VectorTools {

 template
 void interpolate
 (const Mapping< 1 >&,
 const hp::DoFHandler< 1 >&,
 const Function< 1 >&,
  parallel::distributed::Vector<double> &);
 template
 void interpolate
 (const hp::DoFHandler< 1 >&,
 const Function< 1 >&,
  parallel::distributed::Vector<double> &);

 template
 void interpolate
 (const DoFHandler< 1 >&,
 const DoFHandler< 1 >&,
 const FullMatrix<double>&,
 const  parallel::distributed::Vector<double> &,
  parallel::distributed::Vector<double> &);
 }
#endif
 
#if  2  ==  1 

 namespace VectorTools {

 template
 void interpolate
 (const Mapping< 2 >&,
 const hp::DoFHandler< 2 >&,
 const Function< 2 >&,
  parallel::distributed::Vector<double> &);
 template
 void interpolate
 (const hp::DoFHandler< 2 >&,
 const Function< 2 >&,
  parallel::distributed::Vector<double> &);

 template
 void interpolate
 (const DoFHandler< 2 >&,
 const DoFHandler< 2 >&,
 const FullMatrix<double>&,
 const  parallel::distributed::Vector<double> &,
  parallel::distributed::Vector<double> &);
 }
#endif
 
#if  2  ==  2 

 namespace VectorTools {

 template
 void interpolate
 (const Mapping< 2 >&,
 const hp::DoFHandler< 2 >&,
 const Function< 2 >&,
  parallel::distributed::Vector<double> &);
 template
 void interpolate
 (const hp::DoFHandler< 2 >&,
 const Function< 2 >&,
  parallel::distributed::Vector<double> &);

 template
 void interpolate
 (const DoFHandler< 2 >&,
 const DoFHandler< 2 >&,
 const FullMatrix<double>&,
 const  parallel::distributed::Vector<double> &,
  parallel::distributed::Vector<double> &);
 }
#endif
 
#if  2  ==  3 

 namespace VectorTools {

 template
 void interpolate
 (const Mapping< 2 >&,
 const hp::DoFHandler< 2 >&,
 const Function< 2 >&,
  parallel::distributed::Vector<double> &);
 template
 void interpolate
 (const hp::DoFHandler< 2 >&,
 const Function< 2 >&,
  parallel::distributed::Vector<double> &);

 template
 void interpolate
 (const DoFHandler< 2 >&,
 const DoFHandler< 2 >&,
 const FullMatrix<double>&,
 const  parallel::distributed::Vector<double> &,
  parallel::distributed::Vector<double> &);
 }
#endif
 
#if  3  ==  1 

 namespace VectorTools {

 template
 void interpolate
 (const Mapping< 3 >&,
 const hp::DoFHandler< 3 >&,
 const Function< 3 >&,
  parallel::distributed::Vector<double> &);
 template
 void interpolate
 (const hp::DoFHandler< 3 >&,
 const Function< 3 >&,
  parallel::distributed::Vector<double> &);

 template
 void interpolate
 (const DoFHandler< 3 >&,
 const DoFHandler< 3 >&,
 const FullMatrix<double>&,
 const  parallel::distributed::Vector<double> &,
  parallel::distributed::Vector<double> &);
 }
#endif
 
#if  3  ==  2 

 namespace VectorTools {

 template
 void interpolate
 (const Mapping< 3 >&,
 const hp::DoFHandler< 3 >&,
 const Function< 3 >&,
  parallel::distributed::Vector<double> &);
 template
 void interpolate
 (const hp::DoFHandler< 3 >&,
 const Function< 3 >&,
  parallel::distributed::Vector<double> &);

 template
 void interpolate
 (const DoFHandler< 3 >&,
 const DoFHandler< 3 >&,
 const FullMatrix<double>&,
 const  parallel::distributed::Vector<double> &,
  parallel::distributed::Vector<double> &);
 }
#endif
 
#if  3  ==  3 

 namespace VectorTools {

 template
 void interpolate
 (const Mapping< 3 >&,
 const hp::DoFHandler< 3 >&,
 const Function< 3 >&,
  parallel::distributed::Vector<double> &);
 template
 void interpolate
 (const hp::DoFHandler< 3 >&,
 const Function< 3 >&,
  parallel::distributed::Vector<double> &);

 template
 void interpolate
 (const DoFHandler< 3 >&,
 const DoFHandler< 3 >&,
 const FullMatrix<double>&,
 const  parallel::distributed::Vector<double> &,
  parallel::distributed::Vector<double> &);
 }
#endif
 
#if  1  ==  1 

 namespace VectorTools {

 template
 void interpolate
 (const Mapping< 1 >&,
 const hp::DoFHandler< 1 >&,
 const Function< 1 >&,
  parallel::distributed::Vector<float> &);
 template
 void interpolate
 (const hp::DoFHandler< 1 >&,
 const Function< 1 >&,
  parallel::distributed::Vector<float> &);

 template
 void interpolate
 (const DoFHandler< 1 >&,
 const DoFHandler< 1 >&,
 const FullMatrix<double>&,
 const  parallel::distributed::Vector<float> &,
  parallel::distributed::Vector<float> &);
 }
#endif
 
#if  1  ==  2 

 namespace VectorTools {

 template
 void interpolate
 (const Mapping< 1 >&,
 const hp::DoFHandler< 1 >&,
 const Function< 1 >&,
  parallel::distributed::Vector<float> &);
 template
 void interpolate
 (const hp::DoFHandler< 1 >&,
 const Function< 1 >&,
  parallel::distributed::Vector<float> &);

 template
 void interpolate
 (const DoFHandler< 1 >&,
 const DoFHandler< 1 >&,
 const FullMatrix<double>&,
 const  parallel::distributed::Vector<float> &,
  parallel::distributed::Vector<float> &);
 }
#endif
 
#if  1  ==  3 

 namespace VectorTools {

 template
 void interpolate
 (const Mapping< 1 >&,
 const hp::DoFHandler< 1 >&,
 const Function< 1 >&,
  parallel::distributed::Vector<float> &);
 template
 void interpolate
 (const hp::DoFHandler< 1 >&,
 const Function< 1 >&,
  parallel::distributed::Vector<float> &);

 template
 void interpolate
 (const DoFHandler< 1 >&,
 const DoFHandler< 1 >&,
 const FullMatrix<double>&,
 const  parallel::distributed::Vector<float> &,
  parallel::distributed::Vector<float> &);
 }
#endif
 
#if  2  ==  1 

 namespace VectorTools {

 template
 void interpolate
 (const Mapping< 2 >&,
 const hp::DoFHandler< 2 >&,
 const Function< 2 >&,
  parallel::distributed::Vector<float> &);
 template
 void interpolate
 (const hp::DoFHandler< 2 >&,
 const Function< 2 >&,
  parallel::distributed::Vector<float> &);

 template
 void interpolate
 (const DoFHandler< 2 >&,
 const DoFHandler< 2 >&,
 const FullMatrix<double>&,
 const  parallel::distributed::Vector<float> &,
  parallel::distributed::Vector<float> &);
 }
#endif
 
#if  2  ==  2 

 namespace VectorTools {

 template
 void interpolate
 (const Mapping< 2 >&,
 const hp::DoFHandler< 2 >&,
 const Function< 2 >&,
  parallel::distributed::Vector<float> &);
 template
 void interpolate
 (const hp::DoFHandler< 2 >&,
 const Function< 2 >&,
  parallel::distributed::Vector<float> &);

 template
 void interpolate
 (const DoFHandler< 2 >&,
 const DoFHandler< 2 >&,
 const FullMatrix<double>&,
 const  parallel::distributed::Vector<float> &,
  parallel::distributed::Vector<float> &);
 }
#endif
 
#if  2  ==  3 

 namespace VectorTools {

 template
 void interpolate
 (const Mapping< 2 >&,
 const hp::DoFHandler< 2 >&,
 const Function< 2 >&,
  parallel::distributed::Vector<float> &);
 template
 void interpolate
 (const hp::DoFHandler< 2 >&,
 const Function< 2 >&,
  parallel::distributed::Vector<float> &);

 template
 void interpolate
 (const DoFHandler< 2 >&,
 const DoFHandler< 2 >&,
 const FullMatrix<double>&,
 const  parallel::distributed::Vector<float> &,
  parallel::distributed::Vector<float> &);
 }
#endif
 
#if  3  ==  1 

 namespace VectorTools {

 template
 void interpolate
 (const Mapping< 3 >&,
 const hp::DoFHandler< 3 >&,
 const Function< 3 >&,
  parallel::distributed::Vector<float> &);
 template
 void interpolate
 (const hp::DoFHandler< 3 >&,
 const Function< 3 >&,
  parallel::distributed::Vector<float> &);

 template
 void interpolate
 (const DoFHandler< 3 >&,
 const DoFHandler< 3 >&,
 const FullMatrix<double>&,
 const  parallel::distributed::Vector<float> &,
  parallel::distributed::Vector<float> &);
 }
#endif
 
#if  3  ==  2 

 namespace VectorTools {

 template
 void interpolate
 (const Mapping< 3 >&,
 const hp::DoFHandler< 3 >&,
 const Function< 3 >&,
  parallel::distributed::Vector<float> &);
 template
 void interpolate
 (const hp::DoFHandler< 3 >&,
 const Function< 3 >&,
  parallel::distributed::Vector<float> &);

 template
 void interpolate
 (const DoFHandler< 3 >&,
 const DoFHandler< 3 >&,
 const FullMatrix<double>&,
 const  parallel::distributed::Vector<float> &,
  parallel::distributed::Vector<float> &);
 }
#endif
 
#if  3  ==  3 

 namespace VectorTools {

 template
 void interpolate
 (const Mapping< 3 >&,
 const hp::DoFHandler< 3 >&,
 const Function< 3 >&,
  parallel::distributed::Vector<float> &);
 template
 void interpolate
 (const hp::DoFHandler< 3 >&,
 const Function< 3 >&,
  parallel::distributed::Vector<float> &);

 template
 void interpolate
 (const DoFHandler< 3 >&,
 const DoFHandler< 3 >&,
 const FullMatrix<double>&,
 const  parallel::distributed::Vector<float> &,
  parallel::distributed::Vector<float> &);
 }
#endif
 
#if  1  ==  1 

 namespace VectorTools {

 template
 void interpolate
 (const Mapping< 1 >&,
 const hp::DoFHandler< 1 >&,
 const Function< 1 >&,
  parallel::distributed::Vector<long double> &);
 template
 void interpolate
 (const hp::DoFHandler< 1 >&,
 const Function< 1 >&,
  parallel::distributed::Vector<long double> &);

 template
 void interpolate
 (const DoFHandler< 1 >&,
 const DoFHandler< 1 >&,
 const FullMatrix<double>&,
 const  parallel::distributed::Vector<long double> &,
  parallel::distributed::Vector<long double> &);
 }
#endif
 
#if  1  ==  2 

 namespace VectorTools {

 template
 void interpolate
 (const Mapping< 1 >&,
 const hp::DoFHandler< 1 >&,
 const Function< 1 >&,
  parallel::distributed::Vector<long double> &);
 template
 void interpolate
 (const hp::DoFHandler< 1 >&,
 const Function< 1 >&,
  parallel::distributed::Vector<long double> &);

 template
 void interpolate
 (const DoFHandler< 1 >&,
 const DoFHandler< 1 >&,
 const FullMatrix<double>&,
 const  parallel::distributed::Vector<long double> &,
  parallel::distributed::Vector<long double> &);
 }
#endif
 
#if  1  ==  3 

 namespace VectorTools {

 template
 void interpolate
 (const Mapping< 1 >&,
 const hp::DoFHandler< 1 >&,
 const Function< 1 >&,
  parallel::distributed::Vector<long double> &);
 template
 void interpolate
 (const hp::DoFHandler< 1 >&,
 const Function< 1 >&,
  parallel::distributed::Vector<long double> &);

 template
 void interpolate
 (const DoFHandler< 1 >&,
 const DoFHandler< 1 >&,
 const FullMatrix<double>&,
 const  parallel::distributed::Vector<long double> &,
  parallel::distributed::Vector<long double> &);
 }
#endif
 
#if  2  ==  1 

 namespace VectorTools {

 template
 void interpolate
 (const Mapping< 2 >&,
 const hp::DoFHandler< 2 >&,
 const Function< 2 >&,
  parallel::distributed::Vector<long double> &);
 template
 void interpolate
 (const hp::DoFHandler< 2 >&,
 const Function< 2 >&,
  parallel::distributed::Vector<long double> &);

 template
 void interpolate
 (const DoFHandler< 2 >&,
 const DoFHandler< 2 >&,
 const FullMatrix<double>&,
 const  parallel::distributed::Vector<long double> &,
  parallel::distributed::Vector<long double> &);
 }
#endif
 
#if  2  ==  2 

 namespace VectorTools {

 template
 void interpolate
 (const Mapping< 2 >&,
 const hp::DoFHandler< 2 >&,
 const Function< 2 >&,
  parallel::distributed::Vector<long double> &);
 template
 void interpolate
 (const hp::DoFHandler< 2 >&,
 const Function< 2 >&,
  parallel::distributed::Vector<long double> &);

 template
 void interpolate
 (const DoFHandler< 2 >&,
 const DoFHandler< 2 >&,
 const FullMatrix<double>&,
 const  parallel::distributed::Vector<long double> &,
  parallel::distributed::Vector<long double> &);
 }
#endif
 
#if  2  ==  3 

 namespace VectorTools {

 template
 void interpolate
 (const Mapping< 2 >&,
 const hp::DoFHandler< 2 >&,
 const Function< 2 >&,
  parallel::distributed::Vector<long double> &);
 template
 void interpolate
 (const hp::DoFHandler< 2 >&,
 const Function< 2 >&,
  parallel::distributed::Vector<long double> &);

 template
 void interpolate
 (const DoFHandler< 2 >&,
 const DoFHandler< 2 >&,
 const FullMatrix<double>&,
 const  parallel::distributed::Vector<long double> &,
  parallel::distributed::Vector<long double> &);
 }
#endif
 
#if  3  ==  1 

 namespace VectorTools {

 template
 void interpolate
 (const Mapping< 3 >&,
 const hp::DoFHandler< 3 >&,
 const Function< 3 >&,
  parallel::distributed::Vector<long double> &);
 template
 void interpolate
 (const hp::DoFHandler< 3 >&,
 const Function< 3 >&,
  parallel::distributed::Vector<long double> &);

 template
 void interpolate
 (const DoFHandler< 3 >&,
 const DoFHandler< 3 >&,
 const FullMatrix<double>&,
 const  parallel::distributed::Vector<long double> &,
  parallel::distributed::Vector<long double> &);
 }
#endif
 
#if  3  ==  2 

 namespace VectorTools {

 template
 void interpolate
 (const Mapping< 3 >&,
 const hp::DoFHandler< 3 >&,
 const Function< 3 >&,
  parallel::distributed::Vector<long double> &);
 template
 void interpolate
 (const hp::DoFHandler< 3 >&,
 const Function< 3 >&,
  parallel::distributed::Vector<long double> &);

 template
 void interpolate
 (const DoFHandler< 3 >&,
 const DoFHandler< 3 >&,
 const FullMatrix<double>&,
 const  parallel::distributed::Vector<long double> &,
  parallel::distributed::Vector<long double> &);
 }
#endif
 
#if  3  ==  3 

 namespace VectorTools {

 template
 void interpolate
 (const Mapping< 3 >&,
 const hp::DoFHandler< 3 >&,
 const Function< 3 >&,
  parallel::distributed::Vector<long double> &);
 template
 void interpolate
 (const hp::DoFHandler< 3 >&,
 const Function< 3 >&,
  parallel::distributed::Vector<long double> &);

 template
 void interpolate
 (const DoFHandler< 3 >&,
 const DoFHandler< 3 >&,
 const FullMatrix<double>&,
 const  parallel::distributed::Vector<long double> &,
  parallel::distributed::Vector<long double> &);
 }
#endif
 
#if  1  ==  1 

 namespace VectorTools {

 template
 void interpolate
 (const Mapping< 1 >&,
 const hp::DoFHandler< 1 >&,
 const Function< 1 >&,
  parallel::distributed::BlockVector<double> &);
 template
 void interpolate
 (const hp::DoFHandler< 1 >&,
 const Function< 1 >&,
  parallel::distributed::BlockVector<double> &);

 template
 void interpolate
 (const DoFHandler< 1 >&,
 const DoFHandler< 1 >&,
 const FullMatrix<double>&,
 const  parallel::distributed::BlockVector<double> &,
  parallel::distributed::BlockVector<double> &);
 }
#endif
 
#if  1  ==  2 

 namespace VectorTools {

 template
 void interpolate
 (const Mapping< 1 >&,
 const hp::DoFHandler< 1 >&,
 const Function< 1 >&,
  parallel::distributed::BlockVector<double> &);
 template
 void interpolate
 (const hp::DoFHandler< 1 >&,
 const Function< 1 >&,
  parallel::distributed::BlockVector<double> &);

 template
 void interpolate
 (const DoFHandler< 1 >&,
 const DoFHandler< 1 >&,
 const FullMatrix<double>&,
 const  parallel::distributed::BlockVector<double> &,
  parallel::distributed::BlockVector<double> &);
 }
#endif
 
#if  1  ==  3 

 namespace VectorTools {

 template
 void interpolate
 (const Mapping< 1 >&,
 const hp::DoFHandler< 1 >&,
 const Function< 1 >&,
  parallel::distributed::BlockVector<double> &);
 template
 void interpolate
 (const hp::DoFHandler< 1 >&,
 const Function< 1 >&,
  parallel::distributed::BlockVector<double> &);

 template
 void interpolate
 (const DoFHandler< 1 >&,
 const DoFHandler< 1 >&,
 const FullMatrix<double>&,
 const  parallel::distributed::BlockVector<double> &,
  parallel::distributed::BlockVector<double> &);
 }
#endif
 
#if  2  ==  1 

 namespace VectorTools {

 template
 void interpolate
 (const Mapping< 2 >&,
 const hp::DoFHandler< 2 >&,
 const Function< 2 >&,
  parallel::distributed::BlockVector<double> &);
 template
 void interpolate
 (const hp::DoFHandler< 2 >&,
 const Function< 2 >&,
  parallel::distributed::BlockVector<double> &);

 template
 void interpolate
 (const DoFHandler< 2 >&,
 const DoFHandler< 2 >&,
 const FullMatrix<double>&,
 const  parallel::distributed::BlockVector<double> &,
  parallel::distributed::BlockVector<double> &);
 }
#endif
 
#if  2  ==  2 

 namespace VectorTools {

 template
 void interpolate
 (const Mapping< 2 >&,
 const hp::DoFHandler< 2 >&,
 const Function< 2 >&,
  parallel::distributed::BlockVector<double> &);
 template
 void interpolate
 (const hp::DoFHandler< 2 >&,
 const Function< 2 >&,
  parallel::distributed::BlockVector<double> &);

 template
 void interpolate
 (const DoFHandler< 2 >&,
 const DoFHandler< 2 >&,
 const FullMatrix<double>&,
 const  parallel::distributed::BlockVector<double> &,
  parallel::distributed::BlockVector<double> &);
 }
#endif
 
#if  2  ==  3 

 namespace VectorTools {

 template
 void interpolate
 (const Mapping< 2 >&,
 const hp::DoFHandler< 2 >&,
 const Function< 2 >&,
  parallel::distributed::BlockVector<double> &);
 template
 void interpolate
 (const hp::DoFHandler< 2 >&,
 const Function< 2 >&,
  parallel::distributed::BlockVector<double> &);

 template
 void interpolate
 (const DoFHandler< 2 >&,
 const DoFHandler< 2 >&,
 const FullMatrix<double>&,
 const  parallel::distributed::BlockVector<double> &,
  parallel::distributed::BlockVector<double> &);
 }
#endif
 
#if  3  ==  1 

 namespace VectorTools {

 template
 void interpolate
 (const Mapping< 3 >&,
 const hp::DoFHandler< 3 >&,
 const Function< 3 >&,
  parallel::distributed::BlockVector<double> &);
 template
 void interpolate
 (const hp::DoFHandler< 3 >&,
 const Function< 3 >&,
  parallel::distributed::BlockVector<double> &);

 template
 void interpolate
 (const DoFHandler< 3 >&,
 const DoFHandler< 3 >&,
 const FullMatrix<double>&,
 const  parallel::distributed::BlockVector<double> &,
  parallel::distributed::BlockVector<double> &);
 }
#endif
 
#if  3  ==  2 

 namespace VectorTools {

 template
 void interpolate
 (const Mapping< 3 >&,
 const hp::DoFHandler< 3 >&,
 const Function< 3 >&,
  parallel::distributed::BlockVector<double> &);
 template
 void interpolate
 (const hp::DoFHandler< 3 >&,
 const Function< 3 >&,
  parallel::distributed::BlockVector<double> &);

 template
 void interpolate
 (const DoFHandler< 3 >&,
 const DoFHandler< 3 >&,
 const FullMatrix<double>&,
 const  parallel::distributed::BlockVector<double> &,
  parallel::distributed::BlockVector<double> &);
 }
#endif
 
#if  3  ==  3 

 namespace VectorTools {

 template
 void interpolate
 (const Mapping< 3 >&,
 const hp::DoFHandler< 3 >&,
 const Function< 3 >&,
  parallel::distributed::BlockVector<double> &);
 template
 void interpolate
 (const hp::DoFHandler< 3 >&,
 const Function< 3 >&,
  parallel::distributed::BlockVector<double> &);

 template
 void interpolate
 (const DoFHandler< 3 >&,
 const DoFHandler< 3 >&,
 const FullMatrix<double>&,
 const  parallel::distributed::BlockVector<double> &,
  parallel::distributed::BlockVector<double> &);
 }
#endif
 
#if  1  ==  1 

 namespace VectorTools {

 template
 void interpolate
 (const Mapping< 1 >&,
 const hp::DoFHandler< 1 >&,
 const Function< 1 >&,
  parallel::distributed::BlockVector<float> &);
 template
 void interpolate
 (const hp::DoFHandler< 1 >&,
 const Function< 1 >&,
  parallel::distributed::BlockVector<float> &);

 template
 void interpolate
 (const DoFHandler< 1 >&,
 const DoFHandler< 1 >&,
 const FullMatrix<double>&,
 const  parallel::distributed::BlockVector<float> &,
  parallel::distributed::BlockVector<float> &);
 }
#endif
 
#if  1  ==  2 

 namespace VectorTools {

 template
 void interpolate
 (const Mapping< 1 >&,
 const hp::DoFHandler< 1 >&,
 const Function< 1 >&,
  parallel::distributed::BlockVector<float> &);
 template
 void interpolate
 (const hp::DoFHandler< 1 >&,
 const Function< 1 >&,
  parallel::distributed::BlockVector<float> &);

 template
 void interpolate
 (const DoFHandler< 1 >&,
 const DoFHandler< 1 >&,
 const FullMatrix<double>&,
 const  parallel::distributed::BlockVector<float> &,
  parallel::distributed::BlockVector<float> &);
 }
#endif
 
#if  1  ==  3 

 namespace VectorTools {

 template
 void interpolate
 (const Mapping< 1 >&,
 const hp::DoFHandler< 1 >&,
 const Function< 1 >&,
  parallel::distributed::BlockVector<float> &);
 template
 void interpolate
 (const hp::DoFHandler< 1 >&,
 const Function< 1 >&,
  parallel::distributed::BlockVector<float> &);

 template
 void interpolate
 (const DoFHandler< 1 >&,
 const DoFHandler< 1 >&,
 const FullMatrix<double>&,
 const  parallel::distributed::BlockVector<float> &,
  parallel::distributed::BlockVector<float> &);
 }
#endif
 
#if  2  ==  1 

 namespace VectorTools {

 template
 void interpolate
 (const Mapping< 2 >&,
 const hp::DoFHandler< 2 >&,
 const Function< 2 >&,
  parallel::distributed::BlockVector<float> &);
 template
 void interpolate
 (const hp::DoFHandler< 2 >&,
 const Function< 2 >&,
  parallel::distributed::BlockVector<float> &);

 template
 void interpolate
 (const DoFHandler< 2 >&,
 const DoFHandler< 2 >&,
 const FullMatrix<double>&,
 const  parallel::distributed::BlockVector<float> &,
  parallel::distributed::BlockVector<float> &);
 }
#endif
 
#if  2  ==  2 

 namespace VectorTools {

 template
 void interpolate
 (const Mapping< 2 >&,
 const hp::DoFHandler< 2 >&,
 const Function< 2 >&,
  parallel::distributed::BlockVector<float> &);
 template
 void interpolate
 (const hp::DoFHandler< 2 >&,
 const Function< 2 >&,
  parallel::distributed::BlockVector<float> &);

 template
 void interpolate
 (const DoFHandler< 2 >&,
 const DoFHandler< 2 >&,
 const FullMatrix<double>&,
 const  parallel::distributed::BlockVector<float> &,
  parallel::distributed::BlockVector<float> &);
 }
#endif
 
#if  2  ==  3 

 namespace VectorTools {

 template
 void interpolate
 (const Mapping< 2 >&,
 const hp::DoFHandler< 2 >&,
 const Function< 2 >&,
  parallel::distributed::BlockVector<float> &);
 template
 void interpolate
 (const hp::DoFHandler< 2 >&,
 const Function< 2 >&,
  parallel::distributed::BlockVector<float> &);

 template
 void interpolate
 (const DoFHandler< 2 >&,
 const DoFHandler< 2 >&,
 const FullMatrix<double>&,
 const  parallel::distributed::BlockVector<float> &,
  parallel::distributed::BlockVector<float> &);
 }
#endif
 
#if  3  ==  1 

 namespace VectorTools {

 template
 void interpolate
 (const Mapping< 3 >&,
 const hp::DoFHandler< 3 >&,
 const Function< 3 >&,
  parallel::distributed::BlockVector<float> &);
 template
 void interpolate
 (const hp::DoFHandler< 3 >&,
 const Function< 3 >&,
  parallel::distributed::BlockVector<float> &);

 template
 void interpolate
 (const DoFHandler< 3 >&,
 const DoFHandler< 3 >&,
 const FullMatrix<double>&,
 const  parallel::distributed::BlockVector<float> &,
  parallel::distributed::BlockVector<float> &);
 }
#endif
 
#if  3  ==  2 

 namespace VectorTools {

 template
 void interpolate
 (const Mapping< 3 >&,
 const hp::DoFHandler< 3 >&,
 const Function< 3 >&,
  parallel::distributed::BlockVector<float> &);
 template
 void interpolate
 (const hp::DoFHandler< 3 >&,
 const Function< 3 >&,
  parallel::distributed::BlockVector<float> &);

 template
 void interpolate
 (const DoFHandler< 3 >&,
 const DoFHandler< 3 >&,
 const FullMatrix<double>&,
 const  parallel::distributed::BlockVector<float> &,
  parallel::distributed::BlockVector<float> &);
 }
#endif
 
#if  3  ==  3 

 namespace VectorTools {

 template
 void interpolate
 (const Mapping< 3 >&,
 const hp::DoFHandler< 3 >&,
 const Function< 3 >&,
  parallel::distributed::BlockVector<float> &);
 template
 void interpolate
 (const hp::DoFHandler< 3 >&,
 const Function< 3 >&,
  parallel::distributed::BlockVector<float> &);

 template
 void interpolate
 (const DoFHandler< 3 >&,
 const DoFHandler< 3 >&,
 const FullMatrix<double>&,
 const  parallel::distributed::BlockVector<float> &,
  parallel::distributed::BlockVector<float> &);
 }
#endif
 
#if  1  ==  1 

 namespace VectorTools {

 template
 void interpolate
 (const Mapping< 1 >&,
 const hp::DoFHandler< 1 >&,
 const Function< 1 >&,
  parallel::distributed::BlockVector<long double> &);
 template
 void interpolate
 (const hp::DoFHandler< 1 >&,
 const Function< 1 >&,
  parallel::distributed::BlockVector<long double> &);

 template
 void interpolate
 (const DoFHandler< 1 >&,
 const DoFHandler< 1 >&,
 const FullMatrix<double>&,
 const  parallel::distributed::BlockVector<long double> &,
  parallel::distributed::BlockVector<long double> &);
 }
#endif
 
#if  1  ==  2 

 namespace VectorTools {

 template
 void interpolate
 (const Mapping< 1 >&,
 const hp::DoFHandler< 1 >&,
 const Function< 1 >&,
  parallel::distributed::BlockVector<long double> &);
 template
 void interpolate
 (const hp::DoFHandler< 1 >&,
 const Function< 1 >&,
  parallel::distributed::BlockVector<long double> &);

 template
 void interpolate
 (const DoFHandler< 1 >&,
 const DoFHandler< 1 >&,
 const FullMatrix<double>&,
 const  parallel::distributed::BlockVector<long double> &,
  parallel::distributed::BlockVector<long double> &);
 }
#endif
 
#if  1  ==  3 

 namespace VectorTools {

 template
 void interpolate
 (const Mapping< 1 >&,
 const hp::DoFHandler< 1 >&,
 const Function< 1 >&,
  parallel::distributed::BlockVector<long double> &);
 template
 void interpolate
 (const hp::DoFHandler< 1 >&,
 const Function< 1 >&,
  parallel::distributed::BlockVector<long double> &);

 template
 void interpolate
 (const DoFHandler< 1 >&,
 const DoFHandler< 1 >&,
 const FullMatrix<double>&,
 const  parallel::distributed::BlockVector<long double> &,
  parallel::distributed::BlockVector<long double> &);
 }
#endif
 
#if  2  ==  1 

 namespace VectorTools {

 template
 void interpolate
 (const Mapping< 2 >&,
 const hp::DoFHandler< 2 >&,
 const Function< 2 >&,
  parallel::distributed::BlockVector<long double> &);
 template
 void interpolate
 (const hp::DoFHandler< 2 >&,
 const Function< 2 >&,
  parallel::distributed::BlockVector<long double> &);

 template
 void interpolate
 (const DoFHandler< 2 >&,
 const DoFHandler< 2 >&,
 const FullMatrix<double>&,
 const  parallel::distributed::BlockVector<long double> &,
  parallel::distributed::BlockVector<long double> &);
 }
#endif
 
#if  2  ==  2 

 namespace VectorTools {

 template
 void interpolate
 (const Mapping< 2 >&,
 const hp::DoFHandler< 2 >&,
 const Function< 2 >&,
  parallel::distributed::BlockVector<long double> &);
 template
 void interpolate
 (const hp::DoFHandler< 2 >&,
 const Function< 2 >&,
  parallel::distributed::BlockVector<long double> &);

 template
 void interpolate
 (const DoFHandler< 2 >&,
 const DoFHandler< 2 >&,
 const FullMatrix<double>&,
 const  parallel::distributed::BlockVector<long double> &,
  parallel::distributed::BlockVector<long double> &);
 }
#endif
 
#if  2  ==  3 

 namespace VectorTools {

 template
 void interpolate
 (const Mapping< 2 >&,
 const hp::DoFHandler< 2 >&,
 const Function< 2 >&,
  parallel::distributed::BlockVector<long double> &);
 template
 void interpolate
 (const hp::DoFHandler< 2 >&,
 const Function< 2 >&,
  parallel::distributed::BlockVector<long double> &);

 template
 void interpolate
 (const DoFHandler< 2 >&,
 const DoFHandler< 2 >&,
 const FullMatrix<double>&,
 const  parallel::distributed::BlockVector<long double> &,
  parallel::distributed::BlockVector<long double> &);
 }
#endif
 
#if  3  ==  1 

 namespace VectorTools {

 template
 void interpolate
 (const Mapping< 3 >&,
 const hp::DoFHandler< 3 >&,
 const Function< 3 >&,
  parallel::distributed::BlockVector<long double> &);
 template
 void interpolate
 (const hp::DoFHandler< 3 >&,
 const Function< 3 >&,
  parallel::distributed::BlockVector<long double> &);

 template
 void interpolate
 (const DoFHandler< 3 >&,
 const DoFHandler< 3 >&,
 const FullMatrix<double>&,
 const  parallel::distributed::BlockVector<long double> &,
  parallel::distributed::BlockVector<long double> &);
 }
#endif
 
#if  3  ==  2 

 namespace VectorTools {

 template
 void interpolate
 (const Mapping< 3 >&,
 const hp::DoFHandler< 3 >&,
 const Function< 3 >&,
  parallel::distributed::BlockVector<long double> &);
 template
 void interpolate
 (const hp::DoFHandler< 3 >&,
 const Function< 3 >&,
  parallel::distributed::BlockVector<long double> &);

 template
 void interpolate
 (const DoFHandler< 3 >&,
 const DoFHandler< 3 >&,
 const FullMatrix<double>&,
 const  parallel::distributed::BlockVector<long double> &,
  parallel::distributed::BlockVector<long double> &);
 }
#endif
 
#if  3  ==  3 

 namespace VectorTools {

 template
 void interpolate
 (const Mapping< 3 >&,
 const hp::DoFHandler< 3 >&,
 const Function< 3 >&,
  parallel::distributed::BlockVector<long double> &);
 template
 void interpolate
 (const hp::DoFHandler< 3 >&,
 const Function< 3 >&,
  parallel::distributed::BlockVector<long double> &);

 template
 void interpolate
 (const DoFHandler< 3 >&,
 const DoFHandler< 3 >&,
 const FullMatrix<double>&,
 const  parallel::distributed::BlockVector<long double> &,
  parallel::distributed::BlockVector<long double> &);
 }
#endif
 
namespace VectorTools {

 template
 void interpolate_to_different_mesh
 (const DoFHandler< 1 > &,
 const Vector<float> &,
 const DoFHandler< 1 > &,
 Vector<float> &);

 template
 void interpolate_to_different_mesh
 (const DoFHandler< 1 > &,
 const Vector<float> &,
 const DoFHandler< 1 > &,
 const ConstraintMatrix &,
 Vector<float> &);

 template
 void interpolate_to_different_mesh
 (const InterGridMap<DoFHandler< 1 > > &,
 const Vector<float> &,
 const ConstraintMatrix &,
 Vector<float> &);

 template
 void interpolate_to_different_mesh
 (const DoFHandler< 1 > &,
 const Vector<double> &,
 const DoFHandler< 1 > &,
 Vector<double> &);

 template
 void interpolate_to_different_mesh
 (const DoFHandler< 1 > &,
 const Vector<double> &,
 const DoFHandler< 1 > &,
 const ConstraintMatrix &,
 Vector<double> &);

 template
 void interpolate_to_different_mesh
 (const InterGridMap<DoFHandler< 1 > > &,
 const Vector<double> &,
 const ConstraintMatrix &,
 Vector<double> &);

 }

namespace VectorTools {

 template
 void interpolate_to_different_mesh
 (const DoFHandler< 2 > &,
 const Vector<float> &,
 const DoFHandler< 2 > &,
 Vector<float> &);

 template
 void interpolate_to_different_mesh
 (const DoFHandler< 2 > &,
 const Vector<float> &,
 const DoFHandler< 2 > &,
 const ConstraintMatrix &,
 Vector<float> &);

 template
 void interpolate_to_different_mesh
 (const InterGridMap<DoFHandler< 2 > > &,
 const Vector<float> &,
 const ConstraintMatrix &,
 Vector<float> &);

 template
 void interpolate_to_different_mesh
 (const DoFHandler< 2 > &,
 const Vector<double> &,
 const DoFHandler< 2 > &,
 Vector<double> &);

 template
 void interpolate_to_different_mesh
 (const DoFHandler< 2 > &,
 const Vector<double> &,
 const DoFHandler< 2 > &,
 const ConstraintMatrix &,
 Vector<double> &);

 template
 void interpolate_to_different_mesh
 (const InterGridMap<DoFHandler< 2 > > &,
 const Vector<double> &,
 const ConstraintMatrix &,
 Vector<double> &);

 }

namespace VectorTools {

 template
 void interpolate_to_different_mesh
 (const DoFHandler< 3 > &,
 const Vector<float> &,
 const DoFHandler< 3 > &,
 Vector<float> &);

 template
 void interpolate_to_different_mesh
 (const DoFHandler< 3 > &,
 const Vector<float> &,
 const DoFHandler< 3 > &,
 const ConstraintMatrix &,
 Vector<float> &);

 template
 void interpolate_to_different_mesh
 (const InterGridMap<DoFHandler< 3 > > &,
 const Vector<float> &,
 const ConstraintMatrix &,
 Vector<float> &);

 template
 void interpolate_to_different_mesh
 (const DoFHandler< 3 > &,
 const Vector<double> &,
 const DoFHandler< 3 > &,
 Vector<double> &);

 template
 void interpolate_to_different_mesh
 (const DoFHandler< 3 > &,
 const Vector<double> &,
 const DoFHandler< 3 > &,
 const ConstraintMatrix &,
 Vector<double> &);

 template
 void interpolate_to_different_mesh
 (const InterGridMap<DoFHandler< 3 > > &,
 const Vector<double> &,
 const ConstraintMatrix &,
 Vector<double> &);

 }

