#if  1  <=  1 
 namespace VectorTools {

 template
 void integrate_difference< 1 ,  Vector<double> , Vector<float>,  1 >
 (const Mapping< 1 ,  1 >&,
 const DoFHandler< 1 ,  1 >&,
 const  Vector<double> &,
 const Function< 1 >&,
 Vector<float>&,
 const Quadrature< 1 >&,
 const NormType&,
 const Function< 1 >*,
 const double);

 template
 void integrate_difference< 1 ,  Vector<double> , Vector<float>,  1 >
 (const DoFHandler< 1 ,  1 >&,
 const  Vector<double> &,
 const Function< 1 >&,
 Vector<float>&,
 const Quadrature< 1 >&,
 const NormType&,
 const Function< 1 >*,
 const double);

 template
 void integrate_difference< 1 ,  Vector<double> , Vector<double>,  1  >
 (const Mapping< 1 ,  1 >&,
 const DoFHandler< 1 ,  1 >&,
 const  Vector<double> &,
 const Function< 1 >&,
 Vector<double>&,
 const Quadrature< 1 >&,
 const NormType&,
 const Function< 1 >*,
 const double);

 template
 void integrate_difference< 1 ,  Vector<double> , Vector<double>,  1  >
 (const DoFHandler< 1 ,  1 >&,
 const  Vector<double> &,
 const Function< 1 >&,
 Vector<double>&,
 const Quadrature< 1 >&,
 const NormType&,
 const Function< 1 >*,
 const double);

 template
 void integrate_difference< 1 ,  Vector<double> , Vector<double>,  1 >
 (const hp::MappingCollection< 1 , 1 >&,
 const hp::DoFHandler< 1 , 1 >&,
 const  Vector<double> &,
 const Function< 1 >&,
 Vector<double>&,
 const hp::QCollection< 1 >&,
 const NormType&,
 const Function< 1 >*,
 const double);

 template
 void integrate_difference< 1 ,  Vector<double> , Vector<double>,  1 >
 (const hp::DoFHandler< 1 , 1 >&,
 const  Vector<double> &,
 const Function< 1 >&,
 Vector<double>&,
 const hp::QCollection< 1 >&,
 const NormType&,
 const Function< 1 >*,
 const double);

 template
 void integrate_difference< 1 ,  Vector<double> , Vector<float>,  1 >
 (const hp::MappingCollection< 1 , 1 >&,
 const hp::DoFHandler< 1 , 1 >&,
 const  Vector<double> &,
 const Function< 1 >&,
 Vector<float>&,
 const hp::QCollection< 1 >&,
 const NormType&,
 const Function< 1 >*,
 const double);

 template
 void integrate_difference< 1 ,  Vector<double> , Vector<float>,  1 >
 (const hp::DoFHandler< 1 , 1 >&,
 const  Vector<double> &,
 const Function< 1 >&,
 Vector<float>&,
 const hp::QCollection< 1 >&,
 const NormType&,
 const Function< 1 >*,
 const double);

 }
#endif
 
#if  1  <=  2 
 namespace VectorTools {

 template
 void integrate_difference< 1 ,  Vector<double> , Vector<float>,  2 >
 (const Mapping< 1 ,  2 >&,
 const DoFHandler< 1 ,  2 >&,
 const  Vector<double> &,
 const Function< 2 >&,
 Vector<float>&,
 const Quadrature< 1 >&,
 const NormType&,
 const Function< 2 >*,
 const double);

 template
 void integrate_difference< 1 ,  Vector<double> , Vector<float>,  2 >
 (const DoFHandler< 1 ,  2 >&,
 const  Vector<double> &,
 const Function< 2 >&,
 Vector<float>&,
 const Quadrature< 1 >&,
 const NormType&,
 const Function< 2 >*,
 const double);

 template
 void integrate_difference< 1 ,  Vector<double> , Vector<double>,  2  >
 (const Mapping< 1 ,  2 >&,
 const DoFHandler< 1 ,  2 >&,
 const  Vector<double> &,
 const Function< 2 >&,
 Vector<double>&,
 const Quadrature< 1 >&,
 const NormType&,
 const Function< 2 >*,
 const double);

 template
 void integrate_difference< 1 ,  Vector<double> , Vector<double>,  2  >
 (const DoFHandler< 1 ,  2 >&,
 const  Vector<double> &,
 const Function< 2 >&,
 Vector<double>&,
 const Quadrature< 1 >&,
 const NormType&,
 const Function< 2 >*,
 const double);

 template
 void integrate_difference< 1 ,  Vector<double> , Vector<double>,  2 >
 (const hp::MappingCollection< 1 , 2 >&,
 const hp::DoFHandler< 1 , 2 >&,
 const  Vector<double> &,
 const Function< 2 >&,
 Vector<double>&,
 const hp::QCollection< 1 >&,
 const NormType&,
 const Function< 2 >*,
 const double);

 template
 void integrate_difference< 1 ,  Vector<double> , Vector<double>,  2 >
 (const hp::DoFHandler< 1 , 2 >&,
 const  Vector<double> &,
 const Function< 2 >&,
 Vector<double>&,
 const hp::QCollection< 1 >&,
 const NormType&,
 const Function< 2 >*,
 const double);

 template
 void integrate_difference< 1 ,  Vector<double> , Vector<float>,  2 >
 (const hp::MappingCollection< 1 , 2 >&,
 const hp::DoFHandler< 1 , 2 >&,
 const  Vector<double> &,
 const Function< 2 >&,
 Vector<float>&,
 const hp::QCollection< 1 >&,
 const NormType&,
 const Function< 2 >*,
 const double);

 template
 void integrate_difference< 1 ,  Vector<double> , Vector<float>,  2 >
 (const hp::DoFHandler< 1 , 2 >&,
 const  Vector<double> &,
 const Function< 2 >&,
 Vector<float>&,
 const hp::QCollection< 1 >&,
 const NormType&,
 const Function< 2 >*,
 const double);

 }
#endif
 
#if  1  <=  3 
 namespace VectorTools {

 template
 void integrate_difference< 1 ,  Vector<double> , Vector<float>,  3 >
 (const Mapping< 1 ,  3 >&,
 const DoFHandler< 1 ,  3 >&,
 const  Vector<double> &,
 const Function< 3 >&,
 Vector<float>&,
 const Quadrature< 1 >&,
 const NormType&,
 const Function< 3 >*,
 const double);

 template
 void integrate_difference< 1 ,  Vector<double> , Vector<float>,  3 >
 (const DoFHandler< 1 ,  3 >&,
 const  Vector<double> &,
 const Function< 3 >&,
 Vector<float>&,
 const Quadrature< 1 >&,
 const NormType&,
 const Function< 3 >*,
 const double);

 template
 void integrate_difference< 1 ,  Vector<double> , Vector<double>,  3  >
 (const Mapping< 1 ,  3 >&,
 const DoFHandler< 1 ,  3 >&,
 const  Vector<double> &,
 const Function< 3 >&,
 Vector<double>&,
 const Quadrature< 1 >&,
 const NormType&,
 const Function< 3 >*,
 const double);

 template
 void integrate_difference< 1 ,  Vector<double> , Vector<double>,  3  >
 (const DoFHandler< 1 ,  3 >&,
 const  Vector<double> &,
 const Function< 3 >&,
 Vector<double>&,
 const Quadrature< 1 >&,
 const NormType&,
 const Function< 3 >*,
 const double);

 template
 void integrate_difference< 1 ,  Vector<double> , Vector<double>,  3 >
 (const hp::MappingCollection< 1 , 3 >&,
 const hp::DoFHandler< 1 , 3 >&,
 const  Vector<double> &,
 const Function< 3 >&,
 Vector<double>&,
 const hp::QCollection< 1 >&,
 const NormType&,
 const Function< 3 >*,
 const double);

 template
 void integrate_difference< 1 ,  Vector<double> , Vector<double>,  3 >
 (const hp::DoFHandler< 1 , 3 >&,
 const  Vector<double> &,
 const Function< 3 >&,
 Vector<double>&,
 const hp::QCollection< 1 >&,
 const NormType&,
 const Function< 3 >*,
 const double);

 template
 void integrate_difference< 1 ,  Vector<double> , Vector<float>,  3 >
 (const hp::MappingCollection< 1 , 3 >&,
 const hp::DoFHandler< 1 , 3 >&,
 const  Vector<double> &,
 const Function< 3 >&,
 Vector<float>&,
 const hp::QCollection< 1 >&,
 const NormType&,
 const Function< 3 >*,
 const double);

 template
 void integrate_difference< 1 ,  Vector<double> , Vector<float>,  3 >
 (const hp::DoFHandler< 1 , 3 >&,
 const  Vector<double> &,
 const Function< 3 >&,
 Vector<float>&,
 const hp::QCollection< 1 >&,
 const NormType&,
 const Function< 3 >*,
 const double);

 }
#endif
 
#if  2  <=  1 
 namespace VectorTools {

 template
 void integrate_difference< 2 ,  Vector<double> , Vector<float>,  1 >
 (const Mapping< 2 ,  1 >&,
 const DoFHandler< 2 ,  1 >&,
 const  Vector<double> &,
 const Function< 1 >&,
 Vector<float>&,
 const Quadrature< 2 >&,
 const NormType&,
 const Function< 1 >*,
 const double);

 template
 void integrate_difference< 2 ,  Vector<double> , Vector<float>,  1 >
 (const DoFHandler< 2 ,  1 >&,
 const  Vector<double> &,
 const Function< 1 >&,
 Vector<float>&,
 const Quadrature< 2 >&,
 const NormType&,
 const Function< 1 >*,
 const double);

 template
 void integrate_difference< 2 ,  Vector<double> , Vector<double>,  1  >
 (const Mapping< 2 ,  1 >&,
 const DoFHandler< 2 ,  1 >&,
 const  Vector<double> &,
 const Function< 1 >&,
 Vector<double>&,
 const Quadrature< 2 >&,
 const NormType&,
 const Function< 1 >*,
 const double);

 template
 void integrate_difference< 2 ,  Vector<double> , Vector<double>,  1  >
 (const DoFHandler< 2 ,  1 >&,
 const  Vector<double> &,
 const Function< 1 >&,
 Vector<double>&,
 const Quadrature< 2 >&,
 const NormType&,
 const Function< 1 >*,
 const double);

 template
 void integrate_difference< 2 ,  Vector<double> , Vector<double>,  1 >
 (const hp::MappingCollection< 2 , 1 >&,
 const hp::DoFHandler< 2 , 1 >&,
 const  Vector<double> &,
 const Function< 1 >&,
 Vector<double>&,
 const hp::QCollection< 2 >&,
 const NormType&,
 const Function< 1 >*,
 const double);

 template
 void integrate_difference< 2 ,  Vector<double> , Vector<double>,  1 >
 (const hp::DoFHandler< 2 , 1 >&,
 const  Vector<double> &,
 const Function< 1 >&,
 Vector<double>&,
 const hp::QCollection< 2 >&,
 const NormType&,
 const Function< 1 >*,
 const double);

 template
 void integrate_difference< 2 ,  Vector<double> , Vector<float>,  1 >
 (const hp::MappingCollection< 2 , 1 >&,
 const hp::DoFHandler< 2 , 1 >&,
 const  Vector<double> &,
 const Function< 1 >&,
 Vector<float>&,
 const hp::QCollection< 2 >&,
 const NormType&,
 const Function< 1 >*,
 const double);

 template
 void integrate_difference< 2 ,  Vector<double> , Vector<float>,  1 >
 (const hp::DoFHandler< 2 , 1 >&,
 const  Vector<double> &,
 const Function< 1 >&,
 Vector<float>&,
 const hp::QCollection< 2 >&,
 const NormType&,
 const Function< 1 >*,
 const double);

 }
#endif
 
#if  2  <=  2 
 namespace VectorTools {

 template
 void integrate_difference< 2 ,  Vector<double> , Vector<float>,  2 >
 (const Mapping< 2 ,  2 >&,
 const DoFHandler< 2 ,  2 >&,
 const  Vector<double> &,
 const Function< 2 >&,
 Vector<float>&,
 const Quadrature< 2 >&,
 const NormType&,
 const Function< 2 >*,
 const double);

 template
 void integrate_difference< 2 ,  Vector<double> , Vector<float>,  2 >
 (const DoFHandler< 2 ,  2 >&,
 const  Vector<double> &,
 const Function< 2 >&,
 Vector<float>&,
 const Quadrature< 2 >&,
 const NormType&,
 const Function< 2 >*,
 const double);

 template
 void integrate_difference< 2 ,  Vector<double> , Vector<double>,  2  >
 (const Mapping< 2 ,  2 >&,
 const DoFHandler< 2 ,  2 >&,
 const  Vector<double> &,
 const Function< 2 >&,
 Vector<double>&,
 const Quadrature< 2 >&,
 const NormType&,
 const Function< 2 >*,
 const double);

 template
 void integrate_difference< 2 ,  Vector<double> , Vector<double>,  2  >
 (const DoFHandler< 2 ,  2 >&,
 const  Vector<double> &,
 const Function< 2 >&,
 Vector<double>&,
 const Quadrature< 2 >&,
 const NormType&,
 const Function< 2 >*,
 const double);

 template
 void integrate_difference< 2 ,  Vector<double> , Vector<double>,  2 >
 (const hp::MappingCollection< 2 , 2 >&,
 const hp::DoFHandler< 2 , 2 >&,
 const  Vector<double> &,
 const Function< 2 >&,
 Vector<double>&,
 const hp::QCollection< 2 >&,
 const NormType&,
 const Function< 2 >*,
 const double);

 template
 void integrate_difference< 2 ,  Vector<double> , Vector<double>,  2 >
 (const hp::DoFHandler< 2 , 2 >&,
 const  Vector<double> &,
 const Function< 2 >&,
 Vector<double>&,
 const hp::QCollection< 2 >&,
 const NormType&,
 const Function< 2 >*,
 const double);

 template
 void integrate_difference< 2 ,  Vector<double> , Vector<float>,  2 >
 (const hp::MappingCollection< 2 , 2 >&,
 const hp::DoFHandler< 2 , 2 >&,
 const  Vector<double> &,
 const Function< 2 >&,
 Vector<float>&,
 const hp::QCollection< 2 >&,
 const NormType&,
 const Function< 2 >*,
 const double);

 template
 void integrate_difference< 2 ,  Vector<double> , Vector<float>,  2 >
 (const hp::DoFHandler< 2 , 2 >&,
 const  Vector<double> &,
 const Function< 2 >&,
 Vector<float>&,
 const hp::QCollection< 2 >&,
 const NormType&,
 const Function< 2 >*,
 const double);

 }
#endif
 
#if  2  <=  3 
 namespace VectorTools {

 template
 void integrate_difference< 2 ,  Vector<double> , Vector<float>,  3 >
 (const Mapping< 2 ,  3 >&,
 const DoFHandler< 2 ,  3 >&,
 const  Vector<double> &,
 const Function< 3 >&,
 Vector<float>&,
 const Quadrature< 2 >&,
 const NormType&,
 const Function< 3 >*,
 const double);

 template
 void integrate_difference< 2 ,  Vector<double> , Vector<float>,  3 >
 (const DoFHandler< 2 ,  3 >&,
 const  Vector<double> &,
 const Function< 3 >&,
 Vector<float>&,
 const Quadrature< 2 >&,
 const NormType&,
 const Function< 3 >*,
 const double);

 template
 void integrate_difference< 2 ,  Vector<double> , Vector<double>,  3  >
 (const Mapping< 2 ,  3 >&,
 const DoFHandler< 2 ,  3 >&,
 const  Vector<double> &,
 const Function< 3 >&,
 Vector<double>&,
 const Quadrature< 2 >&,
 const NormType&,
 const Function< 3 >*,
 const double);

 template
 void integrate_difference< 2 ,  Vector<double> , Vector<double>,  3  >
 (const DoFHandler< 2 ,  3 >&,
 const  Vector<double> &,
 const Function< 3 >&,
 Vector<double>&,
 const Quadrature< 2 >&,
 const NormType&,
 const Function< 3 >*,
 const double);

 template
 void integrate_difference< 2 ,  Vector<double> , Vector<double>,  3 >
 (const hp::MappingCollection< 2 , 3 >&,
 const hp::DoFHandler< 2 , 3 >&,
 const  Vector<double> &,
 const Function< 3 >&,
 Vector<double>&,
 const hp::QCollection< 2 >&,
 const NormType&,
 const Function< 3 >*,
 const double);

 template
 void integrate_difference< 2 ,  Vector<double> , Vector<double>,  3 >
 (const hp::DoFHandler< 2 , 3 >&,
 const  Vector<double> &,
 const Function< 3 >&,
 Vector<double>&,
 const hp::QCollection< 2 >&,
 const NormType&,
 const Function< 3 >*,
 const double);

 template
 void integrate_difference< 2 ,  Vector<double> , Vector<float>,  3 >
 (const hp::MappingCollection< 2 , 3 >&,
 const hp::DoFHandler< 2 , 3 >&,
 const  Vector<double> &,
 const Function< 3 >&,
 Vector<float>&,
 const hp::QCollection< 2 >&,
 const NormType&,
 const Function< 3 >*,
 const double);

 template
 void integrate_difference< 2 ,  Vector<double> , Vector<float>,  3 >
 (const hp::DoFHandler< 2 , 3 >&,
 const  Vector<double> &,
 const Function< 3 >&,
 Vector<float>&,
 const hp::QCollection< 2 >&,
 const NormType&,
 const Function< 3 >*,
 const double);

 }
#endif
 
#if  3  <=  1 
 namespace VectorTools {

 template
 void integrate_difference< 3 ,  Vector<double> , Vector<float>,  1 >
 (const Mapping< 3 ,  1 >&,
 const DoFHandler< 3 ,  1 >&,
 const  Vector<double> &,
 const Function< 1 >&,
 Vector<float>&,
 const Quadrature< 3 >&,
 const NormType&,
 const Function< 1 >*,
 const double);

 template
 void integrate_difference< 3 ,  Vector<double> , Vector<float>,  1 >
 (const DoFHandler< 3 ,  1 >&,
 const  Vector<double> &,
 const Function< 1 >&,
 Vector<float>&,
 const Quadrature< 3 >&,
 const NormType&,
 const Function< 1 >*,
 const double);

 template
 void integrate_difference< 3 ,  Vector<double> , Vector<double>,  1  >
 (const Mapping< 3 ,  1 >&,
 const DoFHandler< 3 ,  1 >&,
 const  Vector<double> &,
 const Function< 1 >&,
 Vector<double>&,
 const Quadrature< 3 >&,
 const NormType&,
 const Function< 1 >*,
 const double);

 template
 void integrate_difference< 3 ,  Vector<double> , Vector<double>,  1  >
 (const DoFHandler< 3 ,  1 >&,
 const  Vector<double> &,
 const Function< 1 >&,
 Vector<double>&,
 const Quadrature< 3 >&,
 const NormType&,
 const Function< 1 >*,
 const double);

 template
 void integrate_difference< 3 ,  Vector<double> , Vector<double>,  1 >
 (const hp::MappingCollection< 3 , 1 >&,
 const hp::DoFHandler< 3 , 1 >&,
 const  Vector<double> &,
 const Function< 1 >&,
 Vector<double>&,
 const hp::QCollection< 3 >&,
 const NormType&,
 const Function< 1 >*,
 const double);

 template
 void integrate_difference< 3 ,  Vector<double> , Vector<double>,  1 >
 (const hp::DoFHandler< 3 , 1 >&,
 const  Vector<double> &,
 const Function< 1 >&,
 Vector<double>&,
 const hp::QCollection< 3 >&,
 const NormType&,
 const Function< 1 >*,
 const double);

 template
 void integrate_difference< 3 ,  Vector<double> , Vector<float>,  1 >
 (const hp::MappingCollection< 3 , 1 >&,
 const hp::DoFHandler< 3 , 1 >&,
 const  Vector<double> &,
 const Function< 1 >&,
 Vector<float>&,
 const hp::QCollection< 3 >&,
 const NormType&,
 const Function< 1 >*,
 const double);

 template
 void integrate_difference< 3 ,  Vector<double> , Vector<float>,  1 >
 (const hp::DoFHandler< 3 , 1 >&,
 const  Vector<double> &,
 const Function< 1 >&,
 Vector<float>&,
 const hp::QCollection< 3 >&,
 const NormType&,
 const Function< 1 >*,
 const double);

 }
#endif
 
#if  3  <=  2 
 namespace VectorTools {

 template
 void integrate_difference< 3 ,  Vector<double> , Vector<float>,  2 >
 (const Mapping< 3 ,  2 >&,
 const DoFHandler< 3 ,  2 >&,
 const  Vector<double> &,
 const Function< 2 >&,
 Vector<float>&,
 const Quadrature< 3 >&,
 const NormType&,
 const Function< 2 >*,
 const double);

 template
 void integrate_difference< 3 ,  Vector<double> , Vector<float>,  2 >
 (const DoFHandler< 3 ,  2 >&,
 const  Vector<double> &,
 const Function< 2 >&,
 Vector<float>&,
 const Quadrature< 3 >&,
 const NormType&,
 const Function< 2 >*,
 const double);

 template
 void integrate_difference< 3 ,  Vector<double> , Vector<double>,  2  >
 (const Mapping< 3 ,  2 >&,
 const DoFHandler< 3 ,  2 >&,
 const  Vector<double> &,
 const Function< 2 >&,
 Vector<double>&,
 const Quadrature< 3 >&,
 const NormType&,
 const Function< 2 >*,
 const double);

 template
 void integrate_difference< 3 ,  Vector<double> , Vector<double>,  2  >
 (const DoFHandler< 3 ,  2 >&,
 const  Vector<double> &,
 const Function< 2 >&,
 Vector<double>&,
 const Quadrature< 3 >&,
 const NormType&,
 const Function< 2 >*,
 const double);

 template
 void integrate_difference< 3 ,  Vector<double> , Vector<double>,  2 >
 (const hp::MappingCollection< 3 , 2 >&,
 const hp::DoFHandler< 3 , 2 >&,
 const  Vector<double> &,
 const Function< 2 >&,
 Vector<double>&,
 const hp::QCollection< 3 >&,
 const NormType&,
 const Function< 2 >*,
 const double);

 template
 void integrate_difference< 3 ,  Vector<double> , Vector<double>,  2 >
 (const hp::DoFHandler< 3 , 2 >&,
 const  Vector<double> &,
 const Function< 2 >&,
 Vector<double>&,
 const hp::QCollection< 3 >&,
 const NormType&,
 const Function< 2 >*,
 const double);

 template
 void integrate_difference< 3 ,  Vector<double> , Vector<float>,  2 >
 (const hp::MappingCollection< 3 , 2 >&,
 const hp::DoFHandler< 3 , 2 >&,
 const  Vector<double> &,
 const Function< 2 >&,
 Vector<float>&,
 const hp::QCollection< 3 >&,
 const NormType&,
 const Function< 2 >*,
 const double);

 template
 void integrate_difference< 3 ,  Vector<double> , Vector<float>,  2 >
 (const hp::DoFHandler< 3 , 2 >&,
 const  Vector<double> &,
 const Function< 2 >&,
 Vector<float>&,
 const hp::QCollection< 3 >&,
 const NormType&,
 const Function< 2 >*,
 const double);

 }
#endif
 
#if  3  <=  3 
 namespace VectorTools {

 template
 void integrate_difference< 3 ,  Vector<double> , Vector<float>,  3 >
 (const Mapping< 3 ,  3 >&,
 const DoFHandler< 3 ,  3 >&,
 const  Vector<double> &,
 const Function< 3 >&,
 Vector<float>&,
 const Quadrature< 3 >&,
 const NormType&,
 const Function< 3 >*,
 const double);

 template
 void integrate_difference< 3 ,  Vector<double> , Vector<float>,  3 >
 (const DoFHandler< 3 ,  3 >&,
 const  Vector<double> &,
 const Function< 3 >&,
 Vector<float>&,
 const Quadrature< 3 >&,
 const NormType&,
 const Function< 3 >*,
 const double);

 template
 void integrate_difference< 3 ,  Vector<double> , Vector<double>,  3  >
 (const Mapping< 3 ,  3 >&,
 const DoFHandler< 3 ,  3 >&,
 const  Vector<double> &,
 const Function< 3 >&,
 Vector<double>&,
 const Quadrature< 3 >&,
 const NormType&,
 const Function< 3 >*,
 const double);

 template
 void integrate_difference< 3 ,  Vector<double> , Vector<double>,  3  >
 (const DoFHandler< 3 ,  3 >&,
 const  Vector<double> &,
 const Function< 3 >&,
 Vector<double>&,
 const Quadrature< 3 >&,
 const NormType&,
 const Function< 3 >*,
 const double);

 template
 void integrate_difference< 3 ,  Vector<double> , Vector<double>,  3 >
 (const hp::MappingCollection< 3 , 3 >&,
 const hp::DoFHandler< 3 , 3 >&,
 const  Vector<double> &,
 const Function< 3 >&,
 Vector<double>&,
 const hp::QCollection< 3 >&,
 const NormType&,
 const Function< 3 >*,
 const double);

 template
 void integrate_difference< 3 ,  Vector<double> , Vector<double>,  3 >
 (const hp::DoFHandler< 3 , 3 >&,
 const  Vector<double> &,
 const Function< 3 >&,
 Vector<double>&,
 const hp::QCollection< 3 >&,
 const NormType&,
 const Function< 3 >*,
 const double);

 template
 void integrate_difference< 3 ,  Vector<double> , Vector<float>,  3 >
 (const hp::MappingCollection< 3 , 3 >&,
 const hp::DoFHandler< 3 , 3 >&,
 const  Vector<double> &,
 const Function< 3 >&,
 Vector<float>&,
 const hp::QCollection< 3 >&,
 const NormType&,
 const Function< 3 >*,
 const double);

 template
 void integrate_difference< 3 ,  Vector<double> , Vector<float>,  3 >
 (const hp::DoFHandler< 3 , 3 >&,
 const  Vector<double> &,
 const Function< 3 >&,
 Vector<float>&,
 const hp::QCollection< 3 >&,
 const NormType&,
 const Function< 3 >*,
 const double);

 }
#endif
 
#if  1  <=  1 
 namespace VectorTools {

 template
 void integrate_difference< 1 ,  Vector<float> , Vector<float>,  1 >
 (const Mapping< 1 ,  1 >&,
 const DoFHandler< 1 ,  1 >&,
 const  Vector<float> &,
 const Function< 1 >&,
 Vector<float>&,
 const Quadrature< 1 >&,
 const NormType&,
 const Function< 1 >*,
 const double);

 template
 void integrate_difference< 1 ,  Vector<float> , Vector<float>,  1 >
 (const DoFHandler< 1 ,  1 >&,
 const  Vector<float> &,
 const Function< 1 >&,
 Vector<float>&,
 const Quadrature< 1 >&,
 const NormType&,
 const Function< 1 >*,
 const double);

 template
 void integrate_difference< 1 ,  Vector<float> , Vector<double>,  1  >
 (const Mapping< 1 ,  1 >&,
 const DoFHandler< 1 ,  1 >&,
 const  Vector<float> &,
 const Function< 1 >&,
 Vector<double>&,
 const Quadrature< 1 >&,
 const NormType&,
 const Function< 1 >*,
 const double);

 template
 void integrate_difference< 1 ,  Vector<float> , Vector<double>,  1  >
 (const DoFHandler< 1 ,  1 >&,
 const  Vector<float> &,
 const Function< 1 >&,
 Vector<double>&,
 const Quadrature< 1 >&,
 const NormType&,
 const Function< 1 >*,
 const double);

 template
 void integrate_difference< 1 ,  Vector<float> , Vector<double>,  1 >
 (const hp::MappingCollection< 1 , 1 >&,
 const hp::DoFHandler< 1 , 1 >&,
 const  Vector<float> &,
 const Function< 1 >&,
 Vector<double>&,
 const hp::QCollection< 1 >&,
 const NormType&,
 const Function< 1 >*,
 const double);

 template
 void integrate_difference< 1 ,  Vector<float> , Vector<double>,  1 >
 (const hp::DoFHandler< 1 , 1 >&,
 const  Vector<float> &,
 const Function< 1 >&,
 Vector<double>&,
 const hp::QCollection< 1 >&,
 const NormType&,
 const Function< 1 >*,
 const double);

 template
 void integrate_difference< 1 ,  Vector<float> , Vector<float>,  1 >
 (const hp::MappingCollection< 1 , 1 >&,
 const hp::DoFHandler< 1 , 1 >&,
 const  Vector<float> &,
 const Function< 1 >&,
 Vector<float>&,
 const hp::QCollection< 1 >&,
 const NormType&,
 const Function< 1 >*,
 const double);

 template
 void integrate_difference< 1 ,  Vector<float> , Vector<float>,  1 >
 (const hp::DoFHandler< 1 , 1 >&,
 const  Vector<float> &,
 const Function< 1 >&,
 Vector<float>&,
 const hp::QCollection< 1 >&,
 const NormType&,
 const Function< 1 >*,
 const double);

 }
#endif
 
#if  1  <=  2 
 namespace VectorTools {

 template
 void integrate_difference< 1 ,  Vector<float> , Vector<float>,  2 >
 (const Mapping< 1 ,  2 >&,
 const DoFHandler< 1 ,  2 >&,
 const  Vector<float> &,
 const Function< 2 >&,
 Vector<float>&,
 const Quadrature< 1 >&,
 const NormType&,
 const Function< 2 >*,
 const double);

 template
 void integrate_difference< 1 ,  Vector<float> , Vector<float>,  2 >
 (const DoFHandler< 1 ,  2 >&,
 const  Vector<float> &,
 const Function< 2 >&,
 Vector<float>&,
 const Quadrature< 1 >&,
 const NormType&,
 const Function< 2 >*,
 const double);

 template
 void integrate_difference< 1 ,  Vector<float> , Vector<double>,  2  >
 (const Mapping< 1 ,  2 >&,
 const DoFHandler< 1 ,  2 >&,
 const  Vector<float> &,
 const Function< 2 >&,
 Vector<double>&,
 const Quadrature< 1 >&,
 const NormType&,
 const Function< 2 >*,
 const double);

 template
 void integrate_difference< 1 ,  Vector<float> , Vector<double>,  2  >
 (const DoFHandler< 1 ,  2 >&,
 const  Vector<float> &,
 const Function< 2 >&,
 Vector<double>&,
 const Quadrature< 1 >&,
 const NormType&,
 const Function< 2 >*,
 const double);

 template
 void integrate_difference< 1 ,  Vector<float> , Vector<double>,  2 >
 (const hp::MappingCollection< 1 , 2 >&,
 const hp::DoFHandler< 1 , 2 >&,
 const  Vector<float> &,
 const Function< 2 >&,
 Vector<double>&,
 const hp::QCollection< 1 >&,
 const NormType&,
 const Function< 2 >*,
 const double);

 template
 void integrate_difference< 1 ,  Vector<float> , Vector<double>,  2 >
 (const hp::DoFHandler< 1 , 2 >&,
 const  Vector<float> &,
 const Function< 2 >&,
 Vector<double>&,
 const hp::QCollection< 1 >&,
 const NormType&,
 const Function< 2 >*,
 const double);

 template
 void integrate_difference< 1 ,  Vector<float> , Vector<float>,  2 >
 (const hp::MappingCollection< 1 , 2 >&,
 const hp::DoFHandler< 1 , 2 >&,
 const  Vector<float> &,
 const Function< 2 >&,
 Vector<float>&,
 const hp::QCollection< 1 >&,
 const NormType&,
 const Function< 2 >*,
 const double);

 template
 void integrate_difference< 1 ,  Vector<float> , Vector<float>,  2 >
 (const hp::DoFHandler< 1 , 2 >&,
 const  Vector<float> &,
 const Function< 2 >&,
 Vector<float>&,
 const hp::QCollection< 1 >&,
 const NormType&,
 const Function< 2 >*,
 const double);

 }
#endif
 
#if  1  <=  3 
 namespace VectorTools {

 template
 void integrate_difference< 1 ,  Vector<float> , Vector<float>,  3 >
 (const Mapping< 1 ,  3 >&,
 const DoFHandler< 1 ,  3 >&,
 const  Vector<float> &,
 const Function< 3 >&,
 Vector<float>&,
 const Quadrature< 1 >&,
 const NormType&,
 const Function< 3 >*,
 const double);

 template
 void integrate_difference< 1 ,  Vector<float> , Vector<float>,  3 >
 (const DoFHandler< 1 ,  3 >&,
 const  Vector<float> &,
 const Function< 3 >&,
 Vector<float>&,
 const Quadrature< 1 >&,
 const NormType&,
 const Function< 3 >*,
 const double);

 template
 void integrate_difference< 1 ,  Vector<float> , Vector<double>,  3  >
 (const Mapping< 1 ,  3 >&,
 const DoFHandler< 1 ,  3 >&,
 const  Vector<float> &,
 const Function< 3 >&,
 Vector<double>&,
 const Quadrature< 1 >&,
 const NormType&,
 const Function< 3 >*,
 const double);

 template
 void integrate_difference< 1 ,  Vector<float> , Vector<double>,  3  >
 (const DoFHandler< 1 ,  3 >&,
 const  Vector<float> &,
 const Function< 3 >&,
 Vector<double>&,
 const Quadrature< 1 >&,
 const NormType&,
 const Function< 3 >*,
 const double);

 template
 void integrate_difference< 1 ,  Vector<float> , Vector<double>,  3 >
 (const hp::MappingCollection< 1 , 3 >&,
 const hp::DoFHandler< 1 , 3 >&,
 const  Vector<float> &,
 const Function< 3 >&,
 Vector<double>&,
 const hp::QCollection< 1 >&,
 const NormType&,
 const Function< 3 >*,
 const double);

 template
 void integrate_difference< 1 ,  Vector<float> , Vector<double>,  3 >
 (const hp::DoFHandler< 1 , 3 >&,
 const  Vector<float> &,
 const Function< 3 >&,
 Vector<double>&,
 const hp::QCollection< 1 >&,
 const NormType&,
 const Function< 3 >*,
 const double);

 template
 void integrate_difference< 1 ,  Vector<float> , Vector<float>,  3 >
 (const hp::MappingCollection< 1 , 3 >&,
 const hp::DoFHandler< 1 , 3 >&,
 const  Vector<float> &,
 const Function< 3 >&,
 Vector<float>&,
 const hp::QCollection< 1 >&,
 const NormType&,
 const Function< 3 >*,
 const double);

 template
 void integrate_difference< 1 ,  Vector<float> , Vector<float>,  3 >
 (const hp::DoFHandler< 1 , 3 >&,
 const  Vector<float> &,
 const Function< 3 >&,
 Vector<float>&,
 const hp::QCollection< 1 >&,
 const NormType&,
 const Function< 3 >*,
 const double);

 }
#endif
 
#if  2  <=  1 
 namespace VectorTools {

 template
 void integrate_difference< 2 ,  Vector<float> , Vector<float>,  1 >
 (const Mapping< 2 ,  1 >&,
 const DoFHandler< 2 ,  1 >&,
 const  Vector<float> &,
 const Function< 1 >&,
 Vector<float>&,
 const Quadrature< 2 >&,
 const NormType&,
 const Function< 1 >*,
 const double);

 template
 void integrate_difference< 2 ,  Vector<float> , Vector<float>,  1 >
 (const DoFHandler< 2 ,  1 >&,
 const  Vector<float> &,
 const Function< 1 >&,
 Vector<float>&,
 const Quadrature< 2 >&,
 const NormType&,
 const Function< 1 >*,
 const double);

 template
 void integrate_difference< 2 ,  Vector<float> , Vector<double>,  1  >
 (const Mapping< 2 ,  1 >&,
 const DoFHandler< 2 ,  1 >&,
 const  Vector<float> &,
 const Function< 1 >&,
 Vector<double>&,
 const Quadrature< 2 >&,
 const NormType&,
 const Function< 1 >*,
 const double);

 template
 void integrate_difference< 2 ,  Vector<float> , Vector<double>,  1  >
 (const DoFHandler< 2 ,  1 >&,
 const  Vector<float> &,
 const Function< 1 >&,
 Vector<double>&,
 const Quadrature< 2 >&,
 const NormType&,
 const Function< 1 >*,
 const double);

 template
 void integrate_difference< 2 ,  Vector<float> , Vector<double>,  1 >
 (const hp::MappingCollection< 2 , 1 >&,
 const hp::DoFHandler< 2 , 1 >&,
 const  Vector<float> &,
 const Function< 1 >&,
 Vector<double>&,
 const hp::QCollection< 2 >&,
 const NormType&,
 const Function< 1 >*,
 const double);

 template
 void integrate_difference< 2 ,  Vector<float> , Vector<double>,  1 >
 (const hp::DoFHandler< 2 , 1 >&,
 const  Vector<float> &,
 const Function< 1 >&,
 Vector<double>&,
 const hp::QCollection< 2 >&,
 const NormType&,
 const Function< 1 >*,
 const double);

 template
 void integrate_difference< 2 ,  Vector<float> , Vector<float>,  1 >
 (const hp::MappingCollection< 2 , 1 >&,
 const hp::DoFHandler< 2 , 1 >&,
 const  Vector<float> &,
 const Function< 1 >&,
 Vector<float>&,
 const hp::QCollection< 2 >&,
 const NormType&,
 const Function< 1 >*,
 const double);

 template
 void integrate_difference< 2 ,  Vector<float> , Vector<float>,  1 >
 (const hp::DoFHandler< 2 , 1 >&,
 const  Vector<float> &,
 const Function< 1 >&,
 Vector<float>&,
 const hp::QCollection< 2 >&,
 const NormType&,
 const Function< 1 >*,
 const double);

 }
#endif
 
#if  2  <=  2 
 namespace VectorTools {

 template
 void integrate_difference< 2 ,  Vector<float> , Vector<float>,  2 >
 (const Mapping< 2 ,  2 >&,
 const DoFHandler< 2 ,  2 >&,
 const  Vector<float> &,
 const Function< 2 >&,
 Vector<float>&,
 const Quadrature< 2 >&,
 const NormType&,
 const Function< 2 >*,
 const double);

 template
 void integrate_difference< 2 ,  Vector<float> , Vector<float>,  2 >
 (const DoFHandler< 2 ,  2 >&,
 const  Vector<float> &,
 const Function< 2 >&,
 Vector<float>&,
 const Quadrature< 2 >&,
 const NormType&,
 const Function< 2 >*,
 const double);

 template
 void integrate_difference< 2 ,  Vector<float> , Vector<double>,  2  >
 (const Mapping< 2 ,  2 >&,
 const DoFHandler< 2 ,  2 >&,
 const  Vector<float> &,
 const Function< 2 >&,
 Vector<double>&,
 const Quadrature< 2 >&,
 const NormType&,
 const Function< 2 >*,
 const double);

 template
 void integrate_difference< 2 ,  Vector<float> , Vector<double>,  2  >
 (const DoFHandler< 2 ,  2 >&,
 const  Vector<float> &,
 const Function< 2 >&,
 Vector<double>&,
 const Quadrature< 2 >&,
 const NormType&,
 const Function< 2 >*,
 const double);

 template
 void integrate_difference< 2 ,  Vector<float> , Vector<double>,  2 >
 (const hp::MappingCollection< 2 , 2 >&,
 const hp::DoFHandler< 2 , 2 >&,
 const  Vector<float> &,
 const Function< 2 >&,
 Vector<double>&,
 const hp::QCollection< 2 >&,
 const NormType&,
 const Function< 2 >*,
 const double);

 template
 void integrate_difference< 2 ,  Vector<float> , Vector<double>,  2 >
 (const hp::DoFHandler< 2 , 2 >&,
 const  Vector<float> &,
 const Function< 2 >&,
 Vector<double>&,
 const hp::QCollection< 2 >&,
 const NormType&,
 const Function< 2 >*,
 const double);

 template
 void integrate_difference< 2 ,  Vector<float> , Vector<float>,  2 >
 (const hp::MappingCollection< 2 , 2 >&,
 const hp::DoFHandler< 2 , 2 >&,
 const  Vector<float> &,
 const Function< 2 >&,
 Vector<float>&,
 const hp::QCollection< 2 >&,
 const NormType&,
 const Function< 2 >*,
 const double);

 template
 void integrate_difference< 2 ,  Vector<float> , Vector<float>,  2 >
 (const hp::DoFHandler< 2 , 2 >&,
 const  Vector<float> &,
 const Function< 2 >&,
 Vector<float>&,
 const hp::QCollection< 2 >&,
 const NormType&,
 const Function< 2 >*,
 const double);

 }
#endif
 
#if  2  <=  3 
 namespace VectorTools {

 template
 void integrate_difference< 2 ,  Vector<float> , Vector<float>,  3 >
 (const Mapping< 2 ,  3 >&,
 const DoFHandler< 2 ,  3 >&,
 const  Vector<float> &,
 const Function< 3 >&,
 Vector<float>&,
 const Quadrature< 2 >&,
 const NormType&,
 const Function< 3 >*,
 const double);

 template
 void integrate_difference< 2 ,  Vector<float> , Vector<float>,  3 >
 (const DoFHandler< 2 ,  3 >&,
 const  Vector<float> &,
 const Function< 3 >&,
 Vector<float>&,
 const Quadrature< 2 >&,
 const NormType&,
 const Function< 3 >*,
 const double);

 template
 void integrate_difference< 2 ,  Vector<float> , Vector<double>,  3  >
 (const Mapping< 2 ,  3 >&,
 const DoFHandler< 2 ,  3 >&,
 const  Vector<float> &,
 const Function< 3 >&,
 Vector<double>&,
 const Quadrature< 2 >&,
 const NormType&,
 const Function< 3 >*,
 const double);

 template
 void integrate_difference< 2 ,  Vector<float> , Vector<double>,  3  >
 (const DoFHandler< 2 ,  3 >&,
 const  Vector<float> &,
 const Function< 3 >&,
 Vector<double>&,
 const Quadrature< 2 >&,
 const NormType&,
 const Function< 3 >*,
 const double);

 template
 void integrate_difference< 2 ,  Vector<float> , Vector<double>,  3 >
 (const hp::MappingCollection< 2 , 3 >&,
 const hp::DoFHandler< 2 , 3 >&,
 const  Vector<float> &,
 const Function< 3 >&,
 Vector<double>&,
 const hp::QCollection< 2 >&,
 const NormType&,
 const Function< 3 >*,
 const double);

 template
 void integrate_difference< 2 ,  Vector<float> , Vector<double>,  3 >
 (const hp::DoFHandler< 2 , 3 >&,
 const  Vector<float> &,
 const Function< 3 >&,
 Vector<double>&,
 const hp::QCollection< 2 >&,
 const NormType&,
 const Function< 3 >*,
 const double);

 template
 void integrate_difference< 2 ,  Vector<float> , Vector<float>,  3 >
 (const hp::MappingCollection< 2 , 3 >&,
 const hp::DoFHandler< 2 , 3 >&,
 const  Vector<float> &,
 const Function< 3 >&,
 Vector<float>&,
 const hp::QCollection< 2 >&,
 const NormType&,
 const Function< 3 >*,
 const double);

 template
 void integrate_difference< 2 ,  Vector<float> , Vector<float>,  3 >
 (const hp::DoFHandler< 2 , 3 >&,
 const  Vector<float> &,
 const Function< 3 >&,
 Vector<float>&,
 const hp::QCollection< 2 >&,
 const NormType&,
 const Function< 3 >*,
 const double);

 }
#endif
 
#if  3  <=  1 
 namespace VectorTools {

 template
 void integrate_difference< 3 ,  Vector<float> , Vector<float>,  1 >
 (const Mapping< 3 ,  1 >&,
 const DoFHandler< 3 ,  1 >&,
 const  Vector<float> &,
 const Function< 1 >&,
 Vector<float>&,
 const Quadrature< 3 >&,
 const NormType&,
 const Function< 1 >*,
 const double);

 template
 void integrate_difference< 3 ,  Vector<float> , Vector<float>,  1 >
 (const DoFHandler< 3 ,  1 >&,
 const  Vector<float> &,
 const Function< 1 >&,
 Vector<float>&,
 const Quadrature< 3 >&,
 const NormType&,
 const Function< 1 >*,
 const double);

 template
 void integrate_difference< 3 ,  Vector<float> , Vector<double>,  1  >
 (const Mapping< 3 ,  1 >&,
 const DoFHandler< 3 ,  1 >&,
 const  Vector<float> &,
 const Function< 1 >&,
 Vector<double>&,
 const Quadrature< 3 >&,
 const NormType&,
 const Function< 1 >*,
 const double);

 template
 void integrate_difference< 3 ,  Vector<float> , Vector<double>,  1  >
 (const DoFHandler< 3 ,  1 >&,
 const  Vector<float> &,
 const Function< 1 >&,
 Vector<double>&,
 const Quadrature< 3 >&,
 const NormType&,
 const Function< 1 >*,
 const double);

 template
 void integrate_difference< 3 ,  Vector<float> , Vector<double>,  1 >
 (const hp::MappingCollection< 3 , 1 >&,
 const hp::DoFHandler< 3 , 1 >&,
 const  Vector<float> &,
 const Function< 1 >&,
 Vector<double>&,
 const hp::QCollection< 3 >&,
 const NormType&,
 const Function< 1 >*,
 const double);

 template
 void integrate_difference< 3 ,  Vector<float> , Vector<double>,  1 >
 (const hp::DoFHandler< 3 , 1 >&,
 const  Vector<float> &,
 const Function< 1 >&,
 Vector<double>&,
 const hp::QCollection< 3 >&,
 const NormType&,
 const Function< 1 >*,
 const double);

 template
 void integrate_difference< 3 ,  Vector<float> , Vector<float>,  1 >
 (const hp::MappingCollection< 3 , 1 >&,
 const hp::DoFHandler< 3 , 1 >&,
 const  Vector<float> &,
 const Function< 1 >&,
 Vector<float>&,
 const hp::QCollection< 3 >&,
 const NormType&,
 const Function< 1 >*,
 const double);

 template
 void integrate_difference< 3 ,  Vector<float> , Vector<float>,  1 >
 (const hp::DoFHandler< 3 , 1 >&,
 const  Vector<float> &,
 const Function< 1 >&,
 Vector<float>&,
 const hp::QCollection< 3 >&,
 const NormType&,
 const Function< 1 >*,
 const double);

 }
#endif
 
#if  3  <=  2 
 namespace VectorTools {

 template
 void integrate_difference< 3 ,  Vector<float> , Vector<float>,  2 >
 (const Mapping< 3 ,  2 >&,
 const DoFHandler< 3 ,  2 >&,
 const  Vector<float> &,
 const Function< 2 >&,
 Vector<float>&,
 const Quadrature< 3 >&,
 const NormType&,
 const Function< 2 >*,
 const double);

 template
 void integrate_difference< 3 ,  Vector<float> , Vector<float>,  2 >
 (const DoFHandler< 3 ,  2 >&,
 const  Vector<float> &,
 const Function< 2 >&,
 Vector<float>&,
 const Quadrature< 3 >&,
 const NormType&,
 const Function< 2 >*,
 const double);

 template
 void integrate_difference< 3 ,  Vector<float> , Vector<double>,  2  >
 (const Mapping< 3 ,  2 >&,
 const DoFHandler< 3 ,  2 >&,
 const  Vector<float> &,
 const Function< 2 >&,
 Vector<double>&,
 const Quadrature< 3 >&,
 const NormType&,
 const Function< 2 >*,
 const double);

 template
 void integrate_difference< 3 ,  Vector<float> , Vector<double>,  2  >
 (const DoFHandler< 3 ,  2 >&,
 const  Vector<float> &,
 const Function< 2 >&,
 Vector<double>&,
 const Quadrature< 3 >&,
 const NormType&,
 const Function< 2 >*,
 const double);

 template
 void integrate_difference< 3 ,  Vector<float> , Vector<double>,  2 >
 (const hp::MappingCollection< 3 , 2 >&,
 const hp::DoFHandler< 3 , 2 >&,
 const  Vector<float> &,
 const Function< 2 >&,
 Vector<double>&,
 const hp::QCollection< 3 >&,
 const NormType&,
 const Function< 2 >*,
 const double);

 template
 void integrate_difference< 3 ,  Vector<float> , Vector<double>,  2 >
 (const hp::DoFHandler< 3 , 2 >&,
 const  Vector<float> &,
 const Function< 2 >&,
 Vector<double>&,
 const hp::QCollection< 3 >&,
 const NormType&,
 const Function< 2 >*,
 const double);

 template
 void integrate_difference< 3 ,  Vector<float> , Vector<float>,  2 >
 (const hp::MappingCollection< 3 , 2 >&,
 const hp::DoFHandler< 3 , 2 >&,
 const  Vector<float> &,
 const Function< 2 >&,
 Vector<float>&,
 const hp::QCollection< 3 >&,
 const NormType&,
 const Function< 2 >*,
 const double);

 template
 void integrate_difference< 3 ,  Vector<float> , Vector<float>,  2 >
 (const hp::DoFHandler< 3 , 2 >&,
 const  Vector<float> &,
 const Function< 2 >&,
 Vector<float>&,
 const hp::QCollection< 3 >&,
 const NormType&,
 const Function< 2 >*,
 const double);

 }
#endif
 
#if  3  <=  3 
 namespace VectorTools {

 template
 void integrate_difference< 3 ,  Vector<float> , Vector<float>,  3 >
 (const Mapping< 3 ,  3 >&,
 const DoFHandler< 3 ,  3 >&,
 const  Vector<float> &,
 const Function< 3 >&,
 Vector<float>&,
 const Quadrature< 3 >&,
 const NormType&,
 const Function< 3 >*,
 const double);

 template
 void integrate_difference< 3 ,  Vector<float> , Vector<float>,  3 >
 (const DoFHandler< 3 ,  3 >&,
 const  Vector<float> &,
 const Function< 3 >&,
 Vector<float>&,
 const Quadrature< 3 >&,
 const NormType&,
 const Function< 3 >*,
 const double);

 template
 void integrate_difference< 3 ,  Vector<float> , Vector<double>,  3  >
 (const Mapping< 3 ,  3 >&,
 const DoFHandler< 3 ,  3 >&,
 const  Vector<float> &,
 const Function< 3 >&,
 Vector<double>&,
 const Quadrature< 3 >&,
 const NormType&,
 const Function< 3 >*,
 const double);

 template
 void integrate_difference< 3 ,  Vector<float> , Vector<double>,  3  >
 (const DoFHandler< 3 ,  3 >&,
 const  Vector<float> &,
 const Function< 3 >&,
 Vector<double>&,
 const Quadrature< 3 >&,
 const NormType&,
 const Function< 3 >*,
 const double);

 template
 void integrate_difference< 3 ,  Vector<float> , Vector<double>,  3 >
 (const hp::MappingCollection< 3 , 3 >&,
 const hp::DoFHandler< 3 , 3 >&,
 const  Vector<float> &,
 const Function< 3 >&,
 Vector<double>&,
 const hp::QCollection< 3 >&,
 const NormType&,
 const Function< 3 >*,
 const double);

 template
 void integrate_difference< 3 ,  Vector<float> , Vector<double>,  3 >
 (const hp::DoFHandler< 3 , 3 >&,
 const  Vector<float> &,
 const Function< 3 >&,
 Vector<double>&,
 const hp::QCollection< 3 >&,
 const NormType&,
 const Function< 3 >*,
 const double);

 template
 void integrate_difference< 3 ,  Vector<float> , Vector<float>,  3 >
 (const hp::MappingCollection< 3 , 3 >&,
 const hp::DoFHandler< 3 , 3 >&,
 const  Vector<float> &,
 const Function< 3 >&,
 Vector<float>&,
 const hp::QCollection< 3 >&,
 const NormType&,
 const Function< 3 >*,
 const double);

 template
 void integrate_difference< 3 ,  Vector<float> , Vector<float>,  3 >
 (const hp::DoFHandler< 3 , 3 >&,
 const  Vector<float> &,
 const Function< 3 >&,
 Vector<float>&,
 const hp::QCollection< 3 >&,
 const NormType&,
 const Function< 3 >*,
 const double);

 }
#endif
 
#if  1  <=  1 
 namespace VectorTools {

 template
 void integrate_difference< 1 ,  Vector<long double> , Vector<float>,  1 >
 (const Mapping< 1 ,  1 >&,
 const DoFHandler< 1 ,  1 >&,
 const  Vector<long double> &,
 const Function< 1 >&,
 Vector<float>&,
 const Quadrature< 1 >&,
 const NormType&,
 const Function< 1 >*,
 const double);

 template
 void integrate_difference< 1 ,  Vector<long double> , Vector<float>,  1 >
 (const DoFHandler< 1 ,  1 >&,
 const  Vector<long double> &,
 const Function< 1 >&,
 Vector<float>&,
 const Quadrature< 1 >&,
 const NormType&,
 const Function< 1 >*,
 const double);

 template
 void integrate_difference< 1 ,  Vector<long double> , Vector<double>,  1  >
 (const Mapping< 1 ,  1 >&,
 const DoFHandler< 1 ,  1 >&,
 const  Vector<long double> &,
 const Function< 1 >&,
 Vector<double>&,
 const Quadrature< 1 >&,
 const NormType&,
 const Function< 1 >*,
 const double);

 template
 void integrate_difference< 1 ,  Vector<long double> , Vector<double>,  1  >
 (const DoFHandler< 1 ,  1 >&,
 const  Vector<long double> &,
 const Function< 1 >&,
 Vector<double>&,
 const Quadrature< 1 >&,
 const NormType&,
 const Function< 1 >*,
 const double);

 template
 void integrate_difference< 1 ,  Vector<long double> , Vector<double>,  1 >
 (const hp::MappingCollection< 1 , 1 >&,
 const hp::DoFHandler< 1 , 1 >&,
 const  Vector<long double> &,
 const Function< 1 >&,
 Vector<double>&,
 const hp::QCollection< 1 >&,
 const NormType&,
 const Function< 1 >*,
 const double);

 template
 void integrate_difference< 1 ,  Vector<long double> , Vector<double>,  1 >
 (const hp::DoFHandler< 1 , 1 >&,
 const  Vector<long double> &,
 const Function< 1 >&,
 Vector<double>&,
 const hp::QCollection< 1 >&,
 const NormType&,
 const Function< 1 >*,
 const double);

 template
 void integrate_difference< 1 ,  Vector<long double> , Vector<float>,  1 >
 (const hp::MappingCollection< 1 , 1 >&,
 const hp::DoFHandler< 1 , 1 >&,
 const  Vector<long double> &,
 const Function< 1 >&,
 Vector<float>&,
 const hp::QCollection< 1 >&,
 const NormType&,
 const Function< 1 >*,
 const double);

 template
 void integrate_difference< 1 ,  Vector<long double> , Vector<float>,  1 >
 (const hp::DoFHandler< 1 , 1 >&,
 const  Vector<long double> &,
 const Function< 1 >&,
 Vector<float>&,
 const hp::QCollection< 1 >&,
 const NormType&,
 const Function< 1 >*,
 const double);

 }
#endif
 
#if  1  <=  2 
 namespace VectorTools {

 template
 void integrate_difference< 1 ,  Vector<long double> , Vector<float>,  2 >
 (const Mapping< 1 ,  2 >&,
 const DoFHandler< 1 ,  2 >&,
 const  Vector<long double> &,
 const Function< 2 >&,
 Vector<float>&,
 const Quadrature< 1 >&,
 const NormType&,
 const Function< 2 >*,
 const double);

 template
 void integrate_difference< 1 ,  Vector<long double> , Vector<float>,  2 >
 (const DoFHandler< 1 ,  2 >&,
 const  Vector<long double> &,
 const Function< 2 >&,
 Vector<float>&,
 const Quadrature< 1 >&,
 const NormType&,
 const Function< 2 >*,
 const double);

 template
 void integrate_difference< 1 ,  Vector<long double> , Vector<double>,  2  >
 (const Mapping< 1 ,  2 >&,
 const DoFHandler< 1 ,  2 >&,
 const  Vector<long double> &,
 const Function< 2 >&,
 Vector<double>&,
 const Quadrature< 1 >&,
 const NormType&,
 const Function< 2 >*,
 const double);

 template
 void integrate_difference< 1 ,  Vector<long double> , Vector<double>,  2  >
 (const DoFHandler< 1 ,  2 >&,
 const  Vector<long double> &,
 const Function< 2 >&,
 Vector<double>&,
 const Quadrature< 1 >&,
 const NormType&,
 const Function< 2 >*,
 const double);

 template
 void integrate_difference< 1 ,  Vector<long double> , Vector<double>,  2 >
 (const hp::MappingCollection< 1 , 2 >&,
 const hp::DoFHandler< 1 , 2 >&,
 const  Vector<long double> &,
 const Function< 2 >&,
 Vector<double>&,
 const hp::QCollection< 1 >&,
 const NormType&,
 const Function< 2 >*,
 const double);

 template
 void integrate_difference< 1 ,  Vector<long double> , Vector<double>,  2 >
 (const hp::DoFHandler< 1 , 2 >&,
 const  Vector<long double> &,
 const Function< 2 >&,
 Vector<double>&,
 const hp::QCollection< 1 >&,
 const NormType&,
 const Function< 2 >*,
 const double);

 template
 void integrate_difference< 1 ,  Vector<long double> , Vector<float>,  2 >
 (const hp::MappingCollection< 1 , 2 >&,
 const hp::DoFHandler< 1 , 2 >&,
 const  Vector<long double> &,
 const Function< 2 >&,
 Vector<float>&,
 const hp::QCollection< 1 >&,
 const NormType&,
 const Function< 2 >*,
 const double);

 template
 void integrate_difference< 1 ,  Vector<long double> , Vector<float>,  2 >
 (const hp::DoFHandler< 1 , 2 >&,
 const  Vector<long double> &,
 const Function< 2 >&,
 Vector<float>&,
 const hp::QCollection< 1 >&,
 const NormType&,
 const Function< 2 >*,
 const double);

 }
#endif
 
#if  1  <=  3 
 namespace VectorTools {

 template
 void integrate_difference< 1 ,  Vector<long double> , Vector<float>,  3 >
 (const Mapping< 1 ,  3 >&,
 const DoFHandler< 1 ,  3 >&,
 const  Vector<long double> &,
 const Function< 3 >&,
 Vector<float>&,
 const Quadrature< 1 >&,
 const NormType&,
 const Function< 3 >*,
 const double);

 template
 void integrate_difference< 1 ,  Vector<long double> , Vector<float>,  3 >
 (const DoFHandler< 1 ,  3 >&,
 const  Vector<long double> &,
 const Function< 3 >&,
 Vector<float>&,
 const Quadrature< 1 >&,
 const NormType&,
 const Function< 3 >*,
 const double);

 template
 void integrate_difference< 1 ,  Vector<long double> , Vector<double>,  3  >
 (const Mapping< 1 ,  3 >&,
 const DoFHandler< 1 ,  3 >&,
 const  Vector<long double> &,
 const Function< 3 >&,
 Vector<double>&,
 const Quadrature< 1 >&,
 const NormType&,
 const Function< 3 >*,
 const double);

 template
 void integrate_difference< 1 ,  Vector<long double> , Vector<double>,  3  >
 (const DoFHandler< 1 ,  3 >&,
 const  Vector<long double> &,
 const Function< 3 >&,
 Vector<double>&,
 const Quadrature< 1 >&,
 const NormType&,
 const Function< 3 >*,
 const double);

 template
 void integrate_difference< 1 ,  Vector<long double> , Vector<double>,  3 >
 (const hp::MappingCollection< 1 , 3 >&,
 const hp::DoFHandler< 1 , 3 >&,
 const  Vector<long double> &,
 const Function< 3 >&,
 Vector<double>&,
 const hp::QCollection< 1 >&,
 const NormType&,
 const Function< 3 >*,
 const double);

 template
 void integrate_difference< 1 ,  Vector<long double> , Vector<double>,  3 >
 (const hp::DoFHandler< 1 , 3 >&,
 const  Vector<long double> &,
 const Function< 3 >&,
 Vector<double>&,
 const hp::QCollection< 1 >&,
 const NormType&,
 const Function< 3 >*,
 const double);

 template
 void integrate_difference< 1 ,  Vector<long double> , Vector<float>,  3 >
 (const hp::MappingCollection< 1 , 3 >&,
 const hp::DoFHandler< 1 , 3 >&,
 const  Vector<long double> &,
 const Function< 3 >&,
 Vector<float>&,
 const hp::QCollection< 1 >&,
 const NormType&,
 const Function< 3 >*,
 const double);

 template
 void integrate_difference< 1 ,  Vector<long double> , Vector<float>,  3 >
 (const hp::DoFHandler< 1 , 3 >&,
 const  Vector<long double> &,
 const Function< 3 >&,
 Vector<float>&,
 const hp::QCollection< 1 >&,
 const NormType&,
 const Function< 3 >*,
 const double);

 }
#endif
 
#if  2  <=  1 
 namespace VectorTools {

 template
 void integrate_difference< 2 ,  Vector<long double> , Vector<float>,  1 >
 (const Mapping< 2 ,  1 >&,
 const DoFHandler< 2 ,  1 >&,
 const  Vector<long double> &,
 const Function< 1 >&,
 Vector<float>&,
 const Quadrature< 2 >&,
 const NormType&,
 const Function< 1 >*,
 const double);

 template
 void integrate_difference< 2 ,  Vector<long double> , Vector<float>,  1 >
 (const DoFHandler< 2 ,  1 >&,
 const  Vector<long double> &,
 const Function< 1 >&,
 Vector<float>&,
 const Quadrature< 2 >&,
 const NormType&,
 const Function< 1 >*,
 const double);

 template
 void integrate_difference< 2 ,  Vector<long double> , Vector<double>,  1  >
 (const Mapping< 2 ,  1 >&,
 const DoFHandler< 2 ,  1 >&,
 const  Vector<long double> &,
 const Function< 1 >&,
 Vector<double>&,
 const Quadrature< 2 >&,
 const NormType&,
 const Function< 1 >*,
 const double);

 template
 void integrate_difference< 2 ,  Vector<long double> , Vector<double>,  1  >
 (const DoFHandler< 2 ,  1 >&,
 const  Vector<long double> &,
 const Function< 1 >&,
 Vector<double>&,
 const Quadrature< 2 >&,
 const NormType&,
 const Function< 1 >*,
 const double);

 template
 void integrate_difference< 2 ,  Vector<long double> , Vector<double>,  1 >
 (const hp::MappingCollection< 2 , 1 >&,
 const hp::DoFHandler< 2 , 1 >&,
 const  Vector<long double> &,
 const Function< 1 >&,
 Vector<double>&,
 const hp::QCollection< 2 >&,
 const NormType&,
 const Function< 1 >*,
 const double);

 template
 void integrate_difference< 2 ,  Vector<long double> , Vector<double>,  1 >
 (const hp::DoFHandler< 2 , 1 >&,
 const  Vector<long double> &,
 const Function< 1 >&,
 Vector<double>&,
 const hp::QCollection< 2 >&,
 const NormType&,
 const Function< 1 >*,
 const double);

 template
 void integrate_difference< 2 ,  Vector<long double> , Vector<float>,  1 >
 (const hp::MappingCollection< 2 , 1 >&,
 const hp::DoFHandler< 2 , 1 >&,
 const  Vector<long double> &,
 const Function< 1 >&,
 Vector<float>&,
 const hp::QCollection< 2 >&,
 const NormType&,
 const Function< 1 >*,
 const double);

 template
 void integrate_difference< 2 ,  Vector<long double> , Vector<float>,  1 >
 (const hp::DoFHandler< 2 , 1 >&,
 const  Vector<long double> &,
 const Function< 1 >&,
 Vector<float>&,
 const hp::QCollection< 2 >&,
 const NormType&,
 const Function< 1 >*,
 const double);

 }
#endif
 
#if  2  <=  2 
 namespace VectorTools {

 template
 void integrate_difference< 2 ,  Vector<long double> , Vector<float>,  2 >
 (const Mapping< 2 ,  2 >&,
 const DoFHandler< 2 ,  2 >&,
 const  Vector<long double> &,
 const Function< 2 >&,
 Vector<float>&,
 const Quadrature< 2 >&,
 const NormType&,
 const Function< 2 >*,
 const double);

 template
 void integrate_difference< 2 ,  Vector<long double> , Vector<float>,  2 >
 (const DoFHandler< 2 ,  2 >&,
 const  Vector<long double> &,
 const Function< 2 >&,
 Vector<float>&,
 const Quadrature< 2 >&,
 const NormType&,
 const Function< 2 >*,
 const double);

 template
 void integrate_difference< 2 ,  Vector<long double> , Vector<double>,  2  >
 (const Mapping< 2 ,  2 >&,
 const DoFHandler< 2 ,  2 >&,
 const  Vector<long double> &,
 const Function< 2 >&,
 Vector<double>&,
 const Quadrature< 2 >&,
 const NormType&,
 const Function< 2 >*,
 const double);

 template
 void integrate_difference< 2 ,  Vector<long double> , Vector<double>,  2  >
 (const DoFHandler< 2 ,  2 >&,
 const  Vector<long double> &,
 const Function< 2 >&,
 Vector<double>&,
 const Quadrature< 2 >&,
 const NormType&,
 const Function< 2 >*,
 const double);

 template
 void integrate_difference< 2 ,  Vector<long double> , Vector<double>,  2 >
 (const hp::MappingCollection< 2 , 2 >&,
 const hp::DoFHandler< 2 , 2 >&,
 const  Vector<long double> &,
 const Function< 2 >&,
 Vector<double>&,
 const hp::QCollection< 2 >&,
 const NormType&,
 const Function< 2 >*,
 const double);

 template
 void integrate_difference< 2 ,  Vector<long double> , Vector<double>,  2 >
 (const hp::DoFHandler< 2 , 2 >&,
 const  Vector<long double> &,
 const Function< 2 >&,
 Vector<double>&,
 const hp::QCollection< 2 >&,
 const NormType&,
 const Function< 2 >*,
 const double);

 template
 void integrate_difference< 2 ,  Vector<long double> , Vector<float>,  2 >
 (const hp::MappingCollection< 2 , 2 >&,
 const hp::DoFHandler< 2 , 2 >&,
 const  Vector<long double> &,
 const Function< 2 >&,
 Vector<float>&,
 const hp::QCollection< 2 >&,
 const NormType&,
 const Function< 2 >*,
 const double);

 template
 void integrate_difference< 2 ,  Vector<long double> , Vector<float>,  2 >
 (const hp::DoFHandler< 2 , 2 >&,
 const  Vector<long double> &,
 const Function< 2 >&,
 Vector<float>&,
 const hp::QCollection< 2 >&,
 const NormType&,
 const Function< 2 >*,
 const double);

 }
#endif
 
#if  2  <=  3 
 namespace VectorTools {

 template
 void integrate_difference< 2 ,  Vector<long double> , Vector<float>,  3 >
 (const Mapping< 2 ,  3 >&,
 const DoFHandler< 2 ,  3 >&,
 const  Vector<long double> &,
 const Function< 3 >&,
 Vector<float>&,
 const Quadrature< 2 >&,
 const NormType&,
 const Function< 3 >*,
 const double);

 template
 void integrate_difference< 2 ,  Vector<long double> , Vector<float>,  3 >
 (const DoFHandler< 2 ,  3 >&,
 const  Vector<long double> &,
 const Function< 3 >&,
 Vector<float>&,
 const Quadrature< 2 >&,
 const NormType&,
 const Function< 3 >*,
 const double);

 template
 void integrate_difference< 2 ,  Vector<long double> , Vector<double>,  3  >
 (const Mapping< 2 ,  3 >&,
 const DoFHandler< 2 ,  3 >&,
 const  Vector<long double> &,
 const Function< 3 >&,
 Vector<double>&,
 const Quadrature< 2 >&,
 const NormType&,
 const Function< 3 >*,
 const double);

 template
 void integrate_difference< 2 ,  Vector<long double> , Vector<double>,  3  >
 (const DoFHandler< 2 ,  3 >&,
 const  Vector<long double> &,
 const Function< 3 >&,
 Vector<double>&,
 const Quadrature< 2 >&,
 const NormType&,
 const Function< 3 >*,
 const double);

 template
 void integrate_difference< 2 ,  Vector<long double> , Vector<double>,  3 >
 (const hp::MappingCollection< 2 , 3 >&,
 const hp::DoFHandler< 2 , 3 >&,
 const  Vector<long double> &,
 const Function< 3 >&,
 Vector<double>&,
 const hp::QCollection< 2 >&,
 const NormType&,
 const Function< 3 >*,
 const double);

 template
 void integrate_difference< 2 ,  Vector<long double> , Vector<double>,  3 >
 (const hp::DoFHandler< 2 , 3 >&,
 const  Vector<long double> &,
 const Function< 3 >&,
 Vector<double>&,
 const hp::QCollection< 2 >&,
 const NormType&,
 const Function< 3 >*,
 const double);

 template
 void integrate_difference< 2 ,  Vector<long double> , Vector<float>,  3 >
 (const hp::MappingCollection< 2 , 3 >&,
 const hp::DoFHandler< 2 , 3 >&,
 const  Vector<long double> &,
 const Function< 3 >&,
 Vector<float>&,
 const hp::QCollection< 2 >&,
 const NormType&,
 const Function< 3 >*,
 const double);

 template
 void integrate_difference< 2 ,  Vector<long double> , Vector<float>,  3 >
 (const hp::DoFHandler< 2 , 3 >&,
 const  Vector<long double> &,
 const Function< 3 >&,
 Vector<float>&,
 const hp::QCollection< 2 >&,
 const NormType&,
 const Function< 3 >*,
 const double);

 }
#endif
 
#if  3  <=  1 
 namespace VectorTools {

 template
 void integrate_difference< 3 ,  Vector<long double> , Vector<float>,  1 >
 (const Mapping< 3 ,  1 >&,
 const DoFHandler< 3 ,  1 >&,
 const  Vector<long double> &,
 const Function< 1 >&,
 Vector<float>&,
 const Quadrature< 3 >&,
 const NormType&,
 const Function< 1 >*,
 const double);

 template
 void integrate_difference< 3 ,  Vector<long double> , Vector<float>,  1 >
 (const DoFHandler< 3 ,  1 >&,
 const  Vector<long double> &,
 const Function< 1 >&,
 Vector<float>&,
 const Quadrature< 3 >&,
 const NormType&,
 const Function< 1 >*,
 const double);

 template
 void integrate_difference< 3 ,  Vector<long double> , Vector<double>,  1  >
 (const Mapping< 3 ,  1 >&,
 const DoFHandler< 3 ,  1 >&,
 const  Vector<long double> &,
 const Function< 1 >&,
 Vector<double>&,
 const Quadrature< 3 >&,
 const NormType&,
 const Function< 1 >*,
 const double);

 template
 void integrate_difference< 3 ,  Vector<long double> , Vector<double>,  1  >
 (const DoFHandler< 3 ,  1 >&,
 const  Vector<long double> &,
 const Function< 1 >&,
 Vector<double>&,
 const Quadrature< 3 >&,
 const NormType&,
 const Function< 1 >*,
 const double);

 template
 void integrate_difference< 3 ,  Vector<long double> , Vector<double>,  1 >
 (const hp::MappingCollection< 3 , 1 >&,
 const hp::DoFHandler< 3 , 1 >&,
 const  Vector<long double> &,
 const Function< 1 >&,
 Vector<double>&,
 const hp::QCollection< 3 >&,
 const NormType&,
 const Function< 1 >*,
 const double);

 template
 void integrate_difference< 3 ,  Vector<long double> , Vector<double>,  1 >
 (const hp::DoFHandler< 3 , 1 >&,
 const  Vector<long double> &,
 const Function< 1 >&,
 Vector<double>&,
 const hp::QCollection< 3 >&,
 const NormType&,
 const Function< 1 >*,
 const double);

 template
 void integrate_difference< 3 ,  Vector<long double> , Vector<float>,  1 >
 (const hp::MappingCollection< 3 , 1 >&,
 const hp::DoFHandler< 3 , 1 >&,
 const  Vector<long double> &,
 const Function< 1 >&,
 Vector<float>&,
 const hp::QCollection< 3 >&,
 const NormType&,
 const Function< 1 >*,
 const double);

 template
 void integrate_difference< 3 ,  Vector<long double> , Vector<float>,  1 >
 (const hp::DoFHandler< 3 , 1 >&,
 const  Vector<long double> &,
 const Function< 1 >&,
 Vector<float>&,
 const hp::QCollection< 3 >&,
 const NormType&,
 const Function< 1 >*,
 const double);

 }
#endif
 
#if  3  <=  2 
 namespace VectorTools {

 template
 void integrate_difference< 3 ,  Vector<long double> , Vector<float>,  2 >
 (const Mapping< 3 ,  2 >&,
 const DoFHandler< 3 ,  2 >&,
 const  Vector<long double> &,
 const Function< 2 >&,
 Vector<float>&,
 const Quadrature< 3 >&,
 const NormType&,
 const Function< 2 >*,
 const double);

 template
 void integrate_difference< 3 ,  Vector<long double> , Vector<float>,  2 >
 (const DoFHandler< 3 ,  2 >&,
 const  Vector<long double> &,
 const Function< 2 >&,
 Vector<float>&,
 const Quadrature< 3 >&,
 const NormType&,
 const Function< 2 >*,
 const double);

 template
 void integrate_difference< 3 ,  Vector<long double> , Vector<double>,  2  >
 (const Mapping< 3 ,  2 >&,
 const DoFHandler< 3 ,  2 >&,
 const  Vector<long double> &,
 const Function< 2 >&,
 Vector<double>&,
 const Quadrature< 3 >&,
 const NormType&,
 const Function< 2 >*,
 const double);

 template
 void integrate_difference< 3 ,  Vector<long double> , Vector<double>,  2  >
 (const DoFHandler< 3 ,  2 >&,
 const  Vector<long double> &,
 const Function< 2 >&,
 Vector<double>&,
 const Quadrature< 3 >&,
 const NormType&,
 const Function< 2 >*,
 const double);

 template
 void integrate_difference< 3 ,  Vector<long double> , Vector<double>,  2 >
 (const hp::MappingCollection< 3 , 2 >&,
 const hp::DoFHandler< 3 , 2 >&,
 const  Vector<long double> &,
 const Function< 2 >&,
 Vector<double>&,
 const hp::QCollection< 3 >&,
 const NormType&,
 const Function< 2 >*,
 const double);

 template
 void integrate_difference< 3 ,  Vector<long double> , Vector<double>,  2 >
 (const hp::DoFHandler< 3 , 2 >&,
 const  Vector<long double> &,
 const Function< 2 >&,
 Vector<double>&,
 const hp::QCollection< 3 >&,
 const NormType&,
 const Function< 2 >*,
 const double);

 template
 void integrate_difference< 3 ,  Vector<long double> , Vector<float>,  2 >
 (const hp::MappingCollection< 3 , 2 >&,
 const hp::DoFHandler< 3 , 2 >&,
 const  Vector<long double> &,
 const Function< 2 >&,
 Vector<float>&,
 const hp::QCollection< 3 >&,
 const NormType&,
 const Function< 2 >*,
 const double);

 template
 void integrate_difference< 3 ,  Vector<long double> , Vector<float>,  2 >
 (const hp::DoFHandler< 3 , 2 >&,
 const  Vector<long double> &,
 const Function< 2 >&,
 Vector<float>&,
 const hp::QCollection< 3 >&,
 const NormType&,
 const Function< 2 >*,
 const double);

 }
#endif
 
#if  3  <=  3 
 namespace VectorTools {

 template
 void integrate_difference< 3 ,  Vector<long double> , Vector<float>,  3 >
 (const Mapping< 3 ,  3 >&,
 const DoFHandler< 3 ,  3 >&,
 const  Vector<long double> &,
 const Function< 3 >&,
 Vector<float>&,
 const Quadrature< 3 >&,
 const NormType&,
 const Function< 3 >*,
 const double);

 template
 void integrate_difference< 3 ,  Vector<long double> , Vector<float>,  3 >
 (const DoFHandler< 3 ,  3 >&,
 const  Vector<long double> &,
 const Function< 3 >&,
 Vector<float>&,
 const Quadrature< 3 >&,
 const NormType&,
 const Function< 3 >*,
 const double);

 template
 void integrate_difference< 3 ,  Vector<long double> , Vector<double>,  3  >
 (const Mapping< 3 ,  3 >&,
 const DoFHandler< 3 ,  3 >&,
 const  Vector<long double> &,
 const Function< 3 >&,
 Vector<double>&,
 const Quadrature< 3 >&,
 const NormType&,
 const Function< 3 >*,
 const double);

 template
 void integrate_difference< 3 ,  Vector<long double> , Vector<double>,  3  >
 (const DoFHandler< 3 ,  3 >&,
 const  Vector<long double> &,
 const Function< 3 >&,
 Vector<double>&,
 const Quadrature< 3 >&,
 const NormType&,
 const Function< 3 >*,
 const double);

 template
 void integrate_difference< 3 ,  Vector<long double> , Vector<double>,  3 >
 (const hp::MappingCollection< 3 , 3 >&,
 const hp::DoFHandler< 3 , 3 >&,
 const  Vector<long double> &,
 const Function< 3 >&,
 Vector<double>&,
 const hp::QCollection< 3 >&,
 const NormType&,
 const Function< 3 >*,
 const double);

 template
 void integrate_difference< 3 ,  Vector<long double> , Vector<double>,  3 >
 (const hp::DoFHandler< 3 , 3 >&,
 const  Vector<long double> &,
 const Function< 3 >&,
 Vector<double>&,
 const hp::QCollection< 3 >&,
 const NormType&,
 const Function< 3 >*,
 const double);

 template
 void integrate_difference< 3 ,  Vector<long double> , Vector<float>,  3 >
 (const hp::MappingCollection< 3 , 3 >&,
 const hp::DoFHandler< 3 , 3 >&,
 const  Vector<long double> &,
 const Function< 3 >&,
 Vector<float>&,
 const hp::QCollection< 3 >&,
 const NormType&,
 const Function< 3 >*,
 const double);

 template
 void integrate_difference< 3 ,  Vector<long double> , Vector<float>,  3 >
 (const hp::DoFHandler< 3 , 3 >&,
 const  Vector<long double> &,
 const Function< 3 >&,
 Vector<float>&,
 const hp::QCollection< 3 >&,
 const NormType&,
 const Function< 3 >*,
 const double);

 }
#endif
 
#if  1  <=  1 
 namespace VectorTools {

 template
 void integrate_difference< 1 ,  BlockVector<double> , Vector<float>,  1 >
 (const Mapping< 1 ,  1 >&,
 const DoFHandler< 1 ,  1 >&,
 const  BlockVector<double> &,
 const Function< 1 >&,
 Vector<float>&,
 const Quadrature< 1 >&,
 const NormType&,
 const Function< 1 >*,
 const double);

 template
 void integrate_difference< 1 ,  BlockVector<double> , Vector<float>,  1 >
 (const DoFHandler< 1 ,  1 >&,
 const  BlockVector<double> &,
 const Function< 1 >&,
 Vector<float>&,
 const Quadrature< 1 >&,
 const NormType&,
 const Function< 1 >*,
 const double);

 template
 void integrate_difference< 1 ,  BlockVector<double> , Vector<double>,  1  >
 (const Mapping< 1 ,  1 >&,
 const DoFHandler< 1 ,  1 >&,
 const  BlockVector<double> &,
 const Function< 1 >&,
 Vector<double>&,
 const Quadrature< 1 >&,
 const NormType&,
 const Function< 1 >*,
 const double);

 template
 void integrate_difference< 1 ,  BlockVector<double> , Vector<double>,  1  >
 (const DoFHandler< 1 ,  1 >&,
 const  BlockVector<double> &,
 const Function< 1 >&,
 Vector<double>&,
 const Quadrature< 1 >&,
 const NormType&,
 const Function< 1 >*,
 const double);

 template
 void integrate_difference< 1 ,  BlockVector<double> , Vector<double>,  1 >
 (const hp::MappingCollection< 1 , 1 >&,
 const hp::DoFHandler< 1 , 1 >&,
 const  BlockVector<double> &,
 const Function< 1 >&,
 Vector<double>&,
 const hp::QCollection< 1 >&,
 const NormType&,
 const Function< 1 >*,
 const double);

 template
 void integrate_difference< 1 ,  BlockVector<double> , Vector<double>,  1 >
 (const hp::DoFHandler< 1 , 1 >&,
 const  BlockVector<double> &,
 const Function< 1 >&,
 Vector<double>&,
 const hp::QCollection< 1 >&,
 const NormType&,
 const Function< 1 >*,
 const double);

 template
 void integrate_difference< 1 ,  BlockVector<double> , Vector<float>,  1 >
 (const hp::MappingCollection< 1 , 1 >&,
 const hp::DoFHandler< 1 , 1 >&,
 const  BlockVector<double> &,
 const Function< 1 >&,
 Vector<float>&,
 const hp::QCollection< 1 >&,
 const NormType&,
 const Function< 1 >*,
 const double);

 template
 void integrate_difference< 1 ,  BlockVector<double> , Vector<float>,  1 >
 (const hp::DoFHandler< 1 , 1 >&,
 const  BlockVector<double> &,
 const Function< 1 >&,
 Vector<float>&,
 const hp::QCollection< 1 >&,
 const NormType&,
 const Function< 1 >*,
 const double);

 }
#endif
 
#if  1  <=  2 
 namespace VectorTools {

 template
 void integrate_difference< 1 ,  BlockVector<double> , Vector<float>,  2 >
 (const Mapping< 1 ,  2 >&,
 const DoFHandler< 1 ,  2 >&,
 const  BlockVector<double> &,
 const Function< 2 >&,
 Vector<float>&,
 const Quadrature< 1 >&,
 const NormType&,
 const Function< 2 >*,
 const double);

 template
 void integrate_difference< 1 ,  BlockVector<double> , Vector<float>,  2 >
 (const DoFHandler< 1 ,  2 >&,
 const  BlockVector<double> &,
 const Function< 2 >&,
 Vector<float>&,
 const Quadrature< 1 >&,
 const NormType&,
 const Function< 2 >*,
 const double);

 template
 void integrate_difference< 1 ,  BlockVector<double> , Vector<double>,  2  >
 (const Mapping< 1 ,  2 >&,
 const DoFHandler< 1 ,  2 >&,
 const  BlockVector<double> &,
 const Function< 2 >&,
 Vector<double>&,
 const Quadrature< 1 >&,
 const NormType&,
 const Function< 2 >*,
 const double);

 template
 void integrate_difference< 1 ,  BlockVector<double> , Vector<double>,  2  >
 (const DoFHandler< 1 ,  2 >&,
 const  BlockVector<double> &,
 const Function< 2 >&,
 Vector<double>&,
 const Quadrature< 1 >&,
 const NormType&,
 const Function< 2 >*,
 const double);

 template
 void integrate_difference< 1 ,  BlockVector<double> , Vector<double>,  2 >
 (const hp::MappingCollection< 1 , 2 >&,
 const hp::DoFHandler< 1 , 2 >&,
 const  BlockVector<double> &,
 const Function< 2 >&,
 Vector<double>&,
 const hp::QCollection< 1 >&,
 const NormType&,
 const Function< 2 >*,
 const double);

 template
 void integrate_difference< 1 ,  BlockVector<double> , Vector<double>,  2 >
 (const hp::DoFHandler< 1 , 2 >&,
 const  BlockVector<double> &,
 const Function< 2 >&,
 Vector<double>&,
 const hp::QCollection< 1 >&,
 const NormType&,
 const Function< 2 >*,
 const double);

 template
 void integrate_difference< 1 ,  BlockVector<double> , Vector<float>,  2 >
 (const hp::MappingCollection< 1 , 2 >&,
 const hp::DoFHandler< 1 , 2 >&,
 const  BlockVector<double> &,
 const Function< 2 >&,
 Vector<float>&,
 const hp::QCollection< 1 >&,
 const NormType&,
 const Function< 2 >*,
 const double);

 template
 void integrate_difference< 1 ,  BlockVector<double> , Vector<float>,  2 >
 (const hp::DoFHandler< 1 , 2 >&,
 const  BlockVector<double> &,
 const Function< 2 >&,
 Vector<float>&,
 const hp::QCollection< 1 >&,
 const NormType&,
 const Function< 2 >*,
 const double);

 }
#endif
 
#if  1  <=  3 
 namespace VectorTools {

 template
 void integrate_difference< 1 ,  BlockVector<double> , Vector<float>,  3 >
 (const Mapping< 1 ,  3 >&,
 const DoFHandler< 1 ,  3 >&,
 const  BlockVector<double> &,
 const Function< 3 >&,
 Vector<float>&,
 const Quadrature< 1 >&,
 const NormType&,
 const Function< 3 >*,
 const double);

 template
 void integrate_difference< 1 ,  BlockVector<double> , Vector<float>,  3 >
 (const DoFHandler< 1 ,  3 >&,
 const  BlockVector<double> &,
 const Function< 3 >&,
 Vector<float>&,
 const Quadrature< 1 >&,
 const NormType&,
 const Function< 3 >*,
 const double);

 template
 void integrate_difference< 1 ,  BlockVector<double> , Vector<double>,  3  >
 (const Mapping< 1 ,  3 >&,
 const DoFHandler< 1 ,  3 >&,
 const  BlockVector<double> &,
 const Function< 3 >&,
 Vector<double>&,
 const Quadrature< 1 >&,
 const NormType&,
 const Function< 3 >*,
 const double);

 template
 void integrate_difference< 1 ,  BlockVector<double> , Vector<double>,  3  >
 (const DoFHandler< 1 ,  3 >&,
 const  BlockVector<double> &,
 const Function< 3 >&,
 Vector<double>&,
 const Quadrature< 1 >&,
 const NormType&,
 const Function< 3 >*,
 const double);

 template
 void integrate_difference< 1 ,  BlockVector<double> , Vector<double>,  3 >
 (const hp::MappingCollection< 1 , 3 >&,
 const hp::DoFHandler< 1 , 3 >&,
 const  BlockVector<double> &,
 const Function< 3 >&,
 Vector<double>&,
 const hp::QCollection< 1 >&,
 const NormType&,
 const Function< 3 >*,
 const double);

 template
 void integrate_difference< 1 ,  BlockVector<double> , Vector<double>,  3 >
 (const hp::DoFHandler< 1 , 3 >&,
 const  BlockVector<double> &,
 const Function< 3 >&,
 Vector<double>&,
 const hp::QCollection< 1 >&,
 const NormType&,
 const Function< 3 >*,
 const double);

 template
 void integrate_difference< 1 ,  BlockVector<double> , Vector<float>,  3 >
 (const hp::MappingCollection< 1 , 3 >&,
 const hp::DoFHandler< 1 , 3 >&,
 const  BlockVector<double> &,
 const Function< 3 >&,
 Vector<float>&,
 const hp::QCollection< 1 >&,
 const NormType&,
 const Function< 3 >*,
 const double);

 template
 void integrate_difference< 1 ,  BlockVector<double> , Vector<float>,  3 >
 (const hp::DoFHandler< 1 , 3 >&,
 const  BlockVector<double> &,
 const Function< 3 >&,
 Vector<float>&,
 const hp::QCollection< 1 >&,
 const NormType&,
 const Function< 3 >*,
 const double);

 }
#endif
 
#if  2  <=  1 
 namespace VectorTools {

 template
 void integrate_difference< 2 ,  BlockVector<double> , Vector<float>,  1 >
 (const Mapping< 2 ,  1 >&,
 const DoFHandler< 2 ,  1 >&,
 const  BlockVector<double> &,
 const Function< 1 >&,
 Vector<float>&,
 const Quadrature< 2 >&,
 const NormType&,
 const Function< 1 >*,
 const double);

 template
 void integrate_difference< 2 ,  BlockVector<double> , Vector<float>,  1 >
 (const DoFHandler< 2 ,  1 >&,
 const  BlockVector<double> &,
 const Function< 1 >&,
 Vector<float>&,
 const Quadrature< 2 >&,
 const NormType&,
 const Function< 1 >*,
 const double);

 template
 void integrate_difference< 2 ,  BlockVector<double> , Vector<double>,  1  >
 (const Mapping< 2 ,  1 >&,
 const DoFHandler< 2 ,  1 >&,
 const  BlockVector<double> &,
 const Function< 1 >&,
 Vector<double>&,
 const Quadrature< 2 >&,
 const NormType&,
 const Function< 1 >*,
 const double);

 template
 void integrate_difference< 2 ,  BlockVector<double> , Vector<double>,  1  >
 (const DoFHandler< 2 ,  1 >&,
 const  BlockVector<double> &,
 const Function< 1 >&,
 Vector<double>&,
 const Quadrature< 2 >&,
 const NormType&,
 const Function< 1 >*,
 const double);

 template
 void integrate_difference< 2 ,  BlockVector<double> , Vector<double>,  1 >
 (const hp::MappingCollection< 2 , 1 >&,
 const hp::DoFHandler< 2 , 1 >&,
 const  BlockVector<double> &,
 const Function< 1 >&,
 Vector<double>&,
 const hp::QCollection< 2 >&,
 const NormType&,
 const Function< 1 >*,
 const double);

 template
 void integrate_difference< 2 ,  BlockVector<double> , Vector<double>,  1 >
 (const hp::DoFHandler< 2 , 1 >&,
 const  BlockVector<double> &,
 const Function< 1 >&,
 Vector<double>&,
 const hp::QCollection< 2 >&,
 const NormType&,
 const Function< 1 >*,
 const double);

 template
 void integrate_difference< 2 ,  BlockVector<double> , Vector<float>,  1 >
 (const hp::MappingCollection< 2 , 1 >&,
 const hp::DoFHandler< 2 , 1 >&,
 const  BlockVector<double> &,
 const Function< 1 >&,
 Vector<float>&,
 const hp::QCollection< 2 >&,
 const NormType&,
 const Function< 1 >*,
 const double);

 template
 void integrate_difference< 2 ,  BlockVector<double> , Vector<float>,  1 >
 (const hp::DoFHandler< 2 , 1 >&,
 const  BlockVector<double> &,
 const Function< 1 >&,
 Vector<float>&,
 const hp::QCollection< 2 >&,
 const NormType&,
 const Function< 1 >*,
 const double);

 }
#endif
 
#if  2  <=  2 
 namespace VectorTools {

 template
 void integrate_difference< 2 ,  BlockVector<double> , Vector<float>,  2 >
 (const Mapping< 2 ,  2 >&,
 const DoFHandler< 2 ,  2 >&,
 const  BlockVector<double> &,
 const Function< 2 >&,
 Vector<float>&,
 const Quadrature< 2 >&,
 const NormType&,
 const Function< 2 >*,
 const double);

 template
 void integrate_difference< 2 ,  BlockVector<double> , Vector<float>,  2 >
 (const DoFHandler< 2 ,  2 >&,
 const  BlockVector<double> &,
 const Function< 2 >&,
 Vector<float>&,
 const Quadrature< 2 >&,
 const NormType&,
 const Function< 2 >*,
 const double);

 template
 void integrate_difference< 2 ,  BlockVector<double> , Vector<double>,  2  >
 (const Mapping< 2 ,  2 >&,
 const DoFHandler< 2 ,  2 >&,
 const  BlockVector<double> &,
 const Function< 2 >&,
 Vector<double>&,
 const Quadrature< 2 >&,
 const NormType&,
 const Function< 2 >*,
 const double);

 template
 void integrate_difference< 2 ,  BlockVector<double> , Vector<double>,  2  >
 (const DoFHandler< 2 ,  2 >&,
 const  BlockVector<double> &,
 const Function< 2 >&,
 Vector<double>&,
 const Quadrature< 2 >&,
 const NormType&,
 const Function< 2 >*,
 const double);

 template
 void integrate_difference< 2 ,  BlockVector<double> , Vector<double>,  2 >
 (const hp::MappingCollection< 2 , 2 >&,
 const hp::DoFHandler< 2 , 2 >&,
 const  BlockVector<double> &,
 const Function< 2 >&,
 Vector<double>&,
 const hp::QCollection< 2 >&,
 const NormType&,
 const Function< 2 >*,
 const double);

 template
 void integrate_difference< 2 ,  BlockVector<double> , Vector<double>,  2 >
 (const hp::DoFHandler< 2 , 2 >&,
 const  BlockVector<double> &,
 const Function< 2 >&,
 Vector<double>&,
 const hp::QCollection< 2 >&,
 const NormType&,
 const Function< 2 >*,
 const double);

 template
 void integrate_difference< 2 ,  BlockVector<double> , Vector<float>,  2 >
 (const hp::MappingCollection< 2 , 2 >&,
 const hp::DoFHandler< 2 , 2 >&,
 const  BlockVector<double> &,
 const Function< 2 >&,
 Vector<float>&,
 const hp::QCollection< 2 >&,
 const NormType&,
 const Function< 2 >*,
 const double);

 template
 void integrate_difference< 2 ,  BlockVector<double> , Vector<float>,  2 >
 (const hp::DoFHandler< 2 , 2 >&,
 const  BlockVector<double> &,
 const Function< 2 >&,
 Vector<float>&,
 const hp::QCollection< 2 >&,
 const NormType&,
 const Function< 2 >*,
 const double);

 }
#endif
 
#if  2  <=  3 
 namespace VectorTools {

 template
 void integrate_difference< 2 ,  BlockVector<double> , Vector<float>,  3 >
 (const Mapping< 2 ,  3 >&,
 const DoFHandler< 2 ,  3 >&,
 const  BlockVector<double> &,
 const Function< 3 >&,
 Vector<float>&,
 const Quadrature< 2 >&,
 const NormType&,
 const Function< 3 >*,
 const double);

 template
 void integrate_difference< 2 ,  BlockVector<double> , Vector<float>,  3 >
 (const DoFHandler< 2 ,  3 >&,
 const  BlockVector<double> &,
 const Function< 3 >&,
 Vector<float>&,
 const Quadrature< 2 >&,
 const NormType&,
 const Function< 3 >*,
 const double);

 template
 void integrate_difference< 2 ,  BlockVector<double> , Vector<double>,  3  >
 (const Mapping< 2 ,  3 >&,
 const DoFHandler< 2 ,  3 >&,
 const  BlockVector<double> &,
 const Function< 3 >&,
 Vector<double>&,
 const Quadrature< 2 >&,
 const NormType&,
 const Function< 3 >*,
 const double);

 template
 void integrate_difference< 2 ,  BlockVector<double> , Vector<double>,  3  >
 (const DoFHandler< 2 ,  3 >&,
 const  BlockVector<double> &,
 const Function< 3 >&,
 Vector<double>&,
 const Quadrature< 2 >&,
 const NormType&,
 const Function< 3 >*,
 const double);

 template
 void integrate_difference< 2 ,  BlockVector<double> , Vector<double>,  3 >
 (const hp::MappingCollection< 2 , 3 >&,
 const hp::DoFHandler< 2 , 3 >&,
 const  BlockVector<double> &,
 const Function< 3 >&,
 Vector<double>&,
 const hp::QCollection< 2 >&,
 const NormType&,
 const Function< 3 >*,
 const double);

 template
 void integrate_difference< 2 ,  BlockVector<double> , Vector<double>,  3 >
 (const hp::DoFHandler< 2 , 3 >&,
 const  BlockVector<double> &,
 const Function< 3 >&,
 Vector<double>&,
 const hp::QCollection< 2 >&,
 const NormType&,
 const Function< 3 >*,
 const double);

 template
 void integrate_difference< 2 ,  BlockVector<double> , Vector<float>,  3 >
 (const hp::MappingCollection< 2 , 3 >&,
 const hp::DoFHandler< 2 , 3 >&,
 const  BlockVector<double> &,
 const Function< 3 >&,
 Vector<float>&,
 const hp::QCollection< 2 >&,
 const NormType&,
 const Function< 3 >*,
 const double);

 template
 void integrate_difference< 2 ,  BlockVector<double> , Vector<float>,  3 >
 (const hp::DoFHandler< 2 , 3 >&,
 const  BlockVector<double> &,
 const Function< 3 >&,
 Vector<float>&,
 const hp::QCollection< 2 >&,
 const NormType&,
 const Function< 3 >*,
 const double);

 }
#endif
 
#if  3  <=  1 
 namespace VectorTools {

 template
 void integrate_difference< 3 ,  BlockVector<double> , Vector<float>,  1 >
 (const Mapping< 3 ,  1 >&,
 const DoFHandler< 3 ,  1 >&,
 const  BlockVector<double> &,
 const Function< 1 >&,
 Vector<float>&,
 const Quadrature< 3 >&,
 const NormType&,
 const Function< 1 >*,
 const double);

 template
 void integrate_difference< 3 ,  BlockVector<double> , Vector<float>,  1 >
 (const DoFHandler< 3 ,  1 >&,
 const  BlockVector<double> &,
 const Function< 1 >&,
 Vector<float>&,
 const Quadrature< 3 >&,
 const NormType&,
 const Function< 1 >*,
 const double);

 template
 void integrate_difference< 3 ,  BlockVector<double> , Vector<double>,  1  >
 (const Mapping< 3 ,  1 >&,
 const DoFHandler< 3 ,  1 >&,
 const  BlockVector<double> &,
 const Function< 1 >&,
 Vector<double>&,
 const Quadrature< 3 >&,
 const NormType&,
 const Function< 1 >*,
 const double);

 template
 void integrate_difference< 3 ,  BlockVector<double> , Vector<double>,  1  >
 (const DoFHandler< 3 ,  1 >&,
 const  BlockVector<double> &,
 const Function< 1 >&,
 Vector<double>&,
 const Quadrature< 3 >&,
 const NormType&,
 const Function< 1 >*,
 const double);

 template
 void integrate_difference< 3 ,  BlockVector<double> , Vector<double>,  1 >
 (const hp::MappingCollection< 3 , 1 >&,
 const hp::DoFHandler< 3 , 1 >&,
 const  BlockVector<double> &,
 const Function< 1 >&,
 Vector<double>&,
 const hp::QCollection< 3 >&,
 const NormType&,
 const Function< 1 >*,
 const double);

 template
 void integrate_difference< 3 ,  BlockVector<double> , Vector<double>,  1 >
 (const hp::DoFHandler< 3 , 1 >&,
 const  BlockVector<double> &,
 const Function< 1 >&,
 Vector<double>&,
 const hp::QCollection< 3 >&,
 const NormType&,
 const Function< 1 >*,
 const double);

 template
 void integrate_difference< 3 ,  BlockVector<double> , Vector<float>,  1 >
 (const hp::MappingCollection< 3 , 1 >&,
 const hp::DoFHandler< 3 , 1 >&,
 const  BlockVector<double> &,
 const Function< 1 >&,
 Vector<float>&,
 const hp::QCollection< 3 >&,
 const NormType&,
 const Function< 1 >*,
 const double);

 template
 void integrate_difference< 3 ,  BlockVector<double> , Vector<float>,  1 >
 (const hp::DoFHandler< 3 , 1 >&,
 const  BlockVector<double> &,
 const Function< 1 >&,
 Vector<float>&,
 const hp::QCollection< 3 >&,
 const NormType&,
 const Function< 1 >*,
 const double);

 }
#endif
 
#if  3  <=  2 
 namespace VectorTools {

 template
 void integrate_difference< 3 ,  BlockVector<double> , Vector<float>,  2 >
 (const Mapping< 3 ,  2 >&,
 const DoFHandler< 3 ,  2 >&,
 const  BlockVector<double> &,
 const Function< 2 >&,
 Vector<float>&,
 const Quadrature< 3 >&,
 const NormType&,
 const Function< 2 >*,
 const double);

 template
 void integrate_difference< 3 ,  BlockVector<double> , Vector<float>,  2 >
 (const DoFHandler< 3 ,  2 >&,
 const  BlockVector<double> &,
 const Function< 2 >&,
 Vector<float>&,
 const Quadrature< 3 >&,
 const NormType&,
 const Function< 2 >*,
 const double);

 template
 void integrate_difference< 3 ,  BlockVector<double> , Vector<double>,  2  >
 (const Mapping< 3 ,  2 >&,
 const DoFHandler< 3 ,  2 >&,
 const  BlockVector<double> &,
 const Function< 2 >&,
 Vector<double>&,
 const Quadrature< 3 >&,
 const NormType&,
 const Function< 2 >*,
 const double);

 template
 void integrate_difference< 3 ,  BlockVector<double> , Vector<double>,  2  >
 (const DoFHandler< 3 ,  2 >&,
 const  BlockVector<double> &,
 const Function< 2 >&,
 Vector<double>&,
 const Quadrature< 3 >&,
 const NormType&,
 const Function< 2 >*,
 const double);

 template
 void integrate_difference< 3 ,  BlockVector<double> , Vector<double>,  2 >
 (const hp::MappingCollection< 3 , 2 >&,
 const hp::DoFHandler< 3 , 2 >&,
 const  BlockVector<double> &,
 const Function< 2 >&,
 Vector<double>&,
 const hp::QCollection< 3 >&,
 const NormType&,
 const Function< 2 >*,
 const double);

 template
 void integrate_difference< 3 ,  BlockVector<double> , Vector<double>,  2 >
 (const hp::DoFHandler< 3 , 2 >&,
 const  BlockVector<double> &,
 const Function< 2 >&,
 Vector<double>&,
 const hp::QCollection< 3 >&,
 const NormType&,
 const Function< 2 >*,
 const double);

 template
 void integrate_difference< 3 ,  BlockVector<double> , Vector<float>,  2 >
 (const hp::MappingCollection< 3 , 2 >&,
 const hp::DoFHandler< 3 , 2 >&,
 const  BlockVector<double> &,
 const Function< 2 >&,
 Vector<float>&,
 const hp::QCollection< 3 >&,
 const NormType&,
 const Function< 2 >*,
 const double);

 template
 void integrate_difference< 3 ,  BlockVector<double> , Vector<float>,  2 >
 (const hp::DoFHandler< 3 , 2 >&,
 const  BlockVector<double> &,
 const Function< 2 >&,
 Vector<float>&,
 const hp::QCollection< 3 >&,
 const NormType&,
 const Function< 2 >*,
 const double);

 }
#endif
 
#if  3  <=  3 
 namespace VectorTools {

 template
 void integrate_difference< 3 ,  BlockVector<double> , Vector<float>,  3 >
 (const Mapping< 3 ,  3 >&,
 const DoFHandler< 3 ,  3 >&,
 const  BlockVector<double> &,
 const Function< 3 >&,
 Vector<float>&,
 const Quadrature< 3 >&,
 const NormType&,
 const Function< 3 >*,
 const double);

 template
 void integrate_difference< 3 ,  BlockVector<double> , Vector<float>,  3 >
 (const DoFHandler< 3 ,  3 >&,
 const  BlockVector<double> &,
 const Function< 3 >&,
 Vector<float>&,
 const Quadrature< 3 >&,
 const NormType&,
 const Function< 3 >*,
 const double);

 template
 void integrate_difference< 3 ,  BlockVector<double> , Vector<double>,  3  >
 (const Mapping< 3 ,  3 >&,
 const DoFHandler< 3 ,  3 >&,
 const  BlockVector<double> &,
 const Function< 3 >&,
 Vector<double>&,
 const Quadrature< 3 >&,
 const NormType&,
 const Function< 3 >*,
 const double);

 template
 void integrate_difference< 3 ,  BlockVector<double> , Vector<double>,  3  >
 (const DoFHandler< 3 ,  3 >&,
 const  BlockVector<double> &,
 const Function< 3 >&,
 Vector<double>&,
 const Quadrature< 3 >&,
 const NormType&,
 const Function< 3 >*,
 const double);

 template
 void integrate_difference< 3 ,  BlockVector<double> , Vector<double>,  3 >
 (const hp::MappingCollection< 3 , 3 >&,
 const hp::DoFHandler< 3 , 3 >&,
 const  BlockVector<double> &,
 const Function< 3 >&,
 Vector<double>&,
 const hp::QCollection< 3 >&,
 const NormType&,
 const Function< 3 >*,
 const double);

 template
 void integrate_difference< 3 ,  BlockVector<double> , Vector<double>,  3 >
 (const hp::DoFHandler< 3 , 3 >&,
 const  BlockVector<double> &,
 const Function< 3 >&,
 Vector<double>&,
 const hp::QCollection< 3 >&,
 const NormType&,
 const Function< 3 >*,
 const double);

 template
 void integrate_difference< 3 ,  BlockVector<double> , Vector<float>,  3 >
 (const hp::MappingCollection< 3 , 3 >&,
 const hp::DoFHandler< 3 , 3 >&,
 const  BlockVector<double> &,
 const Function< 3 >&,
 Vector<float>&,
 const hp::QCollection< 3 >&,
 const NormType&,
 const Function< 3 >*,
 const double);

 template
 void integrate_difference< 3 ,  BlockVector<double> , Vector<float>,  3 >
 (const hp::DoFHandler< 3 , 3 >&,
 const  BlockVector<double> &,
 const Function< 3 >&,
 Vector<float>&,
 const hp::QCollection< 3 >&,
 const NormType&,
 const Function< 3 >*,
 const double);

 }
#endif
 
#if  1  <=  1 
 namespace VectorTools {

 template
 void integrate_difference< 1 ,  BlockVector<float> , Vector<float>,  1 >
 (const Mapping< 1 ,  1 >&,
 const DoFHandler< 1 ,  1 >&,
 const  BlockVector<float> &,
 const Function< 1 >&,
 Vector<float>&,
 const Quadrature< 1 >&,
 const NormType&,
 const Function< 1 >*,
 const double);

 template
 void integrate_difference< 1 ,  BlockVector<float> , Vector<float>,  1 >
 (const DoFHandler< 1 ,  1 >&,
 const  BlockVector<float> &,
 const Function< 1 >&,
 Vector<float>&,
 const Quadrature< 1 >&,
 const NormType&,
 const Function< 1 >*,
 const double);

 template
 void integrate_difference< 1 ,  BlockVector<float> , Vector<double>,  1  >
 (const Mapping< 1 ,  1 >&,
 const DoFHandler< 1 ,  1 >&,
 const  BlockVector<float> &,
 const Function< 1 >&,
 Vector<double>&,
 const Quadrature< 1 >&,
 const NormType&,
 const Function< 1 >*,
 const double);

 template
 void integrate_difference< 1 ,  BlockVector<float> , Vector<double>,  1  >
 (const DoFHandler< 1 ,  1 >&,
 const  BlockVector<float> &,
 const Function< 1 >&,
 Vector<double>&,
 const Quadrature< 1 >&,
 const NormType&,
 const Function< 1 >*,
 const double);

 template
 void integrate_difference< 1 ,  BlockVector<float> , Vector<double>,  1 >
 (const hp::MappingCollection< 1 , 1 >&,
 const hp::DoFHandler< 1 , 1 >&,
 const  BlockVector<float> &,
 const Function< 1 >&,
 Vector<double>&,
 const hp::QCollection< 1 >&,
 const NormType&,
 const Function< 1 >*,
 const double);

 template
 void integrate_difference< 1 ,  BlockVector<float> , Vector<double>,  1 >
 (const hp::DoFHandler< 1 , 1 >&,
 const  BlockVector<float> &,
 const Function< 1 >&,
 Vector<double>&,
 const hp::QCollection< 1 >&,
 const NormType&,
 const Function< 1 >*,
 const double);

 template
 void integrate_difference< 1 ,  BlockVector<float> , Vector<float>,  1 >
 (const hp::MappingCollection< 1 , 1 >&,
 const hp::DoFHandler< 1 , 1 >&,
 const  BlockVector<float> &,
 const Function< 1 >&,
 Vector<float>&,
 const hp::QCollection< 1 >&,
 const NormType&,
 const Function< 1 >*,
 const double);

 template
 void integrate_difference< 1 ,  BlockVector<float> , Vector<float>,  1 >
 (const hp::DoFHandler< 1 , 1 >&,
 const  BlockVector<float> &,
 const Function< 1 >&,
 Vector<float>&,
 const hp::QCollection< 1 >&,
 const NormType&,
 const Function< 1 >*,
 const double);

 }
#endif
 
#if  1  <=  2 
 namespace VectorTools {

 template
 void integrate_difference< 1 ,  BlockVector<float> , Vector<float>,  2 >
 (const Mapping< 1 ,  2 >&,
 const DoFHandler< 1 ,  2 >&,
 const  BlockVector<float> &,
 const Function< 2 >&,
 Vector<float>&,
 const Quadrature< 1 >&,
 const NormType&,
 const Function< 2 >*,
 const double);

 template
 void integrate_difference< 1 ,  BlockVector<float> , Vector<float>,  2 >
 (const DoFHandler< 1 ,  2 >&,
 const  BlockVector<float> &,
 const Function< 2 >&,
 Vector<float>&,
 const Quadrature< 1 >&,
 const NormType&,
 const Function< 2 >*,
 const double);

 template
 void integrate_difference< 1 ,  BlockVector<float> , Vector<double>,  2  >
 (const Mapping< 1 ,  2 >&,
 const DoFHandler< 1 ,  2 >&,
 const  BlockVector<float> &,
 const Function< 2 >&,
 Vector<double>&,
 const Quadrature< 1 >&,
 const NormType&,
 const Function< 2 >*,
 const double);

 template
 void integrate_difference< 1 ,  BlockVector<float> , Vector<double>,  2  >
 (const DoFHandler< 1 ,  2 >&,
 const  BlockVector<float> &,
 const Function< 2 >&,
 Vector<double>&,
 const Quadrature< 1 >&,
 const NormType&,
 const Function< 2 >*,
 const double);

 template
 void integrate_difference< 1 ,  BlockVector<float> , Vector<double>,  2 >
 (const hp::MappingCollection< 1 , 2 >&,
 const hp::DoFHandler< 1 , 2 >&,
 const  BlockVector<float> &,
 const Function< 2 >&,
 Vector<double>&,
 const hp::QCollection< 1 >&,
 const NormType&,
 const Function< 2 >*,
 const double);

 template
 void integrate_difference< 1 ,  BlockVector<float> , Vector<double>,  2 >
 (const hp::DoFHandler< 1 , 2 >&,
 const  BlockVector<float> &,
 const Function< 2 >&,
 Vector<double>&,
 const hp::QCollection< 1 >&,
 const NormType&,
 const Function< 2 >*,
 const double);

 template
 void integrate_difference< 1 ,  BlockVector<float> , Vector<float>,  2 >
 (const hp::MappingCollection< 1 , 2 >&,
 const hp::DoFHandler< 1 , 2 >&,
 const  BlockVector<float> &,
 const Function< 2 >&,
 Vector<float>&,
 const hp::QCollection< 1 >&,
 const NormType&,
 const Function< 2 >*,
 const double);

 template
 void integrate_difference< 1 ,  BlockVector<float> , Vector<float>,  2 >
 (const hp::DoFHandler< 1 , 2 >&,
 const  BlockVector<float> &,
 const Function< 2 >&,
 Vector<float>&,
 const hp::QCollection< 1 >&,
 const NormType&,
 const Function< 2 >*,
 const double);

 }
#endif
 
#if  1  <=  3 
 namespace VectorTools {

 template
 void integrate_difference< 1 ,  BlockVector<float> , Vector<float>,  3 >
 (const Mapping< 1 ,  3 >&,
 const DoFHandler< 1 ,  3 >&,
 const  BlockVector<float> &,
 const Function< 3 >&,
 Vector<float>&,
 const Quadrature< 1 >&,
 const NormType&,
 const Function< 3 >*,
 const double);

 template
 void integrate_difference< 1 ,  BlockVector<float> , Vector<float>,  3 >
 (const DoFHandler< 1 ,  3 >&,
 const  BlockVector<float> &,
 const Function< 3 >&,
 Vector<float>&,
 const Quadrature< 1 >&,
 const NormType&,
 const Function< 3 >*,
 const double);

 template
 void integrate_difference< 1 ,  BlockVector<float> , Vector<double>,  3  >
 (const Mapping< 1 ,  3 >&,
 const DoFHandler< 1 ,  3 >&,
 const  BlockVector<float> &,
 const Function< 3 >&,
 Vector<double>&,
 const Quadrature< 1 >&,
 const NormType&,
 const Function< 3 >*,
 const double);

 template
 void integrate_difference< 1 ,  BlockVector<float> , Vector<double>,  3  >
 (const DoFHandler< 1 ,  3 >&,
 const  BlockVector<float> &,
 const Function< 3 >&,
 Vector<double>&,
 const Quadrature< 1 >&,
 const NormType&,
 const Function< 3 >*,
 const double);

 template
 void integrate_difference< 1 ,  BlockVector<float> , Vector<double>,  3 >
 (const hp::MappingCollection< 1 , 3 >&,
 const hp::DoFHandler< 1 , 3 >&,
 const  BlockVector<float> &,
 const Function< 3 >&,
 Vector<double>&,
 const hp::QCollection< 1 >&,
 const NormType&,
 const Function< 3 >*,
 const double);

 template
 void integrate_difference< 1 ,  BlockVector<float> , Vector<double>,  3 >
 (const hp::DoFHandler< 1 , 3 >&,
 const  BlockVector<float> &,
 const Function< 3 >&,
 Vector<double>&,
 const hp::QCollection< 1 >&,
 const NormType&,
 const Function< 3 >*,
 const double);

 template
 void integrate_difference< 1 ,  BlockVector<float> , Vector<float>,  3 >
 (const hp::MappingCollection< 1 , 3 >&,
 const hp::DoFHandler< 1 , 3 >&,
 const  BlockVector<float> &,
 const Function< 3 >&,
 Vector<float>&,
 const hp::QCollection< 1 >&,
 const NormType&,
 const Function< 3 >*,
 const double);

 template
 void integrate_difference< 1 ,  BlockVector<float> , Vector<float>,  3 >
 (const hp::DoFHandler< 1 , 3 >&,
 const  BlockVector<float> &,
 const Function< 3 >&,
 Vector<float>&,
 const hp::QCollection< 1 >&,
 const NormType&,
 const Function< 3 >*,
 const double);

 }
#endif
 
#if  2  <=  1 
 namespace VectorTools {

 template
 void integrate_difference< 2 ,  BlockVector<float> , Vector<float>,  1 >
 (const Mapping< 2 ,  1 >&,
 const DoFHandler< 2 ,  1 >&,
 const  BlockVector<float> &,
 const Function< 1 >&,
 Vector<float>&,
 const Quadrature< 2 >&,
 const NormType&,
 const Function< 1 >*,
 const double);

 template
 void integrate_difference< 2 ,  BlockVector<float> , Vector<float>,  1 >
 (const DoFHandler< 2 ,  1 >&,
 const  BlockVector<float> &,
 const Function< 1 >&,
 Vector<float>&,
 const Quadrature< 2 >&,
 const NormType&,
 const Function< 1 >*,
 const double);

 template
 void integrate_difference< 2 ,  BlockVector<float> , Vector<double>,  1  >
 (const Mapping< 2 ,  1 >&,
 const DoFHandler< 2 ,  1 >&,
 const  BlockVector<float> &,
 const Function< 1 >&,
 Vector<double>&,
 const Quadrature< 2 >&,
 const NormType&,
 const Function< 1 >*,
 const double);

 template
 void integrate_difference< 2 ,  BlockVector<float> , Vector<double>,  1  >
 (const DoFHandler< 2 ,  1 >&,
 const  BlockVector<float> &,
 const Function< 1 >&,
 Vector<double>&,
 const Quadrature< 2 >&,
 const NormType&,
 const Function< 1 >*,
 const double);

 template
 void integrate_difference< 2 ,  BlockVector<float> , Vector<double>,  1 >
 (const hp::MappingCollection< 2 , 1 >&,
 const hp::DoFHandler< 2 , 1 >&,
 const  BlockVector<float> &,
 const Function< 1 >&,
 Vector<double>&,
 const hp::QCollection< 2 >&,
 const NormType&,
 const Function< 1 >*,
 const double);

 template
 void integrate_difference< 2 ,  BlockVector<float> , Vector<double>,  1 >
 (const hp::DoFHandler< 2 , 1 >&,
 const  BlockVector<float> &,
 const Function< 1 >&,
 Vector<double>&,
 const hp::QCollection< 2 >&,
 const NormType&,
 const Function< 1 >*,
 const double);

 template
 void integrate_difference< 2 ,  BlockVector<float> , Vector<float>,  1 >
 (const hp::MappingCollection< 2 , 1 >&,
 const hp::DoFHandler< 2 , 1 >&,
 const  BlockVector<float> &,
 const Function< 1 >&,
 Vector<float>&,
 const hp::QCollection< 2 >&,
 const NormType&,
 const Function< 1 >*,
 const double);

 template
 void integrate_difference< 2 ,  BlockVector<float> , Vector<float>,  1 >
 (const hp::DoFHandler< 2 , 1 >&,
 const  BlockVector<float> &,
 const Function< 1 >&,
 Vector<float>&,
 const hp::QCollection< 2 >&,
 const NormType&,
 const Function< 1 >*,
 const double);

 }
#endif
 
#if  2  <=  2 
 namespace VectorTools {

 template
 void integrate_difference< 2 ,  BlockVector<float> , Vector<float>,  2 >
 (const Mapping< 2 ,  2 >&,
 const DoFHandler< 2 ,  2 >&,
 const  BlockVector<float> &,
 const Function< 2 >&,
 Vector<float>&,
 const Quadrature< 2 >&,
 const NormType&,
 const Function< 2 >*,
 const double);

 template
 void integrate_difference< 2 ,  BlockVector<float> , Vector<float>,  2 >
 (const DoFHandler< 2 ,  2 >&,
 const  BlockVector<float> &,
 const Function< 2 >&,
 Vector<float>&,
 const Quadrature< 2 >&,
 const NormType&,
 const Function< 2 >*,
 const double);

 template
 void integrate_difference< 2 ,  BlockVector<float> , Vector<double>,  2  >
 (const Mapping< 2 ,  2 >&,
 const DoFHandler< 2 ,  2 >&,
 const  BlockVector<float> &,
 const Function< 2 >&,
 Vector<double>&,
 const Quadrature< 2 >&,
 const NormType&,
 const Function< 2 >*,
 const double);

 template
 void integrate_difference< 2 ,  BlockVector<float> , Vector<double>,  2  >
 (const DoFHandler< 2 ,  2 >&,
 const  BlockVector<float> &,
 const Function< 2 >&,
 Vector<double>&,
 const Quadrature< 2 >&,
 const NormType&,
 const Function< 2 >*,
 const double);

 template
 void integrate_difference< 2 ,  BlockVector<float> , Vector<double>,  2 >
 (const hp::MappingCollection< 2 , 2 >&,
 const hp::DoFHandler< 2 , 2 >&,
 const  BlockVector<float> &,
 const Function< 2 >&,
 Vector<double>&,
 const hp::QCollection< 2 >&,
 const NormType&,
 const Function< 2 >*,
 const double);

 template
 void integrate_difference< 2 ,  BlockVector<float> , Vector<double>,  2 >
 (const hp::DoFHandler< 2 , 2 >&,
 const  BlockVector<float> &,
 const Function< 2 >&,
 Vector<double>&,
 const hp::QCollection< 2 >&,
 const NormType&,
 const Function< 2 >*,
 const double);

 template
 void integrate_difference< 2 ,  BlockVector<float> , Vector<float>,  2 >
 (const hp::MappingCollection< 2 , 2 >&,
 const hp::DoFHandler< 2 , 2 >&,
 const  BlockVector<float> &,
 const Function< 2 >&,
 Vector<float>&,
 const hp::QCollection< 2 >&,
 const NormType&,
 const Function< 2 >*,
 const double);

 template
 void integrate_difference< 2 ,  BlockVector<float> , Vector<float>,  2 >
 (const hp::DoFHandler< 2 , 2 >&,
 const  BlockVector<float> &,
 const Function< 2 >&,
 Vector<float>&,
 const hp::QCollection< 2 >&,
 const NormType&,
 const Function< 2 >*,
 const double);

 }
#endif
 
#if  2  <=  3 
 namespace VectorTools {

 template
 void integrate_difference< 2 ,  BlockVector<float> , Vector<float>,  3 >
 (const Mapping< 2 ,  3 >&,
 const DoFHandler< 2 ,  3 >&,
 const  BlockVector<float> &,
 const Function< 3 >&,
 Vector<float>&,
 const Quadrature< 2 >&,
 const NormType&,
 const Function< 3 >*,
 const double);

 template
 void integrate_difference< 2 ,  BlockVector<float> , Vector<float>,  3 >
 (const DoFHandler< 2 ,  3 >&,
 const  BlockVector<float> &,
 const Function< 3 >&,
 Vector<float>&,
 const Quadrature< 2 >&,
 const NormType&,
 const Function< 3 >*,
 const double);

 template
 void integrate_difference< 2 ,  BlockVector<float> , Vector<double>,  3  >
 (const Mapping< 2 ,  3 >&,
 const DoFHandler< 2 ,  3 >&,
 const  BlockVector<float> &,
 const Function< 3 >&,
 Vector<double>&,
 const Quadrature< 2 >&,
 const NormType&,
 const Function< 3 >*,
 const double);

 template
 void integrate_difference< 2 ,  BlockVector<float> , Vector<double>,  3  >
 (const DoFHandler< 2 ,  3 >&,
 const  BlockVector<float> &,
 const Function< 3 >&,
 Vector<double>&,
 const Quadrature< 2 >&,
 const NormType&,
 const Function< 3 >*,
 const double);

 template
 void integrate_difference< 2 ,  BlockVector<float> , Vector<double>,  3 >
 (const hp::MappingCollection< 2 , 3 >&,
 const hp::DoFHandler< 2 , 3 >&,
 const  BlockVector<float> &,
 const Function< 3 >&,
 Vector<double>&,
 const hp::QCollection< 2 >&,
 const NormType&,
 const Function< 3 >*,
 const double);

 template
 void integrate_difference< 2 ,  BlockVector<float> , Vector<double>,  3 >
 (const hp::DoFHandler< 2 , 3 >&,
 const  BlockVector<float> &,
 const Function< 3 >&,
 Vector<double>&,
 const hp::QCollection< 2 >&,
 const NormType&,
 const Function< 3 >*,
 const double);

 template
 void integrate_difference< 2 ,  BlockVector<float> , Vector<float>,  3 >
 (const hp::MappingCollection< 2 , 3 >&,
 const hp::DoFHandler< 2 , 3 >&,
 const  BlockVector<float> &,
 const Function< 3 >&,
 Vector<float>&,
 const hp::QCollection< 2 >&,
 const NormType&,
 const Function< 3 >*,
 const double);

 template
 void integrate_difference< 2 ,  BlockVector<float> , Vector<float>,  3 >
 (const hp::DoFHandler< 2 , 3 >&,
 const  BlockVector<float> &,
 const Function< 3 >&,
 Vector<float>&,
 const hp::QCollection< 2 >&,
 const NormType&,
 const Function< 3 >*,
 const double);

 }
#endif
 
#if  3  <=  1 
 namespace VectorTools {

 template
 void integrate_difference< 3 ,  BlockVector<float> , Vector<float>,  1 >
 (const Mapping< 3 ,  1 >&,
 const DoFHandler< 3 ,  1 >&,
 const  BlockVector<float> &,
 const Function< 1 >&,
 Vector<float>&,
 const Quadrature< 3 >&,
 const NormType&,
 const Function< 1 >*,
 const double);

 template
 void integrate_difference< 3 ,  BlockVector<float> , Vector<float>,  1 >
 (const DoFHandler< 3 ,  1 >&,
 const  BlockVector<float> &,
 const Function< 1 >&,
 Vector<float>&,
 const Quadrature< 3 >&,
 const NormType&,
 const Function< 1 >*,
 const double);

 template
 void integrate_difference< 3 ,  BlockVector<float> , Vector<double>,  1  >
 (const Mapping< 3 ,  1 >&,
 const DoFHandler< 3 ,  1 >&,
 const  BlockVector<float> &,
 const Function< 1 >&,
 Vector<double>&,
 const Quadrature< 3 >&,
 const NormType&,
 const Function< 1 >*,
 const double);

 template
 void integrate_difference< 3 ,  BlockVector<float> , Vector<double>,  1  >
 (const DoFHandler< 3 ,  1 >&,
 const  BlockVector<float> &,
 const Function< 1 >&,
 Vector<double>&,
 const Quadrature< 3 >&,
 const NormType&,
 const Function< 1 >*,
 const double);

 template
 void integrate_difference< 3 ,  BlockVector<float> , Vector<double>,  1 >
 (const hp::MappingCollection< 3 , 1 >&,
 const hp::DoFHandler< 3 , 1 >&,
 const  BlockVector<float> &,
 const Function< 1 >&,
 Vector<double>&,
 const hp::QCollection< 3 >&,
 const NormType&,
 const Function< 1 >*,
 const double);

 template
 void integrate_difference< 3 ,  BlockVector<float> , Vector<double>,  1 >
 (const hp::DoFHandler< 3 , 1 >&,
 const  BlockVector<float> &,
 const Function< 1 >&,
 Vector<double>&,
 const hp::QCollection< 3 >&,
 const NormType&,
 const Function< 1 >*,
 const double);

 template
 void integrate_difference< 3 ,  BlockVector<float> , Vector<float>,  1 >
 (const hp::MappingCollection< 3 , 1 >&,
 const hp::DoFHandler< 3 , 1 >&,
 const  BlockVector<float> &,
 const Function< 1 >&,
 Vector<float>&,
 const hp::QCollection< 3 >&,
 const NormType&,
 const Function< 1 >*,
 const double);

 template
 void integrate_difference< 3 ,  BlockVector<float> , Vector<float>,  1 >
 (const hp::DoFHandler< 3 , 1 >&,
 const  BlockVector<float> &,
 const Function< 1 >&,
 Vector<float>&,
 const hp::QCollection< 3 >&,
 const NormType&,
 const Function< 1 >*,
 const double);

 }
#endif
 
#if  3  <=  2 
 namespace VectorTools {

 template
 void integrate_difference< 3 ,  BlockVector<float> , Vector<float>,  2 >
 (const Mapping< 3 ,  2 >&,
 const DoFHandler< 3 ,  2 >&,
 const  BlockVector<float> &,
 const Function< 2 >&,
 Vector<float>&,
 const Quadrature< 3 >&,
 const NormType&,
 const Function< 2 >*,
 const double);

 template
 void integrate_difference< 3 ,  BlockVector<float> , Vector<float>,  2 >
 (const DoFHandler< 3 ,  2 >&,
 const  BlockVector<float> &,
 const Function< 2 >&,
 Vector<float>&,
 const Quadrature< 3 >&,
 const NormType&,
 const Function< 2 >*,
 const double);

 template
 void integrate_difference< 3 ,  BlockVector<float> , Vector<double>,  2  >
 (const Mapping< 3 ,  2 >&,
 const DoFHandler< 3 ,  2 >&,
 const  BlockVector<float> &,
 const Function< 2 >&,
 Vector<double>&,
 const Quadrature< 3 >&,
 const NormType&,
 const Function< 2 >*,
 const double);

 template
 void integrate_difference< 3 ,  BlockVector<float> , Vector<double>,  2  >
 (const DoFHandler< 3 ,  2 >&,
 const  BlockVector<float> &,
 const Function< 2 >&,
 Vector<double>&,
 const Quadrature< 3 >&,
 const NormType&,
 const Function< 2 >*,
 const double);

 template
 void integrate_difference< 3 ,  BlockVector<float> , Vector<double>,  2 >
 (const hp::MappingCollection< 3 , 2 >&,
 const hp::DoFHandler< 3 , 2 >&,
 const  BlockVector<float> &,
 const Function< 2 >&,
 Vector<double>&,
 const hp::QCollection< 3 >&,
 const NormType&,
 const Function< 2 >*,
 const double);

 template
 void integrate_difference< 3 ,  BlockVector<float> , Vector<double>,  2 >
 (const hp::DoFHandler< 3 , 2 >&,
 const  BlockVector<float> &,
 const Function< 2 >&,
 Vector<double>&,
 const hp::QCollection< 3 >&,
 const NormType&,
 const Function< 2 >*,
 const double);

 template
 void integrate_difference< 3 ,  BlockVector<float> , Vector<float>,  2 >
 (const hp::MappingCollection< 3 , 2 >&,
 const hp::DoFHandler< 3 , 2 >&,
 const  BlockVector<float> &,
 const Function< 2 >&,
 Vector<float>&,
 const hp::QCollection< 3 >&,
 const NormType&,
 const Function< 2 >*,
 const double);

 template
 void integrate_difference< 3 ,  BlockVector<float> , Vector<float>,  2 >
 (const hp::DoFHandler< 3 , 2 >&,
 const  BlockVector<float> &,
 const Function< 2 >&,
 Vector<float>&,
 const hp::QCollection< 3 >&,
 const NormType&,
 const Function< 2 >*,
 const double);

 }
#endif
 
#if  3  <=  3 
 namespace VectorTools {

 template
 void integrate_difference< 3 ,  BlockVector<float> , Vector<float>,  3 >
 (const Mapping< 3 ,  3 >&,
 const DoFHandler< 3 ,  3 >&,
 const  BlockVector<float> &,
 const Function< 3 >&,
 Vector<float>&,
 const Quadrature< 3 >&,
 const NormType&,
 const Function< 3 >*,
 const double);

 template
 void integrate_difference< 3 ,  BlockVector<float> , Vector<float>,  3 >
 (const DoFHandler< 3 ,  3 >&,
 const  BlockVector<float> &,
 const Function< 3 >&,
 Vector<float>&,
 const Quadrature< 3 >&,
 const NormType&,
 const Function< 3 >*,
 const double);

 template
 void integrate_difference< 3 ,  BlockVector<float> , Vector<double>,  3  >
 (const Mapping< 3 ,  3 >&,
 const DoFHandler< 3 ,  3 >&,
 const  BlockVector<float> &,
 const Function< 3 >&,
 Vector<double>&,
 const Quadrature< 3 >&,
 const NormType&,
 const Function< 3 >*,
 const double);

 template
 void integrate_difference< 3 ,  BlockVector<float> , Vector<double>,  3  >
 (const DoFHandler< 3 ,  3 >&,
 const  BlockVector<float> &,
 const Function< 3 >&,
 Vector<double>&,
 const Quadrature< 3 >&,
 const NormType&,
 const Function< 3 >*,
 const double);

 template
 void integrate_difference< 3 ,  BlockVector<float> , Vector<double>,  3 >
 (const hp::MappingCollection< 3 , 3 >&,
 const hp::DoFHandler< 3 , 3 >&,
 const  BlockVector<float> &,
 const Function< 3 >&,
 Vector<double>&,
 const hp::QCollection< 3 >&,
 const NormType&,
 const Function< 3 >*,
 const double);

 template
 void integrate_difference< 3 ,  BlockVector<float> , Vector<double>,  3 >
 (const hp::DoFHandler< 3 , 3 >&,
 const  BlockVector<float> &,
 const Function< 3 >&,
 Vector<double>&,
 const hp::QCollection< 3 >&,
 const NormType&,
 const Function< 3 >*,
 const double);

 template
 void integrate_difference< 3 ,  BlockVector<float> , Vector<float>,  3 >
 (const hp::MappingCollection< 3 , 3 >&,
 const hp::DoFHandler< 3 , 3 >&,
 const  BlockVector<float> &,
 const Function< 3 >&,
 Vector<float>&,
 const hp::QCollection< 3 >&,
 const NormType&,
 const Function< 3 >*,
 const double);

 template
 void integrate_difference< 3 ,  BlockVector<float> , Vector<float>,  3 >
 (const hp::DoFHandler< 3 , 3 >&,
 const  BlockVector<float> &,
 const Function< 3 >&,
 Vector<float>&,
 const hp::QCollection< 3 >&,
 const NormType&,
 const Function< 3 >*,
 const double);

 }
#endif
 
#if  1  <=  1 
 namespace VectorTools {

 template
 void integrate_difference< 1 ,  BlockVector<long double> , Vector<float>,  1 >
 (const Mapping< 1 ,  1 >&,
 const DoFHandler< 1 ,  1 >&,
 const  BlockVector<long double> &,
 const Function< 1 >&,
 Vector<float>&,
 const Quadrature< 1 >&,
 const NormType&,
 const Function< 1 >*,
 const double);

 template
 void integrate_difference< 1 ,  BlockVector<long double> , Vector<float>,  1 >
 (const DoFHandler< 1 ,  1 >&,
 const  BlockVector<long double> &,
 const Function< 1 >&,
 Vector<float>&,
 const Quadrature< 1 >&,
 const NormType&,
 const Function< 1 >*,
 const double);

 template
 void integrate_difference< 1 ,  BlockVector<long double> , Vector<double>,  1  >
 (const Mapping< 1 ,  1 >&,
 const DoFHandler< 1 ,  1 >&,
 const  BlockVector<long double> &,
 const Function< 1 >&,
 Vector<double>&,
 const Quadrature< 1 >&,
 const NormType&,
 const Function< 1 >*,
 const double);

 template
 void integrate_difference< 1 ,  BlockVector<long double> , Vector<double>,  1  >
 (const DoFHandler< 1 ,  1 >&,
 const  BlockVector<long double> &,
 const Function< 1 >&,
 Vector<double>&,
 const Quadrature< 1 >&,
 const NormType&,
 const Function< 1 >*,
 const double);

 template
 void integrate_difference< 1 ,  BlockVector<long double> , Vector<double>,  1 >
 (const hp::MappingCollection< 1 , 1 >&,
 const hp::DoFHandler< 1 , 1 >&,
 const  BlockVector<long double> &,
 const Function< 1 >&,
 Vector<double>&,
 const hp::QCollection< 1 >&,
 const NormType&,
 const Function< 1 >*,
 const double);

 template
 void integrate_difference< 1 ,  BlockVector<long double> , Vector<double>,  1 >
 (const hp::DoFHandler< 1 , 1 >&,
 const  BlockVector<long double> &,
 const Function< 1 >&,
 Vector<double>&,
 const hp::QCollection< 1 >&,
 const NormType&,
 const Function< 1 >*,
 const double);

 template
 void integrate_difference< 1 ,  BlockVector<long double> , Vector<float>,  1 >
 (const hp::MappingCollection< 1 , 1 >&,
 const hp::DoFHandler< 1 , 1 >&,
 const  BlockVector<long double> &,
 const Function< 1 >&,
 Vector<float>&,
 const hp::QCollection< 1 >&,
 const NormType&,
 const Function< 1 >*,
 const double);

 template
 void integrate_difference< 1 ,  BlockVector<long double> , Vector<float>,  1 >
 (const hp::DoFHandler< 1 , 1 >&,
 const  BlockVector<long double> &,
 const Function< 1 >&,
 Vector<float>&,
 const hp::QCollection< 1 >&,
 const NormType&,
 const Function< 1 >*,
 const double);

 }
#endif
 
#if  1  <=  2 
 namespace VectorTools {

 template
 void integrate_difference< 1 ,  BlockVector<long double> , Vector<float>,  2 >
 (const Mapping< 1 ,  2 >&,
 const DoFHandler< 1 ,  2 >&,
 const  BlockVector<long double> &,
 const Function< 2 >&,
 Vector<float>&,
 const Quadrature< 1 >&,
 const NormType&,
 const Function< 2 >*,
 const double);

 template
 void integrate_difference< 1 ,  BlockVector<long double> , Vector<float>,  2 >
 (const DoFHandler< 1 ,  2 >&,
 const  BlockVector<long double> &,
 const Function< 2 >&,
 Vector<float>&,
 const Quadrature< 1 >&,
 const NormType&,
 const Function< 2 >*,
 const double);

 template
 void integrate_difference< 1 ,  BlockVector<long double> , Vector<double>,  2  >
 (const Mapping< 1 ,  2 >&,
 const DoFHandler< 1 ,  2 >&,
 const  BlockVector<long double> &,
 const Function< 2 >&,
 Vector<double>&,
 const Quadrature< 1 >&,
 const NormType&,
 const Function< 2 >*,
 const double);

 template
 void integrate_difference< 1 ,  BlockVector<long double> , Vector<double>,  2  >
 (const DoFHandler< 1 ,  2 >&,
 const  BlockVector<long double> &,
 const Function< 2 >&,
 Vector<double>&,
 const Quadrature< 1 >&,
 const NormType&,
 const Function< 2 >*,
 const double);

 template
 void integrate_difference< 1 ,  BlockVector<long double> , Vector<double>,  2 >
 (const hp::MappingCollection< 1 , 2 >&,
 const hp::DoFHandler< 1 , 2 >&,
 const  BlockVector<long double> &,
 const Function< 2 >&,
 Vector<double>&,
 const hp::QCollection< 1 >&,
 const NormType&,
 const Function< 2 >*,
 const double);

 template
 void integrate_difference< 1 ,  BlockVector<long double> , Vector<double>,  2 >
 (const hp::DoFHandler< 1 , 2 >&,
 const  BlockVector<long double> &,
 const Function< 2 >&,
 Vector<double>&,
 const hp::QCollection< 1 >&,
 const NormType&,
 const Function< 2 >*,
 const double);

 template
 void integrate_difference< 1 ,  BlockVector<long double> , Vector<float>,  2 >
 (const hp::MappingCollection< 1 , 2 >&,
 const hp::DoFHandler< 1 , 2 >&,
 const  BlockVector<long double> &,
 const Function< 2 >&,
 Vector<float>&,
 const hp::QCollection< 1 >&,
 const NormType&,
 const Function< 2 >*,
 const double);

 template
 void integrate_difference< 1 ,  BlockVector<long double> , Vector<float>,  2 >
 (const hp::DoFHandler< 1 , 2 >&,
 const  BlockVector<long double> &,
 const Function< 2 >&,
 Vector<float>&,
 const hp::QCollection< 1 >&,
 const NormType&,
 const Function< 2 >*,
 const double);

 }
#endif
 
#if  1  <=  3 
 namespace VectorTools {

 template
 void integrate_difference< 1 ,  BlockVector<long double> , Vector<float>,  3 >
 (const Mapping< 1 ,  3 >&,
 const DoFHandler< 1 ,  3 >&,
 const  BlockVector<long double> &,
 const Function< 3 >&,
 Vector<float>&,
 const Quadrature< 1 >&,
 const NormType&,
 const Function< 3 >*,
 const double);

 template
 void integrate_difference< 1 ,  BlockVector<long double> , Vector<float>,  3 >
 (const DoFHandler< 1 ,  3 >&,
 const  BlockVector<long double> &,
 const Function< 3 >&,
 Vector<float>&,
 const Quadrature< 1 >&,
 const NormType&,
 const Function< 3 >*,
 const double);

 template
 void integrate_difference< 1 ,  BlockVector<long double> , Vector<double>,  3  >
 (const Mapping< 1 ,  3 >&,
 const DoFHandler< 1 ,  3 >&,
 const  BlockVector<long double> &,
 const Function< 3 >&,
 Vector<double>&,
 const Quadrature< 1 >&,
 const NormType&,
 const Function< 3 >*,
 const double);

 template
 void integrate_difference< 1 ,  BlockVector<long double> , Vector<double>,  3  >
 (const DoFHandler< 1 ,  3 >&,
 const  BlockVector<long double> &,
 const Function< 3 >&,
 Vector<double>&,
 const Quadrature< 1 >&,
 const NormType&,
 const Function< 3 >*,
 const double);

 template
 void integrate_difference< 1 ,  BlockVector<long double> , Vector<double>,  3 >
 (const hp::MappingCollection< 1 , 3 >&,
 const hp::DoFHandler< 1 , 3 >&,
 const  BlockVector<long double> &,
 const Function< 3 >&,
 Vector<double>&,
 const hp::QCollection< 1 >&,
 const NormType&,
 const Function< 3 >*,
 const double);

 template
 void integrate_difference< 1 ,  BlockVector<long double> , Vector<double>,  3 >
 (const hp::DoFHandler< 1 , 3 >&,
 const  BlockVector<long double> &,
 const Function< 3 >&,
 Vector<double>&,
 const hp::QCollection< 1 >&,
 const NormType&,
 const Function< 3 >*,
 const double);

 template
 void integrate_difference< 1 ,  BlockVector<long double> , Vector<float>,  3 >
 (const hp::MappingCollection< 1 , 3 >&,
 const hp::DoFHandler< 1 , 3 >&,
 const  BlockVector<long double> &,
 const Function< 3 >&,
 Vector<float>&,
 const hp::QCollection< 1 >&,
 const NormType&,
 const Function< 3 >*,
 const double);

 template
 void integrate_difference< 1 ,  BlockVector<long double> , Vector<float>,  3 >
 (const hp::DoFHandler< 1 , 3 >&,
 const  BlockVector<long double> &,
 const Function< 3 >&,
 Vector<float>&,
 const hp::QCollection< 1 >&,
 const NormType&,
 const Function< 3 >*,
 const double);

 }
#endif
 
#if  2  <=  1 
 namespace VectorTools {

 template
 void integrate_difference< 2 ,  BlockVector<long double> , Vector<float>,  1 >
 (const Mapping< 2 ,  1 >&,
 const DoFHandler< 2 ,  1 >&,
 const  BlockVector<long double> &,
 const Function< 1 >&,
 Vector<float>&,
 const Quadrature< 2 >&,
 const NormType&,
 const Function< 1 >*,
 const double);

 template
 void integrate_difference< 2 ,  BlockVector<long double> , Vector<float>,  1 >
 (const DoFHandler< 2 ,  1 >&,
 const  BlockVector<long double> &,
 const Function< 1 >&,
 Vector<float>&,
 const Quadrature< 2 >&,
 const NormType&,
 const Function< 1 >*,
 const double);

 template
 void integrate_difference< 2 ,  BlockVector<long double> , Vector<double>,  1  >
 (const Mapping< 2 ,  1 >&,
 const DoFHandler< 2 ,  1 >&,
 const  BlockVector<long double> &,
 const Function< 1 >&,
 Vector<double>&,
 const Quadrature< 2 >&,
 const NormType&,
 const Function< 1 >*,
 const double);

 template
 void integrate_difference< 2 ,  BlockVector<long double> , Vector<double>,  1  >
 (const DoFHandler< 2 ,  1 >&,
 const  BlockVector<long double> &,
 const Function< 1 >&,
 Vector<double>&,
 const Quadrature< 2 >&,
 const NormType&,
 const Function< 1 >*,
 const double);

 template
 void integrate_difference< 2 ,  BlockVector<long double> , Vector<double>,  1 >
 (const hp::MappingCollection< 2 , 1 >&,
 const hp::DoFHandler< 2 , 1 >&,
 const  BlockVector<long double> &,
 const Function< 1 >&,
 Vector<double>&,
 const hp::QCollection< 2 >&,
 const NormType&,
 const Function< 1 >*,
 const double);

 template
 void integrate_difference< 2 ,  BlockVector<long double> , Vector<double>,  1 >
 (const hp::DoFHandler< 2 , 1 >&,
 const  BlockVector<long double> &,
 const Function< 1 >&,
 Vector<double>&,
 const hp::QCollection< 2 >&,
 const NormType&,
 const Function< 1 >*,
 const double);

 template
 void integrate_difference< 2 ,  BlockVector<long double> , Vector<float>,  1 >
 (const hp::MappingCollection< 2 , 1 >&,
 const hp::DoFHandler< 2 , 1 >&,
 const  BlockVector<long double> &,
 const Function< 1 >&,
 Vector<float>&,
 const hp::QCollection< 2 >&,
 const NormType&,
 const Function< 1 >*,
 const double);

 template
 void integrate_difference< 2 ,  BlockVector<long double> , Vector<float>,  1 >
 (const hp::DoFHandler< 2 , 1 >&,
 const  BlockVector<long double> &,
 const Function< 1 >&,
 Vector<float>&,
 const hp::QCollection< 2 >&,
 const NormType&,
 const Function< 1 >*,
 const double);

 }
#endif
 
#if  2  <=  2 
 namespace VectorTools {

 template
 void integrate_difference< 2 ,  BlockVector<long double> , Vector<float>,  2 >
 (const Mapping< 2 ,  2 >&,
 const DoFHandler< 2 ,  2 >&,
 const  BlockVector<long double> &,
 const Function< 2 >&,
 Vector<float>&,
 const Quadrature< 2 >&,
 const NormType&,
 const Function< 2 >*,
 const double);

 template
 void integrate_difference< 2 ,  BlockVector<long double> , Vector<float>,  2 >
 (const DoFHandler< 2 ,  2 >&,
 const  BlockVector<long double> &,
 const Function< 2 >&,
 Vector<float>&,
 const Quadrature< 2 >&,
 const NormType&,
 const Function< 2 >*,
 const double);

 template
 void integrate_difference< 2 ,  BlockVector<long double> , Vector<double>,  2  >
 (const Mapping< 2 ,  2 >&,
 const DoFHandler< 2 ,  2 >&,
 const  BlockVector<long double> &,
 const Function< 2 >&,
 Vector<double>&,
 const Quadrature< 2 >&,
 const NormType&,
 const Function< 2 >*,
 const double);

 template
 void integrate_difference< 2 ,  BlockVector<long double> , Vector<double>,  2  >
 (const DoFHandler< 2 ,  2 >&,
 const  BlockVector<long double> &,
 const Function< 2 >&,
 Vector<double>&,
 const Quadrature< 2 >&,
 const NormType&,
 const Function< 2 >*,
 const double);

 template
 void integrate_difference< 2 ,  BlockVector<long double> , Vector<double>,  2 >
 (const hp::MappingCollection< 2 , 2 >&,
 const hp::DoFHandler< 2 , 2 >&,
 const  BlockVector<long double> &,
 const Function< 2 >&,
 Vector<double>&,
 const hp::QCollection< 2 >&,
 const NormType&,
 const Function< 2 >*,
 const double);

 template
 void integrate_difference< 2 ,  BlockVector<long double> , Vector<double>,  2 >
 (const hp::DoFHandler< 2 , 2 >&,
 const  BlockVector<long double> &,
 const Function< 2 >&,
 Vector<double>&,
 const hp::QCollection< 2 >&,
 const NormType&,
 const Function< 2 >*,
 const double);

 template
 void integrate_difference< 2 ,  BlockVector<long double> , Vector<float>,  2 >
 (const hp::MappingCollection< 2 , 2 >&,
 const hp::DoFHandler< 2 , 2 >&,
 const  BlockVector<long double> &,
 const Function< 2 >&,
 Vector<float>&,
 const hp::QCollection< 2 >&,
 const NormType&,
 const Function< 2 >*,
 const double);

 template
 void integrate_difference< 2 ,  BlockVector<long double> , Vector<float>,  2 >
 (const hp::DoFHandler< 2 , 2 >&,
 const  BlockVector<long double> &,
 const Function< 2 >&,
 Vector<float>&,
 const hp::QCollection< 2 >&,
 const NormType&,
 const Function< 2 >*,
 const double);

 }
#endif
 
#if  2  <=  3 
 namespace VectorTools {

 template
 void integrate_difference< 2 ,  BlockVector<long double> , Vector<float>,  3 >
 (const Mapping< 2 ,  3 >&,
 const DoFHandler< 2 ,  3 >&,
 const  BlockVector<long double> &,
 const Function< 3 >&,
 Vector<float>&,
 const Quadrature< 2 >&,
 const NormType&,
 const Function< 3 >*,
 const double);

 template
 void integrate_difference< 2 ,  BlockVector<long double> , Vector<float>,  3 >
 (const DoFHandler< 2 ,  3 >&,
 const  BlockVector<long double> &,
 const Function< 3 >&,
 Vector<float>&,
 const Quadrature< 2 >&,
 const NormType&,
 const Function< 3 >*,
 const double);

 template
 void integrate_difference< 2 ,  BlockVector<long double> , Vector<double>,  3  >
 (const Mapping< 2 ,  3 >&,
 const DoFHandler< 2 ,  3 >&,
 const  BlockVector<long double> &,
 const Function< 3 >&,
 Vector<double>&,
 const Quadrature< 2 >&,
 const NormType&,
 const Function< 3 >*,
 const double);

 template
 void integrate_difference< 2 ,  BlockVector<long double> , Vector<double>,  3  >
 (const DoFHandler< 2 ,  3 >&,
 const  BlockVector<long double> &,
 const Function< 3 >&,
 Vector<double>&,
 const Quadrature< 2 >&,
 const NormType&,
 const Function< 3 >*,
 const double);

 template
 void integrate_difference< 2 ,  BlockVector<long double> , Vector<double>,  3 >
 (const hp::MappingCollection< 2 , 3 >&,
 const hp::DoFHandler< 2 , 3 >&,
 const  BlockVector<long double> &,
 const Function< 3 >&,
 Vector<double>&,
 const hp::QCollection< 2 >&,
 const NormType&,
 const Function< 3 >*,
 const double);

 template
 void integrate_difference< 2 ,  BlockVector<long double> , Vector<double>,  3 >
 (const hp::DoFHandler< 2 , 3 >&,
 const  BlockVector<long double> &,
 const Function< 3 >&,
 Vector<double>&,
 const hp::QCollection< 2 >&,
 const NormType&,
 const Function< 3 >*,
 const double);

 template
 void integrate_difference< 2 ,  BlockVector<long double> , Vector<float>,  3 >
 (const hp::MappingCollection< 2 , 3 >&,
 const hp::DoFHandler< 2 , 3 >&,
 const  BlockVector<long double> &,
 const Function< 3 >&,
 Vector<float>&,
 const hp::QCollection< 2 >&,
 const NormType&,
 const Function< 3 >*,
 const double);

 template
 void integrate_difference< 2 ,  BlockVector<long double> , Vector<float>,  3 >
 (const hp::DoFHandler< 2 , 3 >&,
 const  BlockVector<long double> &,
 const Function< 3 >&,
 Vector<float>&,
 const hp::QCollection< 2 >&,
 const NormType&,
 const Function< 3 >*,
 const double);

 }
#endif
 
#if  3  <=  1 
 namespace VectorTools {

 template
 void integrate_difference< 3 ,  BlockVector<long double> , Vector<float>,  1 >
 (const Mapping< 3 ,  1 >&,
 const DoFHandler< 3 ,  1 >&,
 const  BlockVector<long double> &,
 const Function< 1 >&,
 Vector<float>&,
 const Quadrature< 3 >&,
 const NormType&,
 const Function< 1 >*,
 const double);

 template
 void integrate_difference< 3 ,  BlockVector<long double> , Vector<float>,  1 >
 (const DoFHandler< 3 ,  1 >&,
 const  BlockVector<long double> &,
 const Function< 1 >&,
 Vector<float>&,
 const Quadrature< 3 >&,
 const NormType&,
 const Function< 1 >*,
 const double);

 template
 void integrate_difference< 3 ,  BlockVector<long double> , Vector<double>,  1  >
 (const Mapping< 3 ,  1 >&,
 const DoFHandler< 3 ,  1 >&,
 const  BlockVector<long double> &,
 const Function< 1 >&,
 Vector<double>&,
 const Quadrature< 3 >&,
 const NormType&,
 const Function< 1 >*,
 const double);

 template
 void integrate_difference< 3 ,  BlockVector<long double> , Vector<double>,  1  >
 (const DoFHandler< 3 ,  1 >&,
 const  BlockVector<long double> &,
 const Function< 1 >&,
 Vector<double>&,
 const Quadrature< 3 >&,
 const NormType&,
 const Function< 1 >*,
 const double);

 template
 void integrate_difference< 3 ,  BlockVector<long double> , Vector<double>,  1 >
 (const hp::MappingCollection< 3 , 1 >&,
 const hp::DoFHandler< 3 , 1 >&,
 const  BlockVector<long double> &,
 const Function< 1 >&,
 Vector<double>&,
 const hp::QCollection< 3 >&,
 const NormType&,
 const Function< 1 >*,
 const double);

 template
 void integrate_difference< 3 ,  BlockVector<long double> , Vector<double>,  1 >
 (const hp::DoFHandler< 3 , 1 >&,
 const  BlockVector<long double> &,
 const Function< 1 >&,
 Vector<double>&,
 const hp::QCollection< 3 >&,
 const NormType&,
 const Function< 1 >*,
 const double);

 template
 void integrate_difference< 3 ,  BlockVector<long double> , Vector<float>,  1 >
 (const hp::MappingCollection< 3 , 1 >&,
 const hp::DoFHandler< 3 , 1 >&,
 const  BlockVector<long double> &,
 const Function< 1 >&,
 Vector<float>&,
 const hp::QCollection< 3 >&,
 const NormType&,
 const Function< 1 >*,
 const double);

 template
 void integrate_difference< 3 ,  BlockVector<long double> , Vector<float>,  1 >
 (const hp::DoFHandler< 3 , 1 >&,
 const  BlockVector<long double> &,
 const Function< 1 >&,
 Vector<float>&,
 const hp::QCollection< 3 >&,
 const NormType&,
 const Function< 1 >*,
 const double);

 }
#endif
 
#if  3  <=  2 
 namespace VectorTools {

 template
 void integrate_difference< 3 ,  BlockVector<long double> , Vector<float>,  2 >
 (const Mapping< 3 ,  2 >&,
 const DoFHandler< 3 ,  2 >&,
 const  BlockVector<long double> &,
 const Function< 2 >&,
 Vector<float>&,
 const Quadrature< 3 >&,
 const NormType&,
 const Function< 2 >*,
 const double);

 template
 void integrate_difference< 3 ,  BlockVector<long double> , Vector<float>,  2 >
 (const DoFHandler< 3 ,  2 >&,
 const  BlockVector<long double> &,
 const Function< 2 >&,
 Vector<float>&,
 const Quadrature< 3 >&,
 const NormType&,
 const Function< 2 >*,
 const double);

 template
 void integrate_difference< 3 ,  BlockVector<long double> , Vector<double>,  2  >
 (const Mapping< 3 ,  2 >&,
 const DoFHandler< 3 ,  2 >&,
 const  BlockVector<long double> &,
 const Function< 2 >&,
 Vector<double>&,
 const Quadrature< 3 >&,
 const NormType&,
 const Function< 2 >*,
 const double);

 template
 void integrate_difference< 3 ,  BlockVector<long double> , Vector<double>,  2  >
 (const DoFHandler< 3 ,  2 >&,
 const  BlockVector<long double> &,
 const Function< 2 >&,
 Vector<double>&,
 const Quadrature< 3 >&,
 const NormType&,
 const Function< 2 >*,
 const double);

 template
 void integrate_difference< 3 ,  BlockVector<long double> , Vector<double>,  2 >
 (const hp::MappingCollection< 3 , 2 >&,
 const hp::DoFHandler< 3 , 2 >&,
 const  BlockVector<long double> &,
 const Function< 2 >&,
 Vector<double>&,
 const hp::QCollection< 3 >&,
 const NormType&,
 const Function< 2 >*,
 const double);

 template
 void integrate_difference< 3 ,  BlockVector<long double> , Vector<double>,  2 >
 (const hp::DoFHandler< 3 , 2 >&,
 const  BlockVector<long double> &,
 const Function< 2 >&,
 Vector<double>&,
 const hp::QCollection< 3 >&,
 const NormType&,
 const Function< 2 >*,
 const double);

 template
 void integrate_difference< 3 ,  BlockVector<long double> , Vector<float>,  2 >
 (const hp::MappingCollection< 3 , 2 >&,
 const hp::DoFHandler< 3 , 2 >&,
 const  BlockVector<long double> &,
 const Function< 2 >&,
 Vector<float>&,
 const hp::QCollection< 3 >&,
 const NormType&,
 const Function< 2 >*,
 const double);

 template
 void integrate_difference< 3 ,  BlockVector<long double> , Vector<float>,  2 >
 (const hp::DoFHandler< 3 , 2 >&,
 const  BlockVector<long double> &,
 const Function< 2 >&,
 Vector<float>&,
 const hp::QCollection< 3 >&,
 const NormType&,
 const Function< 2 >*,
 const double);

 }
#endif
 
#if  3  <=  3 
 namespace VectorTools {

 template
 void integrate_difference< 3 ,  BlockVector<long double> , Vector<float>,  3 >
 (const Mapping< 3 ,  3 >&,
 const DoFHandler< 3 ,  3 >&,
 const  BlockVector<long double> &,
 const Function< 3 >&,
 Vector<float>&,
 const Quadrature< 3 >&,
 const NormType&,
 const Function< 3 >*,
 const double);

 template
 void integrate_difference< 3 ,  BlockVector<long double> , Vector<float>,  3 >
 (const DoFHandler< 3 ,  3 >&,
 const  BlockVector<long double> &,
 const Function< 3 >&,
 Vector<float>&,
 const Quadrature< 3 >&,
 const NormType&,
 const Function< 3 >*,
 const double);

 template
 void integrate_difference< 3 ,  BlockVector<long double> , Vector<double>,  3  >
 (const Mapping< 3 ,  3 >&,
 const DoFHandler< 3 ,  3 >&,
 const  BlockVector<long double> &,
 const Function< 3 >&,
 Vector<double>&,
 const Quadrature< 3 >&,
 const NormType&,
 const Function< 3 >*,
 const double);

 template
 void integrate_difference< 3 ,  BlockVector<long double> , Vector<double>,  3  >
 (const DoFHandler< 3 ,  3 >&,
 const  BlockVector<long double> &,
 const Function< 3 >&,
 Vector<double>&,
 const Quadrature< 3 >&,
 const NormType&,
 const Function< 3 >*,
 const double);

 template
 void integrate_difference< 3 ,  BlockVector<long double> , Vector<double>,  3 >
 (const hp::MappingCollection< 3 , 3 >&,
 const hp::DoFHandler< 3 , 3 >&,
 const  BlockVector<long double> &,
 const Function< 3 >&,
 Vector<double>&,
 const hp::QCollection< 3 >&,
 const NormType&,
 const Function< 3 >*,
 const double);

 template
 void integrate_difference< 3 ,  BlockVector<long double> , Vector<double>,  3 >
 (const hp::DoFHandler< 3 , 3 >&,
 const  BlockVector<long double> &,
 const Function< 3 >&,
 Vector<double>&,
 const hp::QCollection< 3 >&,
 const NormType&,
 const Function< 3 >*,
 const double);

 template
 void integrate_difference< 3 ,  BlockVector<long double> , Vector<float>,  3 >
 (const hp::MappingCollection< 3 , 3 >&,
 const hp::DoFHandler< 3 , 3 >&,
 const  BlockVector<long double> &,
 const Function< 3 >&,
 Vector<float>&,
 const hp::QCollection< 3 >&,
 const NormType&,
 const Function< 3 >*,
 const double);

 template
 void integrate_difference< 3 ,  BlockVector<long double> , Vector<float>,  3 >
 (const hp::DoFHandler< 3 , 3 >&,
 const  BlockVector<long double> &,
 const Function< 3 >&,
 Vector<float>&,
 const hp::QCollection< 3 >&,
 const NormType&,
 const Function< 3 >*,
 const double);

 }
#endif
 
#if  1  <=  1 
 namespace VectorTools {

 template
 void integrate_difference< 1 ,  parallel::distributed::Vector<double> , Vector<float>,  1 >
 (const Mapping< 1 ,  1 >&,
 const DoFHandler< 1 ,  1 >&,
 const  parallel::distributed::Vector<double> &,
 const Function< 1 >&,
 Vector<float>&,
 const Quadrature< 1 >&,
 const NormType&,
 const Function< 1 >*,
 const double);

 template
 void integrate_difference< 1 ,  parallel::distributed::Vector<double> , Vector<float>,  1 >
 (const DoFHandler< 1 ,  1 >&,
 const  parallel::distributed::Vector<double> &,
 const Function< 1 >&,
 Vector<float>&,
 const Quadrature< 1 >&,
 const NormType&,
 const Function< 1 >*,
 const double);

 template
 void integrate_difference< 1 ,  parallel::distributed::Vector<double> , Vector<double>,  1  >
 (const Mapping< 1 ,  1 >&,
 const DoFHandler< 1 ,  1 >&,
 const  parallel::distributed::Vector<double> &,
 const Function< 1 >&,
 Vector<double>&,
 const Quadrature< 1 >&,
 const NormType&,
 const Function< 1 >*,
 const double);

 template
 void integrate_difference< 1 ,  parallel::distributed::Vector<double> , Vector<double>,  1  >
 (const DoFHandler< 1 ,  1 >&,
 const  parallel::distributed::Vector<double> &,
 const Function< 1 >&,
 Vector<double>&,
 const Quadrature< 1 >&,
 const NormType&,
 const Function< 1 >*,
 const double);

 template
 void integrate_difference< 1 ,  parallel::distributed::Vector<double> , Vector<double>,  1 >
 (const hp::MappingCollection< 1 , 1 >&,
 const hp::DoFHandler< 1 , 1 >&,
 const  parallel::distributed::Vector<double> &,
 const Function< 1 >&,
 Vector<double>&,
 const hp::QCollection< 1 >&,
 const NormType&,
 const Function< 1 >*,
 const double);

 template
 void integrate_difference< 1 ,  parallel::distributed::Vector<double> , Vector<double>,  1 >
 (const hp::DoFHandler< 1 , 1 >&,
 const  parallel::distributed::Vector<double> &,
 const Function< 1 >&,
 Vector<double>&,
 const hp::QCollection< 1 >&,
 const NormType&,
 const Function< 1 >*,
 const double);

 template
 void integrate_difference< 1 ,  parallel::distributed::Vector<double> , Vector<float>,  1 >
 (const hp::MappingCollection< 1 , 1 >&,
 const hp::DoFHandler< 1 , 1 >&,
 const  parallel::distributed::Vector<double> &,
 const Function< 1 >&,
 Vector<float>&,
 const hp::QCollection< 1 >&,
 const NormType&,
 const Function< 1 >*,
 const double);

 template
 void integrate_difference< 1 ,  parallel::distributed::Vector<double> , Vector<float>,  1 >
 (const hp::DoFHandler< 1 , 1 >&,
 const  parallel::distributed::Vector<double> &,
 const Function< 1 >&,
 Vector<float>&,
 const hp::QCollection< 1 >&,
 const NormType&,
 const Function< 1 >*,
 const double);

 }
#endif
 
#if  1  <=  2 
 namespace VectorTools {

 template
 void integrate_difference< 1 ,  parallel::distributed::Vector<double> , Vector<float>,  2 >
 (const Mapping< 1 ,  2 >&,
 const DoFHandler< 1 ,  2 >&,
 const  parallel::distributed::Vector<double> &,
 const Function< 2 >&,
 Vector<float>&,
 const Quadrature< 1 >&,
 const NormType&,
 const Function< 2 >*,
 const double);

 template
 void integrate_difference< 1 ,  parallel::distributed::Vector<double> , Vector<float>,  2 >
 (const DoFHandler< 1 ,  2 >&,
 const  parallel::distributed::Vector<double> &,
 const Function< 2 >&,
 Vector<float>&,
 const Quadrature< 1 >&,
 const NormType&,
 const Function< 2 >*,
 const double);

 template
 void integrate_difference< 1 ,  parallel::distributed::Vector<double> , Vector<double>,  2  >
 (const Mapping< 1 ,  2 >&,
 const DoFHandler< 1 ,  2 >&,
 const  parallel::distributed::Vector<double> &,
 const Function< 2 >&,
 Vector<double>&,
 const Quadrature< 1 >&,
 const NormType&,
 const Function< 2 >*,
 const double);

 template
 void integrate_difference< 1 ,  parallel::distributed::Vector<double> , Vector<double>,  2  >
 (const DoFHandler< 1 ,  2 >&,
 const  parallel::distributed::Vector<double> &,
 const Function< 2 >&,
 Vector<double>&,
 const Quadrature< 1 >&,
 const NormType&,
 const Function< 2 >*,
 const double);

 template
 void integrate_difference< 1 ,  parallel::distributed::Vector<double> , Vector<double>,  2 >
 (const hp::MappingCollection< 1 , 2 >&,
 const hp::DoFHandler< 1 , 2 >&,
 const  parallel::distributed::Vector<double> &,
 const Function< 2 >&,
 Vector<double>&,
 const hp::QCollection< 1 >&,
 const NormType&,
 const Function< 2 >*,
 const double);

 template
 void integrate_difference< 1 ,  parallel::distributed::Vector<double> , Vector<double>,  2 >
 (const hp::DoFHandler< 1 , 2 >&,
 const  parallel::distributed::Vector<double> &,
 const Function< 2 >&,
 Vector<double>&,
 const hp::QCollection< 1 >&,
 const NormType&,
 const Function< 2 >*,
 const double);

 template
 void integrate_difference< 1 ,  parallel::distributed::Vector<double> , Vector<float>,  2 >
 (const hp::MappingCollection< 1 , 2 >&,
 const hp::DoFHandler< 1 , 2 >&,
 const  parallel::distributed::Vector<double> &,
 const Function< 2 >&,
 Vector<float>&,
 const hp::QCollection< 1 >&,
 const NormType&,
 const Function< 2 >*,
 const double);

 template
 void integrate_difference< 1 ,  parallel::distributed::Vector<double> , Vector<float>,  2 >
 (const hp::DoFHandler< 1 , 2 >&,
 const  parallel::distributed::Vector<double> &,
 const Function< 2 >&,
 Vector<float>&,
 const hp::QCollection< 1 >&,
 const NormType&,
 const Function< 2 >*,
 const double);

 }
#endif
 
#if  1  <=  3 
 namespace VectorTools {

 template
 void integrate_difference< 1 ,  parallel::distributed::Vector<double> , Vector<float>,  3 >
 (const Mapping< 1 ,  3 >&,
 const DoFHandler< 1 ,  3 >&,
 const  parallel::distributed::Vector<double> &,
 const Function< 3 >&,
 Vector<float>&,
 const Quadrature< 1 >&,
 const NormType&,
 const Function< 3 >*,
 const double);

 template
 void integrate_difference< 1 ,  parallel::distributed::Vector<double> , Vector<float>,  3 >
 (const DoFHandler< 1 ,  3 >&,
 const  parallel::distributed::Vector<double> &,
 const Function< 3 >&,
 Vector<float>&,
 const Quadrature< 1 >&,
 const NormType&,
 const Function< 3 >*,
 const double);

 template
 void integrate_difference< 1 ,  parallel::distributed::Vector<double> , Vector<double>,  3  >
 (const Mapping< 1 ,  3 >&,
 const DoFHandler< 1 ,  3 >&,
 const  parallel::distributed::Vector<double> &,
 const Function< 3 >&,
 Vector<double>&,
 const Quadrature< 1 >&,
 const NormType&,
 const Function< 3 >*,
 const double);

 template
 void integrate_difference< 1 ,  parallel::distributed::Vector<double> , Vector<double>,  3  >
 (const DoFHandler< 1 ,  3 >&,
 const  parallel::distributed::Vector<double> &,
 const Function< 3 >&,
 Vector<double>&,
 const Quadrature< 1 >&,
 const NormType&,
 const Function< 3 >*,
 const double);

 template
 void integrate_difference< 1 ,  parallel::distributed::Vector<double> , Vector<double>,  3 >
 (const hp::MappingCollection< 1 , 3 >&,
 const hp::DoFHandler< 1 , 3 >&,
 const  parallel::distributed::Vector<double> &,
 const Function< 3 >&,
 Vector<double>&,
 const hp::QCollection< 1 >&,
 const NormType&,
 const Function< 3 >*,
 const double);

 template
 void integrate_difference< 1 ,  parallel::distributed::Vector<double> , Vector<double>,  3 >
 (const hp::DoFHandler< 1 , 3 >&,
 const  parallel::distributed::Vector<double> &,
 const Function< 3 >&,
 Vector<double>&,
 const hp::QCollection< 1 >&,
 const NormType&,
 const Function< 3 >*,
 const double);

 template
 void integrate_difference< 1 ,  parallel::distributed::Vector<double> , Vector<float>,  3 >
 (const hp::MappingCollection< 1 , 3 >&,
 const hp::DoFHandler< 1 , 3 >&,
 const  parallel::distributed::Vector<double> &,
 const Function< 3 >&,
 Vector<float>&,
 const hp::QCollection< 1 >&,
 const NormType&,
 const Function< 3 >*,
 const double);

 template
 void integrate_difference< 1 ,  parallel::distributed::Vector<double> , Vector<float>,  3 >
 (const hp::DoFHandler< 1 , 3 >&,
 const  parallel::distributed::Vector<double> &,
 const Function< 3 >&,
 Vector<float>&,
 const hp::QCollection< 1 >&,
 const NormType&,
 const Function< 3 >*,
 const double);

 }
#endif
 
#if  2  <=  1 
 namespace VectorTools {

 template
 void integrate_difference< 2 ,  parallel::distributed::Vector<double> , Vector<float>,  1 >
 (const Mapping< 2 ,  1 >&,
 const DoFHandler< 2 ,  1 >&,
 const  parallel::distributed::Vector<double> &,
 const Function< 1 >&,
 Vector<float>&,
 const Quadrature< 2 >&,
 const NormType&,
 const Function< 1 >*,
 const double);

 template
 void integrate_difference< 2 ,  parallel::distributed::Vector<double> , Vector<float>,  1 >
 (const DoFHandler< 2 ,  1 >&,
 const  parallel::distributed::Vector<double> &,
 const Function< 1 >&,
 Vector<float>&,
 const Quadrature< 2 >&,
 const NormType&,
 const Function< 1 >*,
 const double);

 template
 void integrate_difference< 2 ,  parallel::distributed::Vector<double> , Vector<double>,  1  >
 (const Mapping< 2 ,  1 >&,
 const DoFHandler< 2 ,  1 >&,
 const  parallel::distributed::Vector<double> &,
 const Function< 1 >&,
 Vector<double>&,
 const Quadrature< 2 >&,
 const NormType&,
 const Function< 1 >*,
 const double);

 template
 void integrate_difference< 2 ,  parallel::distributed::Vector<double> , Vector<double>,  1  >
 (const DoFHandler< 2 ,  1 >&,
 const  parallel::distributed::Vector<double> &,
 const Function< 1 >&,
 Vector<double>&,
 const Quadrature< 2 >&,
 const NormType&,
 const Function< 1 >*,
 const double);

 template
 void integrate_difference< 2 ,  parallel::distributed::Vector<double> , Vector<double>,  1 >
 (const hp::MappingCollection< 2 , 1 >&,
 const hp::DoFHandler< 2 , 1 >&,
 const  parallel::distributed::Vector<double> &,
 const Function< 1 >&,
 Vector<double>&,
 const hp::QCollection< 2 >&,
 const NormType&,
 const Function< 1 >*,
 const double);

 template
 void integrate_difference< 2 ,  parallel::distributed::Vector<double> , Vector<double>,  1 >
 (const hp::DoFHandler< 2 , 1 >&,
 const  parallel::distributed::Vector<double> &,
 const Function< 1 >&,
 Vector<double>&,
 const hp::QCollection< 2 >&,
 const NormType&,
 const Function< 1 >*,
 const double);

 template
 void integrate_difference< 2 ,  parallel::distributed::Vector<double> , Vector<float>,  1 >
 (const hp::MappingCollection< 2 , 1 >&,
 const hp::DoFHandler< 2 , 1 >&,
 const  parallel::distributed::Vector<double> &,
 const Function< 1 >&,
 Vector<float>&,
 const hp::QCollection< 2 >&,
 const NormType&,
 const Function< 1 >*,
 const double);

 template
 void integrate_difference< 2 ,  parallel::distributed::Vector<double> , Vector<float>,  1 >
 (const hp::DoFHandler< 2 , 1 >&,
 const  parallel::distributed::Vector<double> &,
 const Function< 1 >&,
 Vector<float>&,
 const hp::QCollection< 2 >&,
 const NormType&,
 const Function< 1 >*,
 const double);

 }
#endif
 
#if  2  <=  2 
 namespace VectorTools {

 template
 void integrate_difference< 2 ,  parallel::distributed::Vector<double> , Vector<float>,  2 >
 (const Mapping< 2 ,  2 >&,
 const DoFHandler< 2 ,  2 >&,
 const  parallel::distributed::Vector<double> &,
 const Function< 2 >&,
 Vector<float>&,
 const Quadrature< 2 >&,
 const NormType&,
 const Function< 2 >*,
 const double);

 template
 void integrate_difference< 2 ,  parallel::distributed::Vector<double> , Vector<float>,  2 >
 (const DoFHandler< 2 ,  2 >&,
 const  parallel::distributed::Vector<double> &,
 const Function< 2 >&,
 Vector<float>&,
 const Quadrature< 2 >&,
 const NormType&,
 const Function< 2 >*,
 const double);

 template
 void integrate_difference< 2 ,  parallel::distributed::Vector<double> , Vector<double>,  2  >
 (const Mapping< 2 ,  2 >&,
 const DoFHandler< 2 ,  2 >&,
 const  parallel::distributed::Vector<double> &,
 const Function< 2 >&,
 Vector<double>&,
 const Quadrature< 2 >&,
 const NormType&,
 const Function< 2 >*,
 const double);

 template
 void integrate_difference< 2 ,  parallel::distributed::Vector<double> , Vector<double>,  2  >
 (const DoFHandler< 2 ,  2 >&,
 const  parallel::distributed::Vector<double> &,
 const Function< 2 >&,
 Vector<double>&,
 const Quadrature< 2 >&,
 const NormType&,
 const Function< 2 >*,
 const double);

 template
 void integrate_difference< 2 ,  parallel::distributed::Vector<double> , Vector<double>,  2 >
 (const hp::MappingCollection< 2 , 2 >&,
 const hp::DoFHandler< 2 , 2 >&,
 const  parallel::distributed::Vector<double> &,
 const Function< 2 >&,
 Vector<double>&,
 const hp::QCollection< 2 >&,
 const NormType&,
 const Function< 2 >*,
 const double);

 template
 void integrate_difference< 2 ,  parallel::distributed::Vector<double> , Vector<double>,  2 >
 (const hp::DoFHandler< 2 , 2 >&,
 const  parallel::distributed::Vector<double> &,
 const Function< 2 >&,
 Vector<double>&,
 const hp::QCollection< 2 >&,
 const NormType&,
 const Function< 2 >*,
 const double);

 template
 void integrate_difference< 2 ,  parallel::distributed::Vector<double> , Vector<float>,  2 >
 (const hp::MappingCollection< 2 , 2 >&,
 const hp::DoFHandler< 2 , 2 >&,
 const  parallel::distributed::Vector<double> &,
 const Function< 2 >&,
 Vector<float>&,
 const hp::QCollection< 2 >&,
 const NormType&,
 const Function< 2 >*,
 const double);

 template
 void integrate_difference< 2 ,  parallel::distributed::Vector<double> , Vector<float>,  2 >
 (const hp::DoFHandler< 2 , 2 >&,
 const  parallel::distributed::Vector<double> &,
 const Function< 2 >&,
 Vector<float>&,
 const hp::QCollection< 2 >&,
 const NormType&,
 const Function< 2 >*,
 const double);

 }
#endif
 
#if  2  <=  3 
 namespace VectorTools {

 template
 void integrate_difference< 2 ,  parallel::distributed::Vector<double> , Vector<float>,  3 >
 (const Mapping< 2 ,  3 >&,
 const DoFHandler< 2 ,  3 >&,
 const  parallel::distributed::Vector<double> &,
 const Function< 3 >&,
 Vector<float>&,
 const Quadrature< 2 >&,
 const NormType&,
 const Function< 3 >*,
 const double);

 template
 void integrate_difference< 2 ,  parallel::distributed::Vector<double> , Vector<float>,  3 >
 (const DoFHandler< 2 ,  3 >&,
 const  parallel::distributed::Vector<double> &,
 const Function< 3 >&,
 Vector<float>&,
 const Quadrature< 2 >&,
 const NormType&,
 const Function< 3 >*,
 const double);

 template
 void integrate_difference< 2 ,  parallel::distributed::Vector<double> , Vector<double>,  3  >
 (const Mapping< 2 ,  3 >&,
 const DoFHandler< 2 ,  3 >&,
 const  parallel::distributed::Vector<double> &,
 const Function< 3 >&,
 Vector<double>&,
 const Quadrature< 2 >&,
 const NormType&,
 const Function< 3 >*,
 const double);

 template
 void integrate_difference< 2 ,  parallel::distributed::Vector<double> , Vector<double>,  3  >
 (const DoFHandler< 2 ,  3 >&,
 const  parallel::distributed::Vector<double> &,
 const Function< 3 >&,
 Vector<double>&,
 const Quadrature< 2 >&,
 const NormType&,
 const Function< 3 >*,
 const double);

 template
 void integrate_difference< 2 ,  parallel::distributed::Vector<double> , Vector<double>,  3 >
 (const hp::MappingCollection< 2 , 3 >&,
 const hp::DoFHandler< 2 , 3 >&,
 const  parallel::distributed::Vector<double> &,
 const Function< 3 >&,
 Vector<double>&,
 const hp::QCollection< 2 >&,
 const NormType&,
 const Function< 3 >*,
 const double);

 template
 void integrate_difference< 2 ,  parallel::distributed::Vector<double> , Vector<double>,  3 >
 (const hp::DoFHandler< 2 , 3 >&,
 const  parallel::distributed::Vector<double> &,
 const Function< 3 >&,
 Vector<double>&,
 const hp::QCollection< 2 >&,
 const NormType&,
 const Function< 3 >*,
 const double);

 template
 void integrate_difference< 2 ,  parallel::distributed::Vector<double> , Vector<float>,  3 >
 (const hp::MappingCollection< 2 , 3 >&,
 const hp::DoFHandler< 2 , 3 >&,
 const  parallel::distributed::Vector<double> &,
 const Function< 3 >&,
 Vector<float>&,
 const hp::QCollection< 2 >&,
 const NormType&,
 const Function< 3 >*,
 const double);

 template
 void integrate_difference< 2 ,  parallel::distributed::Vector<double> , Vector<float>,  3 >
 (const hp::DoFHandler< 2 , 3 >&,
 const  parallel::distributed::Vector<double> &,
 const Function< 3 >&,
 Vector<float>&,
 const hp::QCollection< 2 >&,
 const NormType&,
 const Function< 3 >*,
 const double);

 }
#endif
 
#if  3  <=  1 
 namespace VectorTools {

 template
 void integrate_difference< 3 ,  parallel::distributed::Vector<double> , Vector<float>,  1 >
 (const Mapping< 3 ,  1 >&,
 const DoFHandler< 3 ,  1 >&,
 const  parallel::distributed::Vector<double> &,
 const Function< 1 >&,
 Vector<float>&,
 const Quadrature< 3 >&,
 const NormType&,
 const Function< 1 >*,
 const double);

 template
 void integrate_difference< 3 ,  parallel::distributed::Vector<double> , Vector<float>,  1 >
 (const DoFHandler< 3 ,  1 >&,
 const  parallel::distributed::Vector<double> &,
 const Function< 1 >&,
 Vector<float>&,
 const Quadrature< 3 >&,
 const NormType&,
 const Function< 1 >*,
 const double);

 template
 void integrate_difference< 3 ,  parallel::distributed::Vector<double> , Vector<double>,  1  >
 (const Mapping< 3 ,  1 >&,
 const DoFHandler< 3 ,  1 >&,
 const  parallel::distributed::Vector<double> &,
 const Function< 1 >&,
 Vector<double>&,
 const Quadrature< 3 >&,
 const NormType&,
 const Function< 1 >*,
 const double);

 template
 void integrate_difference< 3 ,  parallel::distributed::Vector<double> , Vector<double>,  1  >
 (const DoFHandler< 3 ,  1 >&,
 const  parallel::distributed::Vector<double> &,
 const Function< 1 >&,
 Vector<double>&,
 const Quadrature< 3 >&,
 const NormType&,
 const Function< 1 >*,
 const double);

 template
 void integrate_difference< 3 ,  parallel::distributed::Vector<double> , Vector<double>,  1 >
 (const hp::MappingCollection< 3 , 1 >&,
 const hp::DoFHandler< 3 , 1 >&,
 const  parallel::distributed::Vector<double> &,
 const Function< 1 >&,
 Vector<double>&,
 const hp::QCollection< 3 >&,
 const NormType&,
 const Function< 1 >*,
 const double);

 template
 void integrate_difference< 3 ,  parallel::distributed::Vector<double> , Vector<double>,  1 >
 (const hp::DoFHandler< 3 , 1 >&,
 const  parallel::distributed::Vector<double> &,
 const Function< 1 >&,
 Vector<double>&,
 const hp::QCollection< 3 >&,
 const NormType&,
 const Function< 1 >*,
 const double);

 template
 void integrate_difference< 3 ,  parallel::distributed::Vector<double> , Vector<float>,  1 >
 (const hp::MappingCollection< 3 , 1 >&,
 const hp::DoFHandler< 3 , 1 >&,
 const  parallel::distributed::Vector<double> &,
 const Function< 1 >&,
 Vector<float>&,
 const hp::QCollection< 3 >&,
 const NormType&,
 const Function< 1 >*,
 const double);

 template
 void integrate_difference< 3 ,  parallel::distributed::Vector<double> , Vector<float>,  1 >
 (const hp::DoFHandler< 3 , 1 >&,
 const  parallel::distributed::Vector<double> &,
 const Function< 1 >&,
 Vector<float>&,
 const hp::QCollection< 3 >&,
 const NormType&,
 const Function< 1 >*,
 const double);

 }
#endif
 
#if  3  <=  2 
 namespace VectorTools {

 template
 void integrate_difference< 3 ,  parallel::distributed::Vector<double> , Vector<float>,  2 >
 (const Mapping< 3 ,  2 >&,
 const DoFHandler< 3 ,  2 >&,
 const  parallel::distributed::Vector<double> &,
 const Function< 2 >&,
 Vector<float>&,
 const Quadrature< 3 >&,
 const NormType&,
 const Function< 2 >*,
 const double);

 template
 void integrate_difference< 3 ,  parallel::distributed::Vector<double> , Vector<float>,  2 >
 (const DoFHandler< 3 ,  2 >&,
 const  parallel::distributed::Vector<double> &,
 const Function< 2 >&,
 Vector<float>&,
 const Quadrature< 3 >&,
 const NormType&,
 const Function< 2 >*,
 const double);

 template
 void integrate_difference< 3 ,  parallel::distributed::Vector<double> , Vector<double>,  2  >
 (const Mapping< 3 ,  2 >&,
 const DoFHandler< 3 ,  2 >&,
 const  parallel::distributed::Vector<double> &,
 const Function< 2 >&,
 Vector<double>&,
 const Quadrature< 3 >&,
 const NormType&,
 const Function< 2 >*,
 const double);

 template
 void integrate_difference< 3 ,  parallel::distributed::Vector<double> , Vector<double>,  2  >
 (const DoFHandler< 3 ,  2 >&,
 const  parallel::distributed::Vector<double> &,
 const Function< 2 >&,
 Vector<double>&,
 const Quadrature< 3 >&,
 const NormType&,
 const Function< 2 >*,
 const double);

 template
 void integrate_difference< 3 ,  parallel::distributed::Vector<double> , Vector<double>,  2 >
 (const hp::MappingCollection< 3 , 2 >&,
 const hp::DoFHandler< 3 , 2 >&,
 const  parallel::distributed::Vector<double> &,
 const Function< 2 >&,
 Vector<double>&,
 const hp::QCollection< 3 >&,
 const NormType&,
 const Function< 2 >*,
 const double);

 template
 void integrate_difference< 3 ,  parallel::distributed::Vector<double> , Vector<double>,  2 >
 (const hp::DoFHandler< 3 , 2 >&,
 const  parallel::distributed::Vector<double> &,
 const Function< 2 >&,
 Vector<double>&,
 const hp::QCollection< 3 >&,
 const NormType&,
 const Function< 2 >*,
 const double);

 template
 void integrate_difference< 3 ,  parallel::distributed::Vector<double> , Vector<float>,  2 >
 (const hp::MappingCollection< 3 , 2 >&,
 const hp::DoFHandler< 3 , 2 >&,
 const  parallel::distributed::Vector<double> &,
 const Function< 2 >&,
 Vector<float>&,
 const hp::QCollection< 3 >&,
 const NormType&,
 const Function< 2 >*,
 const double);

 template
 void integrate_difference< 3 ,  parallel::distributed::Vector<double> , Vector<float>,  2 >
 (const hp::DoFHandler< 3 , 2 >&,
 const  parallel::distributed::Vector<double> &,
 const Function< 2 >&,
 Vector<float>&,
 const hp::QCollection< 3 >&,
 const NormType&,
 const Function< 2 >*,
 const double);

 }
#endif
 
#if  3  <=  3 
 namespace VectorTools {

 template
 void integrate_difference< 3 ,  parallel::distributed::Vector<double> , Vector<float>,  3 >
 (const Mapping< 3 ,  3 >&,
 const DoFHandler< 3 ,  3 >&,
 const  parallel::distributed::Vector<double> &,
 const Function< 3 >&,
 Vector<float>&,
 const Quadrature< 3 >&,
 const NormType&,
 const Function< 3 >*,
 const double);

 template
 void integrate_difference< 3 ,  parallel::distributed::Vector<double> , Vector<float>,  3 >
 (const DoFHandler< 3 ,  3 >&,
 const  parallel::distributed::Vector<double> &,
 const Function< 3 >&,
 Vector<float>&,
 const Quadrature< 3 >&,
 const NormType&,
 const Function< 3 >*,
 const double);

 template
 void integrate_difference< 3 ,  parallel::distributed::Vector<double> , Vector<double>,  3  >
 (const Mapping< 3 ,  3 >&,
 const DoFHandler< 3 ,  3 >&,
 const  parallel::distributed::Vector<double> &,
 const Function< 3 >&,
 Vector<double>&,
 const Quadrature< 3 >&,
 const NormType&,
 const Function< 3 >*,
 const double);

 template
 void integrate_difference< 3 ,  parallel::distributed::Vector<double> , Vector<double>,  3  >
 (const DoFHandler< 3 ,  3 >&,
 const  parallel::distributed::Vector<double> &,
 const Function< 3 >&,
 Vector<double>&,
 const Quadrature< 3 >&,
 const NormType&,
 const Function< 3 >*,
 const double);

 template
 void integrate_difference< 3 ,  parallel::distributed::Vector<double> , Vector<double>,  3 >
 (const hp::MappingCollection< 3 , 3 >&,
 const hp::DoFHandler< 3 , 3 >&,
 const  parallel::distributed::Vector<double> &,
 const Function< 3 >&,
 Vector<double>&,
 const hp::QCollection< 3 >&,
 const NormType&,
 const Function< 3 >*,
 const double);

 template
 void integrate_difference< 3 ,  parallel::distributed::Vector<double> , Vector<double>,  3 >
 (const hp::DoFHandler< 3 , 3 >&,
 const  parallel::distributed::Vector<double> &,
 const Function< 3 >&,
 Vector<double>&,
 const hp::QCollection< 3 >&,
 const NormType&,
 const Function< 3 >*,
 const double);

 template
 void integrate_difference< 3 ,  parallel::distributed::Vector<double> , Vector<float>,  3 >
 (const hp::MappingCollection< 3 , 3 >&,
 const hp::DoFHandler< 3 , 3 >&,
 const  parallel::distributed::Vector<double> &,
 const Function< 3 >&,
 Vector<float>&,
 const hp::QCollection< 3 >&,
 const NormType&,
 const Function< 3 >*,
 const double);

 template
 void integrate_difference< 3 ,  parallel::distributed::Vector<double> , Vector<float>,  3 >
 (const hp::DoFHandler< 3 , 3 >&,
 const  parallel::distributed::Vector<double> &,
 const Function< 3 >&,
 Vector<float>&,
 const hp::QCollection< 3 >&,
 const NormType&,
 const Function< 3 >*,
 const double);

 }
#endif
 
#if  1  <=  1 
 namespace VectorTools {

 template
 void integrate_difference< 1 ,  parallel::distributed::Vector<float> , Vector<float>,  1 >
 (const Mapping< 1 ,  1 >&,
 const DoFHandler< 1 ,  1 >&,
 const  parallel::distributed::Vector<float> &,
 const Function< 1 >&,
 Vector<float>&,
 const Quadrature< 1 >&,
 const NormType&,
 const Function< 1 >*,
 const double);

 template
 void integrate_difference< 1 ,  parallel::distributed::Vector<float> , Vector<float>,  1 >
 (const DoFHandler< 1 ,  1 >&,
 const  parallel::distributed::Vector<float> &,
 const Function< 1 >&,
 Vector<float>&,
 const Quadrature< 1 >&,
 const NormType&,
 const Function< 1 >*,
 const double);

 template
 void integrate_difference< 1 ,  parallel::distributed::Vector<float> , Vector<double>,  1  >
 (const Mapping< 1 ,  1 >&,
 const DoFHandler< 1 ,  1 >&,
 const  parallel::distributed::Vector<float> &,
 const Function< 1 >&,
 Vector<double>&,
 const Quadrature< 1 >&,
 const NormType&,
 const Function< 1 >*,
 const double);

 template
 void integrate_difference< 1 ,  parallel::distributed::Vector<float> , Vector<double>,  1  >
 (const DoFHandler< 1 ,  1 >&,
 const  parallel::distributed::Vector<float> &,
 const Function< 1 >&,
 Vector<double>&,
 const Quadrature< 1 >&,
 const NormType&,
 const Function< 1 >*,
 const double);

 template
 void integrate_difference< 1 ,  parallel::distributed::Vector<float> , Vector<double>,  1 >
 (const hp::MappingCollection< 1 , 1 >&,
 const hp::DoFHandler< 1 , 1 >&,
 const  parallel::distributed::Vector<float> &,
 const Function< 1 >&,
 Vector<double>&,
 const hp::QCollection< 1 >&,
 const NormType&,
 const Function< 1 >*,
 const double);

 template
 void integrate_difference< 1 ,  parallel::distributed::Vector<float> , Vector<double>,  1 >
 (const hp::DoFHandler< 1 , 1 >&,
 const  parallel::distributed::Vector<float> &,
 const Function< 1 >&,
 Vector<double>&,
 const hp::QCollection< 1 >&,
 const NormType&,
 const Function< 1 >*,
 const double);

 template
 void integrate_difference< 1 ,  parallel::distributed::Vector<float> , Vector<float>,  1 >
 (const hp::MappingCollection< 1 , 1 >&,
 const hp::DoFHandler< 1 , 1 >&,
 const  parallel::distributed::Vector<float> &,
 const Function< 1 >&,
 Vector<float>&,
 const hp::QCollection< 1 >&,
 const NormType&,
 const Function< 1 >*,
 const double);

 template
 void integrate_difference< 1 ,  parallel::distributed::Vector<float> , Vector<float>,  1 >
 (const hp::DoFHandler< 1 , 1 >&,
 const  parallel::distributed::Vector<float> &,
 const Function< 1 >&,
 Vector<float>&,
 const hp::QCollection< 1 >&,
 const NormType&,
 const Function< 1 >*,
 const double);

 }
#endif
 
#if  1  <=  2 
 namespace VectorTools {

 template
 void integrate_difference< 1 ,  parallel::distributed::Vector<float> , Vector<float>,  2 >
 (const Mapping< 1 ,  2 >&,
 const DoFHandler< 1 ,  2 >&,
 const  parallel::distributed::Vector<float> &,
 const Function< 2 >&,
 Vector<float>&,
 const Quadrature< 1 >&,
 const NormType&,
 const Function< 2 >*,
 const double);

 template
 void integrate_difference< 1 ,  parallel::distributed::Vector<float> , Vector<float>,  2 >
 (const DoFHandler< 1 ,  2 >&,
 const  parallel::distributed::Vector<float> &,
 const Function< 2 >&,
 Vector<float>&,
 const Quadrature< 1 >&,
 const NormType&,
 const Function< 2 >*,
 const double);

 template
 void integrate_difference< 1 ,  parallel::distributed::Vector<float> , Vector<double>,  2  >
 (const Mapping< 1 ,  2 >&,
 const DoFHandler< 1 ,  2 >&,
 const  parallel::distributed::Vector<float> &,
 const Function< 2 >&,
 Vector<double>&,
 const Quadrature< 1 >&,
 const NormType&,
 const Function< 2 >*,
 const double);

 template
 void integrate_difference< 1 ,  parallel::distributed::Vector<float> , Vector<double>,  2  >
 (const DoFHandler< 1 ,  2 >&,
 const  parallel::distributed::Vector<float> &,
 const Function< 2 >&,
 Vector<double>&,
 const Quadrature< 1 >&,
 const NormType&,
 const Function< 2 >*,
 const double);

 template
 void integrate_difference< 1 ,  parallel::distributed::Vector<float> , Vector<double>,  2 >
 (const hp::MappingCollection< 1 , 2 >&,
 const hp::DoFHandler< 1 , 2 >&,
 const  parallel::distributed::Vector<float> &,
 const Function< 2 >&,
 Vector<double>&,
 const hp::QCollection< 1 >&,
 const NormType&,
 const Function< 2 >*,
 const double);

 template
 void integrate_difference< 1 ,  parallel::distributed::Vector<float> , Vector<double>,  2 >
 (const hp::DoFHandler< 1 , 2 >&,
 const  parallel::distributed::Vector<float> &,
 const Function< 2 >&,
 Vector<double>&,
 const hp::QCollection< 1 >&,
 const NormType&,
 const Function< 2 >*,
 const double);

 template
 void integrate_difference< 1 ,  parallel::distributed::Vector<float> , Vector<float>,  2 >
 (const hp::MappingCollection< 1 , 2 >&,
 const hp::DoFHandler< 1 , 2 >&,
 const  parallel::distributed::Vector<float> &,
 const Function< 2 >&,
 Vector<float>&,
 const hp::QCollection< 1 >&,
 const NormType&,
 const Function< 2 >*,
 const double);

 template
 void integrate_difference< 1 ,  parallel::distributed::Vector<float> , Vector<float>,  2 >
 (const hp::DoFHandler< 1 , 2 >&,
 const  parallel::distributed::Vector<float> &,
 const Function< 2 >&,
 Vector<float>&,
 const hp::QCollection< 1 >&,
 const NormType&,
 const Function< 2 >*,
 const double);

 }
#endif
 
#if  1  <=  3 
 namespace VectorTools {

 template
 void integrate_difference< 1 ,  parallel::distributed::Vector<float> , Vector<float>,  3 >
 (const Mapping< 1 ,  3 >&,
 const DoFHandler< 1 ,  3 >&,
 const  parallel::distributed::Vector<float> &,
 const Function< 3 >&,
 Vector<float>&,
 const Quadrature< 1 >&,
 const NormType&,
 const Function< 3 >*,
 const double);

 template
 void integrate_difference< 1 ,  parallel::distributed::Vector<float> , Vector<float>,  3 >
 (const DoFHandler< 1 ,  3 >&,
 const  parallel::distributed::Vector<float> &,
 const Function< 3 >&,
 Vector<float>&,
 const Quadrature< 1 >&,
 const NormType&,
 const Function< 3 >*,
 const double);

 template
 void integrate_difference< 1 ,  parallel::distributed::Vector<float> , Vector<double>,  3  >
 (const Mapping< 1 ,  3 >&,
 const DoFHandler< 1 ,  3 >&,
 const  parallel::distributed::Vector<float> &,
 const Function< 3 >&,
 Vector<double>&,
 const Quadrature< 1 >&,
 const NormType&,
 const Function< 3 >*,
 const double);

 template
 void integrate_difference< 1 ,  parallel::distributed::Vector<float> , Vector<double>,  3  >
 (const DoFHandler< 1 ,  3 >&,
 const  parallel::distributed::Vector<float> &,
 const Function< 3 >&,
 Vector<double>&,
 const Quadrature< 1 >&,
 const NormType&,
 const Function< 3 >*,
 const double);

 template
 void integrate_difference< 1 ,  parallel::distributed::Vector<float> , Vector<double>,  3 >
 (const hp::MappingCollection< 1 , 3 >&,
 const hp::DoFHandler< 1 , 3 >&,
 const  parallel::distributed::Vector<float> &,
 const Function< 3 >&,
 Vector<double>&,
 const hp::QCollection< 1 >&,
 const NormType&,
 const Function< 3 >*,
 const double);

 template
 void integrate_difference< 1 ,  parallel::distributed::Vector<float> , Vector<double>,  3 >
 (const hp::DoFHandler< 1 , 3 >&,
 const  parallel::distributed::Vector<float> &,
 const Function< 3 >&,
 Vector<double>&,
 const hp::QCollection< 1 >&,
 const NormType&,
 const Function< 3 >*,
 const double);

 template
 void integrate_difference< 1 ,  parallel::distributed::Vector<float> , Vector<float>,  3 >
 (const hp::MappingCollection< 1 , 3 >&,
 const hp::DoFHandler< 1 , 3 >&,
 const  parallel::distributed::Vector<float> &,
 const Function< 3 >&,
 Vector<float>&,
 const hp::QCollection< 1 >&,
 const NormType&,
 const Function< 3 >*,
 const double);

 template
 void integrate_difference< 1 ,  parallel::distributed::Vector<float> , Vector<float>,  3 >
 (const hp::DoFHandler< 1 , 3 >&,
 const  parallel::distributed::Vector<float> &,
 const Function< 3 >&,
 Vector<float>&,
 const hp::QCollection< 1 >&,
 const NormType&,
 const Function< 3 >*,
 const double);

 }
#endif
 
#if  2  <=  1 
 namespace VectorTools {

 template
 void integrate_difference< 2 ,  parallel::distributed::Vector<float> , Vector<float>,  1 >
 (const Mapping< 2 ,  1 >&,
 const DoFHandler< 2 ,  1 >&,
 const  parallel::distributed::Vector<float> &,
 const Function< 1 >&,
 Vector<float>&,
 const Quadrature< 2 >&,
 const NormType&,
 const Function< 1 >*,
 const double);

 template
 void integrate_difference< 2 ,  parallel::distributed::Vector<float> , Vector<float>,  1 >
 (const DoFHandler< 2 ,  1 >&,
 const  parallel::distributed::Vector<float> &,
 const Function< 1 >&,
 Vector<float>&,
 const Quadrature< 2 >&,
 const NormType&,
 const Function< 1 >*,
 const double);

 template
 void integrate_difference< 2 ,  parallel::distributed::Vector<float> , Vector<double>,  1  >
 (const Mapping< 2 ,  1 >&,
 const DoFHandler< 2 ,  1 >&,
 const  parallel::distributed::Vector<float> &,
 const Function< 1 >&,
 Vector<double>&,
 const Quadrature< 2 >&,
 const NormType&,
 const Function< 1 >*,
 const double);

 template
 void integrate_difference< 2 ,  parallel::distributed::Vector<float> , Vector<double>,  1  >
 (const DoFHandler< 2 ,  1 >&,
 const  parallel::distributed::Vector<float> &,
 const Function< 1 >&,
 Vector<double>&,
 const Quadrature< 2 >&,
 const NormType&,
 const Function< 1 >*,
 const double);

 template
 void integrate_difference< 2 ,  parallel::distributed::Vector<float> , Vector<double>,  1 >
 (const hp::MappingCollection< 2 , 1 >&,
 const hp::DoFHandler< 2 , 1 >&,
 const  parallel::distributed::Vector<float> &,
 const Function< 1 >&,
 Vector<double>&,
 const hp::QCollection< 2 >&,
 const NormType&,
 const Function< 1 >*,
 const double);

 template
 void integrate_difference< 2 ,  parallel::distributed::Vector<float> , Vector<double>,  1 >
 (const hp::DoFHandler< 2 , 1 >&,
 const  parallel::distributed::Vector<float> &,
 const Function< 1 >&,
 Vector<double>&,
 const hp::QCollection< 2 >&,
 const NormType&,
 const Function< 1 >*,
 const double);

 template
 void integrate_difference< 2 ,  parallel::distributed::Vector<float> , Vector<float>,  1 >
 (const hp::MappingCollection< 2 , 1 >&,
 const hp::DoFHandler< 2 , 1 >&,
 const  parallel::distributed::Vector<float> &,
 const Function< 1 >&,
 Vector<float>&,
 const hp::QCollection< 2 >&,
 const NormType&,
 const Function< 1 >*,
 const double);

 template
 void integrate_difference< 2 ,  parallel::distributed::Vector<float> , Vector<float>,  1 >
 (const hp::DoFHandler< 2 , 1 >&,
 const  parallel::distributed::Vector<float> &,
 const Function< 1 >&,
 Vector<float>&,
 const hp::QCollection< 2 >&,
 const NormType&,
 const Function< 1 >*,
 const double);

 }
#endif
 
#if  2  <=  2 
 namespace VectorTools {

 template
 void integrate_difference< 2 ,  parallel::distributed::Vector<float> , Vector<float>,  2 >
 (const Mapping< 2 ,  2 >&,
 const DoFHandler< 2 ,  2 >&,
 const  parallel::distributed::Vector<float> &,
 const Function< 2 >&,
 Vector<float>&,
 const Quadrature< 2 >&,
 const NormType&,
 const Function< 2 >*,
 const double);

 template
 void integrate_difference< 2 ,  parallel::distributed::Vector<float> , Vector<float>,  2 >
 (const DoFHandler< 2 ,  2 >&,
 const  parallel::distributed::Vector<float> &,
 const Function< 2 >&,
 Vector<float>&,
 const Quadrature< 2 >&,
 const NormType&,
 const Function< 2 >*,
 const double);

 template
 void integrate_difference< 2 ,  parallel::distributed::Vector<float> , Vector<double>,  2  >
 (const Mapping< 2 ,  2 >&,
 const DoFHandler< 2 ,  2 >&,
 const  parallel::distributed::Vector<float> &,
 const Function< 2 >&,
 Vector<double>&,
 const Quadrature< 2 >&,
 const NormType&,
 const Function< 2 >*,
 const double);

 template
 void integrate_difference< 2 ,  parallel::distributed::Vector<float> , Vector<double>,  2  >
 (const DoFHandler< 2 ,  2 >&,
 const  parallel::distributed::Vector<float> &,
 const Function< 2 >&,
 Vector<double>&,
 const Quadrature< 2 >&,
 const NormType&,
 const Function< 2 >*,
 const double);

 template
 void integrate_difference< 2 ,  parallel::distributed::Vector<float> , Vector<double>,  2 >
 (const hp::MappingCollection< 2 , 2 >&,
 const hp::DoFHandler< 2 , 2 >&,
 const  parallel::distributed::Vector<float> &,
 const Function< 2 >&,
 Vector<double>&,
 const hp::QCollection< 2 >&,
 const NormType&,
 const Function< 2 >*,
 const double);

 template
 void integrate_difference< 2 ,  parallel::distributed::Vector<float> , Vector<double>,  2 >
 (const hp::DoFHandler< 2 , 2 >&,
 const  parallel::distributed::Vector<float> &,
 const Function< 2 >&,
 Vector<double>&,
 const hp::QCollection< 2 >&,
 const NormType&,
 const Function< 2 >*,
 const double);

 template
 void integrate_difference< 2 ,  parallel::distributed::Vector<float> , Vector<float>,  2 >
 (const hp::MappingCollection< 2 , 2 >&,
 const hp::DoFHandler< 2 , 2 >&,
 const  parallel::distributed::Vector<float> &,
 const Function< 2 >&,
 Vector<float>&,
 const hp::QCollection< 2 >&,
 const NormType&,
 const Function< 2 >*,
 const double);

 template
 void integrate_difference< 2 ,  parallel::distributed::Vector<float> , Vector<float>,  2 >
 (const hp::DoFHandler< 2 , 2 >&,
 const  parallel::distributed::Vector<float> &,
 const Function< 2 >&,
 Vector<float>&,
 const hp::QCollection< 2 >&,
 const NormType&,
 const Function< 2 >*,
 const double);

 }
#endif
 
#if  2  <=  3 
 namespace VectorTools {

 template
 void integrate_difference< 2 ,  parallel::distributed::Vector<float> , Vector<float>,  3 >
 (const Mapping< 2 ,  3 >&,
 const DoFHandler< 2 ,  3 >&,
 const  parallel::distributed::Vector<float> &,
 const Function< 3 >&,
 Vector<float>&,
 const Quadrature< 2 >&,
 const NormType&,
 const Function< 3 >*,
 const double);

 template
 void integrate_difference< 2 ,  parallel::distributed::Vector<float> , Vector<float>,  3 >
 (const DoFHandler< 2 ,  3 >&,
 const  parallel::distributed::Vector<float> &,
 const Function< 3 >&,
 Vector<float>&,
 const Quadrature< 2 >&,
 const NormType&,
 const Function< 3 >*,
 const double);

 template
 void integrate_difference< 2 ,  parallel::distributed::Vector<float> , Vector<double>,  3  >
 (const Mapping< 2 ,  3 >&,
 const DoFHandler< 2 ,  3 >&,
 const  parallel::distributed::Vector<float> &,
 const Function< 3 >&,
 Vector<double>&,
 const Quadrature< 2 >&,
 const NormType&,
 const Function< 3 >*,
 const double);

 template
 void integrate_difference< 2 ,  parallel::distributed::Vector<float> , Vector<double>,  3  >
 (const DoFHandler< 2 ,  3 >&,
 const  parallel::distributed::Vector<float> &,
 const Function< 3 >&,
 Vector<double>&,
 const Quadrature< 2 >&,
 const NormType&,
 const Function< 3 >*,
 const double);

 template
 void integrate_difference< 2 ,  parallel::distributed::Vector<float> , Vector<double>,  3 >
 (const hp::MappingCollection< 2 , 3 >&,
 const hp::DoFHandler< 2 , 3 >&,
 const  parallel::distributed::Vector<float> &,
 const Function< 3 >&,
 Vector<double>&,
 const hp::QCollection< 2 >&,
 const NormType&,
 const Function< 3 >*,
 const double);

 template
 void integrate_difference< 2 ,  parallel::distributed::Vector<float> , Vector<double>,  3 >
 (const hp::DoFHandler< 2 , 3 >&,
 const  parallel::distributed::Vector<float> &,
 const Function< 3 >&,
 Vector<double>&,
 const hp::QCollection< 2 >&,
 const NormType&,
 const Function< 3 >*,
 const double);

 template
 void integrate_difference< 2 ,  parallel::distributed::Vector<float> , Vector<float>,  3 >
 (const hp::MappingCollection< 2 , 3 >&,
 const hp::DoFHandler< 2 , 3 >&,
 const  parallel::distributed::Vector<float> &,
 const Function< 3 >&,
 Vector<float>&,
 const hp::QCollection< 2 >&,
 const NormType&,
 const Function< 3 >*,
 const double);

 template
 void integrate_difference< 2 ,  parallel::distributed::Vector<float> , Vector<float>,  3 >
 (const hp::DoFHandler< 2 , 3 >&,
 const  parallel::distributed::Vector<float> &,
 const Function< 3 >&,
 Vector<float>&,
 const hp::QCollection< 2 >&,
 const NormType&,
 const Function< 3 >*,
 const double);

 }
#endif
 
#if  3  <=  1 
 namespace VectorTools {

 template
 void integrate_difference< 3 ,  parallel::distributed::Vector<float> , Vector<float>,  1 >
 (const Mapping< 3 ,  1 >&,
 const DoFHandler< 3 ,  1 >&,
 const  parallel::distributed::Vector<float> &,
 const Function< 1 >&,
 Vector<float>&,
 const Quadrature< 3 >&,
 const NormType&,
 const Function< 1 >*,
 const double);

 template
 void integrate_difference< 3 ,  parallel::distributed::Vector<float> , Vector<float>,  1 >
 (const DoFHandler< 3 ,  1 >&,
 const  parallel::distributed::Vector<float> &,
 const Function< 1 >&,
 Vector<float>&,
 const Quadrature< 3 >&,
 const NormType&,
 const Function< 1 >*,
 const double);

 template
 void integrate_difference< 3 ,  parallel::distributed::Vector<float> , Vector<double>,  1  >
 (const Mapping< 3 ,  1 >&,
 const DoFHandler< 3 ,  1 >&,
 const  parallel::distributed::Vector<float> &,
 const Function< 1 >&,
 Vector<double>&,
 const Quadrature< 3 >&,
 const NormType&,
 const Function< 1 >*,
 const double);

 template
 void integrate_difference< 3 ,  parallel::distributed::Vector<float> , Vector<double>,  1  >
 (const DoFHandler< 3 ,  1 >&,
 const  parallel::distributed::Vector<float> &,
 const Function< 1 >&,
 Vector<double>&,
 const Quadrature< 3 >&,
 const NormType&,
 const Function< 1 >*,
 const double);

 template
 void integrate_difference< 3 ,  parallel::distributed::Vector<float> , Vector<double>,  1 >
 (const hp::MappingCollection< 3 , 1 >&,
 const hp::DoFHandler< 3 , 1 >&,
 const  parallel::distributed::Vector<float> &,
 const Function< 1 >&,
 Vector<double>&,
 const hp::QCollection< 3 >&,
 const NormType&,
 const Function< 1 >*,
 const double);

 template
 void integrate_difference< 3 ,  parallel::distributed::Vector<float> , Vector<double>,  1 >
 (const hp::DoFHandler< 3 , 1 >&,
 const  parallel::distributed::Vector<float> &,
 const Function< 1 >&,
 Vector<double>&,
 const hp::QCollection< 3 >&,
 const NormType&,
 const Function< 1 >*,
 const double);

 template
 void integrate_difference< 3 ,  parallel::distributed::Vector<float> , Vector<float>,  1 >
 (const hp::MappingCollection< 3 , 1 >&,
 const hp::DoFHandler< 3 , 1 >&,
 const  parallel::distributed::Vector<float> &,
 const Function< 1 >&,
 Vector<float>&,
 const hp::QCollection< 3 >&,
 const NormType&,
 const Function< 1 >*,
 const double);

 template
 void integrate_difference< 3 ,  parallel::distributed::Vector<float> , Vector<float>,  1 >
 (const hp::DoFHandler< 3 , 1 >&,
 const  parallel::distributed::Vector<float> &,
 const Function< 1 >&,
 Vector<float>&,
 const hp::QCollection< 3 >&,
 const NormType&,
 const Function< 1 >*,
 const double);

 }
#endif
 
#if  3  <=  2 
 namespace VectorTools {

 template
 void integrate_difference< 3 ,  parallel::distributed::Vector<float> , Vector<float>,  2 >
 (const Mapping< 3 ,  2 >&,
 const DoFHandler< 3 ,  2 >&,
 const  parallel::distributed::Vector<float> &,
 const Function< 2 >&,
 Vector<float>&,
 const Quadrature< 3 >&,
 const NormType&,
 const Function< 2 >*,
 const double);

 template
 void integrate_difference< 3 ,  parallel::distributed::Vector<float> , Vector<float>,  2 >
 (const DoFHandler< 3 ,  2 >&,
 const  parallel::distributed::Vector<float> &,
 const Function< 2 >&,
 Vector<float>&,
 const Quadrature< 3 >&,
 const NormType&,
 const Function< 2 >*,
 const double);

 template
 void integrate_difference< 3 ,  parallel::distributed::Vector<float> , Vector<double>,  2  >
 (const Mapping< 3 ,  2 >&,
 const DoFHandler< 3 ,  2 >&,
 const  parallel::distributed::Vector<float> &,
 const Function< 2 >&,
 Vector<double>&,
 const Quadrature< 3 >&,
 const NormType&,
 const Function< 2 >*,
 const double);

 template
 void integrate_difference< 3 ,  parallel::distributed::Vector<float> , Vector<double>,  2  >
 (const DoFHandler< 3 ,  2 >&,
 const  parallel::distributed::Vector<float> &,
 const Function< 2 >&,
 Vector<double>&,
 const Quadrature< 3 >&,
 const NormType&,
 const Function< 2 >*,
 const double);

 template
 void integrate_difference< 3 ,  parallel::distributed::Vector<float> , Vector<double>,  2 >
 (const hp::MappingCollection< 3 , 2 >&,
 const hp::DoFHandler< 3 , 2 >&,
 const  parallel::distributed::Vector<float> &,
 const Function< 2 >&,
 Vector<double>&,
 const hp::QCollection< 3 >&,
 const NormType&,
 const Function< 2 >*,
 const double);

 template
 void integrate_difference< 3 ,  parallel::distributed::Vector<float> , Vector<double>,  2 >
 (const hp::DoFHandler< 3 , 2 >&,
 const  parallel::distributed::Vector<float> &,
 const Function< 2 >&,
 Vector<double>&,
 const hp::QCollection< 3 >&,
 const NormType&,
 const Function< 2 >*,
 const double);

 template
 void integrate_difference< 3 ,  parallel::distributed::Vector<float> , Vector<float>,  2 >
 (const hp::MappingCollection< 3 , 2 >&,
 const hp::DoFHandler< 3 , 2 >&,
 const  parallel::distributed::Vector<float> &,
 const Function< 2 >&,
 Vector<float>&,
 const hp::QCollection< 3 >&,
 const NormType&,
 const Function< 2 >*,
 const double);

 template
 void integrate_difference< 3 ,  parallel::distributed::Vector<float> , Vector<float>,  2 >
 (const hp::DoFHandler< 3 , 2 >&,
 const  parallel::distributed::Vector<float> &,
 const Function< 2 >&,
 Vector<float>&,
 const hp::QCollection< 3 >&,
 const NormType&,
 const Function< 2 >*,
 const double);

 }
#endif
 
#if  3  <=  3 
 namespace VectorTools {

 template
 void integrate_difference< 3 ,  parallel::distributed::Vector<float> , Vector<float>,  3 >
 (const Mapping< 3 ,  3 >&,
 const DoFHandler< 3 ,  3 >&,
 const  parallel::distributed::Vector<float> &,
 const Function< 3 >&,
 Vector<float>&,
 const Quadrature< 3 >&,
 const NormType&,
 const Function< 3 >*,
 const double);

 template
 void integrate_difference< 3 ,  parallel::distributed::Vector<float> , Vector<float>,  3 >
 (const DoFHandler< 3 ,  3 >&,
 const  parallel::distributed::Vector<float> &,
 const Function< 3 >&,
 Vector<float>&,
 const Quadrature< 3 >&,
 const NormType&,
 const Function< 3 >*,
 const double);

 template
 void integrate_difference< 3 ,  parallel::distributed::Vector<float> , Vector<double>,  3  >
 (const Mapping< 3 ,  3 >&,
 const DoFHandler< 3 ,  3 >&,
 const  parallel::distributed::Vector<float> &,
 const Function< 3 >&,
 Vector<double>&,
 const Quadrature< 3 >&,
 const NormType&,
 const Function< 3 >*,
 const double);

 template
 void integrate_difference< 3 ,  parallel::distributed::Vector<float> , Vector<double>,  3  >
 (const DoFHandler< 3 ,  3 >&,
 const  parallel::distributed::Vector<float> &,
 const Function< 3 >&,
 Vector<double>&,
 const Quadrature< 3 >&,
 const NormType&,
 const Function< 3 >*,
 const double);

 template
 void integrate_difference< 3 ,  parallel::distributed::Vector<float> , Vector<double>,  3 >
 (const hp::MappingCollection< 3 , 3 >&,
 const hp::DoFHandler< 3 , 3 >&,
 const  parallel::distributed::Vector<float> &,
 const Function< 3 >&,
 Vector<double>&,
 const hp::QCollection< 3 >&,
 const NormType&,
 const Function< 3 >*,
 const double);

 template
 void integrate_difference< 3 ,  parallel::distributed::Vector<float> , Vector<double>,  3 >
 (const hp::DoFHandler< 3 , 3 >&,
 const  parallel::distributed::Vector<float> &,
 const Function< 3 >&,
 Vector<double>&,
 const hp::QCollection< 3 >&,
 const NormType&,
 const Function< 3 >*,
 const double);

 template
 void integrate_difference< 3 ,  parallel::distributed::Vector<float> , Vector<float>,  3 >
 (const hp::MappingCollection< 3 , 3 >&,
 const hp::DoFHandler< 3 , 3 >&,
 const  parallel::distributed::Vector<float> &,
 const Function< 3 >&,
 Vector<float>&,
 const hp::QCollection< 3 >&,
 const NormType&,
 const Function< 3 >*,
 const double);

 template
 void integrate_difference< 3 ,  parallel::distributed::Vector<float> , Vector<float>,  3 >
 (const hp::DoFHandler< 3 , 3 >&,
 const  parallel::distributed::Vector<float> &,
 const Function< 3 >&,
 Vector<float>&,
 const hp::QCollection< 3 >&,
 const NormType&,
 const Function< 3 >*,
 const double);

 }
#endif
 
#if  1  <=  1 
 namespace VectorTools {

 template
 void integrate_difference< 1 ,  parallel::distributed::Vector<long double> , Vector<float>,  1 >
 (const Mapping< 1 ,  1 >&,
 const DoFHandler< 1 ,  1 >&,
 const  parallel::distributed::Vector<long double> &,
 const Function< 1 >&,
 Vector<float>&,
 const Quadrature< 1 >&,
 const NormType&,
 const Function< 1 >*,
 const double);

 template
 void integrate_difference< 1 ,  parallel::distributed::Vector<long double> , Vector<float>,  1 >
 (const DoFHandler< 1 ,  1 >&,
 const  parallel::distributed::Vector<long double> &,
 const Function< 1 >&,
 Vector<float>&,
 const Quadrature< 1 >&,
 const NormType&,
 const Function< 1 >*,
 const double);

 template
 void integrate_difference< 1 ,  parallel::distributed::Vector<long double> , Vector<double>,  1  >
 (const Mapping< 1 ,  1 >&,
 const DoFHandler< 1 ,  1 >&,
 const  parallel::distributed::Vector<long double> &,
 const Function< 1 >&,
 Vector<double>&,
 const Quadrature< 1 >&,
 const NormType&,
 const Function< 1 >*,
 const double);

 template
 void integrate_difference< 1 ,  parallel::distributed::Vector<long double> , Vector<double>,  1  >
 (const DoFHandler< 1 ,  1 >&,
 const  parallel::distributed::Vector<long double> &,
 const Function< 1 >&,
 Vector<double>&,
 const Quadrature< 1 >&,
 const NormType&,
 const Function< 1 >*,
 const double);

 template
 void integrate_difference< 1 ,  parallel::distributed::Vector<long double> , Vector<double>,  1 >
 (const hp::MappingCollection< 1 , 1 >&,
 const hp::DoFHandler< 1 , 1 >&,
 const  parallel::distributed::Vector<long double> &,
 const Function< 1 >&,
 Vector<double>&,
 const hp::QCollection< 1 >&,
 const NormType&,
 const Function< 1 >*,
 const double);

 template
 void integrate_difference< 1 ,  parallel::distributed::Vector<long double> , Vector<double>,  1 >
 (const hp::DoFHandler< 1 , 1 >&,
 const  parallel::distributed::Vector<long double> &,
 const Function< 1 >&,
 Vector<double>&,
 const hp::QCollection< 1 >&,
 const NormType&,
 const Function< 1 >*,
 const double);

 template
 void integrate_difference< 1 ,  parallel::distributed::Vector<long double> , Vector<float>,  1 >
 (const hp::MappingCollection< 1 , 1 >&,
 const hp::DoFHandler< 1 , 1 >&,
 const  parallel::distributed::Vector<long double> &,
 const Function< 1 >&,
 Vector<float>&,
 const hp::QCollection< 1 >&,
 const NormType&,
 const Function< 1 >*,
 const double);

 template
 void integrate_difference< 1 ,  parallel::distributed::Vector<long double> , Vector<float>,  1 >
 (const hp::DoFHandler< 1 , 1 >&,
 const  parallel::distributed::Vector<long double> &,
 const Function< 1 >&,
 Vector<float>&,
 const hp::QCollection< 1 >&,
 const NormType&,
 const Function< 1 >*,
 const double);

 }
#endif
 
#if  1  <=  2 
 namespace VectorTools {

 template
 void integrate_difference< 1 ,  parallel::distributed::Vector<long double> , Vector<float>,  2 >
 (const Mapping< 1 ,  2 >&,
 const DoFHandler< 1 ,  2 >&,
 const  parallel::distributed::Vector<long double> &,
 const Function< 2 >&,
 Vector<float>&,
 const Quadrature< 1 >&,
 const NormType&,
 const Function< 2 >*,
 const double);

 template
 void integrate_difference< 1 ,  parallel::distributed::Vector<long double> , Vector<float>,  2 >
 (const DoFHandler< 1 ,  2 >&,
 const  parallel::distributed::Vector<long double> &,
 const Function< 2 >&,
 Vector<float>&,
 const Quadrature< 1 >&,
 const NormType&,
 const Function< 2 >*,
 const double);

 template
 void integrate_difference< 1 ,  parallel::distributed::Vector<long double> , Vector<double>,  2  >
 (const Mapping< 1 ,  2 >&,
 const DoFHandler< 1 ,  2 >&,
 const  parallel::distributed::Vector<long double> &,
 const Function< 2 >&,
 Vector<double>&,
 const Quadrature< 1 >&,
 const NormType&,
 const Function< 2 >*,
 const double);

 template
 void integrate_difference< 1 ,  parallel::distributed::Vector<long double> , Vector<double>,  2  >
 (const DoFHandler< 1 ,  2 >&,
 const  parallel::distributed::Vector<long double> &,
 const Function< 2 >&,
 Vector<double>&,
 const Quadrature< 1 >&,
 const NormType&,
 const Function< 2 >*,
 const double);

 template
 void integrate_difference< 1 ,  parallel::distributed::Vector<long double> , Vector<double>,  2 >
 (const hp::MappingCollection< 1 , 2 >&,
 const hp::DoFHandler< 1 , 2 >&,
 const  parallel::distributed::Vector<long double> &,
 const Function< 2 >&,
 Vector<double>&,
 const hp::QCollection< 1 >&,
 const NormType&,
 const Function< 2 >*,
 const double);

 template
 void integrate_difference< 1 ,  parallel::distributed::Vector<long double> , Vector<double>,  2 >
 (const hp::DoFHandler< 1 , 2 >&,
 const  parallel::distributed::Vector<long double> &,
 const Function< 2 >&,
 Vector<double>&,
 const hp::QCollection< 1 >&,
 const NormType&,
 const Function< 2 >*,
 const double);

 template
 void integrate_difference< 1 ,  parallel::distributed::Vector<long double> , Vector<float>,  2 >
 (const hp::MappingCollection< 1 , 2 >&,
 const hp::DoFHandler< 1 , 2 >&,
 const  parallel::distributed::Vector<long double> &,
 const Function< 2 >&,
 Vector<float>&,
 const hp::QCollection< 1 >&,
 const NormType&,
 const Function< 2 >*,
 const double);

 template
 void integrate_difference< 1 ,  parallel::distributed::Vector<long double> , Vector<float>,  2 >
 (const hp::DoFHandler< 1 , 2 >&,
 const  parallel::distributed::Vector<long double> &,
 const Function< 2 >&,
 Vector<float>&,
 const hp::QCollection< 1 >&,
 const NormType&,
 const Function< 2 >*,
 const double);

 }
#endif
 
#if  1  <=  3 
 namespace VectorTools {

 template
 void integrate_difference< 1 ,  parallel::distributed::Vector<long double> , Vector<float>,  3 >
 (const Mapping< 1 ,  3 >&,
 const DoFHandler< 1 ,  3 >&,
 const  parallel::distributed::Vector<long double> &,
 const Function< 3 >&,
 Vector<float>&,
 const Quadrature< 1 >&,
 const NormType&,
 const Function< 3 >*,
 const double);

 template
 void integrate_difference< 1 ,  parallel::distributed::Vector<long double> , Vector<float>,  3 >
 (const DoFHandler< 1 ,  3 >&,
 const  parallel::distributed::Vector<long double> &,
 const Function< 3 >&,
 Vector<float>&,
 const Quadrature< 1 >&,
 const NormType&,
 const Function< 3 >*,
 const double);

 template
 void integrate_difference< 1 ,  parallel::distributed::Vector<long double> , Vector<double>,  3  >
 (const Mapping< 1 ,  3 >&,
 const DoFHandler< 1 ,  3 >&,
 const  parallel::distributed::Vector<long double> &,
 const Function< 3 >&,
 Vector<double>&,
 const Quadrature< 1 >&,
 const NormType&,
 const Function< 3 >*,
 const double);

 template
 void integrate_difference< 1 ,  parallel::distributed::Vector<long double> , Vector<double>,  3  >
 (const DoFHandler< 1 ,  3 >&,
 const  parallel::distributed::Vector<long double> &,
 const Function< 3 >&,
 Vector<double>&,
 const Quadrature< 1 >&,
 const NormType&,
 const Function< 3 >*,
 const double);

 template
 void integrate_difference< 1 ,  parallel::distributed::Vector<long double> , Vector<double>,  3 >
 (const hp::MappingCollection< 1 , 3 >&,
 const hp::DoFHandler< 1 , 3 >&,
 const  parallel::distributed::Vector<long double> &,
 const Function< 3 >&,
 Vector<double>&,
 const hp::QCollection< 1 >&,
 const NormType&,
 const Function< 3 >*,
 const double);

 template
 void integrate_difference< 1 ,  parallel::distributed::Vector<long double> , Vector<double>,  3 >
 (const hp::DoFHandler< 1 , 3 >&,
 const  parallel::distributed::Vector<long double> &,
 const Function< 3 >&,
 Vector<double>&,
 const hp::QCollection< 1 >&,
 const NormType&,
 const Function< 3 >*,
 const double);

 template
 void integrate_difference< 1 ,  parallel::distributed::Vector<long double> , Vector<float>,  3 >
 (const hp::MappingCollection< 1 , 3 >&,
 const hp::DoFHandler< 1 , 3 >&,
 const  parallel::distributed::Vector<long double> &,
 const Function< 3 >&,
 Vector<float>&,
 const hp::QCollection< 1 >&,
 const NormType&,
 const Function< 3 >*,
 const double);

 template
 void integrate_difference< 1 ,  parallel::distributed::Vector<long double> , Vector<float>,  3 >
 (const hp::DoFHandler< 1 , 3 >&,
 const  parallel::distributed::Vector<long double> &,
 const Function< 3 >&,
 Vector<float>&,
 const hp::QCollection< 1 >&,
 const NormType&,
 const Function< 3 >*,
 const double);

 }
#endif
 
#if  2  <=  1 
 namespace VectorTools {

 template
 void integrate_difference< 2 ,  parallel::distributed::Vector<long double> , Vector<float>,  1 >
 (const Mapping< 2 ,  1 >&,
 const DoFHandler< 2 ,  1 >&,
 const  parallel::distributed::Vector<long double> &,
 const Function< 1 >&,
 Vector<float>&,
 const Quadrature< 2 >&,
 const NormType&,
 const Function< 1 >*,
 const double);

 template
 void integrate_difference< 2 ,  parallel::distributed::Vector<long double> , Vector<float>,  1 >
 (const DoFHandler< 2 ,  1 >&,
 const  parallel::distributed::Vector<long double> &,
 const Function< 1 >&,
 Vector<float>&,
 const Quadrature< 2 >&,
 const NormType&,
 const Function< 1 >*,
 const double);

 template
 void integrate_difference< 2 ,  parallel::distributed::Vector<long double> , Vector<double>,  1  >
 (const Mapping< 2 ,  1 >&,
 const DoFHandler< 2 ,  1 >&,
 const  parallel::distributed::Vector<long double> &,
 const Function< 1 >&,
 Vector<double>&,
 const Quadrature< 2 >&,
 const NormType&,
 const Function< 1 >*,
 const double);

 template
 void integrate_difference< 2 ,  parallel::distributed::Vector<long double> , Vector<double>,  1  >
 (const DoFHandler< 2 ,  1 >&,
 const  parallel::distributed::Vector<long double> &,
 const Function< 1 >&,
 Vector<double>&,
 const Quadrature< 2 >&,
 const NormType&,
 const Function< 1 >*,
 const double);

 template
 void integrate_difference< 2 ,  parallel::distributed::Vector<long double> , Vector<double>,  1 >
 (const hp::MappingCollection< 2 , 1 >&,
 const hp::DoFHandler< 2 , 1 >&,
 const  parallel::distributed::Vector<long double> &,
 const Function< 1 >&,
 Vector<double>&,
 const hp::QCollection< 2 >&,
 const NormType&,
 const Function< 1 >*,
 const double);

 template
 void integrate_difference< 2 ,  parallel::distributed::Vector<long double> , Vector<double>,  1 >
 (const hp::DoFHandler< 2 , 1 >&,
 const  parallel::distributed::Vector<long double> &,
 const Function< 1 >&,
 Vector<double>&,
 const hp::QCollection< 2 >&,
 const NormType&,
 const Function< 1 >*,
 const double);

 template
 void integrate_difference< 2 ,  parallel::distributed::Vector<long double> , Vector<float>,  1 >
 (const hp::MappingCollection< 2 , 1 >&,
 const hp::DoFHandler< 2 , 1 >&,
 const  parallel::distributed::Vector<long double> &,
 const Function< 1 >&,
 Vector<float>&,
 const hp::QCollection< 2 >&,
 const NormType&,
 const Function< 1 >*,
 const double);

 template
 void integrate_difference< 2 ,  parallel::distributed::Vector<long double> , Vector<float>,  1 >
 (const hp::DoFHandler< 2 , 1 >&,
 const  parallel::distributed::Vector<long double> &,
 const Function< 1 >&,
 Vector<float>&,
 const hp::QCollection< 2 >&,
 const NormType&,
 const Function< 1 >*,
 const double);

 }
#endif
 
#if  2  <=  2 
 namespace VectorTools {

 template
 void integrate_difference< 2 ,  parallel::distributed::Vector<long double> , Vector<float>,  2 >
 (const Mapping< 2 ,  2 >&,
 const DoFHandler< 2 ,  2 >&,
 const  parallel::distributed::Vector<long double> &,
 const Function< 2 >&,
 Vector<float>&,
 const Quadrature< 2 >&,
 const NormType&,
 const Function< 2 >*,
 const double);

 template
 void integrate_difference< 2 ,  parallel::distributed::Vector<long double> , Vector<float>,  2 >
 (const DoFHandler< 2 ,  2 >&,
 const  parallel::distributed::Vector<long double> &,
 const Function< 2 >&,
 Vector<float>&,
 const Quadrature< 2 >&,
 const NormType&,
 const Function< 2 >*,
 const double);

 template
 void integrate_difference< 2 ,  parallel::distributed::Vector<long double> , Vector<double>,  2  >
 (const Mapping< 2 ,  2 >&,
 const DoFHandler< 2 ,  2 >&,
 const  parallel::distributed::Vector<long double> &,
 const Function< 2 >&,
 Vector<double>&,
 const Quadrature< 2 >&,
 const NormType&,
 const Function< 2 >*,
 const double);

 template
 void integrate_difference< 2 ,  parallel::distributed::Vector<long double> , Vector<double>,  2  >
 (const DoFHandler< 2 ,  2 >&,
 const  parallel::distributed::Vector<long double> &,
 const Function< 2 >&,
 Vector<double>&,
 const Quadrature< 2 >&,
 const NormType&,
 const Function< 2 >*,
 const double);

 template
 void integrate_difference< 2 ,  parallel::distributed::Vector<long double> , Vector<double>,  2 >
 (const hp::MappingCollection< 2 , 2 >&,
 const hp::DoFHandler< 2 , 2 >&,
 const  parallel::distributed::Vector<long double> &,
 const Function< 2 >&,
 Vector<double>&,
 const hp::QCollection< 2 >&,
 const NormType&,
 const Function< 2 >*,
 const double);

 template
 void integrate_difference< 2 ,  parallel::distributed::Vector<long double> , Vector<double>,  2 >
 (const hp::DoFHandler< 2 , 2 >&,
 const  parallel::distributed::Vector<long double> &,
 const Function< 2 >&,
 Vector<double>&,
 const hp::QCollection< 2 >&,
 const NormType&,
 const Function< 2 >*,
 const double);

 template
 void integrate_difference< 2 ,  parallel::distributed::Vector<long double> , Vector<float>,  2 >
 (const hp::MappingCollection< 2 , 2 >&,
 const hp::DoFHandler< 2 , 2 >&,
 const  parallel::distributed::Vector<long double> &,
 const Function< 2 >&,
 Vector<float>&,
 const hp::QCollection< 2 >&,
 const NormType&,
 const Function< 2 >*,
 const double);

 template
 void integrate_difference< 2 ,  parallel::distributed::Vector<long double> , Vector<float>,  2 >
 (const hp::DoFHandler< 2 , 2 >&,
 const  parallel::distributed::Vector<long double> &,
 const Function< 2 >&,
 Vector<float>&,
 const hp::QCollection< 2 >&,
 const NormType&,
 const Function< 2 >*,
 const double);

 }
#endif
 
#if  2  <=  3 
 namespace VectorTools {

 template
 void integrate_difference< 2 ,  parallel::distributed::Vector<long double> , Vector<float>,  3 >
 (const Mapping< 2 ,  3 >&,
 const DoFHandler< 2 ,  3 >&,
 const  parallel::distributed::Vector<long double> &,
 const Function< 3 >&,
 Vector<float>&,
 const Quadrature< 2 >&,
 const NormType&,
 const Function< 3 >*,
 const double);

 template
 void integrate_difference< 2 ,  parallel::distributed::Vector<long double> , Vector<float>,  3 >
 (const DoFHandler< 2 ,  3 >&,
 const  parallel::distributed::Vector<long double> &,
 const Function< 3 >&,
 Vector<float>&,
 const Quadrature< 2 >&,
 const NormType&,
 const Function< 3 >*,
 const double);

 template
 void integrate_difference< 2 ,  parallel::distributed::Vector<long double> , Vector<double>,  3  >
 (const Mapping< 2 ,  3 >&,
 const DoFHandler< 2 ,  3 >&,
 const  parallel::distributed::Vector<long double> &,
 const Function< 3 >&,
 Vector<double>&,
 const Quadrature< 2 >&,
 const NormType&,
 const Function< 3 >*,
 const double);

 template
 void integrate_difference< 2 ,  parallel::distributed::Vector<long double> , Vector<double>,  3  >
 (const DoFHandler< 2 ,  3 >&,
 const  parallel::distributed::Vector<long double> &,
 const Function< 3 >&,
 Vector<double>&,
 const Quadrature< 2 >&,
 const NormType&,
 const Function< 3 >*,
 const double);

 template
 void integrate_difference< 2 ,  parallel::distributed::Vector<long double> , Vector<double>,  3 >
 (const hp::MappingCollection< 2 , 3 >&,
 const hp::DoFHandler< 2 , 3 >&,
 const  parallel::distributed::Vector<long double> &,
 const Function< 3 >&,
 Vector<double>&,
 const hp::QCollection< 2 >&,
 const NormType&,
 const Function< 3 >*,
 const double);

 template
 void integrate_difference< 2 ,  parallel::distributed::Vector<long double> , Vector<double>,  3 >
 (const hp::DoFHandler< 2 , 3 >&,
 const  parallel::distributed::Vector<long double> &,
 const Function< 3 >&,
 Vector<double>&,
 const hp::QCollection< 2 >&,
 const NormType&,
 const Function< 3 >*,
 const double);

 template
 void integrate_difference< 2 ,  parallel::distributed::Vector<long double> , Vector<float>,  3 >
 (const hp::MappingCollection< 2 , 3 >&,
 const hp::DoFHandler< 2 , 3 >&,
 const  parallel::distributed::Vector<long double> &,
 const Function< 3 >&,
 Vector<float>&,
 const hp::QCollection< 2 >&,
 const NormType&,
 const Function< 3 >*,
 const double);

 template
 void integrate_difference< 2 ,  parallel::distributed::Vector<long double> , Vector<float>,  3 >
 (const hp::DoFHandler< 2 , 3 >&,
 const  parallel::distributed::Vector<long double> &,
 const Function< 3 >&,
 Vector<float>&,
 const hp::QCollection< 2 >&,
 const NormType&,
 const Function< 3 >*,
 const double);

 }
#endif
 
#if  3  <=  1 
 namespace VectorTools {

 template
 void integrate_difference< 3 ,  parallel::distributed::Vector<long double> , Vector<float>,  1 >
 (const Mapping< 3 ,  1 >&,
 const DoFHandler< 3 ,  1 >&,
 const  parallel::distributed::Vector<long double> &,
 const Function< 1 >&,
 Vector<float>&,
 const Quadrature< 3 >&,
 const NormType&,
 const Function< 1 >*,
 const double);

 template
 void integrate_difference< 3 ,  parallel::distributed::Vector<long double> , Vector<float>,  1 >
 (const DoFHandler< 3 ,  1 >&,
 const  parallel::distributed::Vector<long double> &,
 const Function< 1 >&,
 Vector<float>&,
 const Quadrature< 3 >&,
 const NormType&,
 const Function< 1 >*,
 const double);

 template
 void integrate_difference< 3 ,  parallel::distributed::Vector<long double> , Vector<double>,  1  >
 (const Mapping< 3 ,  1 >&,
 const DoFHandler< 3 ,  1 >&,
 const  parallel::distributed::Vector<long double> &,
 const Function< 1 >&,
 Vector<double>&,
 const Quadrature< 3 >&,
 const NormType&,
 const Function< 1 >*,
 const double);

 template
 void integrate_difference< 3 ,  parallel::distributed::Vector<long double> , Vector<double>,  1  >
 (const DoFHandler< 3 ,  1 >&,
 const  parallel::distributed::Vector<long double> &,
 const Function< 1 >&,
 Vector<double>&,
 const Quadrature< 3 >&,
 const NormType&,
 const Function< 1 >*,
 const double);

 template
 void integrate_difference< 3 ,  parallel::distributed::Vector<long double> , Vector<double>,  1 >
 (const hp::MappingCollection< 3 , 1 >&,
 const hp::DoFHandler< 3 , 1 >&,
 const  parallel::distributed::Vector<long double> &,
 const Function< 1 >&,
 Vector<double>&,
 const hp::QCollection< 3 >&,
 const NormType&,
 const Function< 1 >*,
 const double);

 template
 void integrate_difference< 3 ,  parallel::distributed::Vector<long double> , Vector<double>,  1 >
 (const hp::DoFHandler< 3 , 1 >&,
 const  parallel::distributed::Vector<long double> &,
 const Function< 1 >&,
 Vector<double>&,
 const hp::QCollection< 3 >&,
 const NormType&,
 const Function< 1 >*,
 const double);

 template
 void integrate_difference< 3 ,  parallel::distributed::Vector<long double> , Vector<float>,  1 >
 (const hp::MappingCollection< 3 , 1 >&,
 const hp::DoFHandler< 3 , 1 >&,
 const  parallel::distributed::Vector<long double> &,
 const Function< 1 >&,
 Vector<float>&,
 const hp::QCollection< 3 >&,
 const NormType&,
 const Function< 1 >*,
 const double);

 template
 void integrate_difference< 3 ,  parallel::distributed::Vector<long double> , Vector<float>,  1 >
 (const hp::DoFHandler< 3 , 1 >&,
 const  parallel::distributed::Vector<long double> &,
 const Function< 1 >&,
 Vector<float>&,
 const hp::QCollection< 3 >&,
 const NormType&,
 const Function< 1 >*,
 const double);

 }
#endif
 
#if  3  <=  2 
 namespace VectorTools {

 template
 void integrate_difference< 3 ,  parallel::distributed::Vector<long double> , Vector<float>,  2 >
 (const Mapping< 3 ,  2 >&,
 const DoFHandler< 3 ,  2 >&,
 const  parallel::distributed::Vector<long double> &,
 const Function< 2 >&,
 Vector<float>&,
 const Quadrature< 3 >&,
 const NormType&,
 const Function< 2 >*,
 const double);

 template
 void integrate_difference< 3 ,  parallel::distributed::Vector<long double> , Vector<float>,  2 >
 (const DoFHandler< 3 ,  2 >&,
 const  parallel::distributed::Vector<long double> &,
 const Function< 2 >&,
 Vector<float>&,
 const Quadrature< 3 >&,
 const NormType&,
 const Function< 2 >*,
 const double);

 template
 void integrate_difference< 3 ,  parallel::distributed::Vector<long double> , Vector<double>,  2  >
 (const Mapping< 3 ,  2 >&,
 const DoFHandler< 3 ,  2 >&,
 const  parallel::distributed::Vector<long double> &,
 const Function< 2 >&,
 Vector<double>&,
 const Quadrature< 3 >&,
 const NormType&,
 const Function< 2 >*,
 const double);

 template
 void integrate_difference< 3 ,  parallel::distributed::Vector<long double> , Vector<double>,  2  >
 (const DoFHandler< 3 ,  2 >&,
 const  parallel::distributed::Vector<long double> &,
 const Function< 2 >&,
 Vector<double>&,
 const Quadrature< 3 >&,
 const NormType&,
 const Function< 2 >*,
 const double);

 template
 void integrate_difference< 3 ,  parallel::distributed::Vector<long double> , Vector<double>,  2 >
 (const hp::MappingCollection< 3 , 2 >&,
 const hp::DoFHandler< 3 , 2 >&,
 const  parallel::distributed::Vector<long double> &,
 const Function< 2 >&,
 Vector<double>&,
 const hp::QCollection< 3 >&,
 const NormType&,
 const Function< 2 >*,
 const double);

 template
 void integrate_difference< 3 ,  parallel::distributed::Vector<long double> , Vector<double>,  2 >
 (const hp::DoFHandler< 3 , 2 >&,
 const  parallel::distributed::Vector<long double> &,
 const Function< 2 >&,
 Vector<double>&,
 const hp::QCollection< 3 >&,
 const NormType&,
 const Function< 2 >*,
 const double);

 template
 void integrate_difference< 3 ,  parallel::distributed::Vector<long double> , Vector<float>,  2 >
 (const hp::MappingCollection< 3 , 2 >&,
 const hp::DoFHandler< 3 , 2 >&,
 const  parallel::distributed::Vector<long double> &,
 const Function< 2 >&,
 Vector<float>&,
 const hp::QCollection< 3 >&,
 const NormType&,
 const Function< 2 >*,
 const double);

 template
 void integrate_difference< 3 ,  parallel::distributed::Vector<long double> , Vector<float>,  2 >
 (const hp::DoFHandler< 3 , 2 >&,
 const  parallel::distributed::Vector<long double> &,
 const Function< 2 >&,
 Vector<float>&,
 const hp::QCollection< 3 >&,
 const NormType&,
 const Function< 2 >*,
 const double);

 }
#endif
 
#if  3  <=  3 
 namespace VectorTools {

 template
 void integrate_difference< 3 ,  parallel::distributed::Vector<long double> , Vector<float>,  3 >
 (const Mapping< 3 ,  3 >&,
 const DoFHandler< 3 ,  3 >&,
 const  parallel::distributed::Vector<long double> &,
 const Function< 3 >&,
 Vector<float>&,
 const Quadrature< 3 >&,
 const NormType&,
 const Function< 3 >*,
 const double);

 template
 void integrate_difference< 3 ,  parallel::distributed::Vector<long double> , Vector<float>,  3 >
 (const DoFHandler< 3 ,  3 >&,
 const  parallel::distributed::Vector<long double> &,
 const Function< 3 >&,
 Vector<float>&,
 const Quadrature< 3 >&,
 const NormType&,
 const Function< 3 >*,
 const double);

 template
 void integrate_difference< 3 ,  parallel::distributed::Vector<long double> , Vector<double>,  3  >
 (const Mapping< 3 ,  3 >&,
 const DoFHandler< 3 ,  3 >&,
 const  parallel::distributed::Vector<long double> &,
 const Function< 3 >&,
 Vector<double>&,
 const Quadrature< 3 >&,
 const NormType&,
 const Function< 3 >*,
 const double);

 template
 void integrate_difference< 3 ,  parallel::distributed::Vector<long double> , Vector<double>,  3  >
 (const DoFHandler< 3 ,  3 >&,
 const  parallel::distributed::Vector<long double> &,
 const Function< 3 >&,
 Vector<double>&,
 const Quadrature< 3 >&,
 const NormType&,
 const Function< 3 >*,
 const double);

 template
 void integrate_difference< 3 ,  parallel::distributed::Vector<long double> , Vector<double>,  3 >
 (const hp::MappingCollection< 3 , 3 >&,
 const hp::DoFHandler< 3 , 3 >&,
 const  parallel::distributed::Vector<long double> &,
 const Function< 3 >&,
 Vector<double>&,
 const hp::QCollection< 3 >&,
 const NormType&,
 const Function< 3 >*,
 const double);

 template
 void integrate_difference< 3 ,  parallel::distributed::Vector<long double> , Vector<double>,  3 >
 (const hp::DoFHandler< 3 , 3 >&,
 const  parallel::distributed::Vector<long double> &,
 const Function< 3 >&,
 Vector<double>&,
 const hp::QCollection< 3 >&,
 const NormType&,
 const Function< 3 >*,
 const double);

 template
 void integrate_difference< 3 ,  parallel::distributed::Vector<long double> , Vector<float>,  3 >
 (const hp::MappingCollection< 3 , 3 >&,
 const hp::DoFHandler< 3 , 3 >&,
 const  parallel::distributed::Vector<long double> &,
 const Function< 3 >&,
 Vector<float>&,
 const hp::QCollection< 3 >&,
 const NormType&,
 const Function< 3 >*,
 const double);

 template
 void integrate_difference< 3 ,  parallel::distributed::Vector<long double> , Vector<float>,  3 >
 (const hp::DoFHandler< 3 , 3 >&,
 const  parallel::distributed::Vector<long double> &,
 const Function< 3 >&,
 Vector<float>&,
 const hp::QCollection< 3 >&,
 const NormType&,
 const Function< 3 >*,
 const double);

 }
#endif
 
#if  1  <=  1 
 namespace VectorTools {

 template
 void integrate_difference< 1 ,  parallel::distributed::BlockVector<double> , Vector<float>,  1 >
 (const Mapping< 1 ,  1 >&,
 const DoFHandler< 1 ,  1 >&,
 const  parallel::distributed::BlockVector<double> &,
 const Function< 1 >&,
 Vector<float>&,
 const Quadrature< 1 >&,
 const NormType&,
 const Function< 1 >*,
 const double);

 template
 void integrate_difference< 1 ,  parallel::distributed::BlockVector<double> , Vector<float>,  1 >
 (const DoFHandler< 1 ,  1 >&,
 const  parallel::distributed::BlockVector<double> &,
 const Function< 1 >&,
 Vector<float>&,
 const Quadrature< 1 >&,
 const NormType&,
 const Function< 1 >*,
 const double);

 template
 void integrate_difference< 1 ,  parallel::distributed::BlockVector<double> , Vector<double>,  1  >
 (const Mapping< 1 ,  1 >&,
 const DoFHandler< 1 ,  1 >&,
 const  parallel::distributed::BlockVector<double> &,
 const Function< 1 >&,
 Vector<double>&,
 const Quadrature< 1 >&,
 const NormType&,
 const Function< 1 >*,
 const double);

 template
 void integrate_difference< 1 ,  parallel::distributed::BlockVector<double> , Vector<double>,  1  >
 (const DoFHandler< 1 ,  1 >&,
 const  parallel::distributed::BlockVector<double> &,
 const Function< 1 >&,
 Vector<double>&,
 const Quadrature< 1 >&,
 const NormType&,
 const Function< 1 >*,
 const double);

 template
 void integrate_difference< 1 ,  parallel::distributed::BlockVector<double> , Vector<double>,  1 >
 (const hp::MappingCollection< 1 , 1 >&,
 const hp::DoFHandler< 1 , 1 >&,
 const  parallel::distributed::BlockVector<double> &,
 const Function< 1 >&,
 Vector<double>&,
 const hp::QCollection< 1 >&,
 const NormType&,
 const Function< 1 >*,
 const double);

 template
 void integrate_difference< 1 ,  parallel::distributed::BlockVector<double> , Vector<double>,  1 >
 (const hp::DoFHandler< 1 , 1 >&,
 const  parallel::distributed::BlockVector<double> &,
 const Function< 1 >&,
 Vector<double>&,
 const hp::QCollection< 1 >&,
 const NormType&,
 const Function< 1 >*,
 const double);

 template
 void integrate_difference< 1 ,  parallel::distributed::BlockVector<double> , Vector<float>,  1 >
 (const hp::MappingCollection< 1 , 1 >&,
 const hp::DoFHandler< 1 , 1 >&,
 const  parallel::distributed::BlockVector<double> &,
 const Function< 1 >&,
 Vector<float>&,
 const hp::QCollection< 1 >&,
 const NormType&,
 const Function< 1 >*,
 const double);

 template
 void integrate_difference< 1 ,  parallel::distributed::BlockVector<double> , Vector<float>,  1 >
 (const hp::DoFHandler< 1 , 1 >&,
 const  parallel::distributed::BlockVector<double> &,
 const Function< 1 >&,
 Vector<float>&,
 const hp::QCollection< 1 >&,
 const NormType&,
 const Function< 1 >*,
 const double);

 }
#endif
 
#if  1  <=  2 
 namespace VectorTools {

 template
 void integrate_difference< 1 ,  parallel::distributed::BlockVector<double> , Vector<float>,  2 >
 (const Mapping< 1 ,  2 >&,
 const DoFHandler< 1 ,  2 >&,
 const  parallel::distributed::BlockVector<double> &,
 const Function< 2 >&,
 Vector<float>&,
 const Quadrature< 1 >&,
 const NormType&,
 const Function< 2 >*,
 const double);

 template
 void integrate_difference< 1 ,  parallel::distributed::BlockVector<double> , Vector<float>,  2 >
 (const DoFHandler< 1 ,  2 >&,
 const  parallel::distributed::BlockVector<double> &,
 const Function< 2 >&,
 Vector<float>&,
 const Quadrature< 1 >&,
 const NormType&,
 const Function< 2 >*,
 const double);

 template
 void integrate_difference< 1 ,  parallel::distributed::BlockVector<double> , Vector<double>,  2  >
 (const Mapping< 1 ,  2 >&,
 const DoFHandler< 1 ,  2 >&,
 const  parallel::distributed::BlockVector<double> &,
 const Function< 2 >&,
 Vector<double>&,
 const Quadrature< 1 >&,
 const NormType&,
 const Function< 2 >*,
 const double);

 template
 void integrate_difference< 1 ,  parallel::distributed::BlockVector<double> , Vector<double>,  2  >
 (const DoFHandler< 1 ,  2 >&,
 const  parallel::distributed::BlockVector<double> &,
 const Function< 2 >&,
 Vector<double>&,
 const Quadrature< 1 >&,
 const NormType&,
 const Function< 2 >*,
 const double);

 template
 void integrate_difference< 1 ,  parallel::distributed::BlockVector<double> , Vector<double>,  2 >
 (const hp::MappingCollection< 1 , 2 >&,
 const hp::DoFHandler< 1 , 2 >&,
 const  parallel::distributed::BlockVector<double> &,
 const Function< 2 >&,
 Vector<double>&,
 const hp::QCollection< 1 >&,
 const NormType&,
 const Function< 2 >*,
 const double);

 template
 void integrate_difference< 1 ,  parallel::distributed::BlockVector<double> , Vector<double>,  2 >
 (const hp::DoFHandler< 1 , 2 >&,
 const  parallel::distributed::BlockVector<double> &,
 const Function< 2 >&,
 Vector<double>&,
 const hp::QCollection< 1 >&,
 const NormType&,
 const Function< 2 >*,
 const double);

 template
 void integrate_difference< 1 ,  parallel::distributed::BlockVector<double> , Vector<float>,  2 >
 (const hp::MappingCollection< 1 , 2 >&,
 const hp::DoFHandler< 1 , 2 >&,
 const  parallel::distributed::BlockVector<double> &,
 const Function< 2 >&,
 Vector<float>&,
 const hp::QCollection< 1 >&,
 const NormType&,
 const Function< 2 >*,
 const double);

 template
 void integrate_difference< 1 ,  parallel::distributed::BlockVector<double> , Vector<float>,  2 >
 (const hp::DoFHandler< 1 , 2 >&,
 const  parallel::distributed::BlockVector<double> &,
 const Function< 2 >&,
 Vector<float>&,
 const hp::QCollection< 1 >&,
 const NormType&,
 const Function< 2 >*,
 const double);

 }
#endif
 
#if  1  <=  3 
 namespace VectorTools {

 template
 void integrate_difference< 1 ,  parallel::distributed::BlockVector<double> , Vector<float>,  3 >
 (const Mapping< 1 ,  3 >&,
 const DoFHandler< 1 ,  3 >&,
 const  parallel::distributed::BlockVector<double> &,
 const Function< 3 >&,
 Vector<float>&,
 const Quadrature< 1 >&,
 const NormType&,
 const Function< 3 >*,
 const double);

 template
 void integrate_difference< 1 ,  parallel::distributed::BlockVector<double> , Vector<float>,  3 >
 (const DoFHandler< 1 ,  3 >&,
 const  parallel::distributed::BlockVector<double> &,
 const Function< 3 >&,
 Vector<float>&,
 const Quadrature< 1 >&,
 const NormType&,
 const Function< 3 >*,
 const double);

 template
 void integrate_difference< 1 ,  parallel::distributed::BlockVector<double> , Vector<double>,  3  >
 (const Mapping< 1 ,  3 >&,
 const DoFHandler< 1 ,  3 >&,
 const  parallel::distributed::BlockVector<double> &,
 const Function< 3 >&,
 Vector<double>&,
 const Quadrature< 1 >&,
 const NormType&,
 const Function< 3 >*,
 const double);

 template
 void integrate_difference< 1 ,  parallel::distributed::BlockVector<double> , Vector<double>,  3  >
 (const DoFHandler< 1 ,  3 >&,
 const  parallel::distributed::BlockVector<double> &,
 const Function< 3 >&,
 Vector<double>&,
 const Quadrature< 1 >&,
 const NormType&,
 const Function< 3 >*,
 const double);

 template
 void integrate_difference< 1 ,  parallel::distributed::BlockVector<double> , Vector<double>,  3 >
 (const hp::MappingCollection< 1 , 3 >&,
 const hp::DoFHandler< 1 , 3 >&,
 const  parallel::distributed::BlockVector<double> &,
 const Function< 3 >&,
 Vector<double>&,
 const hp::QCollection< 1 >&,
 const NormType&,
 const Function< 3 >*,
 const double);

 template
 void integrate_difference< 1 ,  parallel::distributed::BlockVector<double> , Vector<double>,  3 >
 (const hp::DoFHandler< 1 , 3 >&,
 const  parallel::distributed::BlockVector<double> &,
 const Function< 3 >&,
 Vector<double>&,
 const hp::QCollection< 1 >&,
 const NormType&,
 const Function< 3 >*,
 const double);

 template
 void integrate_difference< 1 ,  parallel::distributed::BlockVector<double> , Vector<float>,  3 >
 (const hp::MappingCollection< 1 , 3 >&,
 const hp::DoFHandler< 1 , 3 >&,
 const  parallel::distributed::BlockVector<double> &,
 const Function< 3 >&,
 Vector<float>&,
 const hp::QCollection< 1 >&,
 const NormType&,
 const Function< 3 >*,
 const double);

 template
 void integrate_difference< 1 ,  parallel::distributed::BlockVector<double> , Vector<float>,  3 >
 (const hp::DoFHandler< 1 , 3 >&,
 const  parallel::distributed::BlockVector<double> &,
 const Function< 3 >&,
 Vector<float>&,
 const hp::QCollection< 1 >&,
 const NormType&,
 const Function< 3 >*,
 const double);

 }
#endif
 
#if  2  <=  1 
 namespace VectorTools {

 template
 void integrate_difference< 2 ,  parallel::distributed::BlockVector<double> , Vector<float>,  1 >
 (const Mapping< 2 ,  1 >&,
 const DoFHandler< 2 ,  1 >&,
 const  parallel::distributed::BlockVector<double> &,
 const Function< 1 >&,
 Vector<float>&,
 const Quadrature< 2 >&,
 const NormType&,
 const Function< 1 >*,
 const double);

 template
 void integrate_difference< 2 ,  parallel::distributed::BlockVector<double> , Vector<float>,  1 >
 (const DoFHandler< 2 ,  1 >&,
 const  parallel::distributed::BlockVector<double> &,
 const Function< 1 >&,
 Vector<float>&,
 const Quadrature< 2 >&,
 const NormType&,
 const Function< 1 >*,
 const double);

 template
 void integrate_difference< 2 ,  parallel::distributed::BlockVector<double> , Vector<double>,  1  >
 (const Mapping< 2 ,  1 >&,
 const DoFHandler< 2 ,  1 >&,
 const  parallel::distributed::BlockVector<double> &,
 const Function< 1 >&,
 Vector<double>&,
 const Quadrature< 2 >&,
 const NormType&,
 const Function< 1 >*,
 const double);

 template
 void integrate_difference< 2 ,  parallel::distributed::BlockVector<double> , Vector<double>,  1  >
 (const DoFHandler< 2 ,  1 >&,
 const  parallel::distributed::BlockVector<double> &,
 const Function< 1 >&,
 Vector<double>&,
 const Quadrature< 2 >&,
 const NormType&,
 const Function< 1 >*,
 const double);

 template
 void integrate_difference< 2 ,  parallel::distributed::BlockVector<double> , Vector<double>,  1 >
 (const hp::MappingCollection< 2 , 1 >&,
 const hp::DoFHandler< 2 , 1 >&,
 const  parallel::distributed::BlockVector<double> &,
 const Function< 1 >&,
 Vector<double>&,
 const hp::QCollection< 2 >&,
 const NormType&,
 const Function< 1 >*,
 const double);

 template
 void integrate_difference< 2 ,  parallel::distributed::BlockVector<double> , Vector<double>,  1 >
 (const hp::DoFHandler< 2 , 1 >&,
 const  parallel::distributed::BlockVector<double> &,
 const Function< 1 >&,
 Vector<double>&,
 const hp::QCollection< 2 >&,
 const NormType&,
 const Function< 1 >*,
 const double);

 template
 void integrate_difference< 2 ,  parallel::distributed::BlockVector<double> , Vector<float>,  1 >
 (const hp::MappingCollection< 2 , 1 >&,
 const hp::DoFHandler< 2 , 1 >&,
 const  parallel::distributed::BlockVector<double> &,
 const Function< 1 >&,
 Vector<float>&,
 const hp::QCollection< 2 >&,
 const NormType&,
 const Function< 1 >*,
 const double);

 template
 void integrate_difference< 2 ,  parallel::distributed::BlockVector<double> , Vector<float>,  1 >
 (const hp::DoFHandler< 2 , 1 >&,
 const  parallel::distributed::BlockVector<double> &,
 const Function< 1 >&,
 Vector<float>&,
 const hp::QCollection< 2 >&,
 const NormType&,
 const Function< 1 >*,
 const double);

 }
#endif
 
#if  2  <=  2 
 namespace VectorTools {

 template
 void integrate_difference< 2 ,  parallel::distributed::BlockVector<double> , Vector<float>,  2 >
 (const Mapping< 2 ,  2 >&,
 const DoFHandler< 2 ,  2 >&,
 const  parallel::distributed::BlockVector<double> &,
 const Function< 2 >&,
 Vector<float>&,
 const Quadrature< 2 >&,
 const NormType&,
 const Function< 2 >*,
 const double);

 template
 void integrate_difference< 2 ,  parallel::distributed::BlockVector<double> , Vector<float>,  2 >
 (const DoFHandler< 2 ,  2 >&,
 const  parallel::distributed::BlockVector<double> &,
 const Function< 2 >&,
 Vector<float>&,
 const Quadrature< 2 >&,
 const NormType&,
 const Function< 2 >*,
 const double);

 template
 void integrate_difference< 2 ,  parallel::distributed::BlockVector<double> , Vector<double>,  2  >
 (const Mapping< 2 ,  2 >&,
 const DoFHandler< 2 ,  2 >&,
 const  parallel::distributed::BlockVector<double> &,
 const Function< 2 >&,
 Vector<double>&,
 const Quadrature< 2 >&,
 const NormType&,
 const Function< 2 >*,
 const double);

 template
 void integrate_difference< 2 ,  parallel::distributed::BlockVector<double> , Vector<double>,  2  >
 (const DoFHandler< 2 ,  2 >&,
 const  parallel::distributed::BlockVector<double> &,
 const Function< 2 >&,
 Vector<double>&,
 const Quadrature< 2 >&,
 const NormType&,
 const Function< 2 >*,
 const double);

 template
 void integrate_difference< 2 ,  parallel::distributed::BlockVector<double> , Vector<double>,  2 >
 (const hp::MappingCollection< 2 , 2 >&,
 const hp::DoFHandler< 2 , 2 >&,
 const  parallel::distributed::BlockVector<double> &,
 const Function< 2 >&,
 Vector<double>&,
 const hp::QCollection< 2 >&,
 const NormType&,
 const Function< 2 >*,
 const double);

 template
 void integrate_difference< 2 ,  parallel::distributed::BlockVector<double> , Vector<double>,  2 >
 (const hp::DoFHandler< 2 , 2 >&,
 const  parallel::distributed::BlockVector<double> &,
 const Function< 2 >&,
 Vector<double>&,
 const hp::QCollection< 2 >&,
 const NormType&,
 const Function< 2 >*,
 const double);

 template
 void integrate_difference< 2 ,  parallel::distributed::BlockVector<double> , Vector<float>,  2 >
 (const hp::MappingCollection< 2 , 2 >&,
 const hp::DoFHandler< 2 , 2 >&,
 const  parallel::distributed::BlockVector<double> &,
 const Function< 2 >&,
 Vector<float>&,
 const hp::QCollection< 2 >&,
 const NormType&,
 const Function< 2 >*,
 const double);

 template
 void integrate_difference< 2 ,  parallel::distributed::BlockVector<double> , Vector<float>,  2 >
 (const hp::DoFHandler< 2 , 2 >&,
 const  parallel::distributed::BlockVector<double> &,
 const Function< 2 >&,
 Vector<float>&,
 const hp::QCollection< 2 >&,
 const NormType&,
 const Function< 2 >*,
 const double);

 }
#endif
 
#if  2  <=  3 
 namespace VectorTools {

 template
 void integrate_difference< 2 ,  parallel::distributed::BlockVector<double> , Vector<float>,  3 >
 (const Mapping< 2 ,  3 >&,
 const DoFHandler< 2 ,  3 >&,
 const  parallel::distributed::BlockVector<double> &,
 const Function< 3 >&,
 Vector<float>&,
 const Quadrature< 2 >&,
 const NormType&,
 const Function< 3 >*,
 const double);

 template
 void integrate_difference< 2 ,  parallel::distributed::BlockVector<double> , Vector<float>,  3 >
 (const DoFHandler< 2 ,  3 >&,
 const  parallel::distributed::BlockVector<double> &,
 const Function< 3 >&,
 Vector<float>&,
 const Quadrature< 2 >&,
 const NormType&,
 const Function< 3 >*,
 const double);

 template
 void integrate_difference< 2 ,  parallel::distributed::BlockVector<double> , Vector<double>,  3  >
 (const Mapping< 2 ,  3 >&,
 const DoFHandler< 2 ,  3 >&,
 const  parallel::distributed::BlockVector<double> &,
 const Function< 3 >&,
 Vector<double>&,
 const Quadrature< 2 >&,
 const NormType&,
 const Function< 3 >*,
 const double);

 template
 void integrate_difference< 2 ,  parallel::distributed::BlockVector<double> , Vector<double>,  3  >
 (const DoFHandler< 2 ,  3 >&,
 const  parallel::distributed::BlockVector<double> &,
 const Function< 3 >&,
 Vector<double>&,
 const Quadrature< 2 >&,
 const NormType&,
 const Function< 3 >*,
 const double);

 template
 void integrate_difference< 2 ,  parallel::distributed::BlockVector<double> , Vector<double>,  3 >
 (const hp::MappingCollection< 2 , 3 >&,
 const hp::DoFHandler< 2 , 3 >&,
 const  parallel::distributed::BlockVector<double> &,
 const Function< 3 >&,
 Vector<double>&,
 const hp::QCollection< 2 >&,
 const NormType&,
 const Function< 3 >*,
 const double);

 template
 void integrate_difference< 2 ,  parallel::distributed::BlockVector<double> , Vector<double>,  3 >
 (const hp::DoFHandler< 2 , 3 >&,
 const  parallel::distributed::BlockVector<double> &,
 const Function< 3 >&,
 Vector<double>&,
 const hp::QCollection< 2 >&,
 const NormType&,
 const Function< 3 >*,
 const double);

 template
 void integrate_difference< 2 ,  parallel::distributed::BlockVector<double> , Vector<float>,  3 >
 (const hp::MappingCollection< 2 , 3 >&,
 const hp::DoFHandler< 2 , 3 >&,
 const  parallel::distributed::BlockVector<double> &,
 const Function< 3 >&,
 Vector<float>&,
 const hp::QCollection< 2 >&,
 const NormType&,
 const Function< 3 >*,
 const double);

 template
 void integrate_difference< 2 ,  parallel::distributed::BlockVector<double> , Vector<float>,  3 >
 (const hp::DoFHandler< 2 , 3 >&,
 const  parallel::distributed::BlockVector<double> &,
 const Function< 3 >&,
 Vector<float>&,
 const hp::QCollection< 2 >&,
 const NormType&,
 const Function< 3 >*,
 const double);

 }
#endif
 
#if  3  <=  1 
 namespace VectorTools {

 template
 void integrate_difference< 3 ,  parallel::distributed::BlockVector<double> , Vector<float>,  1 >
 (const Mapping< 3 ,  1 >&,
 const DoFHandler< 3 ,  1 >&,
 const  parallel::distributed::BlockVector<double> &,
 const Function< 1 >&,
 Vector<float>&,
 const Quadrature< 3 >&,
 const NormType&,
 const Function< 1 >*,
 const double);

 template
 void integrate_difference< 3 ,  parallel::distributed::BlockVector<double> , Vector<float>,  1 >
 (const DoFHandler< 3 ,  1 >&,
 const  parallel::distributed::BlockVector<double> &,
 const Function< 1 >&,
 Vector<float>&,
 const Quadrature< 3 >&,
 const NormType&,
 const Function< 1 >*,
 const double);

 template
 void integrate_difference< 3 ,  parallel::distributed::BlockVector<double> , Vector<double>,  1  >
 (const Mapping< 3 ,  1 >&,
 const DoFHandler< 3 ,  1 >&,
 const  parallel::distributed::BlockVector<double> &,
 const Function< 1 >&,
 Vector<double>&,
 const Quadrature< 3 >&,
 const NormType&,
 const Function< 1 >*,
 const double);

 template
 void integrate_difference< 3 ,  parallel::distributed::BlockVector<double> , Vector<double>,  1  >
 (const DoFHandler< 3 ,  1 >&,
 const  parallel::distributed::BlockVector<double> &,
 const Function< 1 >&,
 Vector<double>&,
 const Quadrature< 3 >&,
 const NormType&,
 const Function< 1 >*,
 const double);

 template
 void integrate_difference< 3 ,  parallel::distributed::BlockVector<double> , Vector<double>,  1 >
 (const hp::MappingCollection< 3 , 1 >&,
 const hp::DoFHandler< 3 , 1 >&,
 const  parallel::distributed::BlockVector<double> &,
 const Function< 1 >&,
 Vector<double>&,
 const hp::QCollection< 3 >&,
 const NormType&,
 const Function< 1 >*,
 const double);

 template
 void integrate_difference< 3 ,  parallel::distributed::BlockVector<double> , Vector<double>,  1 >
 (const hp::DoFHandler< 3 , 1 >&,
 const  parallel::distributed::BlockVector<double> &,
 const Function< 1 >&,
 Vector<double>&,
 const hp::QCollection< 3 >&,
 const NormType&,
 const Function< 1 >*,
 const double);

 template
 void integrate_difference< 3 ,  parallel::distributed::BlockVector<double> , Vector<float>,  1 >
 (const hp::MappingCollection< 3 , 1 >&,
 const hp::DoFHandler< 3 , 1 >&,
 const  parallel::distributed::BlockVector<double> &,
 const Function< 1 >&,
 Vector<float>&,
 const hp::QCollection< 3 >&,
 const NormType&,
 const Function< 1 >*,
 const double);

 template
 void integrate_difference< 3 ,  parallel::distributed::BlockVector<double> , Vector<float>,  1 >
 (const hp::DoFHandler< 3 , 1 >&,
 const  parallel::distributed::BlockVector<double> &,
 const Function< 1 >&,
 Vector<float>&,
 const hp::QCollection< 3 >&,
 const NormType&,
 const Function< 1 >*,
 const double);

 }
#endif
 
#if  3  <=  2 
 namespace VectorTools {

 template
 void integrate_difference< 3 ,  parallel::distributed::BlockVector<double> , Vector<float>,  2 >
 (const Mapping< 3 ,  2 >&,
 const DoFHandler< 3 ,  2 >&,
 const  parallel::distributed::BlockVector<double> &,
 const Function< 2 >&,
 Vector<float>&,
 const Quadrature< 3 >&,
 const NormType&,
 const Function< 2 >*,
 const double);

 template
 void integrate_difference< 3 ,  parallel::distributed::BlockVector<double> , Vector<float>,  2 >
 (const DoFHandler< 3 ,  2 >&,
 const  parallel::distributed::BlockVector<double> &,
 const Function< 2 >&,
 Vector<float>&,
 const Quadrature< 3 >&,
 const NormType&,
 const Function< 2 >*,
 const double);

 template
 void integrate_difference< 3 ,  parallel::distributed::BlockVector<double> , Vector<double>,  2  >
 (const Mapping< 3 ,  2 >&,
 const DoFHandler< 3 ,  2 >&,
 const  parallel::distributed::BlockVector<double> &,
 const Function< 2 >&,
 Vector<double>&,
 const Quadrature< 3 >&,
 const NormType&,
 const Function< 2 >*,
 const double);

 template
 void integrate_difference< 3 ,  parallel::distributed::BlockVector<double> , Vector<double>,  2  >
 (const DoFHandler< 3 ,  2 >&,
 const  parallel::distributed::BlockVector<double> &,
 const Function< 2 >&,
 Vector<double>&,
 const Quadrature< 3 >&,
 const NormType&,
 const Function< 2 >*,
 const double);

 template
 void integrate_difference< 3 ,  parallel::distributed::BlockVector<double> , Vector<double>,  2 >
 (const hp::MappingCollection< 3 , 2 >&,
 const hp::DoFHandler< 3 , 2 >&,
 const  parallel::distributed::BlockVector<double> &,
 const Function< 2 >&,
 Vector<double>&,
 const hp::QCollection< 3 >&,
 const NormType&,
 const Function< 2 >*,
 const double);

 template
 void integrate_difference< 3 ,  parallel::distributed::BlockVector<double> , Vector<double>,  2 >
 (const hp::DoFHandler< 3 , 2 >&,
 const  parallel::distributed::BlockVector<double> &,
 const Function< 2 >&,
 Vector<double>&,
 const hp::QCollection< 3 >&,
 const NormType&,
 const Function< 2 >*,
 const double);

 template
 void integrate_difference< 3 ,  parallel::distributed::BlockVector<double> , Vector<float>,  2 >
 (const hp::MappingCollection< 3 , 2 >&,
 const hp::DoFHandler< 3 , 2 >&,
 const  parallel::distributed::BlockVector<double> &,
 const Function< 2 >&,
 Vector<float>&,
 const hp::QCollection< 3 >&,
 const NormType&,
 const Function< 2 >*,
 const double);

 template
 void integrate_difference< 3 ,  parallel::distributed::BlockVector<double> , Vector<float>,  2 >
 (const hp::DoFHandler< 3 , 2 >&,
 const  parallel::distributed::BlockVector<double> &,
 const Function< 2 >&,
 Vector<float>&,
 const hp::QCollection< 3 >&,
 const NormType&,
 const Function< 2 >*,
 const double);

 }
#endif
 
#if  3  <=  3 
 namespace VectorTools {

 template
 void integrate_difference< 3 ,  parallel::distributed::BlockVector<double> , Vector<float>,  3 >
 (const Mapping< 3 ,  3 >&,
 const DoFHandler< 3 ,  3 >&,
 const  parallel::distributed::BlockVector<double> &,
 const Function< 3 >&,
 Vector<float>&,
 const Quadrature< 3 >&,
 const NormType&,
 const Function< 3 >*,
 const double);

 template
 void integrate_difference< 3 ,  parallel::distributed::BlockVector<double> , Vector<float>,  3 >
 (const DoFHandler< 3 ,  3 >&,
 const  parallel::distributed::BlockVector<double> &,
 const Function< 3 >&,
 Vector<float>&,
 const Quadrature< 3 >&,
 const NormType&,
 const Function< 3 >*,
 const double);

 template
 void integrate_difference< 3 ,  parallel::distributed::BlockVector<double> , Vector<double>,  3  >
 (const Mapping< 3 ,  3 >&,
 const DoFHandler< 3 ,  3 >&,
 const  parallel::distributed::BlockVector<double> &,
 const Function< 3 >&,
 Vector<double>&,
 const Quadrature< 3 >&,
 const NormType&,
 const Function< 3 >*,
 const double);

 template
 void integrate_difference< 3 ,  parallel::distributed::BlockVector<double> , Vector<double>,  3  >
 (const DoFHandler< 3 ,  3 >&,
 const  parallel::distributed::BlockVector<double> &,
 const Function< 3 >&,
 Vector<double>&,
 const Quadrature< 3 >&,
 const NormType&,
 const Function< 3 >*,
 const double);

 template
 void integrate_difference< 3 ,  parallel::distributed::BlockVector<double> , Vector<double>,  3 >
 (const hp::MappingCollection< 3 , 3 >&,
 const hp::DoFHandler< 3 , 3 >&,
 const  parallel::distributed::BlockVector<double> &,
 const Function< 3 >&,
 Vector<double>&,
 const hp::QCollection< 3 >&,
 const NormType&,
 const Function< 3 >*,
 const double);

 template
 void integrate_difference< 3 ,  parallel::distributed::BlockVector<double> , Vector<double>,  3 >
 (const hp::DoFHandler< 3 , 3 >&,
 const  parallel::distributed::BlockVector<double> &,
 const Function< 3 >&,
 Vector<double>&,
 const hp::QCollection< 3 >&,
 const NormType&,
 const Function< 3 >*,
 const double);

 template
 void integrate_difference< 3 ,  parallel::distributed::BlockVector<double> , Vector<float>,  3 >
 (const hp::MappingCollection< 3 , 3 >&,
 const hp::DoFHandler< 3 , 3 >&,
 const  parallel::distributed::BlockVector<double> &,
 const Function< 3 >&,
 Vector<float>&,
 const hp::QCollection< 3 >&,
 const NormType&,
 const Function< 3 >*,
 const double);

 template
 void integrate_difference< 3 ,  parallel::distributed::BlockVector<double> , Vector<float>,  3 >
 (const hp::DoFHandler< 3 , 3 >&,
 const  parallel::distributed::BlockVector<double> &,
 const Function< 3 >&,
 Vector<float>&,
 const hp::QCollection< 3 >&,
 const NormType&,
 const Function< 3 >*,
 const double);

 }
#endif
 
#if  1  <=  1 
 namespace VectorTools {

 template
 void integrate_difference< 1 ,  parallel::distributed::BlockVector<float> , Vector<float>,  1 >
 (const Mapping< 1 ,  1 >&,
 const DoFHandler< 1 ,  1 >&,
 const  parallel::distributed::BlockVector<float> &,
 const Function< 1 >&,
 Vector<float>&,
 const Quadrature< 1 >&,
 const NormType&,
 const Function< 1 >*,
 const double);

 template
 void integrate_difference< 1 ,  parallel::distributed::BlockVector<float> , Vector<float>,  1 >
 (const DoFHandler< 1 ,  1 >&,
 const  parallel::distributed::BlockVector<float> &,
 const Function< 1 >&,
 Vector<float>&,
 const Quadrature< 1 >&,
 const NormType&,
 const Function< 1 >*,
 const double);

 template
 void integrate_difference< 1 ,  parallel::distributed::BlockVector<float> , Vector<double>,  1  >
 (const Mapping< 1 ,  1 >&,
 const DoFHandler< 1 ,  1 >&,
 const  parallel::distributed::BlockVector<float> &,
 const Function< 1 >&,
 Vector<double>&,
 const Quadrature< 1 >&,
 const NormType&,
 const Function< 1 >*,
 const double);

 template
 void integrate_difference< 1 ,  parallel::distributed::BlockVector<float> , Vector<double>,  1  >
 (const DoFHandler< 1 ,  1 >&,
 const  parallel::distributed::BlockVector<float> &,
 const Function< 1 >&,
 Vector<double>&,
 const Quadrature< 1 >&,
 const NormType&,
 const Function< 1 >*,
 const double);

 template
 void integrate_difference< 1 ,  parallel::distributed::BlockVector<float> , Vector<double>,  1 >
 (const hp::MappingCollection< 1 , 1 >&,
 const hp::DoFHandler< 1 , 1 >&,
 const  parallel::distributed::BlockVector<float> &,
 const Function< 1 >&,
 Vector<double>&,
 const hp::QCollection< 1 >&,
 const NormType&,
 const Function< 1 >*,
 const double);

 template
 void integrate_difference< 1 ,  parallel::distributed::BlockVector<float> , Vector<double>,  1 >
 (const hp::DoFHandler< 1 , 1 >&,
 const  parallel::distributed::BlockVector<float> &,
 const Function< 1 >&,
 Vector<double>&,
 const hp::QCollection< 1 >&,
 const NormType&,
 const Function< 1 >*,
 const double);

 template
 void integrate_difference< 1 ,  parallel::distributed::BlockVector<float> , Vector<float>,  1 >
 (const hp::MappingCollection< 1 , 1 >&,
 const hp::DoFHandler< 1 , 1 >&,
 const  parallel::distributed::BlockVector<float> &,
 const Function< 1 >&,
 Vector<float>&,
 const hp::QCollection< 1 >&,
 const NormType&,
 const Function< 1 >*,
 const double);

 template
 void integrate_difference< 1 ,  parallel::distributed::BlockVector<float> , Vector<float>,  1 >
 (const hp::DoFHandler< 1 , 1 >&,
 const  parallel::distributed::BlockVector<float> &,
 const Function< 1 >&,
 Vector<float>&,
 const hp::QCollection< 1 >&,
 const NormType&,
 const Function< 1 >*,
 const double);

 }
#endif
 
#if  1  <=  2 
 namespace VectorTools {

 template
 void integrate_difference< 1 ,  parallel::distributed::BlockVector<float> , Vector<float>,  2 >
 (const Mapping< 1 ,  2 >&,
 const DoFHandler< 1 ,  2 >&,
 const  parallel::distributed::BlockVector<float> &,
 const Function< 2 >&,
 Vector<float>&,
 const Quadrature< 1 >&,
 const NormType&,
 const Function< 2 >*,
 const double);

 template
 void integrate_difference< 1 ,  parallel::distributed::BlockVector<float> , Vector<float>,  2 >
 (const DoFHandler< 1 ,  2 >&,
 const  parallel::distributed::BlockVector<float> &,
 const Function< 2 >&,
 Vector<float>&,
 const Quadrature< 1 >&,
 const NormType&,
 const Function< 2 >*,
 const double);

 template
 void integrate_difference< 1 ,  parallel::distributed::BlockVector<float> , Vector<double>,  2  >
 (const Mapping< 1 ,  2 >&,
 const DoFHandler< 1 ,  2 >&,
 const  parallel::distributed::BlockVector<float> &,
 const Function< 2 >&,
 Vector<double>&,
 const Quadrature< 1 >&,
 const NormType&,
 const Function< 2 >*,
 const double);

 template
 void integrate_difference< 1 ,  parallel::distributed::BlockVector<float> , Vector<double>,  2  >
 (const DoFHandler< 1 ,  2 >&,
 const  parallel::distributed::BlockVector<float> &,
 const Function< 2 >&,
 Vector<double>&,
 const Quadrature< 1 >&,
 const NormType&,
 const Function< 2 >*,
 const double);

 template
 void integrate_difference< 1 ,  parallel::distributed::BlockVector<float> , Vector<double>,  2 >
 (const hp::MappingCollection< 1 , 2 >&,
 const hp::DoFHandler< 1 , 2 >&,
 const  parallel::distributed::BlockVector<float> &,
 const Function< 2 >&,
 Vector<double>&,
 const hp::QCollection< 1 >&,
 const NormType&,
 const Function< 2 >*,
 const double);

 template
 void integrate_difference< 1 ,  parallel::distributed::BlockVector<float> , Vector<double>,  2 >
 (const hp::DoFHandler< 1 , 2 >&,
 const  parallel::distributed::BlockVector<float> &,
 const Function< 2 >&,
 Vector<double>&,
 const hp::QCollection< 1 >&,
 const NormType&,
 const Function< 2 >*,
 const double);

 template
 void integrate_difference< 1 ,  parallel::distributed::BlockVector<float> , Vector<float>,  2 >
 (const hp::MappingCollection< 1 , 2 >&,
 const hp::DoFHandler< 1 , 2 >&,
 const  parallel::distributed::BlockVector<float> &,
 const Function< 2 >&,
 Vector<float>&,
 const hp::QCollection< 1 >&,
 const NormType&,
 const Function< 2 >*,
 const double);

 template
 void integrate_difference< 1 ,  parallel::distributed::BlockVector<float> , Vector<float>,  2 >
 (const hp::DoFHandler< 1 , 2 >&,
 const  parallel::distributed::BlockVector<float> &,
 const Function< 2 >&,
 Vector<float>&,
 const hp::QCollection< 1 >&,
 const NormType&,
 const Function< 2 >*,
 const double);

 }
#endif
 
#if  1  <=  3 
 namespace VectorTools {

 template
 void integrate_difference< 1 ,  parallel::distributed::BlockVector<float> , Vector<float>,  3 >
 (const Mapping< 1 ,  3 >&,
 const DoFHandler< 1 ,  3 >&,
 const  parallel::distributed::BlockVector<float> &,
 const Function< 3 >&,
 Vector<float>&,
 const Quadrature< 1 >&,
 const NormType&,
 const Function< 3 >*,
 const double);

 template
 void integrate_difference< 1 ,  parallel::distributed::BlockVector<float> , Vector<float>,  3 >
 (const DoFHandler< 1 ,  3 >&,
 const  parallel::distributed::BlockVector<float> &,
 const Function< 3 >&,
 Vector<float>&,
 const Quadrature< 1 >&,
 const NormType&,
 const Function< 3 >*,
 const double);

 template
 void integrate_difference< 1 ,  parallel::distributed::BlockVector<float> , Vector<double>,  3  >
 (const Mapping< 1 ,  3 >&,
 const DoFHandler< 1 ,  3 >&,
 const  parallel::distributed::BlockVector<float> &,
 const Function< 3 >&,
 Vector<double>&,
 const Quadrature< 1 >&,
 const NormType&,
 const Function< 3 >*,
 const double);

 template
 void integrate_difference< 1 ,  parallel::distributed::BlockVector<float> , Vector<double>,  3  >
 (const DoFHandler< 1 ,  3 >&,
 const  parallel::distributed::BlockVector<float> &,
 const Function< 3 >&,
 Vector<double>&,
 const Quadrature< 1 >&,
 const NormType&,
 const Function< 3 >*,
 const double);

 template
 void integrate_difference< 1 ,  parallel::distributed::BlockVector<float> , Vector<double>,  3 >
 (const hp::MappingCollection< 1 , 3 >&,
 const hp::DoFHandler< 1 , 3 >&,
 const  parallel::distributed::BlockVector<float> &,
 const Function< 3 >&,
 Vector<double>&,
 const hp::QCollection< 1 >&,
 const NormType&,
 const Function< 3 >*,
 const double);

 template
 void integrate_difference< 1 ,  parallel::distributed::BlockVector<float> , Vector<double>,  3 >
 (const hp::DoFHandler< 1 , 3 >&,
 const  parallel::distributed::BlockVector<float> &,
 const Function< 3 >&,
 Vector<double>&,
 const hp::QCollection< 1 >&,
 const NormType&,
 const Function< 3 >*,
 const double);

 template
 void integrate_difference< 1 ,  parallel::distributed::BlockVector<float> , Vector<float>,  3 >
 (const hp::MappingCollection< 1 , 3 >&,
 const hp::DoFHandler< 1 , 3 >&,
 const  parallel::distributed::BlockVector<float> &,
 const Function< 3 >&,
 Vector<float>&,
 const hp::QCollection< 1 >&,
 const NormType&,
 const Function< 3 >*,
 const double);

 template
 void integrate_difference< 1 ,  parallel::distributed::BlockVector<float> , Vector<float>,  3 >
 (const hp::DoFHandler< 1 , 3 >&,
 const  parallel::distributed::BlockVector<float> &,
 const Function< 3 >&,
 Vector<float>&,
 const hp::QCollection< 1 >&,
 const NormType&,
 const Function< 3 >*,
 const double);

 }
#endif
 
#if  2  <=  1 
 namespace VectorTools {

 template
 void integrate_difference< 2 ,  parallel::distributed::BlockVector<float> , Vector<float>,  1 >
 (const Mapping< 2 ,  1 >&,
 const DoFHandler< 2 ,  1 >&,
 const  parallel::distributed::BlockVector<float> &,
 const Function< 1 >&,
 Vector<float>&,
 const Quadrature< 2 >&,
 const NormType&,
 const Function< 1 >*,
 const double);

 template
 void integrate_difference< 2 ,  parallel::distributed::BlockVector<float> , Vector<float>,  1 >
 (const DoFHandler< 2 ,  1 >&,
 const  parallel::distributed::BlockVector<float> &,
 const Function< 1 >&,
 Vector<float>&,
 const Quadrature< 2 >&,
 const NormType&,
 const Function< 1 >*,
 const double);

 template
 void integrate_difference< 2 ,  parallel::distributed::BlockVector<float> , Vector<double>,  1  >
 (const Mapping< 2 ,  1 >&,
 const DoFHandler< 2 ,  1 >&,
 const  parallel::distributed::BlockVector<float> &,
 const Function< 1 >&,
 Vector<double>&,
 const Quadrature< 2 >&,
 const NormType&,
 const Function< 1 >*,
 const double);

 template
 void integrate_difference< 2 ,  parallel::distributed::BlockVector<float> , Vector<double>,  1  >
 (const DoFHandler< 2 ,  1 >&,
 const  parallel::distributed::BlockVector<float> &,
 const Function< 1 >&,
 Vector<double>&,
 const Quadrature< 2 >&,
 const NormType&,
 const Function< 1 >*,
 const double);

 template
 void integrate_difference< 2 ,  parallel::distributed::BlockVector<float> , Vector<double>,  1 >
 (const hp::MappingCollection< 2 , 1 >&,
 const hp::DoFHandler< 2 , 1 >&,
 const  parallel::distributed::BlockVector<float> &,
 const Function< 1 >&,
 Vector<double>&,
 const hp::QCollection< 2 >&,
 const NormType&,
 const Function< 1 >*,
 const double);

 template
 void integrate_difference< 2 ,  parallel::distributed::BlockVector<float> , Vector<double>,  1 >
 (const hp::DoFHandler< 2 , 1 >&,
 const  parallel::distributed::BlockVector<float> &,
 const Function< 1 >&,
 Vector<double>&,
 const hp::QCollection< 2 >&,
 const NormType&,
 const Function< 1 >*,
 const double);

 template
 void integrate_difference< 2 ,  parallel::distributed::BlockVector<float> , Vector<float>,  1 >
 (const hp::MappingCollection< 2 , 1 >&,
 const hp::DoFHandler< 2 , 1 >&,
 const  parallel::distributed::BlockVector<float> &,
 const Function< 1 >&,
 Vector<float>&,
 const hp::QCollection< 2 >&,
 const NormType&,
 const Function< 1 >*,
 const double);

 template
 void integrate_difference< 2 ,  parallel::distributed::BlockVector<float> , Vector<float>,  1 >
 (const hp::DoFHandler< 2 , 1 >&,
 const  parallel::distributed::BlockVector<float> &,
 const Function< 1 >&,
 Vector<float>&,
 const hp::QCollection< 2 >&,
 const NormType&,
 const Function< 1 >*,
 const double);

 }
#endif
 
#if  2  <=  2 
 namespace VectorTools {

 template
 void integrate_difference< 2 ,  parallel::distributed::BlockVector<float> , Vector<float>,  2 >
 (const Mapping< 2 ,  2 >&,
 const DoFHandler< 2 ,  2 >&,
 const  parallel::distributed::BlockVector<float> &,
 const Function< 2 >&,
 Vector<float>&,
 const Quadrature< 2 >&,
 const NormType&,
 const Function< 2 >*,
 const double);

 template
 void integrate_difference< 2 ,  parallel::distributed::BlockVector<float> , Vector<float>,  2 >
 (const DoFHandler< 2 ,  2 >&,
 const  parallel::distributed::BlockVector<float> &,
 const Function< 2 >&,
 Vector<float>&,
 const Quadrature< 2 >&,
 const NormType&,
 const Function< 2 >*,
 const double);

 template
 void integrate_difference< 2 ,  parallel::distributed::BlockVector<float> , Vector<double>,  2  >
 (const Mapping< 2 ,  2 >&,
 const DoFHandler< 2 ,  2 >&,
 const  parallel::distributed::BlockVector<float> &,
 const Function< 2 >&,
 Vector<double>&,
 const Quadrature< 2 >&,
 const NormType&,
 const Function< 2 >*,
 const double);

 template
 void integrate_difference< 2 ,  parallel::distributed::BlockVector<float> , Vector<double>,  2  >
 (const DoFHandler< 2 ,  2 >&,
 const  parallel::distributed::BlockVector<float> &,
 const Function< 2 >&,
 Vector<double>&,
 const Quadrature< 2 >&,
 const NormType&,
 const Function< 2 >*,
 const double);

 template
 void integrate_difference< 2 ,  parallel::distributed::BlockVector<float> , Vector<double>,  2 >
 (const hp::MappingCollection< 2 , 2 >&,
 const hp::DoFHandler< 2 , 2 >&,
 const  parallel::distributed::BlockVector<float> &,
 const Function< 2 >&,
 Vector<double>&,
 const hp::QCollection< 2 >&,
 const NormType&,
 const Function< 2 >*,
 const double);

 template
 void integrate_difference< 2 ,  parallel::distributed::BlockVector<float> , Vector<double>,  2 >
 (const hp::DoFHandler< 2 , 2 >&,
 const  parallel::distributed::BlockVector<float> &,
 const Function< 2 >&,
 Vector<double>&,
 const hp::QCollection< 2 >&,
 const NormType&,
 const Function< 2 >*,
 const double);

 template
 void integrate_difference< 2 ,  parallel::distributed::BlockVector<float> , Vector<float>,  2 >
 (const hp::MappingCollection< 2 , 2 >&,
 const hp::DoFHandler< 2 , 2 >&,
 const  parallel::distributed::BlockVector<float> &,
 const Function< 2 >&,
 Vector<float>&,
 const hp::QCollection< 2 >&,
 const NormType&,
 const Function< 2 >*,
 const double);

 template
 void integrate_difference< 2 ,  parallel::distributed::BlockVector<float> , Vector<float>,  2 >
 (const hp::DoFHandler< 2 , 2 >&,
 const  parallel::distributed::BlockVector<float> &,
 const Function< 2 >&,
 Vector<float>&,
 const hp::QCollection< 2 >&,
 const NormType&,
 const Function< 2 >*,
 const double);

 }
#endif
 
#if  2  <=  3 
 namespace VectorTools {

 template
 void integrate_difference< 2 ,  parallel::distributed::BlockVector<float> , Vector<float>,  3 >
 (const Mapping< 2 ,  3 >&,
 const DoFHandler< 2 ,  3 >&,
 const  parallel::distributed::BlockVector<float> &,
 const Function< 3 >&,
 Vector<float>&,
 const Quadrature< 2 >&,
 const NormType&,
 const Function< 3 >*,
 const double);

 template
 void integrate_difference< 2 ,  parallel::distributed::BlockVector<float> , Vector<float>,  3 >
 (const DoFHandler< 2 ,  3 >&,
 const  parallel::distributed::BlockVector<float> &,
 const Function< 3 >&,
 Vector<float>&,
 const Quadrature< 2 >&,
 const NormType&,
 const Function< 3 >*,
 const double);

 template
 void integrate_difference< 2 ,  parallel::distributed::BlockVector<float> , Vector<double>,  3  >
 (const Mapping< 2 ,  3 >&,
 const DoFHandler< 2 ,  3 >&,
 const  parallel::distributed::BlockVector<float> &,
 const Function< 3 >&,
 Vector<double>&,
 const Quadrature< 2 >&,
 const NormType&,
 const Function< 3 >*,
 const double);

 template
 void integrate_difference< 2 ,  parallel::distributed::BlockVector<float> , Vector<double>,  3  >
 (const DoFHandler< 2 ,  3 >&,
 const  parallel::distributed::BlockVector<float> &,
 const Function< 3 >&,
 Vector<double>&,
 const Quadrature< 2 >&,
 const NormType&,
 const Function< 3 >*,
 const double);

 template
 void integrate_difference< 2 ,  parallel::distributed::BlockVector<float> , Vector<double>,  3 >
 (const hp::MappingCollection< 2 , 3 >&,
 const hp::DoFHandler< 2 , 3 >&,
 const  parallel::distributed::BlockVector<float> &,
 const Function< 3 >&,
 Vector<double>&,
 const hp::QCollection< 2 >&,
 const NormType&,
 const Function< 3 >*,
 const double);

 template
 void integrate_difference< 2 ,  parallel::distributed::BlockVector<float> , Vector<double>,  3 >
 (const hp::DoFHandler< 2 , 3 >&,
 const  parallel::distributed::BlockVector<float> &,
 const Function< 3 >&,
 Vector<double>&,
 const hp::QCollection< 2 >&,
 const NormType&,
 const Function< 3 >*,
 const double);

 template
 void integrate_difference< 2 ,  parallel::distributed::BlockVector<float> , Vector<float>,  3 >
 (const hp::MappingCollection< 2 , 3 >&,
 const hp::DoFHandler< 2 , 3 >&,
 const  parallel::distributed::BlockVector<float> &,
 const Function< 3 >&,
 Vector<float>&,
 const hp::QCollection< 2 >&,
 const NormType&,
 const Function< 3 >*,
 const double);

 template
 void integrate_difference< 2 ,  parallel::distributed::BlockVector<float> , Vector<float>,  3 >
 (const hp::DoFHandler< 2 , 3 >&,
 const  parallel::distributed::BlockVector<float> &,
 const Function< 3 >&,
 Vector<float>&,
 const hp::QCollection< 2 >&,
 const NormType&,
 const Function< 3 >*,
 const double);

 }
#endif
 
#if  3  <=  1 
 namespace VectorTools {

 template
 void integrate_difference< 3 ,  parallel::distributed::BlockVector<float> , Vector<float>,  1 >
 (const Mapping< 3 ,  1 >&,
 const DoFHandler< 3 ,  1 >&,
 const  parallel::distributed::BlockVector<float> &,
 const Function< 1 >&,
 Vector<float>&,
 const Quadrature< 3 >&,
 const NormType&,
 const Function< 1 >*,
 const double);

 template
 void integrate_difference< 3 ,  parallel::distributed::BlockVector<float> , Vector<float>,  1 >
 (const DoFHandler< 3 ,  1 >&,
 const  parallel::distributed::BlockVector<float> &,
 const Function< 1 >&,
 Vector<float>&,
 const Quadrature< 3 >&,
 const NormType&,
 const Function< 1 >*,
 const double);

 template
 void integrate_difference< 3 ,  parallel::distributed::BlockVector<float> , Vector<double>,  1  >
 (const Mapping< 3 ,  1 >&,
 const DoFHandler< 3 ,  1 >&,
 const  parallel::distributed::BlockVector<float> &,
 const Function< 1 >&,
 Vector<double>&,
 const Quadrature< 3 >&,
 const NormType&,
 const Function< 1 >*,
 const double);

 template
 void integrate_difference< 3 ,  parallel::distributed::BlockVector<float> , Vector<double>,  1  >
 (const DoFHandler< 3 ,  1 >&,
 const  parallel::distributed::BlockVector<float> &,
 const Function< 1 >&,
 Vector<double>&,
 const Quadrature< 3 >&,
 const NormType&,
 const Function< 1 >*,
 const double);

 template
 void integrate_difference< 3 ,  parallel::distributed::BlockVector<float> , Vector<double>,  1 >
 (const hp::MappingCollection< 3 , 1 >&,
 const hp::DoFHandler< 3 , 1 >&,
 const  parallel::distributed::BlockVector<float> &,
 const Function< 1 >&,
 Vector<double>&,
 const hp::QCollection< 3 >&,
 const NormType&,
 const Function< 1 >*,
 const double);

 template
 void integrate_difference< 3 ,  parallel::distributed::BlockVector<float> , Vector<double>,  1 >
 (const hp::DoFHandler< 3 , 1 >&,
 const  parallel::distributed::BlockVector<float> &,
 const Function< 1 >&,
 Vector<double>&,
 const hp::QCollection< 3 >&,
 const NormType&,
 const Function< 1 >*,
 const double);

 template
 void integrate_difference< 3 ,  parallel::distributed::BlockVector<float> , Vector<float>,  1 >
 (const hp::MappingCollection< 3 , 1 >&,
 const hp::DoFHandler< 3 , 1 >&,
 const  parallel::distributed::BlockVector<float> &,
 const Function< 1 >&,
 Vector<float>&,
 const hp::QCollection< 3 >&,
 const NormType&,
 const Function< 1 >*,
 const double);

 template
 void integrate_difference< 3 ,  parallel::distributed::BlockVector<float> , Vector<float>,  1 >
 (const hp::DoFHandler< 3 , 1 >&,
 const  parallel::distributed::BlockVector<float> &,
 const Function< 1 >&,
 Vector<float>&,
 const hp::QCollection< 3 >&,
 const NormType&,
 const Function< 1 >*,
 const double);

 }
#endif
 
#if  3  <=  2 
 namespace VectorTools {

 template
 void integrate_difference< 3 ,  parallel::distributed::BlockVector<float> , Vector<float>,  2 >
 (const Mapping< 3 ,  2 >&,
 const DoFHandler< 3 ,  2 >&,
 const  parallel::distributed::BlockVector<float> &,
 const Function< 2 >&,
 Vector<float>&,
 const Quadrature< 3 >&,
 const NormType&,
 const Function< 2 >*,
 const double);

 template
 void integrate_difference< 3 ,  parallel::distributed::BlockVector<float> , Vector<float>,  2 >
 (const DoFHandler< 3 ,  2 >&,
 const  parallel::distributed::BlockVector<float> &,
 const Function< 2 >&,
 Vector<float>&,
 const Quadrature< 3 >&,
 const NormType&,
 const Function< 2 >*,
 const double);

 template
 void integrate_difference< 3 ,  parallel::distributed::BlockVector<float> , Vector<double>,  2  >
 (const Mapping< 3 ,  2 >&,
 const DoFHandler< 3 ,  2 >&,
 const  parallel::distributed::BlockVector<float> &,
 const Function< 2 >&,
 Vector<double>&,
 const Quadrature< 3 >&,
 const NormType&,
 const Function< 2 >*,
 const double);

 template
 void integrate_difference< 3 ,  parallel::distributed::BlockVector<float> , Vector<double>,  2  >
 (const DoFHandler< 3 ,  2 >&,
 const  parallel::distributed::BlockVector<float> &,
 const Function< 2 >&,
 Vector<double>&,
 const Quadrature< 3 >&,
 const NormType&,
 const Function< 2 >*,
 const double);

 template
 void integrate_difference< 3 ,  parallel::distributed::BlockVector<float> , Vector<double>,  2 >
 (const hp::MappingCollection< 3 , 2 >&,
 const hp::DoFHandler< 3 , 2 >&,
 const  parallel::distributed::BlockVector<float> &,
 const Function< 2 >&,
 Vector<double>&,
 const hp::QCollection< 3 >&,
 const NormType&,
 const Function< 2 >*,
 const double);

 template
 void integrate_difference< 3 ,  parallel::distributed::BlockVector<float> , Vector<double>,  2 >
 (const hp::DoFHandler< 3 , 2 >&,
 const  parallel::distributed::BlockVector<float> &,
 const Function< 2 >&,
 Vector<double>&,
 const hp::QCollection< 3 >&,
 const NormType&,
 const Function< 2 >*,
 const double);

 template
 void integrate_difference< 3 ,  parallel::distributed::BlockVector<float> , Vector<float>,  2 >
 (const hp::MappingCollection< 3 , 2 >&,
 const hp::DoFHandler< 3 , 2 >&,
 const  parallel::distributed::BlockVector<float> &,
 const Function< 2 >&,
 Vector<float>&,
 const hp::QCollection< 3 >&,
 const NormType&,
 const Function< 2 >*,
 const double);

 template
 void integrate_difference< 3 ,  parallel::distributed::BlockVector<float> , Vector<float>,  2 >
 (const hp::DoFHandler< 3 , 2 >&,
 const  parallel::distributed::BlockVector<float> &,
 const Function< 2 >&,
 Vector<float>&,
 const hp::QCollection< 3 >&,
 const NormType&,
 const Function< 2 >*,
 const double);

 }
#endif
 
#if  3  <=  3 
 namespace VectorTools {

 template
 void integrate_difference< 3 ,  parallel::distributed::BlockVector<float> , Vector<float>,  3 >
 (const Mapping< 3 ,  3 >&,
 const DoFHandler< 3 ,  3 >&,
 const  parallel::distributed::BlockVector<float> &,
 const Function< 3 >&,
 Vector<float>&,
 const Quadrature< 3 >&,
 const NormType&,
 const Function< 3 >*,
 const double);

 template
 void integrate_difference< 3 ,  parallel::distributed::BlockVector<float> , Vector<float>,  3 >
 (const DoFHandler< 3 ,  3 >&,
 const  parallel::distributed::BlockVector<float> &,
 const Function< 3 >&,
 Vector<float>&,
 const Quadrature< 3 >&,
 const NormType&,
 const Function< 3 >*,
 const double);

 template
 void integrate_difference< 3 ,  parallel::distributed::BlockVector<float> , Vector<double>,  3  >
 (const Mapping< 3 ,  3 >&,
 const DoFHandler< 3 ,  3 >&,
 const  parallel::distributed::BlockVector<float> &,
 const Function< 3 >&,
 Vector<double>&,
 const Quadrature< 3 >&,
 const NormType&,
 const Function< 3 >*,
 const double);

 template
 void integrate_difference< 3 ,  parallel::distributed::BlockVector<float> , Vector<double>,  3  >
 (const DoFHandler< 3 ,  3 >&,
 const  parallel::distributed::BlockVector<float> &,
 const Function< 3 >&,
 Vector<double>&,
 const Quadrature< 3 >&,
 const NormType&,
 const Function< 3 >*,
 const double);

 template
 void integrate_difference< 3 ,  parallel::distributed::BlockVector<float> , Vector<double>,  3 >
 (const hp::MappingCollection< 3 , 3 >&,
 const hp::DoFHandler< 3 , 3 >&,
 const  parallel::distributed::BlockVector<float> &,
 const Function< 3 >&,
 Vector<double>&,
 const hp::QCollection< 3 >&,
 const NormType&,
 const Function< 3 >*,
 const double);

 template
 void integrate_difference< 3 ,  parallel::distributed::BlockVector<float> , Vector<double>,  3 >
 (const hp::DoFHandler< 3 , 3 >&,
 const  parallel::distributed::BlockVector<float> &,
 const Function< 3 >&,
 Vector<double>&,
 const hp::QCollection< 3 >&,
 const NormType&,
 const Function< 3 >*,
 const double);

 template
 void integrate_difference< 3 ,  parallel::distributed::BlockVector<float> , Vector<float>,  3 >
 (const hp::MappingCollection< 3 , 3 >&,
 const hp::DoFHandler< 3 , 3 >&,
 const  parallel::distributed::BlockVector<float> &,
 const Function< 3 >&,
 Vector<float>&,
 const hp::QCollection< 3 >&,
 const NormType&,
 const Function< 3 >*,
 const double);

 template
 void integrate_difference< 3 ,  parallel::distributed::BlockVector<float> , Vector<float>,  3 >
 (const hp::DoFHandler< 3 , 3 >&,
 const  parallel::distributed::BlockVector<float> &,
 const Function< 3 >&,
 Vector<float>&,
 const hp::QCollection< 3 >&,
 const NormType&,
 const Function< 3 >*,
 const double);

 }
#endif
 
#if  1  <=  1 
 namespace VectorTools {

 template
 void integrate_difference< 1 ,  parallel::distributed::BlockVector<long double> , Vector<float>,  1 >
 (const Mapping< 1 ,  1 >&,
 const DoFHandler< 1 ,  1 >&,
 const  parallel::distributed::BlockVector<long double> &,
 const Function< 1 >&,
 Vector<float>&,
 const Quadrature< 1 >&,
 const NormType&,
 const Function< 1 >*,
 const double);

 template
 void integrate_difference< 1 ,  parallel::distributed::BlockVector<long double> , Vector<float>,  1 >
 (const DoFHandler< 1 ,  1 >&,
 const  parallel::distributed::BlockVector<long double> &,
 const Function< 1 >&,
 Vector<float>&,
 const Quadrature< 1 >&,
 const NormType&,
 const Function< 1 >*,
 const double);

 template
 void integrate_difference< 1 ,  parallel::distributed::BlockVector<long double> , Vector<double>,  1  >
 (const Mapping< 1 ,  1 >&,
 const DoFHandler< 1 ,  1 >&,
 const  parallel::distributed::BlockVector<long double> &,
 const Function< 1 >&,
 Vector<double>&,
 const Quadrature< 1 >&,
 const NormType&,
 const Function< 1 >*,
 const double);

 template
 void integrate_difference< 1 ,  parallel::distributed::BlockVector<long double> , Vector<double>,  1  >
 (const DoFHandler< 1 ,  1 >&,
 const  parallel::distributed::BlockVector<long double> &,
 const Function< 1 >&,
 Vector<double>&,
 const Quadrature< 1 >&,
 const NormType&,
 const Function< 1 >*,
 const double);

 template
 void integrate_difference< 1 ,  parallel::distributed::BlockVector<long double> , Vector<double>,  1 >
 (const hp::MappingCollection< 1 , 1 >&,
 const hp::DoFHandler< 1 , 1 >&,
 const  parallel::distributed::BlockVector<long double> &,
 const Function< 1 >&,
 Vector<double>&,
 const hp::QCollection< 1 >&,
 const NormType&,
 const Function< 1 >*,
 const double);

 template
 void integrate_difference< 1 ,  parallel::distributed::BlockVector<long double> , Vector<double>,  1 >
 (const hp::DoFHandler< 1 , 1 >&,
 const  parallel::distributed::BlockVector<long double> &,
 const Function< 1 >&,
 Vector<double>&,
 const hp::QCollection< 1 >&,
 const NormType&,
 const Function< 1 >*,
 const double);

 template
 void integrate_difference< 1 ,  parallel::distributed::BlockVector<long double> , Vector<float>,  1 >
 (const hp::MappingCollection< 1 , 1 >&,
 const hp::DoFHandler< 1 , 1 >&,
 const  parallel::distributed::BlockVector<long double> &,
 const Function< 1 >&,
 Vector<float>&,
 const hp::QCollection< 1 >&,
 const NormType&,
 const Function< 1 >*,
 const double);

 template
 void integrate_difference< 1 ,  parallel::distributed::BlockVector<long double> , Vector<float>,  1 >
 (const hp::DoFHandler< 1 , 1 >&,
 const  parallel::distributed::BlockVector<long double> &,
 const Function< 1 >&,
 Vector<float>&,
 const hp::QCollection< 1 >&,
 const NormType&,
 const Function< 1 >*,
 const double);

 }
#endif
 
#if  1  <=  2 
 namespace VectorTools {

 template
 void integrate_difference< 1 ,  parallel::distributed::BlockVector<long double> , Vector<float>,  2 >
 (const Mapping< 1 ,  2 >&,
 const DoFHandler< 1 ,  2 >&,
 const  parallel::distributed::BlockVector<long double> &,
 const Function< 2 >&,
 Vector<float>&,
 const Quadrature< 1 >&,
 const NormType&,
 const Function< 2 >*,
 const double);

 template
 void integrate_difference< 1 ,  parallel::distributed::BlockVector<long double> , Vector<float>,  2 >
 (const DoFHandler< 1 ,  2 >&,
 const  parallel::distributed::BlockVector<long double> &,
 const Function< 2 >&,
 Vector<float>&,
 const Quadrature< 1 >&,
 const NormType&,
 const Function< 2 >*,
 const double);

 template
 void integrate_difference< 1 ,  parallel::distributed::BlockVector<long double> , Vector<double>,  2  >
 (const Mapping< 1 ,  2 >&,
 const DoFHandler< 1 ,  2 >&,
 const  parallel::distributed::BlockVector<long double> &,
 const Function< 2 >&,
 Vector<double>&,
 const Quadrature< 1 >&,
 const NormType&,
 const Function< 2 >*,
 const double);

 template
 void integrate_difference< 1 ,  parallel::distributed::BlockVector<long double> , Vector<double>,  2  >
 (const DoFHandler< 1 ,  2 >&,
 const  parallel::distributed::BlockVector<long double> &,
 const Function< 2 >&,
 Vector<double>&,
 const Quadrature< 1 >&,
 const NormType&,
 const Function< 2 >*,
 const double);

 template
 void integrate_difference< 1 ,  parallel::distributed::BlockVector<long double> , Vector<double>,  2 >
 (const hp::MappingCollection< 1 , 2 >&,
 const hp::DoFHandler< 1 , 2 >&,
 const  parallel::distributed::BlockVector<long double> &,
 const Function< 2 >&,
 Vector<double>&,
 const hp::QCollection< 1 >&,
 const NormType&,
 const Function< 2 >*,
 const double);

 template
 void integrate_difference< 1 ,  parallel::distributed::BlockVector<long double> , Vector<double>,  2 >
 (const hp::DoFHandler< 1 , 2 >&,
 const  parallel::distributed::BlockVector<long double> &,
 const Function< 2 >&,
 Vector<double>&,
 const hp::QCollection< 1 >&,
 const NormType&,
 const Function< 2 >*,
 const double);

 template
 void integrate_difference< 1 ,  parallel::distributed::BlockVector<long double> , Vector<float>,  2 >
 (const hp::MappingCollection< 1 , 2 >&,
 const hp::DoFHandler< 1 , 2 >&,
 const  parallel::distributed::BlockVector<long double> &,
 const Function< 2 >&,
 Vector<float>&,
 const hp::QCollection< 1 >&,
 const NormType&,
 const Function< 2 >*,
 const double);

 template
 void integrate_difference< 1 ,  parallel::distributed::BlockVector<long double> , Vector<float>,  2 >
 (const hp::DoFHandler< 1 , 2 >&,
 const  parallel::distributed::BlockVector<long double> &,
 const Function< 2 >&,
 Vector<float>&,
 const hp::QCollection< 1 >&,
 const NormType&,
 const Function< 2 >*,
 const double);

 }
#endif
 
#if  1  <=  3 
 namespace VectorTools {

 template
 void integrate_difference< 1 ,  parallel::distributed::BlockVector<long double> , Vector<float>,  3 >
 (const Mapping< 1 ,  3 >&,
 const DoFHandler< 1 ,  3 >&,
 const  parallel::distributed::BlockVector<long double> &,
 const Function< 3 >&,
 Vector<float>&,
 const Quadrature< 1 >&,
 const NormType&,
 const Function< 3 >*,
 const double);

 template
 void integrate_difference< 1 ,  parallel::distributed::BlockVector<long double> , Vector<float>,  3 >
 (const DoFHandler< 1 ,  3 >&,
 const  parallel::distributed::BlockVector<long double> &,
 const Function< 3 >&,
 Vector<float>&,
 const Quadrature< 1 >&,
 const NormType&,
 const Function< 3 >*,
 const double);

 template
 void integrate_difference< 1 ,  parallel::distributed::BlockVector<long double> , Vector<double>,  3  >
 (const Mapping< 1 ,  3 >&,
 const DoFHandler< 1 ,  3 >&,
 const  parallel::distributed::BlockVector<long double> &,
 const Function< 3 >&,
 Vector<double>&,
 const Quadrature< 1 >&,
 const NormType&,
 const Function< 3 >*,
 const double);

 template
 void integrate_difference< 1 ,  parallel::distributed::BlockVector<long double> , Vector<double>,  3  >
 (const DoFHandler< 1 ,  3 >&,
 const  parallel::distributed::BlockVector<long double> &,
 const Function< 3 >&,
 Vector<double>&,
 const Quadrature< 1 >&,
 const NormType&,
 const Function< 3 >*,
 const double);

 template
 void integrate_difference< 1 ,  parallel::distributed::BlockVector<long double> , Vector<double>,  3 >
 (const hp::MappingCollection< 1 , 3 >&,
 const hp::DoFHandler< 1 , 3 >&,
 const  parallel::distributed::BlockVector<long double> &,
 const Function< 3 >&,
 Vector<double>&,
 const hp::QCollection< 1 >&,
 const NormType&,
 const Function< 3 >*,
 const double);

 template
 void integrate_difference< 1 ,  parallel::distributed::BlockVector<long double> , Vector<double>,  3 >
 (const hp::DoFHandler< 1 , 3 >&,
 const  parallel::distributed::BlockVector<long double> &,
 const Function< 3 >&,
 Vector<double>&,
 const hp::QCollection< 1 >&,
 const NormType&,
 const Function< 3 >*,
 const double);

 template
 void integrate_difference< 1 ,  parallel::distributed::BlockVector<long double> , Vector<float>,  3 >
 (const hp::MappingCollection< 1 , 3 >&,
 const hp::DoFHandler< 1 , 3 >&,
 const  parallel::distributed::BlockVector<long double> &,
 const Function< 3 >&,
 Vector<float>&,
 const hp::QCollection< 1 >&,
 const NormType&,
 const Function< 3 >*,
 const double);

 template
 void integrate_difference< 1 ,  parallel::distributed::BlockVector<long double> , Vector<float>,  3 >
 (const hp::DoFHandler< 1 , 3 >&,
 const  parallel::distributed::BlockVector<long double> &,
 const Function< 3 >&,
 Vector<float>&,
 const hp::QCollection< 1 >&,
 const NormType&,
 const Function< 3 >*,
 const double);

 }
#endif
 
#if  2  <=  1 
 namespace VectorTools {

 template
 void integrate_difference< 2 ,  parallel::distributed::BlockVector<long double> , Vector<float>,  1 >
 (const Mapping< 2 ,  1 >&,
 const DoFHandler< 2 ,  1 >&,
 const  parallel::distributed::BlockVector<long double> &,
 const Function< 1 >&,
 Vector<float>&,
 const Quadrature< 2 >&,
 const NormType&,
 const Function< 1 >*,
 const double);

 template
 void integrate_difference< 2 ,  parallel::distributed::BlockVector<long double> , Vector<float>,  1 >
 (const DoFHandler< 2 ,  1 >&,
 const  parallel::distributed::BlockVector<long double> &,
 const Function< 1 >&,
 Vector<float>&,
 const Quadrature< 2 >&,
 const NormType&,
 const Function< 1 >*,
 const double);

 template
 void integrate_difference< 2 ,  parallel::distributed::BlockVector<long double> , Vector<double>,  1  >
 (const Mapping< 2 ,  1 >&,
 const DoFHandler< 2 ,  1 >&,
 const  parallel::distributed::BlockVector<long double> &,
 const Function< 1 >&,
 Vector<double>&,
 const Quadrature< 2 >&,
 const NormType&,
 const Function< 1 >*,
 const double);

 template
 void integrate_difference< 2 ,  parallel::distributed::BlockVector<long double> , Vector<double>,  1  >
 (const DoFHandler< 2 ,  1 >&,
 const  parallel::distributed::BlockVector<long double> &,
 const Function< 1 >&,
 Vector<double>&,
 const Quadrature< 2 >&,
 const NormType&,
 const Function< 1 >*,
 const double);

 template
 void integrate_difference< 2 ,  parallel::distributed::BlockVector<long double> , Vector<double>,  1 >
 (const hp::MappingCollection< 2 , 1 >&,
 const hp::DoFHandler< 2 , 1 >&,
 const  parallel::distributed::BlockVector<long double> &,
 const Function< 1 >&,
 Vector<double>&,
 const hp::QCollection< 2 >&,
 const NormType&,
 const Function< 1 >*,
 const double);

 template
 void integrate_difference< 2 ,  parallel::distributed::BlockVector<long double> , Vector<double>,  1 >
 (const hp::DoFHandler< 2 , 1 >&,
 const  parallel::distributed::BlockVector<long double> &,
 const Function< 1 >&,
 Vector<double>&,
 const hp::QCollection< 2 >&,
 const NormType&,
 const Function< 1 >*,
 const double);

 template
 void integrate_difference< 2 ,  parallel::distributed::BlockVector<long double> , Vector<float>,  1 >
 (const hp::MappingCollection< 2 , 1 >&,
 const hp::DoFHandler< 2 , 1 >&,
 const  parallel::distributed::BlockVector<long double> &,
 const Function< 1 >&,
 Vector<float>&,
 const hp::QCollection< 2 >&,
 const NormType&,
 const Function< 1 >*,
 const double);

 template
 void integrate_difference< 2 ,  parallel::distributed::BlockVector<long double> , Vector<float>,  1 >
 (const hp::DoFHandler< 2 , 1 >&,
 const  parallel::distributed::BlockVector<long double> &,
 const Function< 1 >&,
 Vector<float>&,
 const hp::QCollection< 2 >&,
 const NormType&,
 const Function< 1 >*,
 const double);

 }
#endif
 
#if  2  <=  2 
 namespace VectorTools {

 template
 void integrate_difference< 2 ,  parallel::distributed::BlockVector<long double> , Vector<float>,  2 >
 (const Mapping< 2 ,  2 >&,
 const DoFHandler< 2 ,  2 >&,
 const  parallel::distributed::BlockVector<long double> &,
 const Function< 2 >&,
 Vector<float>&,
 const Quadrature< 2 >&,
 const NormType&,
 const Function< 2 >*,
 const double);

 template
 void integrate_difference< 2 ,  parallel::distributed::BlockVector<long double> , Vector<float>,  2 >
 (const DoFHandler< 2 ,  2 >&,
 const  parallel::distributed::BlockVector<long double> &,
 const Function< 2 >&,
 Vector<float>&,
 const Quadrature< 2 >&,
 const NormType&,
 const Function< 2 >*,
 const double);

 template
 void integrate_difference< 2 ,  parallel::distributed::BlockVector<long double> , Vector<double>,  2  >
 (const Mapping< 2 ,  2 >&,
 const DoFHandler< 2 ,  2 >&,
 const  parallel::distributed::BlockVector<long double> &,
 const Function< 2 >&,
 Vector<double>&,
 const Quadrature< 2 >&,
 const NormType&,
 const Function< 2 >*,
 const double);

 template
 void integrate_difference< 2 ,  parallel::distributed::BlockVector<long double> , Vector<double>,  2  >
 (const DoFHandler< 2 ,  2 >&,
 const  parallel::distributed::BlockVector<long double> &,
 const Function< 2 >&,
 Vector<double>&,
 const Quadrature< 2 >&,
 const NormType&,
 const Function< 2 >*,
 const double);

 template
 void integrate_difference< 2 ,  parallel::distributed::BlockVector<long double> , Vector<double>,  2 >
 (const hp::MappingCollection< 2 , 2 >&,
 const hp::DoFHandler< 2 , 2 >&,
 const  parallel::distributed::BlockVector<long double> &,
 const Function< 2 >&,
 Vector<double>&,
 const hp::QCollection< 2 >&,
 const NormType&,
 const Function< 2 >*,
 const double);

 template
 void integrate_difference< 2 ,  parallel::distributed::BlockVector<long double> , Vector<double>,  2 >
 (const hp::DoFHandler< 2 , 2 >&,
 const  parallel::distributed::BlockVector<long double> &,
 const Function< 2 >&,
 Vector<double>&,
 const hp::QCollection< 2 >&,
 const NormType&,
 const Function< 2 >*,
 const double);

 template
 void integrate_difference< 2 ,  parallel::distributed::BlockVector<long double> , Vector<float>,  2 >
 (const hp::MappingCollection< 2 , 2 >&,
 const hp::DoFHandler< 2 , 2 >&,
 const  parallel::distributed::BlockVector<long double> &,
 const Function< 2 >&,
 Vector<float>&,
 const hp::QCollection< 2 >&,
 const NormType&,
 const Function< 2 >*,
 const double);

 template
 void integrate_difference< 2 ,  parallel::distributed::BlockVector<long double> , Vector<float>,  2 >
 (const hp::DoFHandler< 2 , 2 >&,
 const  parallel::distributed::BlockVector<long double> &,
 const Function< 2 >&,
 Vector<float>&,
 const hp::QCollection< 2 >&,
 const NormType&,
 const Function< 2 >*,
 const double);

 }
#endif
 
#if  2  <=  3 
 namespace VectorTools {

 template
 void integrate_difference< 2 ,  parallel::distributed::BlockVector<long double> , Vector<float>,  3 >
 (const Mapping< 2 ,  3 >&,
 const DoFHandler< 2 ,  3 >&,
 const  parallel::distributed::BlockVector<long double> &,
 const Function< 3 >&,
 Vector<float>&,
 const Quadrature< 2 >&,
 const NormType&,
 const Function< 3 >*,
 const double);

 template
 void integrate_difference< 2 ,  parallel::distributed::BlockVector<long double> , Vector<float>,  3 >
 (const DoFHandler< 2 ,  3 >&,
 const  parallel::distributed::BlockVector<long double> &,
 const Function< 3 >&,
 Vector<float>&,
 const Quadrature< 2 >&,
 const NormType&,
 const Function< 3 >*,
 const double);

 template
 void integrate_difference< 2 ,  parallel::distributed::BlockVector<long double> , Vector<double>,  3  >
 (const Mapping< 2 ,  3 >&,
 const DoFHandler< 2 ,  3 >&,
 const  parallel::distributed::BlockVector<long double> &,
 const Function< 3 >&,
 Vector<double>&,
 const Quadrature< 2 >&,
 const NormType&,
 const Function< 3 >*,
 const double);

 template
 void integrate_difference< 2 ,  parallel::distributed::BlockVector<long double> , Vector<double>,  3  >
 (const DoFHandler< 2 ,  3 >&,
 const  parallel::distributed::BlockVector<long double> &,
 const Function< 3 >&,
 Vector<double>&,
 const Quadrature< 2 >&,
 const NormType&,
 const Function< 3 >*,
 const double);

 template
 void integrate_difference< 2 ,  parallel::distributed::BlockVector<long double> , Vector<double>,  3 >
 (const hp::MappingCollection< 2 , 3 >&,
 const hp::DoFHandler< 2 , 3 >&,
 const  parallel::distributed::BlockVector<long double> &,
 const Function< 3 >&,
 Vector<double>&,
 const hp::QCollection< 2 >&,
 const NormType&,
 const Function< 3 >*,
 const double);

 template
 void integrate_difference< 2 ,  parallel::distributed::BlockVector<long double> , Vector<double>,  3 >
 (const hp::DoFHandler< 2 , 3 >&,
 const  parallel::distributed::BlockVector<long double> &,
 const Function< 3 >&,
 Vector<double>&,
 const hp::QCollection< 2 >&,
 const NormType&,
 const Function< 3 >*,
 const double);

 template
 void integrate_difference< 2 ,  parallel::distributed::BlockVector<long double> , Vector<float>,  3 >
 (const hp::MappingCollection< 2 , 3 >&,
 const hp::DoFHandler< 2 , 3 >&,
 const  parallel::distributed::BlockVector<long double> &,
 const Function< 3 >&,
 Vector<float>&,
 const hp::QCollection< 2 >&,
 const NormType&,
 const Function< 3 >*,
 const double);

 template
 void integrate_difference< 2 ,  parallel::distributed::BlockVector<long double> , Vector<float>,  3 >
 (const hp::DoFHandler< 2 , 3 >&,
 const  parallel::distributed::BlockVector<long double> &,
 const Function< 3 >&,
 Vector<float>&,
 const hp::QCollection< 2 >&,
 const NormType&,
 const Function< 3 >*,
 const double);

 }
#endif
 
#if  3  <=  1 
 namespace VectorTools {

 template
 void integrate_difference< 3 ,  parallel::distributed::BlockVector<long double> , Vector<float>,  1 >
 (const Mapping< 3 ,  1 >&,
 const DoFHandler< 3 ,  1 >&,
 const  parallel::distributed::BlockVector<long double> &,
 const Function< 1 >&,
 Vector<float>&,
 const Quadrature< 3 >&,
 const NormType&,
 const Function< 1 >*,
 const double);

 template
 void integrate_difference< 3 ,  parallel::distributed::BlockVector<long double> , Vector<float>,  1 >
 (const DoFHandler< 3 ,  1 >&,
 const  parallel::distributed::BlockVector<long double> &,
 const Function< 1 >&,
 Vector<float>&,
 const Quadrature< 3 >&,
 const NormType&,
 const Function< 1 >*,
 const double);

 template
 void integrate_difference< 3 ,  parallel::distributed::BlockVector<long double> , Vector<double>,  1  >
 (const Mapping< 3 ,  1 >&,
 const DoFHandler< 3 ,  1 >&,
 const  parallel::distributed::BlockVector<long double> &,
 const Function< 1 >&,
 Vector<double>&,
 const Quadrature< 3 >&,
 const NormType&,
 const Function< 1 >*,
 const double);

 template
 void integrate_difference< 3 ,  parallel::distributed::BlockVector<long double> , Vector<double>,  1  >
 (const DoFHandler< 3 ,  1 >&,
 const  parallel::distributed::BlockVector<long double> &,
 const Function< 1 >&,
 Vector<double>&,
 const Quadrature< 3 >&,
 const NormType&,
 const Function< 1 >*,
 const double);

 template
 void integrate_difference< 3 ,  parallel::distributed::BlockVector<long double> , Vector<double>,  1 >
 (const hp::MappingCollection< 3 , 1 >&,
 const hp::DoFHandler< 3 , 1 >&,
 const  parallel::distributed::BlockVector<long double> &,
 const Function< 1 >&,
 Vector<double>&,
 const hp::QCollection< 3 >&,
 const NormType&,
 const Function< 1 >*,
 const double);

 template
 void integrate_difference< 3 ,  parallel::distributed::BlockVector<long double> , Vector<double>,  1 >
 (const hp::DoFHandler< 3 , 1 >&,
 const  parallel::distributed::BlockVector<long double> &,
 const Function< 1 >&,
 Vector<double>&,
 const hp::QCollection< 3 >&,
 const NormType&,
 const Function< 1 >*,
 const double);

 template
 void integrate_difference< 3 ,  parallel::distributed::BlockVector<long double> , Vector<float>,  1 >
 (const hp::MappingCollection< 3 , 1 >&,
 const hp::DoFHandler< 3 , 1 >&,
 const  parallel::distributed::BlockVector<long double> &,
 const Function< 1 >&,
 Vector<float>&,
 const hp::QCollection< 3 >&,
 const NormType&,
 const Function< 1 >*,
 const double);

 template
 void integrate_difference< 3 ,  parallel::distributed::BlockVector<long double> , Vector<float>,  1 >
 (const hp::DoFHandler< 3 , 1 >&,
 const  parallel::distributed::BlockVector<long double> &,
 const Function< 1 >&,
 Vector<float>&,
 const hp::QCollection< 3 >&,
 const NormType&,
 const Function< 1 >*,
 const double);

 }
#endif
 
#if  3  <=  2 
 namespace VectorTools {

 template
 void integrate_difference< 3 ,  parallel::distributed::BlockVector<long double> , Vector<float>,  2 >
 (const Mapping< 3 ,  2 >&,
 const DoFHandler< 3 ,  2 >&,
 const  parallel::distributed::BlockVector<long double> &,
 const Function< 2 >&,
 Vector<float>&,
 const Quadrature< 3 >&,
 const NormType&,
 const Function< 2 >*,
 const double);

 template
 void integrate_difference< 3 ,  parallel::distributed::BlockVector<long double> , Vector<float>,  2 >
 (const DoFHandler< 3 ,  2 >&,
 const  parallel::distributed::BlockVector<long double> &,
 const Function< 2 >&,
 Vector<float>&,
 const Quadrature< 3 >&,
 const NormType&,
 const Function< 2 >*,
 const double);

 template
 void integrate_difference< 3 ,  parallel::distributed::BlockVector<long double> , Vector<double>,  2  >
 (const Mapping< 3 ,  2 >&,
 const DoFHandler< 3 ,  2 >&,
 const  parallel::distributed::BlockVector<long double> &,
 const Function< 2 >&,
 Vector<double>&,
 const Quadrature< 3 >&,
 const NormType&,
 const Function< 2 >*,
 const double);

 template
 void integrate_difference< 3 ,  parallel::distributed::BlockVector<long double> , Vector<double>,  2  >
 (const DoFHandler< 3 ,  2 >&,
 const  parallel::distributed::BlockVector<long double> &,
 const Function< 2 >&,
 Vector<double>&,
 const Quadrature< 3 >&,
 const NormType&,
 const Function< 2 >*,
 const double);

 template
 void integrate_difference< 3 ,  parallel::distributed::BlockVector<long double> , Vector<double>,  2 >
 (const hp::MappingCollection< 3 , 2 >&,
 const hp::DoFHandler< 3 , 2 >&,
 const  parallel::distributed::BlockVector<long double> &,
 const Function< 2 >&,
 Vector<double>&,
 const hp::QCollection< 3 >&,
 const NormType&,
 const Function< 2 >*,
 const double);

 template
 void integrate_difference< 3 ,  parallel::distributed::BlockVector<long double> , Vector<double>,  2 >
 (const hp::DoFHandler< 3 , 2 >&,
 const  parallel::distributed::BlockVector<long double> &,
 const Function< 2 >&,
 Vector<double>&,
 const hp::QCollection< 3 >&,
 const NormType&,
 const Function< 2 >*,
 const double);

 template
 void integrate_difference< 3 ,  parallel::distributed::BlockVector<long double> , Vector<float>,  2 >
 (const hp::MappingCollection< 3 , 2 >&,
 const hp::DoFHandler< 3 , 2 >&,
 const  parallel::distributed::BlockVector<long double> &,
 const Function< 2 >&,
 Vector<float>&,
 const hp::QCollection< 3 >&,
 const NormType&,
 const Function< 2 >*,
 const double);

 template
 void integrate_difference< 3 ,  parallel::distributed::BlockVector<long double> , Vector<float>,  2 >
 (const hp::DoFHandler< 3 , 2 >&,
 const  parallel::distributed::BlockVector<long double> &,
 const Function< 2 >&,
 Vector<float>&,
 const hp::QCollection< 3 >&,
 const NormType&,
 const Function< 2 >*,
 const double);

 }
#endif
 
#if  3  <=  3 
 namespace VectorTools {

 template
 void integrate_difference< 3 ,  parallel::distributed::BlockVector<long double> , Vector<float>,  3 >
 (const Mapping< 3 ,  3 >&,
 const DoFHandler< 3 ,  3 >&,
 const  parallel::distributed::BlockVector<long double> &,
 const Function< 3 >&,
 Vector<float>&,
 const Quadrature< 3 >&,
 const NormType&,
 const Function< 3 >*,
 const double);

 template
 void integrate_difference< 3 ,  parallel::distributed::BlockVector<long double> , Vector<float>,  3 >
 (const DoFHandler< 3 ,  3 >&,
 const  parallel::distributed::BlockVector<long double> &,
 const Function< 3 >&,
 Vector<float>&,
 const Quadrature< 3 >&,
 const NormType&,
 const Function< 3 >*,
 const double);

 template
 void integrate_difference< 3 ,  parallel::distributed::BlockVector<long double> , Vector<double>,  3  >
 (const Mapping< 3 ,  3 >&,
 const DoFHandler< 3 ,  3 >&,
 const  parallel::distributed::BlockVector<long double> &,
 const Function< 3 >&,
 Vector<double>&,
 const Quadrature< 3 >&,
 const NormType&,
 const Function< 3 >*,
 const double);

 template
 void integrate_difference< 3 ,  parallel::distributed::BlockVector<long double> , Vector<double>,  3  >
 (const DoFHandler< 3 ,  3 >&,
 const  parallel::distributed::BlockVector<long double> &,
 const Function< 3 >&,
 Vector<double>&,
 const Quadrature< 3 >&,
 const NormType&,
 const Function< 3 >*,
 const double);

 template
 void integrate_difference< 3 ,  parallel::distributed::BlockVector<long double> , Vector<double>,  3 >
 (const hp::MappingCollection< 3 , 3 >&,
 const hp::DoFHandler< 3 , 3 >&,
 const  parallel::distributed::BlockVector<long double> &,
 const Function< 3 >&,
 Vector<double>&,
 const hp::QCollection< 3 >&,
 const NormType&,
 const Function< 3 >*,
 const double);

 template
 void integrate_difference< 3 ,  parallel::distributed::BlockVector<long double> , Vector<double>,  3 >
 (const hp::DoFHandler< 3 , 3 >&,
 const  parallel::distributed::BlockVector<long double> &,
 const Function< 3 >&,
 Vector<double>&,
 const hp::QCollection< 3 >&,
 const NormType&,
 const Function< 3 >*,
 const double);

 template
 void integrate_difference< 3 ,  parallel::distributed::BlockVector<long double> , Vector<float>,  3 >
 (const hp::MappingCollection< 3 , 3 >&,
 const hp::DoFHandler< 3 , 3 >&,
 const  parallel::distributed::BlockVector<long double> &,
 const Function< 3 >&,
 Vector<float>&,
 const hp::QCollection< 3 >&,
 const NormType&,
 const Function< 3 >*,
 const double);

 template
 void integrate_difference< 3 ,  parallel::distributed::BlockVector<long double> , Vector<float>,  3 >
 (const hp::DoFHandler< 3 , 3 >&,
 const  parallel::distributed::BlockVector<long double> &,
 const Function< 3 >&,
 Vector<float>&,
 const hp::QCollection< 3 >&,
 const NormType&,
 const Function< 3 >*,
 const double);

 }
#endif
 
