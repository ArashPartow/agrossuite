#if  1  <=  1 
 namespace VectorTools {

 template
 double compute_mean_value< 1 >
 (const Mapping< 1 , 1 >&,
 const DoFHandler< 1 , 1 >&,
 const Quadrature< 1 >&,
 const  Vector<double> &,
 const unsigned int);

 template
 double compute_mean_value< 1 >
 (const DoFHandler< 1 , 1 >&,
 const Quadrature< 1 >&,
 const  Vector<double> &,
 const unsigned int);

 }
#endif
 
#if  1  <=  2 
 namespace VectorTools {

 template
 double compute_mean_value< 1 >
 (const Mapping< 1 , 2 >&,
 const DoFHandler< 1 , 2 >&,
 const Quadrature< 1 >&,
 const  Vector<double> &,
 const unsigned int);

 template
 double compute_mean_value< 1 >
 (const DoFHandler< 1 , 2 >&,
 const Quadrature< 1 >&,
 const  Vector<double> &,
 const unsigned int);

 }
#endif
 
#if  1  <=  3 
 namespace VectorTools {

 template
 double compute_mean_value< 1 >
 (const Mapping< 1 , 3 >&,
 const DoFHandler< 1 , 3 >&,
 const Quadrature< 1 >&,
 const  Vector<double> &,
 const unsigned int);

 template
 double compute_mean_value< 1 >
 (const DoFHandler< 1 , 3 >&,
 const Quadrature< 1 >&,
 const  Vector<double> &,
 const unsigned int);

 }
#endif
 
#if  2  <=  1 
 namespace VectorTools {

 template
 double compute_mean_value< 2 >
 (const Mapping< 2 , 1 >&,
 const DoFHandler< 2 , 1 >&,
 const Quadrature< 2 >&,
 const  Vector<double> &,
 const unsigned int);

 template
 double compute_mean_value< 2 >
 (const DoFHandler< 2 , 1 >&,
 const Quadrature< 2 >&,
 const  Vector<double> &,
 const unsigned int);

 }
#endif
 
#if  2  <=  2 
 namespace VectorTools {

 template
 double compute_mean_value< 2 >
 (const Mapping< 2 , 2 >&,
 const DoFHandler< 2 , 2 >&,
 const Quadrature< 2 >&,
 const  Vector<double> &,
 const unsigned int);

 template
 double compute_mean_value< 2 >
 (const DoFHandler< 2 , 2 >&,
 const Quadrature< 2 >&,
 const  Vector<double> &,
 const unsigned int);

 }
#endif
 
#if  2  <=  3 
 namespace VectorTools {

 template
 double compute_mean_value< 2 >
 (const Mapping< 2 , 3 >&,
 const DoFHandler< 2 , 3 >&,
 const Quadrature< 2 >&,
 const  Vector<double> &,
 const unsigned int);

 template
 double compute_mean_value< 2 >
 (const DoFHandler< 2 , 3 >&,
 const Quadrature< 2 >&,
 const  Vector<double> &,
 const unsigned int);

 }
#endif
 
#if  3  <=  1 
 namespace VectorTools {

 template
 double compute_mean_value< 3 >
 (const Mapping< 3 , 1 >&,
 const DoFHandler< 3 , 1 >&,
 const Quadrature< 3 >&,
 const  Vector<double> &,
 const unsigned int);

 template
 double compute_mean_value< 3 >
 (const DoFHandler< 3 , 1 >&,
 const Quadrature< 3 >&,
 const  Vector<double> &,
 const unsigned int);

 }
#endif
 
#if  3  <=  2 
 namespace VectorTools {

 template
 double compute_mean_value< 3 >
 (const Mapping< 3 , 2 >&,
 const DoFHandler< 3 , 2 >&,
 const Quadrature< 3 >&,
 const  Vector<double> &,
 const unsigned int);

 template
 double compute_mean_value< 3 >
 (const DoFHandler< 3 , 2 >&,
 const Quadrature< 3 >&,
 const  Vector<double> &,
 const unsigned int);

 }
#endif
 
#if  3  <=  3 
 namespace VectorTools {

 template
 double compute_mean_value< 3 >
 (const Mapping< 3 , 3 >&,
 const DoFHandler< 3 , 3 >&,
 const Quadrature< 3 >&,
 const  Vector<double> &,
 const unsigned int);

 template
 double compute_mean_value< 3 >
 (const DoFHandler< 3 , 3 >&,
 const Quadrature< 3 >&,
 const  Vector<double> &,
 const unsigned int);

 }
#endif
 
#if  1  <=  1 
 namespace VectorTools {

 template
 double compute_mean_value< 1 >
 (const Mapping< 1 , 1 >&,
 const DoFHandler< 1 , 1 >&,
 const Quadrature< 1 >&,
 const  Vector<float> &,
 const unsigned int);

 template
 double compute_mean_value< 1 >
 (const DoFHandler< 1 , 1 >&,
 const Quadrature< 1 >&,
 const  Vector<float> &,
 const unsigned int);

 }
#endif
 
#if  1  <=  2 
 namespace VectorTools {

 template
 double compute_mean_value< 1 >
 (const Mapping< 1 , 2 >&,
 const DoFHandler< 1 , 2 >&,
 const Quadrature< 1 >&,
 const  Vector<float> &,
 const unsigned int);

 template
 double compute_mean_value< 1 >
 (const DoFHandler< 1 , 2 >&,
 const Quadrature< 1 >&,
 const  Vector<float> &,
 const unsigned int);

 }
#endif
 
#if  1  <=  3 
 namespace VectorTools {

 template
 double compute_mean_value< 1 >
 (const Mapping< 1 , 3 >&,
 const DoFHandler< 1 , 3 >&,
 const Quadrature< 1 >&,
 const  Vector<float> &,
 const unsigned int);

 template
 double compute_mean_value< 1 >
 (const DoFHandler< 1 , 3 >&,
 const Quadrature< 1 >&,
 const  Vector<float> &,
 const unsigned int);

 }
#endif
 
#if  2  <=  1 
 namespace VectorTools {

 template
 double compute_mean_value< 2 >
 (const Mapping< 2 , 1 >&,
 const DoFHandler< 2 , 1 >&,
 const Quadrature< 2 >&,
 const  Vector<float> &,
 const unsigned int);

 template
 double compute_mean_value< 2 >
 (const DoFHandler< 2 , 1 >&,
 const Quadrature< 2 >&,
 const  Vector<float> &,
 const unsigned int);

 }
#endif
 
#if  2  <=  2 
 namespace VectorTools {

 template
 double compute_mean_value< 2 >
 (const Mapping< 2 , 2 >&,
 const DoFHandler< 2 , 2 >&,
 const Quadrature< 2 >&,
 const  Vector<float> &,
 const unsigned int);

 template
 double compute_mean_value< 2 >
 (const DoFHandler< 2 , 2 >&,
 const Quadrature< 2 >&,
 const  Vector<float> &,
 const unsigned int);

 }
#endif
 
#if  2  <=  3 
 namespace VectorTools {

 template
 double compute_mean_value< 2 >
 (const Mapping< 2 , 3 >&,
 const DoFHandler< 2 , 3 >&,
 const Quadrature< 2 >&,
 const  Vector<float> &,
 const unsigned int);

 template
 double compute_mean_value< 2 >
 (const DoFHandler< 2 , 3 >&,
 const Quadrature< 2 >&,
 const  Vector<float> &,
 const unsigned int);

 }
#endif
 
#if  3  <=  1 
 namespace VectorTools {

 template
 double compute_mean_value< 3 >
 (const Mapping< 3 , 1 >&,
 const DoFHandler< 3 , 1 >&,
 const Quadrature< 3 >&,
 const  Vector<float> &,
 const unsigned int);

 template
 double compute_mean_value< 3 >
 (const DoFHandler< 3 , 1 >&,
 const Quadrature< 3 >&,
 const  Vector<float> &,
 const unsigned int);

 }
#endif
 
#if  3  <=  2 
 namespace VectorTools {

 template
 double compute_mean_value< 3 >
 (const Mapping< 3 , 2 >&,
 const DoFHandler< 3 , 2 >&,
 const Quadrature< 3 >&,
 const  Vector<float> &,
 const unsigned int);

 template
 double compute_mean_value< 3 >
 (const DoFHandler< 3 , 2 >&,
 const Quadrature< 3 >&,
 const  Vector<float> &,
 const unsigned int);

 }
#endif
 
#if  3  <=  3 
 namespace VectorTools {

 template
 double compute_mean_value< 3 >
 (const Mapping< 3 , 3 >&,
 const DoFHandler< 3 , 3 >&,
 const Quadrature< 3 >&,
 const  Vector<float> &,
 const unsigned int);

 template
 double compute_mean_value< 3 >
 (const DoFHandler< 3 , 3 >&,
 const Quadrature< 3 >&,
 const  Vector<float> &,
 const unsigned int);

 }
#endif
 
#if  1  <=  1 
 namespace VectorTools {

 template
 double compute_mean_value< 1 >
 (const Mapping< 1 , 1 >&,
 const DoFHandler< 1 , 1 >&,
 const Quadrature< 1 >&,
 const  Vector<long double> &,
 const unsigned int);

 template
 double compute_mean_value< 1 >
 (const DoFHandler< 1 , 1 >&,
 const Quadrature< 1 >&,
 const  Vector<long double> &,
 const unsigned int);

 }
#endif
 
#if  1  <=  2 
 namespace VectorTools {

 template
 double compute_mean_value< 1 >
 (const Mapping< 1 , 2 >&,
 const DoFHandler< 1 , 2 >&,
 const Quadrature< 1 >&,
 const  Vector<long double> &,
 const unsigned int);

 template
 double compute_mean_value< 1 >
 (const DoFHandler< 1 , 2 >&,
 const Quadrature< 1 >&,
 const  Vector<long double> &,
 const unsigned int);

 }
#endif
 
#if  1  <=  3 
 namespace VectorTools {

 template
 double compute_mean_value< 1 >
 (const Mapping< 1 , 3 >&,
 const DoFHandler< 1 , 3 >&,
 const Quadrature< 1 >&,
 const  Vector<long double> &,
 const unsigned int);

 template
 double compute_mean_value< 1 >
 (const DoFHandler< 1 , 3 >&,
 const Quadrature< 1 >&,
 const  Vector<long double> &,
 const unsigned int);

 }
#endif
 
#if  2  <=  1 
 namespace VectorTools {

 template
 double compute_mean_value< 2 >
 (const Mapping< 2 , 1 >&,
 const DoFHandler< 2 , 1 >&,
 const Quadrature< 2 >&,
 const  Vector<long double> &,
 const unsigned int);

 template
 double compute_mean_value< 2 >
 (const DoFHandler< 2 , 1 >&,
 const Quadrature< 2 >&,
 const  Vector<long double> &,
 const unsigned int);

 }
#endif
 
#if  2  <=  2 
 namespace VectorTools {

 template
 double compute_mean_value< 2 >
 (const Mapping< 2 , 2 >&,
 const DoFHandler< 2 , 2 >&,
 const Quadrature< 2 >&,
 const  Vector<long double> &,
 const unsigned int);

 template
 double compute_mean_value< 2 >
 (const DoFHandler< 2 , 2 >&,
 const Quadrature< 2 >&,
 const  Vector<long double> &,
 const unsigned int);

 }
#endif
 
#if  2  <=  3 
 namespace VectorTools {

 template
 double compute_mean_value< 2 >
 (const Mapping< 2 , 3 >&,
 const DoFHandler< 2 , 3 >&,
 const Quadrature< 2 >&,
 const  Vector<long double> &,
 const unsigned int);

 template
 double compute_mean_value< 2 >
 (const DoFHandler< 2 , 3 >&,
 const Quadrature< 2 >&,
 const  Vector<long double> &,
 const unsigned int);

 }
#endif
 
#if  3  <=  1 
 namespace VectorTools {

 template
 double compute_mean_value< 3 >
 (const Mapping< 3 , 1 >&,
 const DoFHandler< 3 , 1 >&,
 const Quadrature< 3 >&,
 const  Vector<long double> &,
 const unsigned int);

 template
 double compute_mean_value< 3 >
 (const DoFHandler< 3 , 1 >&,
 const Quadrature< 3 >&,
 const  Vector<long double> &,
 const unsigned int);

 }
#endif
 
#if  3  <=  2 
 namespace VectorTools {

 template
 double compute_mean_value< 3 >
 (const Mapping< 3 , 2 >&,
 const DoFHandler< 3 , 2 >&,
 const Quadrature< 3 >&,
 const  Vector<long double> &,
 const unsigned int);

 template
 double compute_mean_value< 3 >
 (const DoFHandler< 3 , 2 >&,
 const Quadrature< 3 >&,
 const  Vector<long double> &,
 const unsigned int);

 }
#endif
 
#if  3  <=  3 
 namespace VectorTools {

 template
 double compute_mean_value< 3 >
 (const Mapping< 3 , 3 >&,
 const DoFHandler< 3 , 3 >&,
 const Quadrature< 3 >&,
 const  Vector<long double> &,
 const unsigned int);

 template
 double compute_mean_value< 3 >
 (const DoFHandler< 3 , 3 >&,
 const Quadrature< 3 >&,
 const  Vector<long double> &,
 const unsigned int);

 }
#endif
 
#if  1  <=  1 
 namespace VectorTools {

 template
 double compute_mean_value< 1 >
 (const Mapping< 1 , 1 >&,
 const DoFHandler< 1 , 1 >&,
 const Quadrature< 1 >&,
 const  BlockVector<double> &,
 const unsigned int);

 template
 double compute_mean_value< 1 >
 (const DoFHandler< 1 , 1 >&,
 const Quadrature< 1 >&,
 const  BlockVector<double> &,
 const unsigned int);

 }
#endif
 
#if  1  <=  2 
 namespace VectorTools {

 template
 double compute_mean_value< 1 >
 (const Mapping< 1 , 2 >&,
 const DoFHandler< 1 , 2 >&,
 const Quadrature< 1 >&,
 const  BlockVector<double> &,
 const unsigned int);

 template
 double compute_mean_value< 1 >
 (const DoFHandler< 1 , 2 >&,
 const Quadrature< 1 >&,
 const  BlockVector<double> &,
 const unsigned int);

 }
#endif
 
#if  1  <=  3 
 namespace VectorTools {

 template
 double compute_mean_value< 1 >
 (const Mapping< 1 , 3 >&,
 const DoFHandler< 1 , 3 >&,
 const Quadrature< 1 >&,
 const  BlockVector<double> &,
 const unsigned int);

 template
 double compute_mean_value< 1 >
 (const DoFHandler< 1 , 3 >&,
 const Quadrature< 1 >&,
 const  BlockVector<double> &,
 const unsigned int);

 }
#endif
 
#if  2  <=  1 
 namespace VectorTools {

 template
 double compute_mean_value< 2 >
 (const Mapping< 2 , 1 >&,
 const DoFHandler< 2 , 1 >&,
 const Quadrature< 2 >&,
 const  BlockVector<double> &,
 const unsigned int);

 template
 double compute_mean_value< 2 >
 (const DoFHandler< 2 , 1 >&,
 const Quadrature< 2 >&,
 const  BlockVector<double> &,
 const unsigned int);

 }
#endif
 
#if  2  <=  2 
 namespace VectorTools {

 template
 double compute_mean_value< 2 >
 (const Mapping< 2 , 2 >&,
 const DoFHandler< 2 , 2 >&,
 const Quadrature< 2 >&,
 const  BlockVector<double> &,
 const unsigned int);

 template
 double compute_mean_value< 2 >
 (const DoFHandler< 2 , 2 >&,
 const Quadrature< 2 >&,
 const  BlockVector<double> &,
 const unsigned int);

 }
#endif
 
#if  2  <=  3 
 namespace VectorTools {

 template
 double compute_mean_value< 2 >
 (const Mapping< 2 , 3 >&,
 const DoFHandler< 2 , 3 >&,
 const Quadrature< 2 >&,
 const  BlockVector<double> &,
 const unsigned int);

 template
 double compute_mean_value< 2 >
 (const DoFHandler< 2 , 3 >&,
 const Quadrature< 2 >&,
 const  BlockVector<double> &,
 const unsigned int);

 }
#endif
 
#if  3  <=  1 
 namespace VectorTools {

 template
 double compute_mean_value< 3 >
 (const Mapping< 3 , 1 >&,
 const DoFHandler< 3 , 1 >&,
 const Quadrature< 3 >&,
 const  BlockVector<double> &,
 const unsigned int);

 template
 double compute_mean_value< 3 >
 (const DoFHandler< 3 , 1 >&,
 const Quadrature< 3 >&,
 const  BlockVector<double> &,
 const unsigned int);

 }
#endif
 
#if  3  <=  2 
 namespace VectorTools {

 template
 double compute_mean_value< 3 >
 (const Mapping< 3 , 2 >&,
 const DoFHandler< 3 , 2 >&,
 const Quadrature< 3 >&,
 const  BlockVector<double> &,
 const unsigned int);

 template
 double compute_mean_value< 3 >
 (const DoFHandler< 3 , 2 >&,
 const Quadrature< 3 >&,
 const  BlockVector<double> &,
 const unsigned int);

 }
#endif
 
#if  3  <=  3 
 namespace VectorTools {

 template
 double compute_mean_value< 3 >
 (const Mapping< 3 , 3 >&,
 const DoFHandler< 3 , 3 >&,
 const Quadrature< 3 >&,
 const  BlockVector<double> &,
 const unsigned int);

 template
 double compute_mean_value< 3 >
 (const DoFHandler< 3 , 3 >&,
 const Quadrature< 3 >&,
 const  BlockVector<double> &,
 const unsigned int);

 }
#endif
 
#if  1  <=  1 
 namespace VectorTools {

 template
 double compute_mean_value< 1 >
 (const Mapping< 1 , 1 >&,
 const DoFHandler< 1 , 1 >&,
 const Quadrature< 1 >&,
 const  BlockVector<float> &,
 const unsigned int);

 template
 double compute_mean_value< 1 >
 (const DoFHandler< 1 , 1 >&,
 const Quadrature< 1 >&,
 const  BlockVector<float> &,
 const unsigned int);

 }
#endif
 
#if  1  <=  2 
 namespace VectorTools {

 template
 double compute_mean_value< 1 >
 (const Mapping< 1 , 2 >&,
 const DoFHandler< 1 , 2 >&,
 const Quadrature< 1 >&,
 const  BlockVector<float> &,
 const unsigned int);

 template
 double compute_mean_value< 1 >
 (const DoFHandler< 1 , 2 >&,
 const Quadrature< 1 >&,
 const  BlockVector<float> &,
 const unsigned int);

 }
#endif
 
#if  1  <=  3 
 namespace VectorTools {

 template
 double compute_mean_value< 1 >
 (const Mapping< 1 , 3 >&,
 const DoFHandler< 1 , 3 >&,
 const Quadrature< 1 >&,
 const  BlockVector<float> &,
 const unsigned int);

 template
 double compute_mean_value< 1 >
 (const DoFHandler< 1 , 3 >&,
 const Quadrature< 1 >&,
 const  BlockVector<float> &,
 const unsigned int);

 }
#endif
 
#if  2  <=  1 
 namespace VectorTools {

 template
 double compute_mean_value< 2 >
 (const Mapping< 2 , 1 >&,
 const DoFHandler< 2 , 1 >&,
 const Quadrature< 2 >&,
 const  BlockVector<float> &,
 const unsigned int);

 template
 double compute_mean_value< 2 >
 (const DoFHandler< 2 , 1 >&,
 const Quadrature< 2 >&,
 const  BlockVector<float> &,
 const unsigned int);

 }
#endif
 
#if  2  <=  2 
 namespace VectorTools {

 template
 double compute_mean_value< 2 >
 (const Mapping< 2 , 2 >&,
 const DoFHandler< 2 , 2 >&,
 const Quadrature< 2 >&,
 const  BlockVector<float> &,
 const unsigned int);

 template
 double compute_mean_value< 2 >
 (const DoFHandler< 2 , 2 >&,
 const Quadrature< 2 >&,
 const  BlockVector<float> &,
 const unsigned int);

 }
#endif
 
#if  2  <=  3 
 namespace VectorTools {

 template
 double compute_mean_value< 2 >
 (const Mapping< 2 , 3 >&,
 const DoFHandler< 2 , 3 >&,
 const Quadrature< 2 >&,
 const  BlockVector<float> &,
 const unsigned int);

 template
 double compute_mean_value< 2 >
 (const DoFHandler< 2 , 3 >&,
 const Quadrature< 2 >&,
 const  BlockVector<float> &,
 const unsigned int);

 }
#endif
 
#if  3  <=  1 
 namespace VectorTools {

 template
 double compute_mean_value< 3 >
 (const Mapping< 3 , 1 >&,
 const DoFHandler< 3 , 1 >&,
 const Quadrature< 3 >&,
 const  BlockVector<float> &,
 const unsigned int);

 template
 double compute_mean_value< 3 >
 (const DoFHandler< 3 , 1 >&,
 const Quadrature< 3 >&,
 const  BlockVector<float> &,
 const unsigned int);

 }
#endif
 
#if  3  <=  2 
 namespace VectorTools {

 template
 double compute_mean_value< 3 >
 (const Mapping< 3 , 2 >&,
 const DoFHandler< 3 , 2 >&,
 const Quadrature< 3 >&,
 const  BlockVector<float> &,
 const unsigned int);

 template
 double compute_mean_value< 3 >
 (const DoFHandler< 3 , 2 >&,
 const Quadrature< 3 >&,
 const  BlockVector<float> &,
 const unsigned int);

 }
#endif
 
#if  3  <=  3 
 namespace VectorTools {

 template
 double compute_mean_value< 3 >
 (const Mapping< 3 , 3 >&,
 const DoFHandler< 3 , 3 >&,
 const Quadrature< 3 >&,
 const  BlockVector<float> &,
 const unsigned int);

 template
 double compute_mean_value< 3 >
 (const DoFHandler< 3 , 3 >&,
 const Quadrature< 3 >&,
 const  BlockVector<float> &,
 const unsigned int);

 }
#endif
 
#if  1  <=  1 
 namespace VectorTools {

 template
 double compute_mean_value< 1 >
 (const Mapping< 1 , 1 >&,
 const DoFHandler< 1 , 1 >&,
 const Quadrature< 1 >&,
 const  BlockVector<long double> &,
 const unsigned int);

 template
 double compute_mean_value< 1 >
 (const DoFHandler< 1 , 1 >&,
 const Quadrature< 1 >&,
 const  BlockVector<long double> &,
 const unsigned int);

 }
#endif
 
#if  1  <=  2 
 namespace VectorTools {

 template
 double compute_mean_value< 1 >
 (const Mapping< 1 , 2 >&,
 const DoFHandler< 1 , 2 >&,
 const Quadrature< 1 >&,
 const  BlockVector<long double> &,
 const unsigned int);

 template
 double compute_mean_value< 1 >
 (const DoFHandler< 1 , 2 >&,
 const Quadrature< 1 >&,
 const  BlockVector<long double> &,
 const unsigned int);

 }
#endif
 
#if  1  <=  3 
 namespace VectorTools {

 template
 double compute_mean_value< 1 >
 (const Mapping< 1 , 3 >&,
 const DoFHandler< 1 , 3 >&,
 const Quadrature< 1 >&,
 const  BlockVector<long double> &,
 const unsigned int);

 template
 double compute_mean_value< 1 >
 (const DoFHandler< 1 , 3 >&,
 const Quadrature< 1 >&,
 const  BlockVector<long double> &,
 const unsigned int);

 }
#endif
 
#if  2  <=  1 
 namespace VectorTools {

 template
 double compute_mean_value< 2 >
 (const Mapping< 2 , 1 >&,
 const DoFHandler< 2 , 1 >&,
 const Quadrature< 2 >&,
 const  BlockVector<long double> &,
 const unsigned int);

 template
 double compute_mean_value< 2 >
 (const DoFHandler< 2 , 1 >&,
 const Quadrature< 2 >&,
 const  BlockVector<long double> &,
 const unsigned int);

 }
#endif
 
#if  2  <=  2 
 namespace VectorTools {

 template
 double compute_mean_value< 2 >
 (const Mapping< 2 , 2 >&,
 const DoFHandler< 2 , 2 >&,
 const Quadrature< 2 >&,
 const  BlockVector<long double> &,
 const unsigned int);

 template
 double compute_mean_value< 2 >
 (const DoFHandler< 2 , 2 >&,
 const Quadrature< 2 >&,
 const  BlockVector<long double> &,
 const unsigned int);

 }
#endif
 
#if  2  <=  3 
 namespace VectorTools {

 template
 double compute_mean_value< 2 >
 (const Mapping< 2 , 3 >&,
 const DoFHandler< 2 , 3 >&,
 const Quadrature< 2 >&,
 const  BlockVector<long double> &,
 const unsigned int);

 template
 double compute_mean_value< 2 >
 (const DoFHandler< 2 , 3 >&,
 const Quadrature< 2 >&,
 const  BlockVector<long double> &,
 const unsigned int);

 }
#endif
 
#if  3  <=  1 
 namespace VectorTools {

 template
 double compute_mean_value< 3 >
 (const Mapping< 3 , 1 >&,
 const DoFHandler< 3 , 1 >&,
 const Quadrature< 3 >&,
 const  BlockVector<long double> &,
 const unsigned int);

 template
 double compute_mean_value< 3 >
 (const DoFHandler< 3 , 1 >&,
 const Quadrature< 3 >&,
 const  BlockVector<long double> &,
 const unsigned int);

 }
#endif
 
#if  3  <=  2 
 namespace VectorTools {

 template
 double compute_mean_value< 3 >
 (const Mapping< 3 , 2 >&,
 const DoFHandler< 3 , 2 >&,
 const Quadrature< 3 >&,
 const  BlockVector<long double> &,
 const unsigned int);

 template
 double compute_mean_value< 3 >
 (const DoFHandler< 3 , 2 >&,
 const Quadrature< 3 >&,
 const  BlockVector<long double> &,
 const unsigned int);

 }
#endif
 
#if  3  <=  3 
 namespace VectorTools {

 template
 double compute_mean_value< 3 >
 (const Mapping< 3 , 3 >&,
 const DoFHandler< 3 , 3 >&,
 const Quadrature< 3 >&,
 const  BlockVector<long double> &,
 const unsigned int);

 template
 double compute_mean_value< 3 >
 (const DoFHandler< 3 , 3 >&,
 const Quadrature< 3 >&,
 const  BlockVector<long double> &,
 const unsigned int);

 }
#endif
 
#if  1  <=  1 
 namespace VectorTools {

 template
 double compute_mean_value< 1 >
 (const Mapping< 1 , 1 >&,
 const DoFHandler< 1 , 1 >&,
 const Quadrature< 1 >&,
 const  parallel::distributed::Vector<double> &,
 const unsigned int);

 template
 double compute_mean_value< 1 >
 (const DoFHandler< 1 , 1 >&,
 const Quadrature< 1 >&,
 const  parallel::distributed::Vector<double> &,
 const unsigned int);

 }
#endif
 
#if  1  <=  2 
 namespace VectorTools {

 template
 double compute_mean_value< 1 >
 (const Mapping< 1 , 2 >&,
 const DoFHandler< 1 , 2 >&,
 const Quadrature< 1 >&,
 const  parallel::distributed::Vector<double> &,
 const unsigned int);

 template
 double compute_mean_value< 1 >
 (const DoFHandler< 1 , 2 >&,
 const Quadrature< 1 >&,
 const  parallel::distributed::Vector<double> &,
 const unsigned int);

 }
#endif
 
#if  1  <=  3 
 namespace VectorTools {

 template
 double compute_mean_value< 1 >
 (const Mapping< 1 , 3 >&,
 const DoFHandler< 1 , 3 >&,
 const Quadrature< 1 >&,
 const  parallel::distributed::Vector<double> &,
 const unsigned int);

 template
 double compute_mean_value< 1 >
 (const DoFHandler< 1 , 3 >&,
 const Quadrature< 1 >&,
 const  parallel::distributed::Vector<double> &,
 const unsigned int);

 }
#endif
 
#if  2  <=  1 
 namespace VectorTools {

 template
 double compute_mean_value< 2 >
 (const Mapping< 2 , 1 >&,
 const DoFHandler< 2 , 1 >&,
 const Quadrature< 2 >&,
 const  parallel::distributed::Vector<double> &,
 const unsigned int);

 template
 double compute_mean_value< 2 >
 (const DoFHandler< 2 , 1 >&,
 const Quadrature< 2 >&,
 const  parallel::distributed::Vector<double> &,
 const unsigned int);

 }
#endif
 
#if  2  <=  2 
 namespace VectorTools {

 template
 double compute_mean_value< 2 >
 (const Mapping< 2 , 2 >&,
 const DoFHandler< 2 , 2 >&,
 const Quadrature< 2 >&,
 const  parallel::distributed::Vector<double> &,
 const unsigned int);

 template
 double compute_mean_value< 2 >
 (const DoFHandler< 2 , 2 >&,
 const Quadrature< 2 >&,
 const  parallel::distributed::Vector<double> &,
 const unsigned int);

 }
#endif
 
#if  2  <=  3 
 namespace VectorTools {

 template
 double compute_mean_value< 2 >
 (const Mapping< 2 , 3 >&,
 const DoFHandler< 2 , 3 >&,
 const Quadrature< 2 >&,
 const  parallel::distributed::Vector<double> &,
 const unsigned int);

 template
 double compute_mean_value< 2 >
 (const DoFHandler< 2 , 3 >&,
 const Quadrature< 2 >&,
 const  parallel::distributed::Vector<double> &,
 const unsigned int);

 }
#endif
 
#if  3  <=  1 
 namespace VectorTools {

 template
 double compute_mean_value< 3 >
 (const Mapping< 3 , 1 >&,
 const DoFHandler< 3 , 1 >&,
 const Quadrature< 3 >&,
 const  parallel::distributed::Vector<double> &,
 const unsigned int);

 template
 double compute_mean_value< 3 >
 (const DoFHandler< 3 , 1 >&,
 const Quadrature< 3 >&,
 const  parallel::distributed::Vector<double> &,
 const unsigned int);

 }
#endif
 
#if  3  <=  2 
 namespace VectorTools {

 template
 double compute_mean_value< 3 >
 (const Mapping< 3 , 2 >&,
 const DoFHandler< 3 , 2 >&,
 const Quadrature< 3 >&,
 const  parallel::distributed::Vector<double> &,
 const unsigned int);

 template
 double compute_mean_value< 3 >
 (const DoFHandler< 3 , 2 >&,
 const Quadrature< 3 >&,
 const  parallel::distributed::Vector<double> &,
 const unsigned int);

 }
#endif
 
#if  3  <=  3 
 namespace VectorTools {

 template
 double compute_mean_value< 3 >
 (const Mapping< 3 , 3 >&,
 const DoFHandler< 3 , 3 >&,
 const Quadrature< 3 >&,
 const  parallel::distributed::Vector<double> &,
 const unsigned int);

 template
 double compute_mean_value< 3 >
 (const DoFHandler< 3 , 3 >&,
 const Quadrature< 3 >&,
 const  parallel::distributed::Vector<double> &,
 const unsigned int);

 }
#endif
 
#if  1  <=  1 
 namespace VectorTools {

 template
 double compute_mean_value< 1 >
 (const Mapping< 1 , 1 >&,
 const DoFHandler< 1 , 1 >&,
 const Quadrature< 1 >&,
 const  parallel::distributed::Vector<float> &,
 const unsigned int);

 template
 double compute_mean_value< 1 >
 (const DoFHandler< 1 , 1 >&,
 const Quadrature< 1 >&,
 const  parallel::distributed::Vector<float> &,
 const unsigned int);

 }
#endif
 
#if  1  <=  2 
 namespace VectorTools {

 template
 double compute_mean_value< 1 >
 (const Mapping< 1 , 2 >&,
 const DoFHandler< 1 , 2 >&,
 const Quadrature< 1 >&,
 const  parallel::distributed::Vector<float> &,
 const unsigned int);

 template
 double compute_mean_value< 1 >
 (const DoFHandler< 1 , 2 >&,
 const Quadrature< 1 >&,
 const  parallel::distributed::Vector<float> &,
 const unsigned int);

 }
#endif
 
#if  1  <=  3 
 namespace VectorTools {

 template
 double compute_mean_value< 1 >
 (const Mapping< 1 , 3 >&,
 const DoFHandler< 1 , 3 >&,
 const Quadrature< 1 >&,
 const  parallel::distributed::Vector<float> &,
 const unsigned int);

 template
 double compute_mean_value< 1 >
 (const DoFHandler< 1 , 3 >&,
 const Quadrature< 1 >&,
 const  parallel::distributed::Vector<float> &,
 const unsigned int);

 }
#endif
 
#if  2  <=  1 
 namespace VectorTools {

 template
 double compute_mean_value< 2 >
 (const Mapping< 2 , 1 >&,
 const DoFHandler< 2 , 1 >&,
 const Quadrature< 2 >&,
 const  parallel::distributed::Vector<float> &,
 const unsigned int);

 template
 double compute_mean_value< 2 >
 (const DoFHandler< 2 , 1 >&,
 const Quadrature< 2 >&,
 const  parallel::distributed::Vector<float> &,
 const unsigned int);

 }
#endif
 
#if  2  <=  2 
 namespace VectorTools {

 template
 double compute_mean_value< 2 >
 (const Mapping< 2 , 2 >&,
 const DoFHandler< 2 , 2 >&,
 const Quadrature< 2 >&,
 const  parallel::distributed::Vector<float> &,
 const unsigned int);

 template
 double compute_mean_value< 2 >
 (const DoFHandler< 2 , 2 >&,
 const Quadrature< 2 >&,
 const  parallel::distributed::Vector<float> &,
 const unsigned int);

 }
#endif
 
#if  2  <=  3 
 namespace VectorTools {

 template
 double compute_mean_value< 2 >
 (const Mapping< 2 , 3 >&,
 const DoFHandler< 2 , 3 >&,
 const Quadrature< 2 >&,
 const  parallel::distributed::Vector<float> &,
 const unsigned int);

 template
 double compute_mean_value< 2 >
 (const DoFHandler< 2 , 3 >&,
 const Quadrature< 2 >&,
 const  parallel::distributed::Vector<float> &,
 const unsigned int);

 }
#endif
 
#if  3  <=  1 
 namespace VectorTools {

 template
 double compute_mean_value< 3 >
 (const Mapping< 3 , 1 >&,
 const DoFHandler< 3 , 1 >&,
 const Quadrature< 3 >&,
 const  parallel::distributed::Vector<float> &,
 const unsigned int);

 template
 double compute_mean_value< 3 >
 (const DoFHandler< 3 , 1 >&,
 const Quadrature< 3 >&,
 const  parallel::distributed::Vector<float> &,
 const unsigned int);

 }
#endif
 
#if  3  <=  2 
 namespace VectorTools {

 template
 double compute_mean_value< 3 >
 (const Mapping< 3 , 2 >&,
 const DoFHandler< 3 , 2 >&,
 const Quadrature< 3 >&,
 const  parallel::distributed::Vector<float> &,
 const unsigned int);

 template
 double compute_mean_value< 3 >
 (const DoFHandler< 3 , 2 >&,
 const Quadrature< 3 >&,
 const  parallel::distributed::Vector<float> &,
 const unsigned int);

 }
#endif
 
#if  3  <=  3 
 namespace VectorTools {

 template
 double compute_mean_value< 3 >
 (const Mapping< 3 , 3 >&,
 const DoFHandler< 3 , 3 >&,
 const Quadrature< 3 >&,
 const  parallel::distributed::Vector<float> &,
 const unsigned int);

 template
 double compute_mean_value< 3 >
 (const DoFHandler< 3 , 3 >&,
 const Quadrature< 3 >&,
 const  parallel::distributed::Vector<float> &,
 const unsigned int);

 }
#endif
 
#if  1  <=  1 
 namespace VectorTools {

 template
 double compute_mean_value< 1 >
 (const Mapping< 1 , 1 >&,
 const DoFHandler< 1 , 1 >&,
 const Quadrature< 1 >&,
 const  parallel::distributed::Vector<long double> &,
 const unsigned int);

 template
 double compute_mean_value< 1 >
 (const DoFHandler< 1 , 1 >&,
 const Quadrature< 1 >&,
 const  parallel::distributed::Vector<long double> &,
 const unsigned int);

 }
#endif
 
#if  1  <=  2 
 namespace VectorTools {

 template
 double compute_mean_value< 1 >
 (const Mapping< 1 , 2 >&,
 const DoFHandler< 1 , 2 >&,
 const Quadrature< 1 >&,
 const  parallel::distributed::Vector<long double> &,
 const unsigned int);

 template
 double compute_mean_value< 1 >
 (const DoFHandler< 1 , 2 >&,
 const Quadrature< 1 >&,
 const  parallel::distributed::Vector<long double> &,
 const unsigned int);

 }
#endif
 
#if  1  <=  3 
 namespace VectorTools {

 template
 double compute_mean_value< 1 >
 (const Mapping< 1 , 3 >&,
 const DoFHandler< 1 , 3 >&,
 const Quadrature< 1 >&,
 const  parallel::distributed::Vector<long double> &,
 const unsigned int);

 template
 double compute_mean_value< 1 >
 (const DoFHandler< 1 , 3 >&,
 const Quadrature< 1 >&,
 const  parallel::distributed::Vector<long double> &,
 const unsigned int);

 }
#endif
 
#if  2  <=  1 
 namespace VectorTools {

 template
 double compute_mean_value< 2 >
 (const Mapping< 2 , 1 >&,
 const DoFHandler< 2 , 1 >&,
 const Quadrature< 2 >&,
 const  parallel::distributed::Vector<long double> &,
 const unsigned int);

 template
 double compute_mean_value< 2 >
 (const DoFHandler< 2 , 1 >&,
 const Quadrature< 2 >&,
 const  parallel::distributed::Vector<long double> &,
 const unsigned int);

 }
#endif
 
#if  2  <=  2 
 namespace VectorTools {

 template
 double compute_mean_value< 2 >
 (const Mapping< 2 , 2 >&,
 const DoFHandler< 2 , 2 >&,
 const Quadrature< 2 >&,
 const  parallel::distributed::Vector<long double> &,
 const unsigned int);

 template
 double compute_mean_value< 2 >
 (const DoFHandler< 2 , 2 >&,
 const Quadrature< 2 >&,
 const  parallel::distributed::Vector<long double> &,
 const unsigned int);

 }
#endif
 
#if  2  <=  3 
 namespace VectorTools {

 template
 double compute_mean_value< 2 >
 (const Mapping< 2 , 3 >&,
 const DoFHandler< 2 , 3 >&,
 const Quadrature< 2 >&,
 const  parallel::distributed::Vector<long double> &,
 const unsigned int);

 template
 double compute_mean_value< 2 >
 (const DoFHandler< 2 , 3 >&,
 const Quadrature< 2 >&,
 const  parallel::distributed::Vector<long double> &,
 const unsigned int);

 }
#endif
 
#if  3  <=  1 
 namespace VectorTools {

 template
 double compute_mean_value< 3 >
 (const Mapping< 3 , 1 >&,
 const DoFHandler< 3 , 1 >&,
 const Quadrature< 3 >&,
 const  parallel::distributed::Vector<long double> &,
 const unsigned int);

 template
 double compute_mean_value< 3 >
 (const DoFHandler< 3 , 1 >&,
 const Quadrature< 3 >&,
 const  parallel::distributed::Vector<long double> &,
 const unsigned int);

 }
#endif
 
#if  3  <=  2 
 namespace VectorTools {

 template
 double compute_mean_value< 3 >
 (const Mapping< 3 , 2 >&,
 const DoFHandler< 3 , 2 >&,
 const Quadrature< 3 >&,
 const  parallel::distributed::Vector<long double> &,
 const unsigned int);

 template
 double compute_mean_value< 3 >
 (const DoFHandler< 3 , 2 >&,
 const Quadrature< 3 >&,
 const  parallel::distributed::Vector<long double> &,
 const unsigned int);

 }
#endif
 
#if  3  <=  3 
 namespace VectorTools {

 template
 double compute_mean_value< 3 >
 (const Mapping< 3 , 3 >&,
 const DoFHandler< 3 , 3 >&,
 const Quadrature< 3 >&,
 const  parallel::distributed::Vector<long double> &,
 const unsigned int);

 template
 double compute_mean_value< 3 >
 (const DoFHandler< 3 , 3 >&,
 const Quadrature< 3 >&,
 const  parallel::distributed::Vector<long double> &,
 const unsigned int);

 }
#endif
 
#if  1  <=  1 
 namespace VectorTools {

 template
 double compute_mean_value< 1 >
 (const Mapping< 1 , 1 >&,
 const DoFHandler< 1 , 1 >&,
 const Quadrature< 1 >&,
 const  parallel::distributed::BlockVector<double> &,
 const unsigned int);

 template
 double compute_mean_value< 1 >
 (const DoFHandler< 1 , 1 >&,
 const Quadrature< 1 >&,
 const  parallel::distributed::BlockVector<double> &,
 const unsigned int);

 }
#endif
 
#if  1  <=  2 
 namespace VectorTools {

 template
 double compute_mean_value< 1 >
 (const Mapping< 1 , 2 >&,
 const DoFHandler< 1 , 2 >&,
 const Quadrature< 1 >&,
 const  parallel::distributed::BlockVector<double> &,
 const unsigned int);

 template
 double compute_mean_value< 1 >
 (const DoFHandler< 1 , 2 >&,
 const Quadrature< 1 >&,
 const  parallel::distributed::BlockVector<double> &,
 const unsigned int);

 }
#endif
 
#if  1  <=  3 
 namespace VectorTools {

 template
 double compute_mean_value< 1 >
 (const Mapping< 1 , 3 >&,
 const DoFHandler< 1 , 3 >&,
 const Quadrature< 1 >&,
 const  parallel::distributed::BlockVector<double> &,
 const unsigned int);

 template
 double compute_mean_value< 1 >
 (const DoFHandler< 1 , 3 >&,
 const Quadrature< 1 >&,
 const  parallel::distributed::BlockVector<double> &,
 const unsigned int);

 }
#endif
 
#if  2  <=  1 
 namespace VectorTools {

 template
 double compute_mean_value< 2 >
 (const Mapping< 2 , 1 >&,
 const DoFHandler< 2 , 1 >&,
 const Quadrature< 2 >&,
 const  parallel::distributed::BlockVector<double> &,
 const unsigned int);

 template
 double compute_mean_value< 2 >
 (const DoFHandler< 2 , 1 >&,
 const Quadrature< 2 >&,
 const  parallel::distributed::BlockVector<double> &,
 const unsigned int);

 }
#endif
 
#if  2  <=  2 
 namespace VectorTools {

 template
 double compute_mean_value< 2 >
 (const Mapping< 2 , 2 >&,
 const DoFHandler< 2 , 2 >&,
 const Quadrature< 2 >&,
 const  parallel::distributed::BlockVector<double> &,
 const unsigned int);

 template
 double compute_mean_value< 2 >
 (const DoFHandler< 2 , 2 >&,
 const Quadrature< 2 >&,
 const  parallel::distributed::BlockVector<double> &,
 const unsigned int);

 }
#endif
 
#if  2  <=  3 
 namespace VectorTools {

 template
 double compute_mean_value< 2 >
 (const Mapping< 2 , 3 >&,
 const DoFHandler< 2 , 3 >&,
 const Quadrature< 2 >&,
 const  parallel::distributed::BlockVector<double> &,
 const unsigned int);

 template
 double compute_mean_value< 2 >
 (const DoFHandler< 2 , 3 >&,
 const Quadrature< 2 >&,
 const  parallel::distributed::BlockVector<double> &,
 const unsigned int);

 }
#endif
 
#if  3  <=  1 
 namespace VectorTools {

 template
 double compute_mean_value< 3 >
 (const Mapping< 3 , 1 >&,
 const DoFHandler< 3 , 1 >&,
 const Quadrature< 3 >&,
 const  parallel::distributed::BlockVector<double> &,
 const unsigned int);

 template
 double compute_mean_value< 3 >
 (const DoFHandler< 3 , 1 >&,
 const Quadrature< 3 >&,
 const  parallel::distributed::BlockVector<double> &,
 const unsigned int);

 }
#endif
 
#if  3  <=  2 
 namespace VectorTools {

 template
 double compute_mean_value< 3 >
 (const Mapping< 3 , 2 >&,
 const DoFHandler< 3 , 2 >&,
 const Quadrature< 3 >&,
 const  parallel::distributed::BlockVector<double> &,
 const unsigned int);

 template
 double compute_mean_value< 3 >
 (const DoFHandler< 3 , 2 >&,
 const Quadrature< 3 >&,
 const  parallel::distributed::BlockVector<double> &,
 const unsigned int);

 }
#endif
 
#if  3  <=  3 
 namespace VectorTools {

 template
 double compute_mean_value< 3 >
 (const Mapping< 3 , 3 >&,
 const DoFHandler< 3 , 3 >&,
 const Quadrature< 3 >&,
 const  parallel::distributed::BlockVector<double> &,
 const unsigned int);

 template
 double compute_mean_value< 3 >
 (const DoFHandler< 3 , 3 >&,
 const Quadrature< 3 >&,
 const  parallel::distributed::BlockVector<double> &,
 const unsigned int);

 }
#endif
 
#if  1  <=  1 
 namespace VectorTools {

 template
 double compute_mean_value< 1 >
 (const Mapping< 1 , 1 >&,
 const DoFHandler< 1 , 1 >&,
 const Quadrature< 1 >&,
 const  parallel::distributed::BlockVector<float> &,
 const unsigned int);

 template
 double compute_mean_value< 1 >
 (const DoFHandler< 1 , 1 >&,
 const Quadrature< 1 >&,
 const  parallel::distributed::BlockVector<float> &,
 const unsigned int);

 }
#endif
 
#if  1  <=  2 
 namespace VectorTools {

 template
 double compute_mean_value< 1 >
 (const Mapping< 1 , 2 >&,
 const DoFHandler< 1 , 2 >&,
 const Quadrature< 1 >&,
 const  parallel::distributed::BlockVector<float> &,
 const unsigned int);

 template
 double compute_mean_value< 1 >
 (const DoFHandler< 1 , 2 >&,
 const Quadrature< 1 >&,
 const  parallel::distributed::BlockVector<float> &,
 const unsigned int);

 }
#endif
 
#if  1  <=  3 
 namespace VectorTools {

 template
 double compute_mean_value< 1 >
 (const Mapping< 1 , 3 >&,
 const DoFHandler< 1 , 3 >&,
 const Quadrature< 1 >&,
 const  parallel::distributed::BlockVector<float> &,
 const unsigned int);

 template
 double compute_mean_value< 1 >
 (const DoFHandler< 1 , 3 >&,
 const Quadrature< 1 >&,
 const  parallel::distributed::BlockVector<float> &,
 const unsigned int);

 }
#endif
 
#if  2  <=  1 
 namespace VectorTools {

 template
 double compute_mean_value< 2 >
 (const Mapping< 2 , 1 >&,
 const DoFHandler< 2 , 1 >&,
 const Quadrature< 2 >&,
 const  parallel::distributed::BlockVector<float> &,
 const unsigned int);

 template
 double compute_mean_value< 2 >
 (const DoFHandler< 2 , 1 >&,
 const Quadrature< 2 >&,
 const  parallel::distributed::BlockVector<float> &,
 const unsigned int);

 }
#endif
 
#if  2  <=  2 
 namespace VectorTools {

 template
 double compute_mean_value< 2 >
 (const Mapping< 2 , 2 >&,
 const DoFHandler< 2 , 2 >&,
 const Quadrature< 2 >&,
 const  parallel::distributed::BlockVector<float> &,
 const unsigned int);

 template
 double compute_mean_value< 2 >
 (const DoFHandler< 2 , 2 >&,
 const Quadrature< 2 >&,
 const  parallel::distributed::BlockVector<float> &,
 const unsigned int);

 }
#endif
 
#if  2  <=  3 
 namespace VectorTools {

 template
 double compute_mean_value< 2 >
 (const Mapping< 2 , 3 >&,
 const DoFHandler< 2 , 3 >&,
 const Quadrature< 2 >&,
 const  parallel::distributed::BlockVector<float> &,
 const unsigned int);

 template
 double compute_mean_value< 2 >
 (const DoFHandler< 2 , 3 >&,
 const Quadrature< 2 >&,
 const  parallel::distributed::BlockVector<float> &,
 const unsigned int);

 }
#endif
 
#if  3  <=  1 
 namespace VectorTools {

 template
 double compute_mean_value< 3 >
 (const Mapping< 3 , 1 >&,
 const DoFHandler< 3 , 1 >&,
 const Quadrature< 3 >&,
 const  parallel::distributed::BlockVector<float> &,
 const unsigned int);

 template
 double compute_mean_value< 3 >
 (const DoFHandler< 3 , 1 >&,
 const Quadrature< 3 >&,
 const  parallel::distributed::BlockVector<float> &,
 const unsigned int);

 }
#endif
 
#if  3  <=  2 
 namespace VectorTools {

 template
 double compute_mean_value< 3 >
 (const Mapping< 3 , 2 >&,
 const DoFHandler< 3 , 2 >&,
 const Quadrature< 3 >&,
 const  parallel::distributed::BlockVector<float> &,
 const unsigned int);

 template
 double compute_mean_value< 3 >
 (const DoFHandler< 3 , 2 >&,
 const Quadrature< 3 >&,
 const  parallel::distributed::BlockVector<float> &,
 const unsigned int);

 }
#endif
 
#if  3  <=  3 
 namespace VectorTools {

 template
 double compute_mean_value< 3 >
 (const Mapping< 3 , 3 >&,
 const DoFHandler< 3 , 3 >&,
 const Quadrature< 3 >&,
 const  parallel::distributed::BlockVector<float> &,
 const unsigned int);

 template
 double compute_mean_value< 3 >
 (const DoFHandler< 3 , 3 >&,
 const Quadrature< 3 >&,
 const  parallel::distributed::BlockVector<float> &,
 const unsigned int);

 }
#endif
 
#if  1  <=  1 
 namespace VectorTools {

 template
 double compute_mean_value< 1 >
 (const Mapping< 1 , 1 >&,
 const DoFHandler< 1 , 1 >&,
 const Quadrature< 1 >&,
 const  parallel::distributed::BlockVector<long double> &,
 const unsigned int);

 template
 double compute_mean_value< 1 >
 (const DoFHandler< 1 , 1 >&,
 const Quadrature< 1 >&,
 const  parallel::distributed::BlockVector<long double> &,
 const unsigned int);

 }
#endif
 
#if  1  <=  2 
 namespace VectorTools {

 template
 double compute_mean_value< 1 >
 (const Mapping< 1 , 2 >&,
 const DoFHandler< 1 , 2 >&,
 const Quadrature< 1 >&,
 const  parallel::distributed::BlockVector<long double> &,
 const unsigned int);

 template
 double compute_mean_value< 1 >
 (const DoFHandler< 1 , 2 >&,
 const Quadrature< 1 >&,
 const  parallel::distributed::BlockVector<long double> &,
 const unsigned int);

 }
#endif
 
#if  1  <=  3 
 namespace VectorTools {

 template
 double compute_mean_value< 1 >
 (const Mapping< 1 , 3 >&,
 const DoFHandler< 1 , 3 >&,
 const Quadrature< 1 >&,
 const  parallel::distributed::BlockVector<long double> &,
 const unsigned int);

 template
 double compute_mean_value< 1 >
 (const DoFHandler< 1 , 3 >&,
 const Quadrature< 1 >&,
 const  parallel::distributed::BlockVector<long double> &,
 const unsigned int);

 }
#endif
 
#if  2  <=  1 
 namespace VectorTools {

 template
 double compute_mean_value< 2 >
 (const Mapping< 2 , 1 >&,
 const DoFHandler< 2 , 1 >&,
 const Quadrature< 2 >&,
 const  parallel::distributed::BlockVector<long double> &,
 const unsigned int);

 template
 double compute_mean_value< 2 >
 (const DoFHandler< 2 , 1 >&,
 const Quadrature< 2 >&,
 const  parallel::distributed::BlockVector<long double> &,
 const unsigned int);

 }
#endif
 
#if  2  <=  2 
 namespace VectorTools {

 template
 double compute_mean_value< 2 >
 (const Mapping< 2 , 2 >&,
 const DoFHandler< 2 , 2 >&,
 const Quadrature< 2 >&,
 const  parallel::distributed::BlockVector<long double> &,
 const unsigned int);

 template
 double compute_mean_value< 2 >
 (const DoFHandler< 2 , 2 >&,
 const Quadrature< 2 >&,
 const  parallel::distributed::BlockVector<long double> &,
 const unsigned int);

 }
#endif
 
#if  2  <=  3 
 namespace VectorTools {

 template
 double compute_mean_value< 2 >
 (const Mapping< 2 , 3 >&,
 const DoFHandler< 2 , 3 >&,
 const Quadrature< 2 >&,
 const  parallel::distributed::BlockVector<long double> &,
 const unsigned int);

 template
 double compute_mean_value< 2 >
 (const DoFHandler< 2 , 3 >&,
 const Quadrature< 2 >&,
 const  parallel::distributed::BlockVector<long double> &,
 const unsigned int);

 }
#endif
 
#if  3  <=  1 
 namespace VectorTools {

 template
 double compute_mean_value< 3 >
 (const Mapping< 3 , 1 >&,
 const DoFHandler< 3 , 1 >&,
 const Quadrature< 3 >&,
 const  parallel::distributed::BlockVector<long double> &,
 const unsigned int);

 template
 double compute_mean_value< 3 >
 (const DoFHandler< 3 , 1 >&,
 const Quadrature< 3 >&,
 const  parallel::distributed::BlockVector<long double> &,
 const unsigned int);

 }
#endif
 
#if  3  <=  2 
 namespace VectorTools {

 template
 double compute_mean_value< 3 >
 (const Mapping< 3 , 2 >&,
 const DoFHandler< 3 , 2 >&,
 const Quadrature< 3 >&,
 const  parallel::distributed::BlockVector<long double> &,
 const unsigned int);

 template
 double compute_mean_value< 3 >
 (const DoFHandler< 3 , 2 >&,
 const Quadrature< 3 >&,
 const  parallel::distributed::BlockVector<long double> &,
 const unsigned int);

 }
#endif
 
#if  3  <=  3 
 namespace VectorTools {

 template
 double compute_mean_value< 3 >
 (const Mapping< 3 , 3 >&,
 const DoFHandler< 3 , 3 >&,
 const Quadrature< 3 >&,
 const  parallel::distributed::BlockVector<long double> &,
 const unsigned int);

 template
 double compute_mean_value< 3 >
 (const DoFHandler< 3 , 3 >&,
 const Quadrature< 3 >&,
 const  parallel::distributed::BlockVector<long double> &,
 const unsigned int);

 }
#endif
 
namespace VectorTools {
 template
 void subtract_mean_value( Vector<double>  &, const std::vector<bool> &);
 }

namespace VectorTools {
 template
 void subtract_mean_value( Vector<float>  &, const std::vector<bool> &);
 }

namespace VectorTools {
 template
 void subtract_mean_value( Vector<long double>  &, const std::vector<bool> &);
 }

namespace VectorTools {
 template
 void subtract_mean_value( BlockVector<double>  &, const std::vector<bool> &);
 }

namespace VectorTools {
 template
 void subtract_mean_value( BlockVector<float>  &, const std::vector<bool> &);
 }

namespace VectorTools {
 template
 void subtract_mean_value( BlockVector<long double>  &, const std::vector<bool> &);
 }

namespace VectorTools {
 template
 void subtract_mean_value( parallel::distributed::Vector<double>  &, const std::vector<bool> &);
 }

namespace VectorTools {
 template
 void subtract_mean_value( parallel::distributed::Vector<float>  &, const std::vector<bool> &);
 }

namespace VectorTools {
 template
 void subtract_mean_value( parallel::distributed::Vector<long double>  &, const std::vector<bool> &);
 }

namespace VectorTools {
 template
 void subtract_mean_value( parallel::distributed::BlockVector<double>  &, const std::vector<bool> &);
 }

namespace VectorTools {
 template
 void subtract_mean_value( parallel::distributed::BlockVector<float>  &, const std::vector<bool> &);
 }

namespace VectorTools {
 template
 void subtract_mean_value( parallel::distributed::BlockVector<long double>  &, const std::vector<bool> &);
 }

