namespace VectorTools {
 template
 void interpolate_boundary_values (
 const MGDoFHandler< 1 > &,
 const types::boundary_id,
 const Function< 1 > &,
 ConstraintMatrix&,
 const ComponentMask &);

 template
 void interpolate_boundary_values (
 const MGDoFHandler< 1 > &,
 const types::boundary_id,
 const Function< 1 > &,
 std::map<types::global_dof_index,double> &,
 const ComponentMask &);
 }

namespace VectorTools {
 template
 void interpolate_boundary_values (
 const MGDoFHandler< 2 > &,
 const types::boundary_id,
 const Function< 2 > &,
 ConstraintMatrix&,
 const ComponentMask &);

 template
 void interpolate_boundary_values (
 const MGDoFHandler< 2 > &,
 const types::boundary_id,
 const Function< 2 > &,
 std::map<types::global_dof_index,double> &,
 const ComponentMask &);
 }

namespace VectorTools {
 template
 void interpolate_boundary_values (
 const MGDoFHandler< 3 > &,
 const types::boundary_id,
 const Function< 3 > &,
 ConstraintMatrix&,
 const ComponentMask &);

 template
 void interpolate_boundary_values (
 const MGDoFHandler< 3 > &,
 const types::boundary_id,
 const Function< 3 > &,
 std::map<types::global_dof_index,double> &,
 const ComponentMask &);
 }

#if  1  <=  1 
 namespace VectorTools {
 template
 void interpolate_boundary_values
 (const Mapping< 1 , 1 > &,
 const  DoFHandler < 1 , 1 > &,
 const FunctionMap< 1 >::type &,
 std::map<types::global_dof_index,double> &,
 const ComponentMask &);

 template
 void interpolate_boundary_values
 (const Mapping< 1 , 1 > &,
 const  DoFHandler < 1 , 1 > &,
 const types::boundary_id,
 const Function< 1 > &,
 std::map<types::global_dof_index,double> &,
 const ComponentMask &);

 template
 void interpolate_boundary_values (
 const  DoFHandler < 1 , 1 > &,
 const types::boundary_id,
 const Function< 1 > &,
 std::map<types::global_dof_index,double> &,
 const ComponentMask &);

 template
 void interpolate_boundary_values
 (const  DoFHandler < 1 , 1 > &,
 const FunctionMap< 1 >::type &,
 std::map<types::global_dof_index,double> &,
 const ComponentMask &);

 template
 void interpolate_boundary_values (
 const Mapping< 1 , 1 > &,
 const  DoFHandler < 1 , 1 > &,
 const FunctionMap< 1 >::type &,
 ConstraintMatrix &,
 const ComponentMask &);

 template
 void interpolate_boundary_values
 (const Mapping< 1 , 1 > &,
 const  DoFHandler < 1 , 1 > &,
 const types::boundary_id,
 const Function< 1 > &,
 ConstraintMatrix &,
 const ComponentMask &);

 template
 void interpolate_boundary_values (
 const  DoFHandler < 1 , 1 > &,
 const types::boundary_id,
 const Function< 1 > &,
 ConstraintMatrix &,
 const ComponentMask &);

 template
 void interpolate_boundary_values (
 const  DoFHandler < 1 , 1 > &,
 const FunctionMap< 1 >::type &,
 ConstraintMatrix &,
 const ComponentMask &);
 }
#endif

#if  1  <=  1 
 namespace VectorTools {
 template
 void interpolate_boundary_values
 (const Mapping< 1 , 1 > &,
 const  hp::DoFHandler < 1 , 1 > &,
 const FunctionMap< 1 >::type &,
 std::map<types::global_dof_index,double> &,
 const ComponentMask &);

 template
 void interpolate_boundary_values
 (const Mapping< 1 , 1 > &,
 const  hp::DoFHandler < 1 , 1 > &,
 const types::boundary_id,
 const Function< 1 > &,
 std::map<types::global_dof_index,double> &,
 const ComponentMask &);

 template
 void interpolate_boundary_values (
 const  hp::DoFHandler < 1 , 1 > &,
 const types::boundary_id,
 const Function< 1 > &,
 std::map<types::global_dof_index,double> &,
 const ComponentMask &);

 template
 void interpolate_boundary_values
 (const  hp::DoFHandler < 1 , 1 > &,
 const FunctionMap< 1 >::type &,
 std::map<types::global_dof_index,double> &,
 const ComponentMask &);

 template
 void interpolate_boundary_values (
 const Mapping< 1 , 1 > &,
 const  hp::DoFHandler < 1 , 1 > &,
 const FunctionMap< 1 >::type &,
 ConstraintMatrix &,
 const ComponentMask &);

 template
 void interpolate_boundary_values
 (const Mapping< 1 , 1 > &,
 const  hp::DoFHandler < 1 , 1 > &,
 const types::boundary_id,
 const Function< 1 > &,
 ConstraintMatrix &,
 const ComponentMask &);

 template
 void interpolate_boundary_values (
 const  hp::DoFHandler < 1 , 1 > &,
 const types::boundary_id,
 const Function< 1 > &,
 ConstraintMatrix &,
 const ComponentMask &);

 template
 void interpolate_boundary_values (
 const  hp::DoFHandler < 1 , 1 > &,
 const FunctionMap< 1 >::type &,
 ConstraintMatrix &,
 const ComponentMask &);
 }
#endif

#if  1  <=  2 
 namespace VectorTools {
 template
 void interpolate_boundary_values
 (const Mapping< 1 , 2 > &,
 const  DoFHandler < 1 , 2 > &,
 const FunctionMap< 2 >::type &,
 std::map<types::global_dof_index,double> &,
 const ComponentMask &);

 template
 void interpolate_boundary_values
 (const Mapping< 1 , 2 > &,
 const  DoFHandler < 1 , 2 > &,
 const types::boundary_id,
 const Function< 2 > &,
 std::map<types::global_dof_index,double> &,
 const ComponentMask &);

 template
 void interpolate_boundary_values (
 const  DoFHandler < 1 , 2 > &,
 const types::boundary_id,
 const Function< 2 > &,
 std::map<types::global_dof_index,double> &,
 const ComponentMask &);

 template
 void interpolate_boundary_values
 (const  DoFHandler < 1 , 2 > &,
 const FunctionMap< 2 >::type &,
 std::map<types::global_dof_index,double> &,
 const ComponentMask &);

 template
 void interpolate_boundary_values (
 const Mapping< 1 , 2 > &,
 const  DoFHandler < 1 , 2 > &,
 const FunctionMap< 2 >::type &,
 ConstraintMatrix &,
 const ComponentMask &);

 template
 void interpolate_boundary_values
 (const Mapping< 1 , 2 > &,
 const  DoFHandler < 1 , 2 > &,
 const types::boundary_id,
 const Function< 2 > &,
 ConstraintMatrix &,
 const ComponentMask &);

 template
 void interpolate_boundary_values (
 const  DoFHandler < 1 , 2 > &,
 const types::boundary_id,
 const Function< 2 > &,
 ConstraintMatrix &,
 const ComponentMask &);

 template
 void interpolate_boundary_values (
 const  DoFHandler < 1 , 2 > &,
 const FunctionMap< 2 >::type &,
 ConstraintMatrix &,
 const ComponentMask &);
 }
#endif

#if  1  <=  2 
 namespace VectorTools {
 template
 void interpolate_boundary_values
 (const Mapping< 1 , 2 > &,
 const  hp::DoFHandler < 1 , 2 > &,
 const FunctionMap< 2 >::type &,
 std::map<types::global_dof_index,double> &,
 const ComponentMask &);

 template
 void interpolate_boundary_values
 (const Mapping< 1 , 2 > &,
 const  hp::DoFHandler < 1 , 2 > &,
 const types::boundary_id,
 const Function< 2 > &,
 std::map<types::global_dof_index,double> &,
 const ComponentMask &);

 template
 void interpolate_boundary_values (
 const  hp::DoFHandler < 1 , 2 > &,
 const types::boundary_id,
 const Function< 2 > &,
 std::map<types::global_dof_index,double> &,
 const ComponentMask &);

 template
 void interpolate_boundary_values
 (const  hp::DoFHandler < 1 , 2 > &,
 const FunctionMap< 2 >::type &,
 std::map<types::global_dof_index,double> &,
 const ComponentMask &);

 template
 void interpolate_boundary_values (
 const Mapping< 1 , 2 > &,
 const  hp::DoFHandler < 1 , 2 > &,
 const FunctionMap< 2 >::type &,
 ConstraintMatrix &,
 const ComponentMask &);

 template
 void interpolate_boundary_values
 (const Mapping< 1 , 2 > &,
 const  hp::DoFHandler < 1 , 2 > &,
 const types::boundary_id,
 const Function< 2 > &,
 ConstraintMatrix &,
 const ComponentMask &);

 template
 void interpolate_boundary_values (
 const  hp::DoFHandler < 1 , 2 > &,
 const types::boundary_id,
 const Function< 2 > &,
 ConstraintMatrix &,
 const ComponentMask &);

 template
 void interpolate_boundary_values (
 const  hp::DoFHandler < 1 , 2 > &,
 const FunctionMap< 2 >::type &,
 ConstraintMatrix &,
 const ComponentMask &);
 }
#endif

#if  1  <=  3 
 namespace VectorTools {
 template
 void interpolate_boundary_values
 (const Mapping< 1 , 3 > &,
 const  DoFHandler < 1 , 3 > &,
 const FunctionMap< 3 >::type &,
 std::map<types::global_dof_index,double> &,
 const ComponentMask &);

 template
 void interpolate_boundary_values
 (const Mapping< 1 , 3 > &,
 const  DoFHandler < 1 , 3 > &,
 const types::boundary_id,
 const Function< 3 > &,
 std::map<types::global_dof_index,double> &,
 const ComponentMask &);

 template
 void interpolate_boundary_values (
 const  DoFHandler < 1 , 3 > &,
 const types::boundary_id,
 const Function< 3 > &,
 std::map<types::global_dof_index,double> &,
 const ComponentMask &);

 template
 void interpolate_boundary_values
 (const  DoFHandler < 1 , 3 > &,
 const FunctionMap< 3 >::type &,
 std::map<types::global_dof_index,double> &,
 const ComponentMask &);

 template
 void interpolate_boundary_values (
 const Mapping< 1 , 3 > &,
 const  DoFHandler < 1 , 3 > &,
 const FunctionMap< 3 >::type &,
 ConstraintMatrix &,
 const ComponentMask &);

 template
 void interpolate_boundary_values
 (const Mapping< 1 , 3 > &,
 const  DoFHandler < 1 , 3 > &,
 const types::boundary_id,
 const Function< 3 > &,
 ConstraintMatrix &,
 const ComponentMask &);

 template
 void interpolate_boundary_values (
 const  DoFHandler < 1 , 3 > &,
 const types::boundary_id,
 const Function< 3 > &,
 ConstraintMatrix &,
 const ComponentMask &);

 template
 void interpolate_boundary_values (
 const  DoFHandler < 1 , 3 > &,
 const FunctionMap< 3 >::type &,
 ConstraintMatrix &,
 const ComponentMask &);
 }
#endif

#if  1  <=  3 
 namespace VectorTools {
 template
 void interpolate_boundary_values
 (const Mapping< 1 , 3 > &,
 const  hp::DoFHandler < 1 , 3 > &,
 const FunctionMap< 3 >::type &,
 std::map<types::global_dof_index,double> &,
 const ComponentMask &);

 template
 void interpolate_boundary_values
 (const Mapping< 1 , 3 > &,
 const  hp::DoFHandler < 1 , 3 > &,
 const types::boundary_id,
 const Function< 3 > &,
 std::map<types::global_dof_index,double> &,
 const ComponentMask &);

 template
 void interpolate_boundary_values (
 const  hp::DoFHandler < 1 , 3 > &,
 const types::boundary_id,
 const Function< 3 > &,
 std::map<types::global_dof_index,double> &,
 const ComponentMask &);

 template
 void interpolate_boundary_values
 (const  hp::DoFHandler < 1 , 3 > &,
 const FunctionMap< 3 >::type &,
 std::map<types::global_dof_index,double> &,
 const ComponentMask &);

 template
 void interpolate_boundary_values (
 const Mapping< 1 , 3 > &,
 const  hp::DoFHandler < 1 , 3 > &,
 const FunctionMap< 3 >::type &,
 ConstraintMatrix &,
 const ComponentMask &);

 template
 void interpolate_boundary_values
 (const Mapping< 1 , 3 > &,
 const  hp::DoFHandler < 1 , 3 > &,
 const types::boundary_id,
 const Function< 3 > &,
 ConstraintMatrix &,
 const ComponentMask &);

 template
 void interpolate_boundary_values (
 const  hp::DoFHandler < 1 , 3 > &,
 const types::boundary_id,
 const Function< 3 > &,
 ConstraintMatrix &,
 const ComponentMask &);

 template
 void interpolate_boundary_values (
 const  hp::DoFHandler < 1 , 3 > &,
 const FunctionMap< 3 >::type &,
 ConstraintMatrix &,
 const ComponentMask &);
 }
#endif

#if  2  <=  1 
 namespace VectorTools {
 template
 void interpolate_boundary_values
 (const Mapping< 2 , 1 > &,
 const  DoFHandler < 2 , 1 > &,
 const FunctionMap< 1 >::type &,
 std::map<types::global_dof_index,double> &,
 const ComponentMask &);

 template
 void interpolate_boundary_values
 (const Mapping< 2 , 1 > &,
 const  DoFHandler < 2 , 1 > &,
 const types::boundary_id,
 const Function< 1 > &,
 std::map<types::global_dof_index,double> &,
 const ComponentMask &);

 template
 void interpolate_boundary_values (
 const  DoFHandler < 2 , 1 > &,
 const types::boundary_id,
 const Function< 1 > &,
 std::map<types::global_dof_index,double> &,
 const ComponentMask &);

 template
 void interpolate_boundary_values
 (const  DoFHandler < 2 , 1 > &,
 const FunctionMap< 1 >::type &,
 std::map<types::global_dof_index,double> &,
 const ComponentMask &);

 template
 void interpolate_boundary_values (
 const Mapping< 2 , 1 > &,
 const  DoFHandler < 2 , 1 > &,
 const FunctionMap< 1 >::type &,
 ConstraintMatrix &,
 const ComponentMask &);

 template
 void interpolate_boundary_values
 (const Mapping< 2 , 1 > &,
 const  DoFHandler < 2 , 1 > &,
 const types::boundary_id,
 const Function< 1 > &,
 ConstraintMatrix &,
 const ComponentMask &);

 template
 void interpolate_boundary_values (
 const  DoFHandler < 2 , 1 > &,
 const types::boundary_id,
 const Function< 1 > &,
 ConstraintMatrix &,
 const ComponentMask &);

 template
 void interpolate_boundary_values (
 const  DoFHandler < 2 , 1 > &,
 const FunctionMap< 1 >::type &,
 ConstraintMatrix &,
 const ComponentMask &);
 }
#endif

#if  2  <=  1 
 namespace VectorTools {
 template
 void interpolate_boundary_values
 (const Mapping< 2 , 1 > &,
 const  hp::DoFHandler < 2 , 1 > &,
 const FunctionMap< 1 >::type &,
 std::map<types::global_dof_index,double> &,
 const ComponentMask &);

 template
 void interpolate_boundary_values
 (const Mapping< 2 , 1 > &,
 const  hp::DoFHandler < 2 , 1 > &,
 const types::boundary_id,
 const Function< 1 > &,
 std::map<types::global_dof_index,double> &,
 const ComponentMask &);

 template
 void interpolate_boundary_values (
 const  hp::DoFHandler < 2 , 1 > &,
 const types::boundary_id,
 const Function< 1 > &,
 std::map<types::global_dof_index,double> &,
 const ComponentMask &);

 template
 void interpolate_boundary_values
 (const  hp::DoFHandler < 2 , 1 > &,
 const FunctionMap< 1 >::type &,
 std::map<types::global_dof_index,double> &,
 const ComponentMask &);

 template
 void interpolate_boundary_values (
 const Mapping< 2 , 1 > &,
 const  hp::DoFHandler < 2 , 1 > &,
 const FunctionMap< 1 >::type &,
 ConstraintMatrix &,
 const ComponentMask &);

 template
 void interpolate_boundary_values
 (const Mapping< 2 , 1 > &,
 const  hp::DoFHandler < 2 , 1 > &,
 const types::boundary_id,
 const Function< 1 > &,
 ConstraintMatrix &,
 const ComponentMask &);

 template
 void interpolate_boundary_values (
 const  hp::DoFHandler < 2 , 1 > &,
 const types::boundary_id,
 const Function< 1 > &,
 ConstraintMatrix &,
 const ComponentMask &);

 template
 void interpolate_boundary_values (
 const  hp::DoFHandler < 2 , 1 > &,
 const FunctionMap< 1 >::type &,
 ConstraintMatrix &,
 const ComponentMask &);
 }
#endif

#if  2  <=  2 
 namespace VectorTools {
 template
 void interpolate_boundary_values
 (const Mapping< 2 , 2 > &,
 const  DoFHandler < 2 , 2 > &,
 const FunctionMap< 2 >::type &,
 std::map<types::global_dof_index,double> &,
 const ComponentMask &);

 template
 void interpolate_boundary_values
 (const Mapping< 2 , 2 > &,
 const  DoFHandler < 2 , 2 > &,
 const types::boundary_id,
 const Function< 2 > &,
 std::map<types::global_dof_index,double> &,
 const ComponentMask &);

 template
 void interpolate_boundary_values (
 const  DoFHandler < 2 , 2 > &,
 const types::boundary_id,
 const Function< 2 > &,
 std::map<types::global_dof_index,double> &,
 const ComponentMask &);

 template
 void interpolate_boundary_values
 (const  DoFHandler < 2 , 2 > &,
 const FunctionMap< 2 >::type &,
 std::map<types::global_dof_index,double> &,
 const ComponentMask &);

 template
 void interpolate_boundary_values (
 const Mapping< 2 , 2 > &,
 const  DoFHandler < 2 , 2 > &,
 const FunctionMap< 2 >::type &,
 ConstraintMatrix &,
 const ComponentMask &);

 template
 void interpolate_boundary_values
 (const Mapping< 2 , 2 > &,
 const  DoFHandler < 2 , 2 > &,
 const types::boundary_id,
 const Function< 2 > &,
 ConstraintMatrix &,
 const ComponentMask &);

 template
 void interpolate_boundary_values (
 const  DoFHandler < 2 , 2 > &,
 const types::boundary_id,
 const Function< 2 > &,
 ConstraintMatrix &,
 const ComponentMask &);

 template
 void interpolate_boundary_values (
 const  DoFHandler < 2 , 2 > &,
 const FunctionMap< 2 >::type &,
 ConstraintMatrix &,
 const ComponentMask &);
 }
#endif

#if  2  <=  2 
 namespace VectorTools {
 template
 void interpolate_boundary_values
 (const Mapping< 2 , 2 > &,
 const  hp::DoFHandler < 2 , 2 > &,
 const FunctionMap< 2 >::type &,
 std::map<types::global_dof_index,double> &,
 const ComponentMask &);

 template
 void interpolate_boundary_values
 (const Mapping< 2 , 2 > &,
 const  hp::DoFHandler < 2 , 2 > &,
 const types::boundary_id,
 const Function< 2 > &,
 std::map<types::global_dof_index,double> &,
 const ComponentMask &);

 template
 void interpolate_boundary_values (
 const  hp::DoFHandler < 2 , 2 > &,
 const types::boundary_id,
 const Function< 2 > &,
 std::map<types::global_dof_index,double> &,
 const ComponentMask &);

 template
 void interpolate_boundary_values
 (const  hp::DoFHandler < 2 , 2 > &,
 const FunctionMap< 2 >::type &,
 std::map<types::global_dof_index,double> &,
 const ComponentMask &);

 template
 void interpolate_boundary_values (
 const Mapping< 2 , 2 > &,
 const  hp::DoFHandler < 2 , 2 > &,
 const FunctionMap< 2 >::type &,
 ConstraintMatrix &,
 const ComponentMask &);

 template
 void interpolate_boundary_values
 (const Mapping< 2 , 2 > &,
 const  hp::DoFHandler < 2 , 2 > &,
 const types::boundary_id,
 const Function< 2 > &,
 ConstraintMatrix &,
 const ComponentMask &);

 template
 void interpolate_boundary_values (
 const  hp::DoFHandler < 2 , 2 > &,
 const types::boundary_id,
 const Function< 2 > &,
 ConstraintMatrix &,
 const ComponentMask &);

 template
 void interpolate_boundary_values (
 const  hp::DoFHandler < 2 , 2 > &,
 const FunctionMap< 2 >::type &,
 ConstraintMatrix &,
 const ComponentMask &);
 }
#endif

#if  2  <=  3 
 namespace VectorTools {
 template
 void interpolate_boundary_values
 (const Mapping< 2 , 3 > &,
 const  DoFHandler < 2 , 3 > &,
 const FunctionMap< 3 >::type &,
 std::map<types::global_dof_index,double> &,
 const ComponentMask &);

 template
 void interpolate_boundary_values
 (const Mapping< 2 , 3 > &,
 const  DoFHandler < 2 , 3 > &,
 const types::boundary_id,
 const Function< 3 > &,
 std::map<types::global_dof_index,double> &,
 const ComponentMask &);

 template
 void interpolate_boundary_values (
 const  DoFHandler < 2 , 3 > &,
 const types::boundary_id,
 const Function< 3 > &,
 std::map<types::global_dof_index,double> &,
 const ComponentMask &);

 template
 void interpolate_boundary_values
 (const  DoFHandler < 2 , 3 > &,
 const FunctionMap< 3 >::type &,
 std::map<types::global_dof_index,double> &,
 const ComponentMask &);

 template
 void interpolate_boundary_values (
 const Mapping< 2 , 3 > &,
 const  DoFHandler < 2 , 3 > &,
 const FunctionMap< 3 >::type &,
 ConstraintMatrix &,
 const ComponentMask &);

 template
 void interpolate_boundary_values
 (const Mapping< 2 , 3 > &,
 const  DoFHandler < 2 , 3 > &,
 const types::boundary_id,
 const Function< 3 > &,
 ConstraintMatrix &,
 const ComponentMask &);

 template
 void interpolate_boundary_values (
 const  DoFHandler < 2 , 3 > &,
 const types::boundary_id,
 const Function< 3 > &,
 ConstraintMatrix &,
 const ComponentMask &);

 template
 void interpolate_boundary_values (
 const  DoFHandler < 2 , 3 > &,
 const FunctionMap< 3 >::type &,
 ConstraintMatrix &,
 const ComponentMask &);
 }
#endif

#if  2  <=  3 
 namespace VectorTools {
 template
 void interpolate_boundary_values
 (const Mapping< 2 , 3 > &,
 const  hp::DoFHandler < 2 , 3 > &,
 const FunctionMap< 3 >::type &,
 std::map<types::global_dof_index,double> &,
 const ComponentMask &);

 template
 void interpolate_boundary_values
 (const Mapping< 2 , 3 > &,
 const  hp::DoFHandler < 2 , 3 > &,
 const types::boundary_id,
 const Function< 3 > &,
 std::map<types::global_dof_index,double> &,
 const ComponentMask &);

 template
 void interpolate_boundary_values (
 const  hp::DoFHandler < 2 , 3 > &,
 const types::boundary_id,
 const Function< 3 > &,
 std::map<types::global_dof_index,double> &,
 const ComponentMask &);

 template
 void interpolate_boundary_values
 (const  hp::DoFHandler < 2 , 3 > &,
 const FunctionMap< 3 >::type &,
 std::map<types::global_dof_index,double> &,
 const ComponentMask &);

 template
 void interpolate_boundary_values (
 const Mapping< 2 , 3 > &,
 const  hp::DoFHandler < 2 , 3 > &,
 const FunctionMap< 3 >::type &,
 ConstraintMatrix &,
 const ComponentMask &);

 template
 void interpolate_boundary_values
 (const Mapping< 2 , 3 > &,
 const  hp::DoFHandler < 2 , 3 > &,
 const types::boundary_id,
 const Function< 3 > &,
 ConstraintMatrix &,
 const ComponentMask &);

 template
 void interpolate_boundary_values (
 const  hp::DoFHandler < 2 , 3 > &,
 const types::boundary_id,
 const Function< 3 > &,
 ConstraintMatrix &,
 const ComponentMask &);

 template
 void interpolate_boundary_values (
 const  hp::DoFHandler < 2 , 3 > &,
 const FunctionMap< 3 >::type &,
 ConstraintMatrix &,
 const ComponentMask &);
 }
#endif

#if  3  <=  1 
 namespace VectorTools {
 template
 void interpolate_boundary_values
 (const Mapping< 3 , 1 > &,
 const  DoFHandler < 3 , 1 > &,
 const FunctionMap< 1 >::type &,
 std::map<types::global_dof_index,double> &,
 const ComponentMask &);

 template
 void interpolate_boundary_values
 (const Mapping< 3 , 1 > &,
 const  DoFHandler < 3 , 1 > &,
 const types::boundary_id,
 const Function< 1 > &,
 std::map<types::global_dof_index,double> &,
 const ComponentMask &);

 template
 void interpolate_boundary_values (
 const  DoFHandler < 3 , 1 > &,
 const types::boundary_id,
 const Function< 1 > &,
 std::map<types::global_dof_index,double> &,
 const ComponentMask &);

 template
 void interpolate_boundary_values
 (const  DoFHandler < 3 , 1 > &,
 const FunctionMap< 1 >::type &,
 std::map<types::global_dof_index,double> &,
 const ComponentMask &);

 template
 void interpolate_boundary_values (
 const Mapping< 3 , 1 > &,
 const  DoFHandler < 3 , 1 > &,
 const FunctionMap< 1 >::type &,
 ConstraintMatrix &,
 const ComponentMask &);

 template
 void interpolate_boundary_values
 (const Mapping< 3 , 1 > &,
 const  DoFHandler < 3 , 1 > &,
 const types::boundary_id,
 const Function< 1 > &,
 ConstraintMatrix &,
 const ComponentMask &);

 template
 void interpolate_boundary_values (
 const  DoFHandler < 3 , 1 > &,
 const types::boundary_id,
 const Function< 1 > &,
 ConstraintMatrix &,
 const ComponentMask &);

 template
 void interpolate_boundary_values (
 const  DoFHandler < 3 , 1 > &,
 const FunctionMap< 1 >::type &,
 ConstraintMatrix &,
 const ComponentMask &);
 }
#endif

#if  3  <=  1 
 namespace VectorTools {
 template
 void interpolate_boundary_values
 (const Mapping< 3 , 1 > &,
 const  hp::DoFHandler < 3 , 1 > &,
 const FunctionMap< 1 >::type &,
 std::map<types::global_dof_index,double> &,
 const ComponentMask &);

 template
 void interpolate_boundary_values
 (const Mapping< 3 , 1 > &,
 const  hp::DoFHandler < 3 , 1 > &,
 const types::boundary_id,
 const Function< 1 > &,
 std::map<types::global_dof_index,double> &,
 const ComponentMask &);

 template
 void interpolate_boundary_values (
 const  hp::DoFHandler < 3 , 1 > &,
 const types::boundary_id,
 const Function< 1 > &,
 std::map<types::global_dof_index,double> &,
 const ComponentMask &);

 template
 void interpolate_boundary_values
 (const  hp::DoFHandler < 3 , 1 > &,
 const FunctionMap< 1 >::type &,
 std::map<types::global_dof_index,double> &,
 const ComponentMask &);

 template
 void interpolate_boundary_values (
 const Mapping< 3 , 1 > &,
 const  hp::DoFHandler < 3 , 1 > &,
 const FunctionMap< 1 >::type &,
 ConstraintMatrix &,
 const ComponentMask &);

 template
 void interpolate_boundary_values
 (const Mapping< 3 , 1 > &,
 const  hp::DoFHandler < 3 , 1 > &,
 const types::boundary_id,
 const Function< 1 > &,
 ConstraintMatrix &,
 const ComponentMask &);

 template
 void interpolate_boundary_values (
 const  hp::DoFHandler < 3 , 1 > &,
 const types::boundary_id,
 const Function< 1 > &,
 ConstraintMatrix &,
 const ComponentMask &);

 template
 void interpolate_boundary_values (
 const  hp::DoFHandler < 3 , 1 > &,
 const FunctionMap< 1 >::type &,
 ConstraintMatrix &,
 const ComponentMask &);
 }
#endif

#if  3  <=  2 
 namespace VectorTools {
 template
 void interpolate_boundary_values
 (const Mapping< 3 , 2 > &,
 const  DoFHandler < 3 , 2 > &,
 const FunctionMap< 2 >::type &,
 std::map<types::global_dof_index,double> &,
 const ComponentMask &);

 template
 void interpolate_boundary_values
 (const Mapping< 3 , 2 > &,
 const  DoFHandler < 3 , 2 > &,
 const types::boundary_id,
 const Function< 2 > &,
 std::map<types::global_dof_index,double> &,
 const ComponentMask &);

 template
 void interpolate_boundary_values (
 const  DoFHandler < 3 , 2 > &,
 const types::boundary_id,
 const Function< 2 > &,
 std::map<types::global_dof_index,double> &,
 const ComponentMask &);

 template
 void interpolate_boundary_values
 (const  DoFHandler < 3 , 2 > &,
 const FunctionMap< 2 >::type &,
 std::map<types::global_dof_index,double> &,
 const ComponentMask &);

 template
 void interpolate_boundary_values (
 const Mapping< 3 , 2 > &,
 const  DoFHandler < 3 , 2 > &,
 const FunctionMap< 2 >::type &,
 ConstraintMatrix &,
 const ComponentMask &);

 template
 void interpolate_boundary_values
 (const Mapping< 3 , 2 > &,
 const  DoFHandler < 3 , 2 > &,
 const types::boundary_id,
 const Function< 2 > &,
 ConstraintMatrix &,
 const ComponentMask &);

 template
 void interpolate_boundary_values (
 const  DoFHandler < 3 , 2 > &,
 const types::boundary_id,
 const Function< 2 > &,
 ConstraintMatrix &,
 const ComponentMask &);

 template
 void interpolate_boundary_values (
 const  DoFHandler < 3 , 2 > &,
 const FunctionMap< 2 >::type &,
 ConstraintMatrix &,
 const ComponentMask &);
 }
#endif

#if  3  <=  2 
 namespace VectorTools {
 template
 void interpolate_boundary_values
 (const Mapping< 3 , 2 > &,
 const  hp::DoFHandler < 3 , 2 > &,
 const FunctionMap< 2 >::type &,
 std::map<types::global_dof_index,double> &,
 const ComponentMask &);

 template
 void interpolate_boundary_values
 (const Mapping< 3 , 2 > &,
 const  hp::DoFHandler < 3 , 2 > &,
 const types::boundary_id,
 const Function< 2 > &,
 std::map<types::global_dof_index,double> &,
 const ComponentMask &);

 template
 void interpolate_boundary_values (
 const  hp::DoFHandler < 3 , 2 > &,
 const types::boundary_id,
 const Function< 2 > &,
 std::map<types::global_dof_index,double> &,
 const ComponentMask &);

 template
 void interpolate_boundary_values
 (const  hp::DoFHandler < 3 , 2 > &,
 const FunctionMap< 2 >::type &,
 std::map<types::global_dof_index,double> &,
 const ComponentMask &);

 template
 void interpolate_boundary_values (
 const Mapping< 3 , 2 > &,
 const  hp::DoFHandler < 3 , 2 > &,
 const FunctionMap< 2 >::type &,
 ConstraintMatrix &,
 const ComponentMask &);

 template
 void interpolate_boundary_values
 (const Mapping< 3 , 2 > &,
 const  hp::DoFHandler < 3 , 2 > &,
 const types::boundary_id,
 const Function< 2 > &,
 ConstraintMatrix &,
 const ComponentMask &);

 template
 void interpolate_boundary_values (
 const  hp::DoFHandler < 3 , 2 > &,
 const types::boundary_id,
 const Function< 2 > &,
 ConstraintMatrix &,
 const ComponentMask &);

 template
 void interpolate_boundary_values (
 const  hp::DoFHandler < 3 , 2 > &,
 const FunctionMap< 2 >::type &,
 ConstraintMatrix &,
 const ComponentMask &);
 }
#endif

#if  3  <=  3 
 namespace VectorTools {
 template
 void interpolate_boundary_values
 (const Mapping< 3 , 3 > &,
 const  DoFHandler < 3 , 3 > &,
 const FunctionMap< 3 >::type &,
 std::map<types::global_dof_index,double> &,
 const ComponentMask &);

 template
 void interpolate_boundary_values
 (const Mapping< 3 , 3 > &,
 const  DoFHandler < 3 , 3 > &,
 const types::boundary_id,
 const Function< 3 > &,
 std::map<types::global_dof_index,double> &,
 const ComponentMask &);

 template
 void interpolate_boundary_values (
 const  DoFHandler < 3 , 3 > &,
 const types::boundary_id,
 const Function< 3 > &,
 std::map<types::global_dof_index,double> &,
 const ComponentMask &);

 template
 void interpolate_boundary_values
 (const  DoFHandler < 3 , 3 > &,
 const FunctionMap< 3 >::type &,
 std::map<types::global_dof_index,double> &,
 const ComponentMask &);

 template
 void interpolate_boundary_values (
 const Mapping< 3 , 3 > &,
 const  DoFHandler < 3 , 3 > &,
 const FunctionMap< 3 >::type &,
 ConstraintMatrix &,
 const ComponentMask &);

 template
 void interpolate_boundary_values
 (const Mapping< 3 , 3 > &,
 const  DoFHandler < 3 , 3 > &,
 const types::boundary_id,
 const Function< 3 > &,
 ConstraintMatrix &,
 const ComponentMask &);

 template
 void interpolate_boundary_values (
 const  DoFHandler < 3 , 3 > &,
 const types::boundary_id,
 const Function< 3 > &,
 ConstraintMatrix &,
 const ComponentMask &);

 template
 void interpolate_boundary_values (
 const  DoFHandler < 3 , 3 > &,
 const FunctionMap< 3 >::type &,
 ConstraintMatrix &,
 const ComponentMask &);
 }
#endif

#if  3  <=  3 
 namespace VectorTools {
 template
 void interpolate_boundary_values
 (const Mapping< 3 , 3 > &,
 const  hp::DoFHandler < 3 , 3 > &,
 const FunctionMap< 3 >::type &,
 std::map<types::global_dof_index,double> &,
 const ComponentMask &);

 template
 void interpolate_boundary_values
 (const Mapping< 3 , 3 > &,
 const  hp::DoFHandler < 3 , 3 > &,
 const types::boundary_id,
 const Function< 3 > &,
 std::map<types::global_dof_index,double> &,
 const ComponentMask &);

 template
 void interpolate_boundary_values (
 const  hp::DoFHandler < 3 , 3 > &,
 const types::boundary_id,
 const Function< 3 > &,
 std::map<types::global_dof_index,double> &,
 const ComponentMask &);

 template
 void interpolate_boundary_values
 (const  hp::DoFHandler < 3 , 3 > &,
 const FunctionMap< 3 >::type &,
 std::map<types::global_dof_index,double> &,
 const ComponentMask &);

 template
 void interpolate_boundary_values (
 const Mapping< 3 , 3 > &,
 const  hp::DoFHandler < 3 , 3 > &,
 const FunctionMap< 3 >::type &,
 ConstraintMatrix &,
 const ComponentMask &);

 template
 void interpolate_boundary_values
 (const Mapping< 3 , 3 > &,
 const  hp::DoFHandler < 3 , 3 > &,
 const types::boundary_id,
 const Function< 3 > &,
 ConstraintMatrix &,
 const ComponentMask &);

 template
 void interpolate_boundary_values (
 const  hp::DoFHandler < 3 , 3 > &,
 const types::boundary_id,
 const Function< 3 > &,
 ConstraintMatrix &,
 const ComponentMask &);

 template
 void interpolate_boundary_values (
 const  hp::DoFHandler < 3 , 3 > &,
 const FunctionMap< 3 >::type &,
 ConstraintMatrix &,
 const ComponentMask &);
 }
#endif

namespace VectorTools {
#if  1  ==  1 

 template
 void project_boundary_values< 1 >
 (const Mapping< 1 > &,
 const DoFHandler< 1 > &,
 const FunctionMap< 1 >::type &,
 const Quadrature< 1 -1>&,
 std::map<types::global_dof_index,double>&, std::vector<unsigned int>);

 template
 void project_boundary_values< 1 >
 (const DoFHandler< 1 > &,
 const FunctionMap< 1 >::type &,
 const Quadrature< 1 -1>&,
 std::map<types::global_dof_index,double>&, 
 std::vector<unsigned int>);

 template
 void project_boundary_values< 1 >
 (const Mapping< 1 > &,
 const DoFHandler< 1 > &,
 const FunctionMap< 1 >::type &,
 const Quadrature< 1 -1>&,
 ConstraintMatrix&, std::vector<unsigned int>);

 template
 void project_boundary_values< 1 >
 (const DoFHandler< 1 > &,
 const FunctionMap< 1 >::type &,
 const Quadrature< 1 -1>&,
 ConstraintMatrix&, 
 std::vector<unsigned int>);



#if  1  != 1
 template
 void project_boundary_values_curl_conforming< 1 >
 (const DoFHandler< 1 >&,
 const unsigned int,
 const Function< 1 >&,
 const types::boundary_id,
 ConstraintMatrix&,
 const Mapping< 1 >&);
 template
 void project_boundary_values_curl_conforming< 1 >
 (const hp::DoFHandler< 1 >&,
 const unsigned int,
 const Function< 1 >&,
 const types::boundary_id,
 ConstraintMatrix&,
 const hp::MappingCollection< 1 >&);
 template
 void project_boundary_values_div_conforming< 1 >
 (const DoFHandler< 1 >&,
 const unsigned int,
 const Function< 1 >&,
 const types::boundary_id,
 ConstraintMatrix&,
 const Mapping< 1 >&);
 template
 void project_boundary_values_div_conforming< 1 >
 (const hp::DoFHandler< 1 >&,
 const unsigned int,
 const Function< 1 >&,
 const types::boundary_id,
 ConstraintMatrix&,
 const hp::MappingCollection< 1 >&);
#endif
#endif
 }
 
namespace VectorTools {
#if  1  ==  2 

 template
 void project_boundary_values< 1 >
 (const Mapping< 1 > &,
 const DoFHandler< 1 > &,
 const FunctionMap< 1 >::type &,
 const Quadrature< 1 -1>&,
 std::map<types::global_dof_index,double>&, std::vector<unsigned int>);

 template
 void project_boundary_values< 1 >
 (const DoFHandler< 1 > &,
 const FunctionMap< 1 >::type &,
 const Quadrature< 1 -1>&,
 std::map<types::global_dof_index,double>&, 
 std::vector<unsigned int>);

 template
 void project_boundary_values< 1 >
 (const Mapping< 1 > &,
 const DoFHandler< 1 > &,
 const FunctionMap< 1 >::type &,
 const Quadrature< 1 -1>&,
 ConstraintMatrix&, std::vector<unsigned int>);

 template
 void project_boundary_values< 1 >
 (const DoFHandler< 1 > &,
 const FunctionMap< 1 >::type &,
 const Quadrature< 1 -1>&,
 ConstraintMatrix&, 
 std::vector<unsigned int>);



#if  1  != 1
 template
 void project_boundary_values_curl_conforming< 1 >
 (const DoFHandler< 1 >&,
 const unsigned int,
 const Function< 1 >&,
 const types::boundary_id,
 ConstraintMatrix&,
 const Mapping< 1 >&);
 template
 void project_boundary_values_curl_conforming< 1 >
 (const hp::DoFHandler< 1 >&,
 const unsigned int,
 const Function< 1 >&,
 const types::boundary_id,
 ConstraintMatrix&,
 const hp::MappingCollection< 1 >&);
 template
 void project_boundary_values_div_conforming< 1 >
 (const DoFHandler< 1 >&,
 const unsigned int,
 const Function< 1 >&,
 const types::boundary_id,
 ConstraintMatrix&,
 const Mapping< 1 >&);
 template
 void project_boundary_values_div_conforming< 1 >
 (const hp::DoFHandler< 1 >&,
 const unsigned int,
 const Function< 1 >&,
 const types::boundary_id,
 ConstraintMatrix&,
 const hp::MappingCollection< 1 >&);
#endif
#endif
 }
 
namespace VectorTools {
#if  1  ==  3 

 template
 void project_boundary_values< 1 >
 (const Mapping< 1 > &,
 const DoFHandler< 1 > &,
 const FunctionMap< 1 >::type &,
 const Quadrature< 1 -1>&,
 std::map<types::global_dof_index,double>&, std::vector<unsigned int>);

 template
 void project_boundary_values< 1 >
 (const DoFHandler< 1 > &,
 const FunctionMap< 1 >::type &,
 const Quadrature< 1 -1>&,
 std::map<types::global_dof_index,double>&, 
 std::vector<unsigned int>);

 template
 void project_boundary_values< 1 >
 (const Mapping< 1 > &,
 const DoFHandler< 1 > &,
 const FunctionMap< 1 >::type &,
 const Quadrature< 1 -1>&,
 ConstraintMatrix&, std::vector<unsigned int>);

 template
 void project_boundary_values< 1 >
 (const DoFHandler< 1 > &,
 const FunctionMap< 1 >::type &,
 const Quadrature< 1 -1>&,
 ConstraintMatrix&, 
 std::vector<unsigned int>);



#if  1  != 1
 template
 void project_boundary_values_curl_conforming< 1 >
 (const DoFHandler< 1 >&,
 const unsigned int,
 const Function< 1 >&,
 const types::boundary_id,
 ConstraintMatrix&,
 const Mapping< 1 >&);
 template
 void project_boundary_values_curl_conforming< 1 >
 (const hp::DoFHandler< 1 >&,
 const unsigned int,
 const Function< 1 >&,
 const types::boundary_id,
 ConstraintMatrix&,
 const hp::MappingCollection< 1 >&);
 template
 void project_boundary_values_div_conforming< 1 >
 (const DoFHandler< 1 >&,
 const unsigned int,
 const Function< 1 >&,
 const types::boundary_id,
 ConstraintMatrix&,
 const Mapping< 1 >&);
 template
 void project_boundary_values_div_conforming< 1 >
 (const hp::DoFHandler< 1 >&,
 const unsigned int,
 const Function< 1 >&,
 const types::boundary_id,
 ConstraintMatrix&,
 const hp::MappingCollection< 1 >&);
#endif
#endif
 }
 
namespace VectorTools {
#if  2  ==  1 

 template
 void project_boundary_values< 2 >
 (const Mapping< 2 > &,
 const DoFHandler< 2 > &,
 const FunctionMap< 2 >::type &,
 const Quadrature< 2 -1>&,
 std::map<types::global_dof_index,double>&, std::vector<unsigned int>);

 template
 void project_boundary_values< 2 >
 (const DoFHandler< 2 > &,
 const FunctionMap< 2 >::type &,
 const Quadrature< 2 -1>&,
 std::map<types::global_dof_index,double>&, 
 std::vector<unsigned int>);

 template
 void project_boundary_values< 2 >
 (const Mapping< 2 > &,
 const DoFHandler< 2 > &,
 const FunctionMap< 2 >::type &,
 const Quadrature< 2 -1>&,
 ConstraintMatrix&, std::vector<unsigned int>);

 template
 void project_boundary_values< 2 >
 (const DoFHandler< 2 > &,
 const FunctionMap< 2 >::type &,
 const Quadrature< 2 -1>&,
 ConstraintMatrix&, 
 std::vector<unsigned int>);



#if  2  != 1
 template
 void project_boundary_values_curl_conforming< 2 >
 (const DoFHandler< 2 >&,
 const unsigned int,
 const Function< 2 >&,
 const types::boundary_id,
 ConstraintMatrix&,
 const Mapping< 2 >&);
 template
 void project_boundary_values_curl_conforming< 2 >
 (const hp::DoFHandler< 2 >&,
 const unsigned int,
 const Function< 2 >&,
 const types::boundary_id,
 ConstraintMatrix&,
 const hp::MappingCollection< 2 >&);
 template
 void project_boundary_values_div_conforming< 2 >
 (const DoFHandler< 2 >&,
 const unsigned int,
 const Function< 2 >&,
 const types::boundary_id,
 ConstraintMatrix&,
 const Mapping< 2 >&);
 template
 void project_boundary_values_div_conforming< 2 >
 (const hp::DoFHandler< 2 >&,
 const unsigned int,
 const Function< 2 >&,
 const types::boundary_id,
 ConstraintMatrix&,
 const hp::MappingCollection< 2 >&);
#endif
#endif
 }
 
namespace VectorTools {
#if  2  ==  2 

 template
 void project_boundary_values< 2 >
 (const Mapping< 2 > &,
 const DoFHandler< 2 > &,
 const FunctionMap< 2 >::type &,
 const Quadrature< 2 -1>&,
 std::map<types::global_dof_index,double>&, std::vector<unsigned int>);

 template
 void project_boundary_values< 2 >
 (const DoFHandler< 2 > &,
 const FunctionMap< 2 >::type &,
 const Quadrature< 2 -1>&,
 std::map<types::global_dof_index,double>&, 
 std::vector<unsigned int>);

 template
 void project_boundary_values< 2 >
 (const Mapping< 2 > &,
 const DoFHandler< 2 > &,
 const FunctionMap< 2 >::type &,
 const Quadrature< 2 -1>&,
 ConstraintMatrix&, std::vector<unsigned int>);

 template
 void project_boundary_values< 2 >
 (const DoFHandler< 2 > &,
 const FunctionMap< 2 >::type &,
 const Quadrature< 2 -1>&,
 ConstraintMatrix&, 
 std::vector<unsigned int>);



#if  2  != 1
 template
 void project_boundary_values_curl_conforming< 2 >
 (const DoFHandler< 2 >&,
 const unsigned int,
 const Function< 2 >&,
 const types::boundary_id,
 ConstraintMatrix&,
 const Mapping< 2 >&);
 template
 void project_boundary_values_curl_conforming< 2 >
 (const hp::DoFHandler< 2 >&,
 const unsigned int,
 const Function< 2 >&,
 const types::boundary_id,
 ConstraintMatrix&,
 const hp::MappingCollection< 2 >&);
 template
 void project_boundary_values_div_conforming< 2 >
 (const DoFHandler< 2 >&,
 const unsigned int,
 const Function< 2 >&,
 const types::boundary_id,
 ConstraintMatrix&,
 const Mapping< 2 >&);
 template
 void project_boundary_values_div_conforming< 2 >
 (const hp::DoFHandler< 2 >&,
 const unsigned int,
 const Function< 2 >&,
 const types::boundary_id,
 ConstraintMatrix&,
 const hp::MappingCollection< 2 >&);
#endif
#endif
 }
 
namespace VectorTools {
#if  2  ==  3 

 template
 void project_boundary_values< 2 >
 (const Mapping< 2 > &,
 const DoFHandler< 2 > &,
 const FunctionMap< 2 >::type &,
 const Quadrature< 2 -1>&,
 std::map<types::global_dof_index,double>&, std::vector<unsigned int>);

 template
 void project_boundary_values< 2 >
 (const DoFHandler< 2 > &,
 const FunctionMap< 2 >::type &,
 const Quadrature< 2 -1>&,
 std::map<types::global_dof_index,double>&, 
 std::vector<unsigned int>);

 template
 void project_boundary_values< 2 >
 (const Mapping< 2 > &,
 const DoFHandler< 2 > &,
 const FunctionMap< 2 >::type &,
 const Quadrature< 2 -1>&,
 ConstraintMatrix&, std::vector<unsigned int>);

 template
 void project_boundary_values< 2 >
 (const DoFHandler< 2 > &,
 const FunctionMap< 2 >::type &,
 const Quadrature< 2 -1>&,
 ConstraintMatrix&, 
 std::vector<unsigned int>);



#if  2  != 1
 template
 void project_boundary_values_curl_conforming< 2 >
 (const DoFHandler< 2 >&,
 const unsigned int,
 const Function< 2 >&,
 const types::boundary_id,
 ConstraintMatrix&,
 const Mapping< 2 >&);
 template
 void project_boundary_values_curl_conforming< 2 >
 (const hp::DoFHandler< 2 >&,
 const unsigned int,
 const Function< 2 >&,
 const types::boundary_id,
 ConstraintMatrix&,
 const hp::MappingCollection< 2 >&);
 template
 void project_boundary_values_div_conforming< 2 >
 (const DoFHandler< 2 >&,
 const unsigned int,
 const Function< 2 >&,
 const types::boundary_id,
 ConstraintMatrix&,
 const Mapping< 2 >&);
 template
 void project_boundary_values_div_conforming< 2 >
 (const hp::DoFHandler< 2 >&,
 const unsigned int,
 const Function< 2 >&,
 const types::boundary_id,
 ConstraintMatrix&,
 const hp::MappingCollection< 2 >&);
#endif
#endif
 }
 
namespace VectorTools {
#if  3  ==  1 

 template
 void project_boundary_values< 3 >
 (const Mapping< 3 > &,
 const DoFHandler< 3 > &,
 const FunctionMap< 3 >::type &,
 const Quadrature< 3 -1>&,
 std::map<types::global_dof_index,double>&, std::vector<unsigned int>);

 template
 void project_boundary_values< 3 >
 (const DoFHandler< 3 > &,
 const FunctionMap< 3 >::type &,
 const Quadrature< 3 -1>&,
 std::map<types::global_dof_index,double>&, 
 std::vector<unsigned int>);

 template
 void project_boundary_values< 3 >
 (const Mapping< 3 > &,
 const DoFHandler< 3 > &,
 const FunctionMap< 3 >::type &,
 const Quadrature< 3 -1>&,
 ConstraintMatrix&, std::vector<unsigned int>);

 template
 void project_boundary_values< 3 >
 (const DoFHandler< 3 > &,
 const FunctionMap< 3 >::type &,
 const Quadrature< 3 -1>&,
 ConstraintMatrix&, 
 std::vector<unsigned int>);



#if  3  != 1
 template
 void project_boundary_values_curl_conforming< 3 >
 (const DoFHandler< 3 >&,
 const unsigned int,
 const Function< 3 >&,
 const types::boundary_id,
 ConstraintMatrix&,
 const Mapping< 3 >&);
 template
 void project_boundary_values_curl_conforming< 3 >
 (const hp::DoFHandler< 3 >&,
 const unsigned int,
 const Function< 3 >&,
 const types::boundary_id,
 ConstraintMatrix&,
 const hp::MappingCollection< 3 >&);
 template
 void project_boundary_values_div_conforming< 3 >
 (const DoFHandler< 3 >&,
 const unsigned int,
 const Function< 3 >&,
 const types::boundary_id,
 ConstraintMatrix&,
 const Mapping< 3 >&);
 template
 void project_boundary_values_div_conforming< 3 >
 (const hp::DoFHandler< 3 >&,
 const unsigned int,
 const Function< 3 >&,
 const types::boundary_id,
 ConstraintMatrix&,
 const hp::MappingCollection< 3 >&);
#endif
#endif
 }
 
namespace VectorTools {
#if  3  ==  2 

 template
 void project_boundary_values< 3 >
 (const Mapping< 3 > &,
 const DoFHandler< 3 > &,
 const FunctionMap< 3 >::type &,
 const Quadrature< 3 -1>&,
 std::map<types::global_dof_index,double>&, std::vector<unsigned int>);

 template
 void project_boundary_values< 3 >
 (const DoFHandler< 3 > &,
 const FunctionMap< 3 >::type &,
 const Quadrature< 3 -1>&,
 std::map<types::global_dof_index,double>&, 
 std::vector<unsigned int>);

 template
 void project_boundary_values< 3 >
 (const Mapping< 3 > &,
 const DoFHandler< 3 > &,
 const FunctionMap< 3 >::type &,
 const Quadrature< 3 -1>&,
 ConstraintMatrix&, std::vector<unsigned int>);

 template
 void project_boundary_values< 3 >
 (const DoFHandler< 3 > &,
 const FunctionMap< 3 >::type &,
 const Quadrature< 3 -1>&,
 ConstraintMatrix&, 
 std::vector<unsigned int>);



#if  3  != 1
 template
 void project_boundary_values_curl_conforming< 3 >
 (const DoFHandler< 3 >&,
 const unsigned int,
 const Function< 3 >&,
 const types::boundary_id,
 ConstraintMatrix&,
 const Mapping< 3 >&);
 template
 void project_boundary_values_curl_conforming< 3 >
 (const hp::DoFHandler< 3 >&,
 const unsigned int,
 const Function< 3 >&,
 const types::boundary_id,
 ConstraintMatrix&,
 const hp::MappingCollection< 3 >&);
 template
 void project_boundary_values_div_conforming< 3 >
 (const DoFHandler< 3 >&,
 const unsigned int,
 const Function< 3 >&,
 const types::boundary_id,
 ConstraintMatrix&,
 const Mapping< 3 >&);
 template
 void project_boundary_values_div_conforming< 3 >
 (const hp::DoFHandler< 3 >&,
 const unsigned int,
 const Function< 3 >&,
 const types::boundary_id,
 ConstraintMatrix&,
 const hp::MappingCollection< 3 >&);
#endif
#endif
 }
 
namespace VectorTools {
#if  3  ==  3 

 template
 void project_boundary_values< 3 >
 (const Mapping< 3 > &,
 const DoFHandler< 3 > &,
 const FunctionMap< 3 >::type &,
 const Quadrature< 3 -1>&,
 std::map<types::global_dof_index,double>&, std::vector<unsigned int>);

 template
 void project_boundary_values< 3 >
 (const DoFHandler< 3 > &,
 const FunctionMap< 3 >::type &,
 const Quadrature< 3 -1>&,
 std::map<types::global_dof_index,double>&, 
 std::vector<unsigned int>);

 template
 void project_boundary_values< 3 >
 (const Mapping< 3 > &,
 const DoFHandler< 3 > &,
 const FunctionMap< 3 >::type &,
 const Quadrature< 3 -1>&,
 ConstraintMatrix&, std::vector<unsigned int>);

 template
 void project_boundary_values< 3 >
 (const DoFHandler< 3 > &,
 const FunctionMap< 3 >::type &,
 const Quadrature< 3 -1>&,
 ConstraintMatrix&, 
 std::vector<unsigned int>);



#if  3  != 1
 template
 void project_boundary_values_curl_conforming< 3 >
 (const DoFHandler< 3 >&,
 const unsigned int,
 const Function< 3 >&,
 const types::boundary_id,
 ConstraintMatrix&,
 const Mapping< 3 >&);
 template
 void project_boundary_values_curl_conforming< 3 >
 (const hp::DoFHandler< 3 >&,
 const unsigned int,
 const Function< 3 >&,
 const types::boundary_id,
 ConstraintMatrix&,
 const hp::MappingCollection< 3 >&);
 template
 void project_boundary_values_div_conforming< 3 >
 (const DoFHandler< 3 >&,
 const unsigned int,
 const Function< 3 >&,
 const types::boundary_id,
 ConstraintMatrix&,
 const Mapping< 3 >&);
 template
 void project_boundary_values_div_conforming< 3 >
 (const hp::DoFHandler< 3 >&,
 const unsigned int,
 const Function< 3 >&,
 const types::boundary_id,
 ConstraintMatrix&,
 const hp::MappingCollection< 3 >&);
#endif
#endif
 }
 
