#if  1  <=  1 
 namespace VectorTools {

 template
 void project
 (const Mapping< 1 , 1 > &,
 const DoFHandler< 1 , 1 > &,
 const ConstraintMatrix &,
 const Quadrature< 1 > &,
 const Function< 1 > &,
  Vector<double>  &,
 const bool,
 const Quadrature< 1 -1> &,
 const bool);

 template
 void project
 (const DoFHandler< 1 , 1 > &,
 const ConstraintMatrix &,
 const Quadrature< 1 > &,
 const Function< 1 > &,
  Vector<double>  &,
 const bool,
 const Quadrature< 1 -1> &,
 const bool);

 template
 void project
 (const hp::MappingCollection< 1 , 1 > &,
 const hp::DoFHandler< 1 , 1 > &,
 const ConstraintMatrix &,
 const hp::QCollection< 1 > &,
 const Function< 1 > &,
  Vector<double>  &,
 const bool,
 const hp::QCollection< 1 -1> &,
 const bool);

 template
 void project
 (const hp::DoFHandler< 1 , 1 > &,
 const ConstraintMatrix &,
 const hp::QCollection< 1 > &,
 const Function< 1 > &,
  Vector<double>  &,
 const bool,
 const hp::QCollection< 1 -1> &,
 const bool);
 }
#endif
 
#if  1  <=  2 
 namespace VectorTools {

 template
 void project
 (const Mapping< 1 , 2 > &,
 const DoFHandler< 1 , 2 > &,
 const ConstraintMatrix &,
 const Quadrature< 1 > &,
 const Function< 2 > &,
  Vector<double>  &,
 const bool,
 const Quadrature< 1 -1> &,
 const bool);

 template
 void project
 (const DoFHandler< 1 , 2 > &,
 const ConstraintMatrix &,
 const Quadrature< 1 > &,
 const Function< 2 > &,
  Vector<double>  &,
 const bool,
 const Quadrature< 1 -1> &,
 const bool);

 template
 void project
 (const hp::MappingCollection< 1 , 2 > &,
 const hp::DoFHandler< 1 , 2 > &,
 const ConstraintMatrix &,
 const hp::QCollection< 1 > &,
 const Function< 2 > &,
  Vector<double>  &,
 const bool,
 const hp::QCollection< 1 -1> &,
 const bool);

 template
 void project
 (const hp::DoFHandler< 1 , 2 > &,
 const ConstraintMatrix &,
 const hp::QCollection< 1 > &,
 const Function< 2 > &,
  Vector<double>  &,
 const bool,
 const hp::QCollection< 1 -1> &,
 const bool);
 }
#endif
 
#if  1  <=  3 
 namespace VectorTools {

 template
 void project
 (const Mapping< 1 , 3 > &,
 const DoFHandler< 1 , 3 > &,
 const ConstraintMatrix &,
 const Quadrature< 1 > &,
 const Function< 3 > &,
  Vector<double>  &,
 const bool,
 const Quadrature< 1 -1> &,
 const bool);

 template
 void project
 (const DoFHandler< 1 , 3 > &,
 const ConstraintMatrix &,
 const Quadrature< 1 > &,
 const Function< 3 > &,
  Vector<double>  &,
 const bool,
 const Quadrature< 1 -1> &,
 const bool);

 template
 void project
 (const hp::MappingCollection< 1 , 3 > &,
 const hp::DoFHandler< 1 , 3 > &,
 const ConstraintMatrix &,
 const hp::QCollection< 1 > &,
 const Function< 3 > &,
  Vector<double>  &,
 const bool,
 const hp::QCollection< 1 -1> &,
 const bool);

 template
 void project
 (const hp::DoFHandler< 1 , 3 > &,
 const ConstraintMatrix &,
 const hp::QCollection< 1 > &,
 const Function< 3 > &,
  Vector<double>  &,
 const bool,
 const hp::QCollection< 1 -1> &,
 const bool);
 }
#endif
 
#if  2  <=  1 
 namespace VectorTools {

 template
 void project
 (const Mapping< 2 , 1 > &,
 const DoFHandler< 2 , 1 > &,
 const ConstraintMatrix &,
 const Quadrature< 2 > &,
 const Function< 1 > &,
  Vector<double>  &,
 const bool,
 const Quadrature< 2 -1> &,
 const bool);

 template
 void project
 (const DoFHandler< 2 , 1 > &,
 const ConstraintMatrix &,
 const Quadrature< 2 > &,
 const Function< 1 > &,
  Vector<double>  &,
 const bool,
 const Quadrature< 2 -1> &,
 const bool);

 template
 void project
 (const hp::MappingCollection< 2 , 1 > &,
 const hp::DoFHandler< 2 , 1 > &,
 const ConstraintMatrix &,
 const hp::QCollection< 2 > &,
 const Function< 1 > &,
  Vector<double>  &,
 const bool,
 const hp::QCollection< 2 -1> &,
 const bool);

 template
 void project
 (const hp::DoFHandler< 2 , 1 > &,
 const ConstraintMatrix &,
 const hp::QCollection< 2 > &,
 const Function< 1 > &,
  Vector<double>  &,
 const bool,
 const hp::QCollection< 2 -1> &,
 const bool);
 }
#endif
 
#if  2  <=  2 
 namespace VectorTools {

 template
 void project
 (const Mapping< 2 , 2 > &,
 const DoFHandler< 2 , 2 > &,
 const ConstraintMatrix &,
 const Quadrature< 2 > &,
 const Function< 2 > &,
  Vector<double>  &,
 const bool,
 const Quadrature< 2 -1> &,
 const bool);

 template
 void project
 (const DoFHandler< 2 , 2 > &,
 const ConstraintMatrix &,
 const Quadrature< 2 > &,
 const Function< 2 > &,
  Vector<double>  &,
 const bool,
 const Quadrature< 2 -1> &,
 const bool);

 template
 void project
 (const hp::MappingCollection< 2 , 2 > &,
 const hp::DoFHandler< 2 , 2 > &,
 const ConstraintMatrix &,
 const hp::QCollection< 2 > &,
 const Function< 2 > &,
  Vector<double>  &,
 const bool,
 const hp::QCollection< 2 -1> &,
 const bool);

 template
 void project
 (const hp::DoFHandler< 2 , 2 > &,
 const ConstraintMatrix &,
 const hp::QCollection< 2 > &,
 const Function< 2 > &,
  Vector<double>  &,
 const bool,
 const hp::QCollection< 2 -1> &,
 const bool);
 }
#endif
 
#if  2  <=  3 
 namespace VectorTools {

 template
 void project
 (const Mapping< 2 , 3 > &,
 const DoFHandler< 2 , 3 > &,
 const ConstraintMatrix &,
 const Quadrature< 2 > &,
 const Function< 3 > &,
  Vector<double>  &,
 const bool,
 const Quadrature< 2 -1> &,
 const bool);

 template
 void project
 (const DoFHandler< 2 , 3 > &,
 const ConstraintMatrix &,
 const Quadrature< 2 > &,
 const Function< 3 > &,
  Vector<double>  &,
 const bool,
 const Quadrature< 2 -1> &,
 const bool);

 template
 void project
 (const hp::MappingCollection< 2 , 3 > &,
 const hp::DoFHandler< 2 , 3 > &,
 const ConstraintMatrix &,
 const hp::QCollection< 2 > &,
 const Function< 3 > &,
  Vector<double>  &,
 const bool,
 const hp::QCollection< 2 -1> &,
 const bool);

 template
 void project
 (const hp::DoFHandler< 2 , 3 > &,
 const ConstraintMatrix &,
 const hp::QCollection< 2 > &,
 const Function< 3 > &,
  Vector<double>  &,
 const bool,
 const hp::QCollection< 2 -1> &,
 const bool);
 }
#endif
 
#if  3  <=  1 
 namespace VectorTools {

 template
 void project
 (const Mapping< 3 , 1 > &,
 const DoFHandler< 3 , 1 > &,
 const ConstraintMatrix &,
 const Quadrature< 3 > &,
 const Function< 1 > &,
  Vector<double>  &,
 const bool,
 const Quadrature< 3 -1> &,
 const bool);

 template
 void project
 (const DoFHandler< 3 , 1 > &,
 const ConstraintMatrix &,
 const Quadrature< 3 > &,
 const Function< 1 > &,
  Vector<double>  &,
 const bool,
 const Quadrature< 3 -1> &,
 const bool);

 template
 void project
 (const hp::MappingCollection< 3 , 1 > &,
 const hp::DoFHandler< 3 , 1 > &,
 const ConstraintMatrix &,
 const hp::QCollection< 3 > &,
 const Function< 1 > &,
  Vector<double>  &,
 const bool,
 const hp::QCollection< 3 -1> &,
 const bool);

 template
 void project
 (const hp::DoFHandler< 3 , 1 > &,
 const ConstraintMatrix &,
 const hp::QCollection< 3 > &,
 const Function< 1 > &,
  Vector<double>  &,
 const bool,
 const hp::QCollection< 3 -1> &,
 const bool);
 }
#endif
 
#if  3  <=  2 
 namespace VectorTools {

 template
 void project
 (const Mapping< 3 , 2 > &,
 const DoFHandler< 3 , 2 > &,
 const ConstraintMatrix &,
 const Quadrature< 3 > &,
 const Function< 2 > &,
  Vector<double>  &,
 const bool,
 const Quadrature< 3 -1> &,
 const bool);

 template
 void project
 (const DoFHandler< 3 , 2 > &,
 const ConstraintMatrix &,
 const Quadrature< 3 > &,
 const Function< 2 > &,
  Vector<double>  &,
 const bool,
 const Quadrature< 3 -1> &,
 const bool);

 template
 void project
 (const hp::MappingCollection< 3 , 2 > &,
 const hp::DoFHandler< 3 , 2 > &,
 const ConstraintMatrix &,
 const hp::QCollection< 3 > &,
 const Function< 2 > &,
  Vector<double>  &,
 const bool,
 const hp::QCollection< 3 -1> &,
 const bool);

 template
 void project
 (const hp::DoFHandler< 3 , 2 > &,
 const ConstraintMatrix &,
 const hp::QCollection< 3 > &,
 const Function< 2 > &,
  Vector<double>  &,
 const bool,
 const hp::QCollection< 3 -1> &,
 const bool);
 }
#endif
 
#if  3  <=  3 
 namespace VectorTools {

 template
 void project
 (const Mapping< 3 , 3 > &,
 const DoFHandler< 3 , 3 > &,
 const ConstraintMatrix &,
 const Quadrature< 3 > &,
 const Function< 3 > &,
  Vector<double>  &,
 const bool,
 const Quadrature< 3 -1> &,
 const bool);

 template
 void project
 (const DoFHandler< 3 , 3 > &,
 const ConstraintMatrix &,
 const Quadrature< 3 > &,
 const Function< 3 > &,
  Vector<double>  &,
 const bool,
 const Quadrature< 3 -1> &,
 const bool);

 template
 void project
 (const hp::MappingCollection< 3 , 3 > &,
 const hp::DoFHandler< 3 , 3 > &,
 const ConstraintMatrix &,
 const hp::QCollection< 3 > &,
 const Function< 3 > &,
  Vector<double>  &,
 const bool,
 const hp::QCollection< 3 -1> &,
 const bool);

 template
 void project
 (const hp::DoFHandler< 3 , 3 > &,
 const ConstraintMatrix &,
 const hp::QCollection< 3 > &,
 const Function< 3 > &,
  Vector<double>  &,
 const bool,
 const hp::QCollection< 3 -1> &,
 const bool);
 }
#endif
 
#if  1  <=  1 
 namespace VectorTools {

 template
 void project
 (const Mapping< 1 , 1 > &,
 const DoFHandler< 1 , 1 > &,
 const ConstraintMatrix &,
 const Quadrature< 1 > &,
 const Function< 1 > &,
  Vector<float>  &,
 const bool,
 const Quadrature< 1 -1> &,
 const bool);

 template
 void project
 (const DoFHandler< 1 , 1 > &,
 const ConstraintMatrix &,
 const Quadrature< 1 > &,
 const Function< 1 > &,
  Vector<float>  &,
 const bool,
 const Quadrature< 1 -1> &,
 const bool);

 template
 void project
 (const hp::MappingCollection< 1 , 1 > &,
 const hp::DoFHandler< 1 , 1 > &,
 const ConstraintMatrix &,
 const hp::QCollection< 1 > &,
 const Function< 1 > &,
  Vector<float>  &,
 const bool,
 const hp::QCollection< 1 -1> &,
 const bool);

 template
 void project
 (const hp::DoFHandler< 1 , 1 > &,
 const ConstraintMatrix &,
 const hp::QCollection< 1 > &,
 const Function< 1 > &,
  Vector<float>  &,
 const bool,
 const hp::QCollection< 1 -1> &,
 const bool);
 }
#endif
 
#if  1  <=  2 
 namespace VectorTools {

 template
 void project
 (const Mapping< 1 , 2 > &,
 const DoFHandler< 1 , 2 > &,
 const ConstraintMatrix &,
 const Quadrature< 1 > &,
 const Function< 2 > &,
  Vector<float>  &,
 const bool,
 const Quadrature< 1 -1> &,
 const bool);

 template
 void project
 (const DoFHandler< 1 , 2 > &,
 const ConstraintMatrix &,
 const Quadrature< 1 > &,
 const Function< 2 > &,
  Vector<float>  &,
 const bool,
 const Quadrature< 1 -1> &,
 const bool);

 template
 void project
 (const hp::MappingCollection< 1 , 2 > &,
 const hp::DoFHandler< 1 , 2 > &,
 const ConstraintMatrix &,
 const hp::QCollection< 1 > &,
 const Function< 2 > &,
  Vector<float>  &,
 const bool,
 const hp::QCollection< 1 -1> &,
 const bool);

 template
 void project
 (const hp::DoFHandler< 1 , 2 > &,
 const ConstraintMatrix &,
 const hp::QCollection< 1 > &,
 const Function< 2 > &,
  Vector<float>  &,
 const bool,
 const hp::QCollection< 1 -1> &,
 const bool);
 }
#endif
 
#if  1  <=  3 
 namespace VectorTools {

 template
 void project
 (const Mapping< 1 , 3 > &,
 const DoFHandler< 1 , 3 > &,
 const ConstraintMatrix &,
 const Quadrature< 1 > &,
 const Function< 3 > &,
  Vector<float>  &,
 const bool,
 const Quadrature< 1 -1> &,
 const bool);

 template
 void project
 (const DoFHandler< 1 , 3 > &,
 const ConstraintMatrix &,
 const Quadrature< 1 > &,
 const Function< 3 > &,
  Vector<float>  &,
 const bool,
 const Quadrature< 1 -1> &,
 const bool);

 template
 void project
 (const hp::MappingCollection< 1 , 3 > &,
 const hp::DoFHandler< 1 , 3 > &,
 const ConstraintMatrix &,
 const hp::QCollection< 1 > &,
 const Function< 3 > &,
  Vector<float>  &,
 const bool,
 const hp::QCollection< 1 -1> &,
 const bool);

 template
 void project
 (const hp::DoFHandler< 1 , 3 > &,
 const ConstraintMatrix &,
 const hp::QCollection< 1 > &,
 const Function< 3 > &,
  Vector<float>  &,
 const bool,
 const hp::QCollection< 1 -1> &,
 const bool);
 }
#endif
 
#if  2  <=  1 
 namespace VectorTools {

 template
 void project
 (const Mapping< 2 , 1 > &,
 const DoFHandler< 2 , 1 > &,
 const ConstraintMatrix &,
 const Quadrature< 2 > &,
 const Function< 1 > &,
  Vector<float>  &,
 const bool,
 const Quadrature< 2 -1> &,
 const bool);

 template
 void project
 (const DoFHandler< 2 , 1 > &,
 const ConstraintMatrix &,
 const Quadrature< 2 > &,
 const Function< 1 > &,
  Vector<float>  &,
 const bool,
 const Quadrature< 2 -1> &,
 const bool);

 template
 void project
 (const hp::MappingCollection< 2 , 1 > &,
 const hp::DoFHandler< 2 , 1 > &,
 const ConstraintMatrix &,
 const hp::QCollection< 2 > &,
 const Function< 1 > &,
  Vector<float>  &,
 const bool,
 const hp::QCollection< 2 -1> &,
 const bool);

 template
 void project
 (const hp::DoFHandler< 2 , 1 > &,
 const ConstraintMatrix &,
 const hp::QCollection< 2 > &,
 const Function< 1 > &,
  Vector<float>  &,
 const bool,
 const hp::QCollection< 2 -1> &,
 const bool);
 }
#endif
 
#if  2  <=  2 
 namespace VectorTools {

 template
 void project
 (const Mapping< 2 , 2 > &,
 const DoFHandler< 2 , 2 > &,
 const ConstraintMatrix &,
 const Quadrature< 2 > &,
 const Function< 2 > &,
  Vector<float>  &,
 const bool,
 const Quadrature< 2 -1> &,
 const bool);

 template
 void project
 (const DoFHandler< 2 , 2 > &,
 const ConstraintMatrix &,
 const Quadrature< 2 > &,
 const Function< 2 > &,
  Vector<float>  &,
 const bool,
 const Quadrature< 2 -1> &,
 const bool);

 template
 void project
 (const hp::MappingCollection< 2 , 2 > &,
 const hp::DoFHandler< 2 , 2 > &,
 const ConstraintMatrix &,
 const hp::QCollection< 2 > &,
 const Function< 2 > &,
  Vector<float>  &,
 const bool,
 const hp::QCollection< 2 -1> &,
 const bool);

 template
 void project
 (const hp::DoFHandler< 2 , 2 > &,
 const ConstraintMatrix &,
 const hp::QCollection< 2 > &,
 const Function< 2 > &,
  Vector<float>  &,
 const bool,
 const hp::QCollection< 2 -1> &,
 const bool);
 }
#endif
 
#if  2  <=  3 
 namespace VectorTools {

 template
 void project
 (const Mapping< 2 , 3 > &,
 const DoFHandler< 2 , 3 > &,
 const ConstraintMatrix &,
 const Quadrature< 2 > &,
 const Function< 3 > &,
  Vector<float>  &,
 const bool,
 const Quadrature< 2 -1> &,
 const bool);

 template
 void project
 (const DoFHandler< 2 , 3 > &,
 const ConstraintMatrix &,
 const Quadrature< 2 > &,
 const Function< 3 > &,
  Vector<float>  &,
 const bool,
 const Quadrature< 2 -1> &,
 const bool);

 template
 void project
 (const hp::MappingCollection< 2 , 3 > &,
 const hp::DoFHandler< 2 , 3 > &,
 const ConstraintMatrix &,
 const hp::QCollection< 2 > &,
 const Function< 3 > &,
  Vector<float>  &,
 const bool,
 const hp::QCollection< 2 -1> &,
 const bool);

 template
 void project
 (const hp::DoFHandler< 2 , 3 > &,
 const ConstraintMatrix &,
 const hp::QCollection< 2 > &,
 const Function< 3 > &,
  Vector<float>  &,
 const bool,
 const hp::QCollection< 2 -1> &,
 const bool);
 }
#endif
 
#if  3  <=  1 
 namespace VectorTools {

 template
 void project
 (const Mapping< 3 , 1 > &,
 const DoFHandler< 3 , 1 > &,
 const ConstraintMatrix &,
 const Quadrature< 3 > &,
 const Function< 1 > &,
  Vector<float>  &,
 const bool,
 const Quadrature< 3 -1> &,
 const bool);

 template
 void project
 (const DoFHandler< 3 , 1 > &,
 const ConstraintMatrix &,
 const Quadrature< 3 > &,
 const Function< 1 > &,
  Vector<float>  &,
 const bool,
 const Quadrature< 3 -1> &,
 const bool);

 template
 void project
 (const hp::MappingCollection< 3 , 1 > &,
 const hp::DoFHandler< 3 , 1 > &,
 const ConstraintMatrix &,
 const hp::QCollection< 3 > &,
 const Function< 1 > &,
  Vector<float>  &,
 const bool,
 const hp::QCollection< 3 -1> &,
 const bool);

 template
 void project
 (const hp::DoFHandler< 3 , 1 > &,
 const ConstraintMatrix &,
 const hp::QCollection< 3 > &,
 const Function< 1 > &,
  Vector<float>  &,
 const bool,
 const hp::QCollection< 3 -1> &,
 const bool);
 }
#endif
 
#if  3  <=  2 
 namespace VectorTools {

 template
 void project
 (const Mapping< 3 , 2 > &,
 const DoFHandler< 3 , 2 > &,
 const ConstraintMatrix &,
 const Quadrature< 3 > &,
 const Function< 2 > &,
  Vector<float>  &,
 const bool,
 const Quadrature< 3 -1> &,
 const bool);

 template
 void project
 (const DoFHandler< 3 , 2 > &,
 const ConstraintMatrix &,
 const Quadrature< 3 > &,
 const Function< 2 > &,
  Vector<float>  &,
 const bool,
 const Quadrature< 3 -1> &,
 const bool);

 template
 void project
 (const hp::MappingCollection< 3 , 2 > &,
 const hp::DoFHandler< 3 , 2 > &,
 const ConstraintMatrix &,
 const hp::QCollection< 3 > &,
 const Function< 2 > &,
  Vector<float>  &,
 const bool,
 const hp::QCollection< 3 -1> &,
 const bool);

 template
 void project
 (const hp::DoFHandler< 3 , 2 > &,
 const ConstraintMatrix &,
 const hp::QCollection< 3 > &,
 const Function< 2 > &,
  Vector<float>  &,
 const bool,
 const hp::QCollection< 3 -1> &,
 const bool);
 }
#endif
 
#if  3  <=  3 
 namespace VectorTools {

 template
 void project
 (const Mapping< 3 , 3 > &,
 const DoFHandler< 3 , 3 > &,
 const ConstraintMatrix &,
 const Quadrature< 3 > &,
 const Function< 3 > &,
  Vector<float>  &,
 const bool,
 const Quadrature< 3 -1> &,
 const bool);

 template
 void project
 (const DoFHandler< 3 , 3 > &,
 const ConstraintMatrix &,
 const Quadrature< 3 > &,
 const Function< 3 > &,
  Vector<float>  &,
 const bool,
 const Quadrature< 3 -1> &,
 const bool);

 template
 void project
 (const hp::MappingCollection< 3 , 3 > &,
 const hp::DoFHandler< 3 , 3 > &,
 const ConstraintMatrix &,
 const hp::QCollection< 3 > &,
 const Function< 3 > &,
  Vector<float>  &,
 const bool,
 const hp::QCollection< 3 -1> &,
 const bool);

 template
 void project
 (const hp::DoFHandler< 3 , 3 > &,
 const ConstraintMatrix &,
 const hp::QCollection< 3 > &,
 const Function< 3 > &,
  Vector<float>  &,
 const bool,
 const hp::QCollection< 3 -1> &,
 const bool);
 }
#endif
 
#if  1  <=  1 
 namespace VectorTools {

 template
 void project
 (const Mapping< 1 , 1 > &,
 const DoFHandler< 1 , 1 > &,
 const ConstraintMatrix &,
 const Quadrature< 1 > &,
 const Function< 1 > &,
  Vector<long double>  &,
 const bool,
 const Quadrature< 1 -1> &,
 const bool);

 template
 void project
 (const DoFHandler< 1 , 1 > &,
 const ConstraintMatrix &,
 const Quadrature< 1 > &,
 const Function< 1 > &,
  Vector<long double>  &,
 const bool,
 const Quadrature< 1 -1> &,
 const bool);

 template
 void project
 (const hp::MappingCollection< 1 , 1 > &,
 const hp::DoFHandler< 1 , 1 > &,
 const ConstraintMatrix &,
 const hp::QCollection< 1 > &,
 const Function< 1 > &,
  Vector<long double>  &,
 const bool,
 const hp::QCollection< 1 -1> &,
 const bool);

 template
 void project
 (const hp::DoFHandler< 1 , 1 > &,
 const ConstraintMatrix &,
 const hp::QCollection< 1 > &,
 const Function< 1 > &,
  Vector<long double>  &,
 const bool,
 const hp::QCollection< 1 -1> &,
 const bool);
 }
#endif
 
#if  1  <=  2 
 namespace VectorTools {

 template
 void project
 (const Mapping< 1 , 2 > &,
 const DoFHandler< 1 , 2 > &,
 const ConstraintMatrix &,
 const Quadrature< 1 > &,
 const Function< 2 > &,
  Vector<long double>  &,
 const bool,
 const Quadrature< 1 -1> &,
 const bool);

 template
 void project
 (const DoFHandler< 1 , 2 > &,
 const ConstraintMatrix &,
 const Quadrature< 1 > &,
 const Function< 2 > &,
  Vector<long double>  &,
 const bool,
 const Quadrature< 1 -1> &,
 const bool);

 template
 void project
 (const hp::MappingCollection< 1 , 2 > &,
 const hp::DoFHandler< 1 , 2 > &,
 const ConstraintMatrix &,
 const hp::QCollection< 1 > &,
 const Function< 2 > &,
  Vector<long double>  &,
 const bool,
 const hp::QCollection< 1 -1> &,
 const bool);

 template
 void project
 (const hp::DoFHandler< 1 , 2 > &,
 const ConstraintMatrix &,
 const hp::QCollection< 1 > &,
 const Function< 2 > &,
  Vector<long double>  &,
 const bool,
 const hp::QCollection< 1 -1> &,
 const bool);
 }
#endif
 
#if  1  <=  3 
 namespace VectorTools {

 template
 void project
 (const Mapping< 1 , 3 > &,
 const DoFHandler< 1 , 3 > &,
 const ConstraintMatrix &,
 const Quadrature< 1 > &,
 const Function< 3 > &,
  Vector<long double>  &,
 const bool,
 const Quadrature< 1 -1> &,
 const bool);

 template
 void project
 (const DoFHandler< 1 , 3 > &,
 const ConstraintMatrix &,
 const Quadrature< 1 > &,
 const Function< 3 > &,
  Vector<long double>  &,
 const bool,
 const Quadrature< 1 -1> &,
 const bool);

 template
 void project
 (const hp::MappingCollection< 1 , 3 > &,
 const hp::DoFHandler< 1 , 3 > &,
 const ConstraintMatrix &,
 const hp::QCollection< 1 > &,
 const Function< 3 > &,
  Vector<long double>  &,
 const bool,
 const hp::QCollection< 1 -1> &,
 const bool);

 template
 void project
 (const hp::DoFHandler< 1 , 3 > &,
 const ConstraintMatrix &,
 const hp::QCollection< 1 > &,
 const Function< 3 > &,
  Vector<long double>  &,
 const bool,
 const hp::QCollection< 1 -1> &,
 const bool);
 }
#endif
 
#if  2  <=  1 
 namespace VectorTools {

 template
 void project
 (const Mapping< 2 , 1 > &,
 const DoFHandler< 2 , 1 > &,
 const ConstraintMatrix &,
 const Quadrature< 2 > &,
 const Function< 1 > &,
  Vector<long double>  &,
 const bool,
 const Quadrature< 2 -1> &,
 const bool);

 template
 void project
 (const DoFHandler< 2 , 1 > &,
 const ConstraintMatrix &,
 const Quadrature< 2 > &,
 const Function< 1 > &,
  Vector<long double>  &,
 const bool,
 const Quadrature< 2 -1> &,
 const bool);

 template
 void project
 (const hp::MappingCollection< 2 , 1 > &,
 const hp::DoFHandler< 2 , 1 > &,
 const ConstraintMatrix &,
 const hp::QCollection< 2 > &,
 const Function< 1 > &,
  Vector<long double>  &,
 const bool,
 const hp::QCollection< 2 -1> &,
 const bool);

 template
 void project
 (const hp::DoFHandler< 2 , 1 > &,
 const ConstraintMatrix &,
 const hp::QCollection< 2 > &,
 const Function< 1 > &,
  Vector<long double>  &,
 const bool,
 const hp::QCollection< 2 -1> &,
 const bool);
 }
#endif
 
#if  2  <=  2 
 namespace VectorTools {

 template
 void project
 (const Mapping< 2 , 2 > &,
 const DoFHandler< 2 , 2 > &,
 const ConstraintMatrix &,
 const Quadrature< 2 > &,
 const Function< 2 > &,
  Vector<long double>  &,
 const bool,
 const Quadrature< 2 -1> &,
 const bool);

 template
 void project
 (const DoFHandler< 2 , 2 > &,
 const ConstraintMatrix &,
 const Quadrature< 2 > &,
 const Function< 2 > &,
  Vector<long double>  &,
 const bool,
 const Quadrature< 2 -1> &,
 const bool);

 template
 void project
 (const hp::MappingCollection< 2 , 2 > &,
 const hp::DoFHandler< 2 , 2 > &,
 const ConstraintMatrix &,
 const hp::QCollection< 2 > &,
 const Function< 2 > &,
  Vector<long double>  &,
 const bool,
 const hp::QCollection< 2 -1> &,
 const bool);

 template
 void project
 (const hp::DoFHandler< 2 , 2 > &,
 const ConstraintMatrix &,
 const hp::QCollection< 2 > &,
 const Function< 2 > &,
  Vector<long double>  &,
 const bool,
 const hp::QCollection< 2 -1> &,
 const bool);
 }
#endif
 
#if  2  <=  3 
 namespace VectorTools {

 template
 void project
 (const Mapping< 2 , 3 > &,
 const DoFHandler< 2 , 3 > &,
 const ConstraintMatrix &,
 const Quadrature< 2 > &,
 const Function< 3 > &,
  Vector<long double>  &,
 const bool,
 const Quadrature< 2 -1> &,
 const bool);

 template
 void project
 (const DoFHandler< 2 , 3 > &,
 const ConstraintMatrix &,
 const Quadrature< 2 > &,
 const Function< 3 > &,
  Vector<long double>  &,
 const bool,
 const Quadrature< 2 -1> &,
 const bool);

 template
 void project
 (const hp::MappingCollection< 2 , 3 > &,
 const hp::DoFHandler< 2 , 3 > &,
 const ConstraintMatrix &,
 const hp::QCollection< 2 > &,
 const Function< 3 > &,
  Vector<long double>  &,
 const bool,
 const hp::QCollection< 2 -1> &,
 const bool);

 template
 void project
 (const hp::DoFHandler< 2 , 3 > &,
 const ConstraintMatrix &,
 const hp::QCollection< 2 > &,
 const Function< 3 > &,
  Vector<long double>  &,
 const bool,
 const hp::QCollection< 2 -1> &,
 const bool);
 }
#endif
 
#if  3  <=  1 
 namespace VectorTools {

 template
 void project
 (const Mapping< 3 , 1 > &,
 const DoFHandler< 3 , 1 > &,
 const ConstraintMatrix &,
 const Quadrature< 3 > &,
 const Function< 1 > &,
  Vector<long double>  &,
 const bool,
 const Quadrature< 3 -1> &,
 const bool);

 template
 void project
 (const DoFHandler< 3 , 1 > &,
 const ConstraintMatrix &,
 const Quadrature< 3 > &,
 const Function< 1 > &,
  Vector<long double>  &,
 const bool,
 const Quadrature< 3 -1> &,
 const bool);

 template
 void project
 (const hp::MappingCollection< 3 , 1 > &,
 const hp::DoFHandler< 3 , 1 > &,
 const ConstraintMatrix &,
 const hp::QCollection< 3 > &,
 const Function< 1 > &,
  Vector<long double>  &,
 const bool,
 const hp::QCollection< 3 -1> &,
 const bool);

 template
 void project
 (const hp::DoFHandler< 3 , 1 > &,
 const ConstraintMatrix &,
 const hp::QCollection< 3 > &,
 const Function< 1 > &,
  Vector<long double>  &,
 const bool,
 const hp::QCollection< 3 -1> &,
 const bool);
 }
#endif
 
#if  3  <=  2 
 namespace VectorTools {

 template
 void project
 (const Mapping< 3 , 2 > &,
 const DoFHandler< 3 , 2 > &,
 const ConstraintMatrix &,
 const Quadrature< 3 > &,
 const Function< 2 > &,
  Vector<long double>  &,
 const bool,
 const Quadrature< 3 -1> &,
 const bool);

 template
 void project
 (const DoFHandler< 3 , 2 > &,
 const ConstraintMatrix &,
 const Quadrature< 3 > &,
 const Function< 2 > &,
  Vector<long double>  &,
 const bool,
 const Quadrature< 3 -1> &,
 const bool);

 template
 void project
 (const hp::MappingCollection< 3 , 2 > &,
 const hp::DoFHandler< 3 , 2 > &,
 const ConstraintMatrix &,
 const hp::QCollection< 3 > &,
 const Function< 2 > &,
  Vector<long double>  &,
 const bool,
 const hp::QCollection< 3 -1> &,
 const bool);

 template
 void project
 (const hp::DoFHandler< 3 , 2 > &,
 const ConstraintMatrix &,
 const hp::QCollection< 3 > &,
 const Function< 2 > &,
  Vector<long double>  &,
 const bool,
 const hp::QCollection< 3 -1> &,
 const bool);
 }
#endif
 
#if  3  <=  3 
 namespace VectorTools {

 template
 void project
 (const Mapping< 3 , 3 > &,
 const DoFHandler< 3 , 3 > &,
 const ConstraintMatrix &,
 const Quadrature< 3 > &,
 const Function< 3 > &,
  Vector<long double>  &,
 const bool,
 const Quadrature< 3 -1> &,
 const bool);

 template
 void project
 (const DoFHandler< 3 , 3 > &,
 const ConstraintMatrix &,
 const Quadrature< 3 > &,
 const Function< 3 > &,
  Vector<long double>  &,
 const bool,
 const Quadrature< 3 -1> &,
 const bool);

 template
 void project
 (const hp::MappingCollection< 3 , 3 > &,
 const hp::DoFHandler< 3 , 3 > &,
 const ConstraintMatrix &,
 const hp::QCollection< 3 > &,
 const Function< 3 > &,
  Vector<long double>  &,
 const bool,
 const hp::QCollection< 3 -1> &,
 const bool);

 template
 void project
 (const hp::DoFHandler< 3 , 3 > &,
 const ConstraintMatrix &,
 const hp::QCollection< 3 > &,
 const Function< 3 > &,
  Vector<long double>  &,
 const bool,
 const hp::QCollection< 3 -1> &,
 const bool);
 }
#endif
 
#if  1  <=  1 
 namespace VectorTools {

 template
 void project
 (const Mapping< 1 , 1 > &,
 const DoFHandler< 1 , 1 > &,
 const ConstraintMatrix &,
 const Quadrature< 1 > &,
 const Function< 1 > &,
  BlockVector<double>  &,
 const bool,
 const Quadrature< 1 -1> &,
 const bool);

 template
 void project
 (const DoFHandler< 1 , 1 > &,
 const ConstraintMatrix &,
 const Quadrature< 1 > &,
 const Function< 1 > &,
  BlockVector<double>  &,
 const bool,
 const Quadrature< 1 -1> &,
 const bool);

 template
 void project
 (const hp::MappingCollection< 1 , 1 > &,
 const hp::DoFHandler< 1 , 1 > &,
 const ConstraintMatrix &,
 const hp::QCollection< 1 > &,
 const Function< 1 > &,
  BlockVector<double>  &,
 const bool,
 const hp::QCollection< 1 -1> &,
 const bool);

 template
 void project
 (const hp::DoFHandler< 1 , 1 > &,
 const ConstraintMatrix &,
 const hp::QCollection< 1 > &,
 const Function< 1 > &,
  BlockVector<double>  &,
 const bool,
 const hp::QCollection< 1 -1> &,
 const bool);
 }
#endif
 
#if  1  <=  2 
 namespace VectorTools {

 template
 void project
 (const Mapping< 1 , 2 > &,
 const DoFHandler< 1 , 2 > &,
 const ConstraintMatrix &,
 const Quadrature< 1 > &,
 const Function< 2 > &,
  BlockVector<double>  &,
 const bool,
 const Quadrature< 1 -1> &,
 const bool);

 template
 void project
 (const DoFHandler< 1 , 2 > &,
 const ConstraintMatrix &,
 const Quadrature< 1 > &,
 const Function< 2 > &,
  BlockVector<double>  &,
 const bool,
 const Quadrature< 1 -1> &,
 const bool);

 template
 void project
 (const hp::MappingCollection< 1 , 2 > &,
 const hp::DoFHandler< 1 , 2 > &,
 const ConstraintMatrix &,
 const hp::QCollection< 1 > &,
 const Function< 2 > &,
  BlockVector<double>  &,
 const bool,
 const hp::QCollection< 1 -1> &,
 const bool);

 template
 void project
 (const hp::DoFHandler< 1 , 2 > &,
 const ConstraintMatrix &,
 const hp::QCollection< 1 > &,
 const Function< 2 > &,
  BlockVector<double>  &,
 const bool,
 const hp::QCollection< 1 -1> &,
 const bool);
 }
#endif
 
#if  1  <=  3 
 namespace VectorTools {

 template
 void project
 (const Mapping< 1 , 3 > &,
 const DoFHandler< 1 , 3 > &,
 const ConstraintMatrix &,
 const Quadrature< 1 > &,
 const Function< 3 > &,
  BlockVector<double>  &,
 const bool,
 const Quadrature< 1 -1> &,
 const bool);

 template
 void project
 (const DoFHandler< 1 , 3 > &,
 const ConstraintMatrix &,
 const Quadrature< 1 > &,
 const Function< 3 > &,
  BlockVector<double>  &,
 const bool,
 const Quadrature< 1 -1> &,
 const bool);

 template
 void project
 (const hp::MappingCollection< 1 , 3 > &,
 const hp::DoFHandler< 1 , 3 > &,
 const ConstraintMatrix &,
 const hp::QCollection< 1 > &,
 const Function< 3 > &,
  BlockVector<double>  &,
 const bool,
 const hp::QCollection< 1 -1> &,
 const bool);

 template
 void project
 (const hp::DoFHandler< 1 , 3 > &,
 const ConstraintMatrix &,
 const hp::QCollection< 1 > &,
 const Function< 3 > &,
  BlockVector<double>  &,
 const bool,
 const hp::QCollection< 1 -1> &,
 const bool);
 }
#endif
 
#if  2  <=  1 
 namespace VectorTools {

 template
 void project
 (const Mapping< 2 , 1 > &,
 const DoFHandler< 2 , 1 > &,
 const ConstraintMatrix &,
 const Quadrature< 2 > &,
 const Function< 1 > &,
  BlockVector<double>  &,
 const bool,
 const Quadrature< 2 -1> &,
 const bool);

 template
 void project
 (const DoFHandler< 2 , 1 > &,
 const ConstraintMatrix &,
 const Quadrature< 2 > &,
 const Function< 1 > &,
  BlockVector<double>  &,
 const bool,
 const Quadrature< 2 -1> &,
 const bool);

 template
 void project
 (const hp::MappingCollection< 2 , 1 > &,
 const hp::DoFHandler< 2 , 1 > &,
 const ConstraintMatrix &,
 const hp::QCollection< 2 > &,
 const Function< 1 > &,
  BlockVector<double>  &,
 const bool,
 const hp::QCollection< 2 -1> &,
 const bool);

 template
 void project
 (const hp::DoFHandler< 2 , 1 > &,
 const ConstraintMatrix &,
 const hp::QCollection< 2 > &,
 const Function< 1 > &,
  BlockVector<double>  &,
 const bool,
 const hp::QCollection< 2 -1> &,
 const bool);
 }
#endif
 
#if  2  <=  2 
 namespace VectorTools {

 template
 void project
 (const Mapping< 2 , 2 > &,
 const DoFHandler< 2 , 2 > &,
 const ConstraintMatrix &,
 const Quadrature< 2 > &,
 const Function< 2 > &,
  BlockVector<double>  &,
 const bool,
 const Quadrature< 2 -1> &,
 const bool);

 template
 void project
 (const DoFHandler< 2 , 2 > &,
 const ConstraintMatrix &,
 const Quadrature< 2 > &,
 const Function< 2 > &,
  BlockVector<double>  &,
 const bool,
 const Quadrature< 2 -1> &,
 const bool);

 template
 void project
 (const hp::MappingCollection< 2 , 2 > &,
 const hp::DoFHandler< 2 , 2 > &,
 const ConstraintMatrix &,
 const hp::QCollection< 2 > &,
 const Function< 2 > &,
  BlockVector<double>  &,
 const bool,
 const hp::QCollection< 2 -1> &,
 const bool);

 template
 void project
 (const hp::DoFHandler< 2 , 2 > &,
 const ConstraintMatrix &,
 const hp::QCollection< 2 > &,
 const Function< 2 > &,
  BlockVector<double>  &,
 const bool,
 const hp::QCollection< 2 -1> &,
 const bool);
 }
#endif
 
#if  2  <=  3 
 namespace VectorTools {

 template
 void project
 (const Mapping< 2 , 3 > &,
 const DoFHandler< 2 , 3 > &,
 const ConstraintMatrix &,
 const Quadrature< 2 > &,
 const Function< 3 > &,
  BlockVector<double>  &,
 const bool,
 const Quadrature< 2 -1> &,
 const bool);

 template
 void project
 (const DoFHandler< 2 , 3 > &,
 const ConstraintMatrix &,
 const Quadrature< 2 > &,
 const Function< 3 > &,
  BlockVector<double>  &,
 const bool,
 const Quadrature< 2 -1> &,
 const bool);

 template
 void project
 (const hp::MappingCollection< 2 , 3 > &,
 const hp::DoFHandler< 2 , 3 > &,
 const ConstraintMatrix &,
 const hp::QCollection< 2 > &,
 const Function< 3 > &,
  BlockVector<double>  &,
 const bool,
 const hp::QCollection< 2 -1> &,
 const bool);

 template
 void project
 (const hp::DoFHandler< 2 , 3 > &,
 const ConstraintMatrix &,
 const hp::QCollection< 2 > &,
 const Function< 3 > &,
  BlockVector<double>  &,
 const bool,
 const hp::QCollection< 2 -1> &,
 const bool);
 }
#endif
 
#if  3  <=  1 
 namespace VectorTools {

 template
 void project
 (const Mapping< 3 , 1 > &,
 const DoFHandler< 3 , 1 > &,
 const ConstraintMatrix &,
 const Quadrature< 3 > &,
 const Function< 1 > &,
  BlockVector<double>  &,
 const bool,
 const Quadrature< 3 -1> &,
 const bool);

 template
 void project
 (const DoFHandler< 3 , 1 > &,
 const ConstraintMatrix &,
 const Quadrature< 3 > &,
 const Function< 1 > &,
  BlockVector<double>  &,
 const bool,
 const Quadrature< 3 -1> &,
 const bool);

 template
 void project
 (const hp::MappingCollection< 3 , 1 > &,
 const hp::DoFHandler< 3 , 1 > &,
 const ConstraintMatrix &,
 const hp::QCollection< 3 > &,
 const Function< 1 > &,
  BlockVector<double>  &,
 const bool,
 const hp::QCollection< 3 -1> &,
 const bool);

 template
 void project
 (const hp::DoFHandler< 3 , 1 > &,
 const ConstraintMatrix &,
 const hp::QCollection< 3 > &,
 const Function< 1 > &,
  BlockVector<double>  &,
 const bool,
 const hp::QCollection< 3 -1> &,
 const bool);
 }
#endif
 
#if  3  <=  2 
 namespace VectorTools {

 template
 void project
 (const Mapping< 3 , 2 > &,
 const DoFHandler< 3 , 2 > &,
 const ConstraintMatrix &,
 const Quadrature< 3 > &,
 const Function< 2 > &,
  BlockVector<double>  &,
 const bool,
 const Quadrature< 3 -1> &,
 const bool);

 template
 void project
 (const DoFHandler< 3 , 2 > &,
 const ConstraintMatrix &,
 const Quadrature< 3 > &,
 const Function< 2 > &,
  BlockVector<double>  &,
 const bool,
 const Quadrature< 3 -1> &,
 const bool);

 template
 void project
 (const hp::MappingCollection< 3 , 2 > &,
 const hp::DoFHandler< 3 , 2 > &,
 const ConstraintMatrix &,
 const hp::QCollection< 3 > &,
 const Function< 2 > &,
  BlockVector<double>  &,
 const bool,
 const hp::QCollection< 3 -1> &,
 const bool);

 template
 void project
 (const hp::DoFHandler< 3 , 2 > &,
 const ConstraintMatrix &,
 const hp::QCollection< 3 > &,
 const Function< 2 > &,
  BlockVector<double>  &,
 const bool,
 const hp::QCollection< 3 -1> &,
 const bool);
 }
#endif
 
#if  3  <=  3 
 namespace VectorTools {

 template
 void project
 (const Mapping< 3 , 3 > &,
 const DoFHandler< 3 , 3 > &,
 const ConstraintMatrix &,
 const Quadrature< 3 > &,
 const Function< 3 > &,
  BlockVector<double>  &,
 const bool,
 const Quadrature< 3 -1> &,
 const bool);

 template
 void project
 (const DoFHandler< 3 , 3 > &,
 const ConstraintMatrix &,
 const Quadrature< 3 > &,
 const Function< 3 > &,
  BlockVector<double>  &,
 const bool,
 const Quadrature< 3 -1> &,
 const bool);

 template
 void project
 (const hp::MappingCollection< 3 , 3 > &,
 const hp::DoFHandler< 3 , 3 > &,
 const ConstraintMatrix &,
 const hp::QCollection< 3 > &,
 const Function< 3 > &,
  BlockVector<double>  &,
 const bool,
 const hp::QCollection< 3 -1> &,
 const bool);

 template
 void project
 (const hp::DoFHandler< 3 , 3 > &,
 const ConstraintMatrix &,
 const hp::QCollection< 3 > &,
 const Function< 3 > &,
  BlockVector<double>  &,
 const bool,
 const hp::QCollection< 3 -1> &,
 const bool);
 }
#endif
 
#if  1  <=  1 
 namespace VectorTools {

 template
 void project
 (const Mapping< 1 , 1 > &,
 const DoFHandler< 1 , 1 > &,
 const ConstraintMatrix &,
 const Quadrature< 1 > &,
 const Function< 1 > &,
  BlockVector<float>  &,
 const bool,
 const Quadrature< 1 -1> &,
 const bool);

 template
 void project
 (const DoFHandler< 1 , 1 > &,
 const ConstraintMatrix &,
 const Quadrature< 1 > &,
 const Function< 1 > &,
  BlockVector<float>  &,
 const bool,
 const Quadrature< 1 -1> &,
 const bool);

 template
 void project
 (const hp::MappingCollection< 1 , 1 > &,
 const hp::DoFHandler< 1 , 1 > &,
 const ConstraintMatrix &,
 const hp::QCollection< 1 > &,
 const Function< 1 > &,
  BlockVector<float>  &,
 const bool,
 const hp::QCollection< 1 -1> &,
 const bool);

 template
 void project
 (const hp::DoFHandler< 1 , 1 > &,
 const ConstraintMatrix &,
 const hp::QCollection< 1 > &,
 const Function< 1 > &,
  BlockVector<float>  &,
 const bool,
 const hp::QCollection< 1 -1> &,
 const bool);
 }
#endif
 
#if  1  <=  2 
 namespace VectorTools {

 template
 void project
 (const Mapping< 1 , 2 > &,
 const DoFHandler< 1 , 2 > &,
 const ConstraintMatrix &,
 const Quadrature< 1 > &,
 const Function< 2 > &,
  BlockVector<float>  &,
 const bool,
 const Quadrature< 1 -1> &,
 const bool);

 template
 void project
 (const DoFHandler< 1 , 2 > &,
 const ConstraintMatrix &,
 const Quadrature< 1 > &,
 const Function< 2 > &,
  BlockVector<float>  &,
 const bool,
 const Quadrature< 1 -1> &,
 const bool);

 template
 void project
 (const hp::MappingCollection< 1 , 2 > &,
 const hp::DoFHandler< 1 , 2 > &,
 const ConstraintMatrix &,
 const hp::QCollection< 1 > &,
 const Function< 2 > &,
  BlockVector<float>  &,
 const bool,
 const hp::QCollection< 1 -1> &,
 const bool);

 template
 void project
 (const hp::DoFHandler< 1 , 2 > &,
 const ConstraintMatrix &,
 const hp::QCollection< 1 > &,
 const Function< 2 > &,
  BlockVector<float>  &,
 const bool,
 const hp::QCollection< 1 -1> &,
 const bool);
 }
#endif
 
#if  1  <=  3 
 namespace VectorTools {

 template
 void project
 (const Mapping< 1 , 3 > &,
 const DoFHandler< 1 , 3 > &,
 const ConstraintMatrix &,
 const Quadrature< 1 > &,
 const Function< 3 > &,
  BlockVector<float>  &,
 const bool,
 const Quadrature< 1 -1> &,
 const bool);

 template
 void project
 (const DoFHandler< 1 , 3 > &,
 const ConstraintMatrix &,
 const Quadrature< 1 > &,
 const Function< 3 > &,
  BlockVector<float>  &,
 const bool,
 const Quadrature< 1 -1> &,
 const bool);

 template
 void project
 (const hp::MappingCollection< 1 , 3 > &,
 const hp::DoFHandler< 1 , 3 > &,
 const ConstraintMatrix &,
 const hp::QCollection< 1 > &,
 const Function< 3 > &,
  BlockVector<float>  &,
 const bool,
 const hp::QCollection< 1 -1> &,
 const bool);

 template
 void project
 (const hp::DoFHandler< 1 , 3 > &,
 const ConstraintMatrix &,
 const hp::QCollection< 1 > &,
 const Function< 3 > &,
  BlockVector<float>  &,
 const bool,
 const hp::QCollection< 1 -1> &,
 const bool);
 }
#endif
 
#if  2  <=  1 
 namespace VectorTools {

 template
 void project
 (const Mapping< 2 , 1 > &,
 const DoFHandler< 2 , 1 > &,
 const ConstraintMatrix &,
 const Quadrature< 2 > &,
 const Function< 1 > &,
  BlockVector<float>  &,
 const bool,
 const Quadrature< 2 -1> &,
 const bool);

 template
 void project
 (const DoFHandler< 2 , 1 > &,
 const ConstraintMatrix &,
 const Quadrature< 2 > &,
 const Function< 1 > &,
  BlockVector<float>  &,
 const bool,
 const Quadrature< 2 -1> &,
 const bool);

 template
 void project
 (const hp::MappingCollection< 2 , 1 > &,
 const hp::DoFHandler< 2 , 1 > &,
 const ConstraintMatrix &,
 const hp::QCollection< 2 > &,
 const Function< 1 > &,
  BlockVector<float>  &,
 const bool,
 const hp::QCollection< 2 -1> &,
 const bool);

 template
 void project
 (const hp::DoFHandler< 2 , 1 > &,
 const ConstraintMatrix &,
 const hp::QCollection< 2 > &,
 const Function< 1 > &,
  BlockVector<float>  &,
 const bool,
 const hp::QCollection< 2 -1> &,
 const bool);
 }
#endif
 
#if  2  <=  2 
 namespace VectorTools {

 template
 void project
 (const Mapping< 2 , 2 > &,
 const DoFHandler< 2 , 2 > &,
 const ConstraintMatrix &,
 const Quadrature< 2 > &,
 const Function< 2 > &,
  BlockVector<float>  &,
 const bool,
 const Quadrature< 2 -1> &,
 const bool);

 template
 void project
 (const DoFHandler< 2 , 2 > &,
 const ConstraintMatrix &,
 const Quadrature< 2 > &,
 const Function< 2 > &,
  BlockVector<float>  &,
 const bool,
 const Quadrature< 2 -1> &,
 const bool);

 template
 void project
 (const hp::MappingCollection< 2 , 2 > &,
 const hp::DoFHandler< 2 , 2 > &,
 const ConstraintMatrix &,
 const hp::QCollection< 2 > &,
 const Function< 2 > &,
  BlockVector<float>  &,
 const bool,
 const hp::QCollection< 2 -1> &,
 const bool);

 template
 void project
 (const hp::DoFHandler< 2 , 2 > &,
 const ConstraintMatrix &,
 const hp::QCollection< 2 > &,
 const Function< 2 > &,
  BlockVector<float>  &,
 const bool,
 const hp::QCollection< 2 -1> &,
 const bool);
 }
#endif
 
#if  2  <=  3 
 namespace VectorTools {

 template
 void project
 (const Mapping< 2 , 3 > &,
 const DoFHandler< 2 , 3 > &,
 const ConstraintMatrix &,
 const Quadrature< 2 > &,
 const Function< 3 > &,
  BlockVector<float>  &,
 const bool,
 const Quadrature< 2 -1> &,
 const bool);

 template
 void project
 (const DoFHandler< 2 , 3 > &,
 const ConstraintMatrix &,
 const Quadrature< 2 > &,
 const Function< 3 > &,
  BlockVector<float>  &,
 const bool,
 const Quadrature< 2 -1> &,
 const bool);

 template
 void project
 (const hp::MappingCollection< 2 , 3 > &,
 const hp::DoFHandler< 2 , 3 > &,
 const ConstraintMatrix &,
 const hp::QCollection< 2 > &,
 const Function< 3 > &,
  BlockVector<float>  &,
 const bool,
 const hp::QCollection< 2 -1> &,
 const bool);

 template
 void project
 (const hp::DoFHandler< 2 , 3 > &,
 const ConstraintMatrix &,
 const hp::QCollection< 2 > &,
 const Function< 3 > &,
  BlockVector<float>  &,
 const bool,
 const hp::QCollection< 2 -1> &,
 const bool);
 }
#endif
 
#if  3  <=  1 
 namespace VectorTools {

 template
 void project
 (const Mapping< 3 , 1 > &,
 const DoFHandler< 3 , 1 > &,
 const ConstraintMatrix &,
 const Quadrature< 3 > &,
 const Function< 1 > &,
  BlockVector<float>  &,
 const bool,
 const Quadrature< 3 -1> &,
 const bool);

 template
 void project
 (const DoFHandler< 3 , 1 > &,
 const ConstraintMatrix &,
 const Quadrature< 3 > &,
 const Function< 1 > &,
  BlockVector<float>  &,
 const bool,
 const Quadrature< 3 -1> &,
 const bool);

 template
 void project
 (const hp::MappingCollection< 3 , 1 > &,
 const hp::DoFHandler< 3 , 1 > &,
 const ConstraintMatrix &,
 const hp::QCollection< 3 > &,
 const Function< 1 > &,
  BlockVector<float>  &,
 const bool,
 const hp::QCollection< 3 -1> &,
 const bool);

 template
 void project
 (const hp::DoFHandler< 3 , 1 > &,
 const ConstraintMatrix &,
 const hp::QCollection< 3 > &,
 const Function< 1 > &,
  BlockVector<float>  &,
 const bool,
 const hp::QCollection< 3 -1> &,
 const bool);
 }
#endif
 
#if  3  <=  2 
 namespace VectorTools {

 template
 void project
 (const Mapping< 3 , 2 > &,
 const DoFHandler< 3 , 2 > &,
 const ConstraintMatrix &,
 const Quadrature< 3 > &,
 const Function< 2 > &,
  BlockVector<float>  &,
 const bool,
 const Quadrature< 3 -1> &,
 const bool);

 template
 void project
 (const DoFHandler< 3 , 2 > &,
 const ConstraintMatrix &,
 const Quadrature< 3 > &,
 const Function< 2 > &,
  BlockVector<float>  &,
 const bool,
 const Quadrature< 3 -1> &,
 const bool);

 template
 void project
 (const hp::MappingCollection< 3 , 2 > &,
 const hp::DoFHandler< 3 , 2 > &,
 const ConstraintMatrix &,
 const hp::QCollection< 3 > &,
 const Function< 2 > &,
  BlockVector<float>  &,
 const bool,
 const hp::QCollection< 3 -1> &,
 const bool);

 template
 void project
 (const hp::DoFHandler< 3 , 2 > &,
 const ConstraintMatrix &,
 const hp::QCollection< 3 > &,
 const Function< 2 > &,
  BlockVector<float>  &,
 const bool,
 const hp::QCollection< 3 -1> &,
 const bool);
 }
#endif
 
#if  3  <=  3 
 namespace VectorTools {

 template
 void project
 (const Mapping< 3 , 3 > &,
 const DoFHandler< 3 , 3 > &,
 const ConstraintMatrix &,
 const Quadrature< 3 > &,
 const Function< 3 > &,
  BlockVector<float>  &,
 const bool,
 const Quadrature< 3 -1> &,
 const bool);

 template
 void project
 (const DoFHandler< 3 , 3 > &,
 const ConstraintMatrix &,
 const Quadrature< 3 > &,
 const Function< 3 > &,
  BlockVector<float>  &,
 const bool,
 const Quadrature< 3 -1> &,
 const bool);

 template
 void project
 (const hp::MappingCollection< 3 , 3 > &,
 const hp::DoFHandler< 3 , 3 > &,
 const ConstraintMatrix &,
 const hp::QCollection< 3 > &,
 const Function< 3 > &,
  BlockVector<float>  &,
 const bool,
 const hp::QCollection< 3 -1> &,
 const bool);

 template
 void project
 (const hp::DoFHandler< 3 , 3 > &,
 const ConstraintMatrix &,
 const hp::QCollection< 3 > &,
 const Function< 3 > &,
  BlockVector<float>  &,
 const bool,
 const hp::QCollection< 3 -1> &,
 const bool);
 }
#endif
 
#if  1  <=  1 
 namespace VectorTools {

 template
 void project
 (const Mapping< 1 , 1 > &,
 const DoFHandler< 1 , 1 > &,
 const ConstraintMatrix &,
 const Quadrature< 1 > &,
 const Function< 1 > &,
  BlockVector<long double>  &,
 const bool,
 const Quadrature< 1 -1> &,
 const bool);

 template
 void project
 (const DoFHandler< 1 , 1 > &,
 const ConstraintMatrix &,
 const Quadrature< 1 > &,
 const Function< 1 > &,
  BlockVector<long double>  &,
 const bool,
 const Quadrature< 1 -1> &,
 const bool);

 template
 void project
 (const hp::MappingCollection< 1 , 1 > &,
 const hp::DoFHandler< 1 , 1 > &,
 const ConstraintMatrix &,
 const hp::QCollection< 1 > &,
 const Function< 1 > &,
  BlockVector<long double>  &,
 const bool,
 const hp::QCollection< 1 -1> &,
 const bool);

 template
 void project
 (const hp::DoFHandler< 1 , 1 > &,
 const ConstraintMatrix &,
 const hp::QCollection< 1 > &,
 const Function< 1 > &,
  BlockVector<long double>  &,
 const bool,
 const hp::QCollection< 1 -1> &,
 const bool);
 }
#endif
 
#if  1  <=  2 
 namespace VectorTools {

 template
 void project
 (const Mapping< 1 , 2 > &,
 const DoFHandler< 1 , 2 > &,
 const ConstraintMatrix &,
 const Quadrature< 1 > &,
 const Function< 2 > &,
  BlockVector<long double>  &,
 const bool,
 const Quadrature< 1 -1> &,
 const bool);

 template
 void project
 (const DoFHandler< 1 , 2 > &,
 const ConstraintMatrix &,
 const Quadrature< 1 > &,
 const Function< 2 > &,
  BlockVector<long double>  &,
 const bool,
 const Quadrature< 1 -1> &,
 const bool);

 template
 void project
 (const hp::MappingCollection< 1 , 2 > &,
 const hp::DoFHandler< 1 , 2 > &,
 const ConstraintMatrix &,
 const hp::QCollection< 1 > &,
 const Function< 2 > &,
  BlockVector<long double>  &,
 const bool,
 const hp::QCollection< 1 -1> &,
 const bool);

 template
 void project
 (const hp::DoFHandler< 1 , 2 > &,
 const ConstraintMatrix &,
 const hp::QCollection< 1 > &,
 const Function< 2 > &,
  BlockVector<long double>  &,
 const bool,
 const hp::QCollection< 1 -1> &,
 const bool);
 }
#endif
 
#if  1  <=  3 
 namespace VectorTools {

 template
 void project
 (const Mapping< 1 , 3 > &,
 const DoFHandler< 1 , 3 > &,
 const ConstraintMatrix &,
 const Quadrature< 1 > &,
 const Function< 3 > &,
  BlockVector<long double>  &,
 const bool,
 const Quadrature< 1 -1> &,
 const bool);

 template
 void project
 (const DoFHandler< 1 , 3 > &,
 const ConstraintMatrix &,
 const Quadrature< 1 > &,
 const Function< 3 > &,
  BlockVector<long double>  &,
 const bool,
 const Quadrature< 1 -1> &,
 const bool);

 template
 void project
 (const hp::MappingCollection< 1 , 3 > &,
 const hp::DoFHandler< 1 , 3 > &,
 const ConstraintMatrix &,
 const hp::QCollection< 1 > &,
 const Function< 3 > &,
  BlockVector<long double>  &,
 const bool,
 const hp::QCollection< 1 -1> &,
 const bool);

 template
 void project
 (const hp::DoFHandler< 1 , 3 > &,
 const ConstraintMatrix &,
 const hp::QCollection< 1 > &,
 const Function< 3 > &,
  BlockVector<long double>  &,
 const bool,
 const hp::QCollection< 1 -1> &,
 const bool);
 }
#endif
 
#if  2  <=  1 
 namespace VectorTools {

 template
 void project
 (const Mapping< 2 , 1 > &,
 const DoFHandler< 2 , 1 > &,
 const ConstraintMatrix &,
 const Quadrature< 2 > &,
 const Function< 1 > &,
  BlockVector<long double>  &,
 const bool,
 const Quadrature< 2 -1> &,
 const bool);

 template
 void project
 (const DoFHandler< 2 , 1 > &,
 const ConstraintMatrix &,
 const Quadrature< 2 > &,
 const Function< 1 > &,
  BlockVector<long double>  &,
 const bool,
 const Quadrature< 2 -1> &,
 const bool);

 template
 void project
 (const hp::MappingCollection< 2 , 1 > &,
 const hp::DoFHandler< 2 , 1 > &,
 const ConstraintMatrix &,
 const hp::QCollection< 2 > &,
 const Function< 1 > &,
  BlockVector<long double>  &,
 const bool,
 const hp::QCollection< 2 -1> &,
 const bool);

 template
 void project
 (const hp::DoFHandler< 2 , 1 > &,
 const ConstraintMatrix &,
 const hp::QCollection< 2 > &,
 const Function< 1 > &,
  BlockVector<long double>  &,
 const bool,
 const hp::QCollection< 2 -1> &,
 const bool);
 }
#endif
 
#if  2  <=  2 
 namespace VectorTools {

 template
 void project
 (const Mapping< 2 , 2 > &,
 const DoFHandler< 2 , 2 > &,
 const ConstraintMatrix &,
 const Quadrature< 2 > &,
 const Function< 2 > &,
  BlockVector<long double>  &,
 const bool,
 const Quadrature< 2 -1> &,
 const bool);

 template
 void project
 (const DoFHandler< 2 , 2 > &,
 const ConstraintMatrix &,
 const Quadrature< 2 > &,
 const Function< 2 > &,
  BlockVector<long double>  &,
 const bool,
 const Quadrature< 2 -1> &,
 const bool);

 template
 void project
 (const hp::MappingCollection< 2 , 2 > &,
 const hp::DoFHandler< 2 , 2 > &,
 const ConstraintMatrix &,
 const hp::QCollection< 2 > &,
 const Function< 2 > &,
  BlockVector<long double>  &,
 const bool,
 const hp::QCollection< 2 -1> &,
 const bool);

 template
 void project
 (const hp::DoFHandler< 2 , 2 > &,
 const ConstraintMatrix &,
 const hp::QCollection< 2 > &,
 const Function< 2 > &,
  BlockVector<long double>  &,
 const bool,
 const hp::QCollection< 2 -1> &,
 const bool);
 }
#endif
 
#if  2  <=  3 
 namespace VectorTools {

 template
 void project
 (const Mapping< 2 , 3 > &,
 const DoFHandler< 2 , 3 > &,
 const ConstraintMatrix &,
 const Quadrature< 2 > &,
 const Function< 3 > &,
  BlockVector<long double>  &,
 const bool,
 const Quadrature< 2 -1> &,
 const bool);

 template
 void project
 (const DoFHandler< 2 , 3 > &,
 const ConstraintMatrix &,
 const Quadrature< 2 > &,
 const Function< 3 > &,
  BlockVector<long double>  &,
 const bool,
 const Quadrature< 2 -1> &,
 const bool);

 template
 void project
 (const hp::MappingCollection< 2 , 3 > &,
 const hp::DoFHandler< 2 , 3 > &,
 const ConstraintMatrix &,
 const hp::QCollection< 2 > &,
 const Function< 3 > &,
  BlockVector<long double>  &,
 const bool,
 const hp::QCollection< 2 -1> &,
 const bool);

 template
 void project
 (const hp::DoFHandler< 2 , 3 > &,
 const ConstraintMatrix &,
 const hp::QCollection< 2 > &,
 const Function< 3 > &,
  BlockVector<long double>  &,
 const bool,
 const hp::QCollection< 2 -1> &,
 const bool);
 }
#endif
 
#if  3  <=  1 
 namespace VectorTools {

 template
 void project
 (const Mapping< 3 , 1 > &,
 const DoFHandler< 3 , 1 > &,
 const ConstraintMatrix &,
 const Quadrature< 3 > &,
 const Function< 1 > &,
  BlockVector<long double>  &,
 const bool,
 const Quadrature< 3 -1> &,
 const bool);

 template
 void project
 (const DoFHandler< 3 , 1 > &,
 const ConstraintMatrix &,
 const Quadrature< 3 > &,
 const Function< 1 > &,
  BlockVector<long double>  &,
 const bool,
 const Quadrature< 3 -1> &,
 const bool);

 template
 void project
 (const hp::MappingCollection< 3 , 1 > &,
 const hp::DoFHandler< 3 , 1 > &,
 const ConstraintMatrix &,
 const hp::QCollection< 3 > &,
 const Function< 1 > &,
  BlockVector<long double>  &,
 const bool,
 const hp::QCollection< 3 -1> &,
 const bool);

 template
 void project
 (const hp::DoFHandler< 3 , 1 > &,
 const ConstraintMatrix &,
 const hp::QCollection< 3 > &,
 const Function< 1 > &,
  BlockVector<long double>  &,
 const bool,
 const hp::QCollection< 3 -1> &,
 const bool);
 }
#endif
 
#if  3  <=  2 
 namespace VectorTools {

 template
 void project
 (const Mapping< 3 , 2 > &,
 const DoFHandler< 3 , 2 > &,
 const ConstraintMatrix &,
 const Quadrature< 3 > &,
 const Function< 2 > &,
  BlockVector<long double>  &,
 const bool,
 const Quadrature< 3 -1> &,
 const bool);

 template
 void project
 (const DoFHandler< 3 , 2 > &,
 const ConstraintMatrix &,
 const Quadrature< 3 > &,
 const Function< 2 > &,
  BlockVector<long double>  &,
 const bool,
 const Quadrature< 3 -1> &,
 const bool);

 template
 void project
 (const hp::MappingCollection< 3 , 2 > &,
 const hp::DoFHandler< 3 , 2 > &,
 const ConstraintMatrix &,
 const hp::QCollection< 3 > &,
 const Function< 2 > &,
  BlockVector<long double>  &,
 const bool,
 const hp::QCollection< 3 -1> &,
 const bool);

 template
 void project
 (const hp::DoFHandler< 3 , 2 > &,
 const ConstraintMatrix &,
 const hp::QCollection< 3 > &,
 const Function< 2 > &,
  BlockVector<long double>  &,
 const bool,
 const hp::QCollection< 3 -1> &,
 const bool);
 }
#endif
 
#if  3  <=  3 
 namespace VectorTools {

 template
 void project
 (const Mapping< 3 , 3 > &,
 const DoFHandler< 3 , 3 > &,
 const ConstraintMatrix &,
 const Quadrature< 3 > &,
 const Function< 3 > &,
  BlockVector<long double>  &,
 const bool,
 const Quadrature< 3 -1> &,
 const bool);

 template
 void project
 (const DoFHandler< 3 , 3 > &,
 const ConstraintMatrix &,
 const Quadrature< 3 > &,
 const Function< 3 > &,
  BlockVector<long double>  &,
 const bool,
 const Quadrature< 3 -1> &,
 const bool);

 template
 void project
 (const hp::MappingCollection< 3 , 3 > &,
 const hp::DoFHandler< 3 , 3 > &,
 const ConstraintMatrix &,
 const hp::QCollection< 3 > &,
 const Function< 3 > &,
  BlockVector<long double>  &,
 const bool,
 const hp::QCollection< 3 -1> &,
 const bool);

 template
 void project
 (const hp::DoFHandler< 3 , 3 > &,
 const ConstraintMatrix &,
 const hp::QCollection< 3 > &,
 const Function< 3 > &,
  BlockVector<long double>  &,
 const bool,
 const hp::QCollection< 3 -1> &,
 const bool);
 }
#endif
 
#if  1  <=  1 
 namespace VectorTools {

 template
 void project
 (const Mapping< 1 , 1 > &,
 const DoFHandler< 1 , 1 > &,
 const ConstraintMatrix &,
 const Quadrature< 1 > &,
 const Function< 1 > &,
  parallel::distributed::Vector<double>  &,
 const bool,
 const Quadrature< 1 -1> &,
 const bool);

 template
 void project
 (const DoFHandler< 1 , 1 > &,
 const ConstraintMatrix &,
 const Quadrature< 1 > &,
 const Function< 1 > &,
  parallel::distributed::Vector<double>  &,
 const bool,
 const Quadrature< 1 -1> &,
 const bool);

 template
 void project
 (const hp::MappingCollection< 1 , 1 > &,
 const hp::DoFHandler< 1 , 1 > &,
 const ConstraintMatrix &,
 const hp::QCollection< 1 > &,
 const Function< 1 > &,
  parallel::distributed::Vector<double>  &,
 const bool,
 const hp::QCollection< 1 -1> &,
 const bool);

 template
 void project
 (const hp::DoFHandler< 1 , 1 > &,
 const ConstraintMatrix &,
 const hp::QCollection< 1 > &,
 const Function< 1 > &,
  parallel::distributed::Vector<double>  &,
 const bool,
 const hp::QCollection< 1 -1> &,
 const bool);
 }
#endif
 
#if  1  <=  2 
 namespace VectorTools {

 template
 void project
 (const Mapping< 1 , 2 > &,
 const DoFHandler< 1 , 2 > &,
 const ConstraintMatrix &,
 const Quadrature< 1 > &,
 const Function< 2 > &,
  parallel::distributed::Vector<double>  &,
 const bool,
 const Quadrature< 1 -1> &,
 const bool);

 template
 void project
 (const DoFHandler< 1 , 2 > &,
 const ConstraintMatrix &,
 const Quadrature< 1 > &,
 const Function< 2 > &,
  parallel::distributed::Vector<double>  &,
 const bool,
 const Quadrature< 1 -1> &,
 const bool);

 template
 void project
 (const hp::MappingCollection< 1 , 2 > &,
 const hp::DoFHandler< 1 , 2 > &,
 const ConstraintMatrix &,
 const hp::QCollection< 1 > &,
 const Function< 2 > &,
  parallel::distributed::Vector<double>  &,
 const bool,
 const hp::QCollection< 1 -1> &,
 const bool);

 template
 void project
 (const hp::DoFHandler< 1 , 2 > &,
 const ConstraintMatrix &,
 const hp::QCollection< 1 > &,
 const Function< 2 > &,
  parallel::distributed::Vector<double>  &,
 const bool,
 const hp::QCollection< 1 -1> &,
 const bool);
 }
#endif
 
#if  1  <=  3 
 namespace VectorTools {

 template
 void project
 (const Mapping< 1 , 3 > &,
 const DoFHandler< 1 , 3 > &,
 const ConstraintMatrix &,
 const Quadrature< 1 > &,
 const Function< 3 > &,
  parallel::distributed::Vector<double>  &,
 const bool,
 const Quadrature< 1 -1> &,
 const bool);

 template
 void project
 (const DoFHandler< 1 , 3 > &,
 const ConstraintMatrix &,
 const Quadrature< 1 > &,
 const Function< 3 > &,
  parallel::distributed::Vector<double>  &,
 const bool,
 const Quadrature< 1 -1> &,
 const bool);

 template
 void project
 (const hp::MappingCollection< 1 , 3 > &,
 const hp::DoFHandler< 1 , 3 > &,
 const ConstraintMatrix &,
 const hp::QCollection< 1 > &,
 const Function< 3 > &,
  parallel::distributed::Vector<double>  &,
 const bool,
 const hp::QCollection< 1 -1> &,
 const bool);

 template
 void project
 (const hp::DoFHandler< 1 , 3 > &,
 const ConstraintMatrix &,
 const hp::QCollection< 1 > &,
 const Function< 3 > &,
  parallel::distributed::Vector<double>  &,
 const bool,
 const hp::QCollection< 1 -1> &,
 const bool);
 }
#endif
 
#if  2  <=  1 
 namespace VectorTools {

 template
 void project
 (const Mapping< 2 , 1 > &,
 const DoFHandler< 2 , 1 > &,
 const ConstraintMatrix &,
 const Quadrature< 2 > &,
 const Function< 1 > &,
  parallel::distributed::Vector<double>  &,
 const bool,
 const Quadrature< 2 -1> &,
 const bool);

 template
 void project
 (const DoFHandler< 2 , 1 > &,
 const ConstraintMatrix &,
 const Quadrature< 2 > &,
 const Function< 1 > &,
  parallel::distributed::Vector<double>  &,
 const bool,
 const Quadrature< 2 -1> &,
 const bool);

 template
 void project
 (const hp::MappingCollection< 2 , 1 > &,
 const hp::DoFHandler< 2 , 1 > &,
 const ConstraintMatrix &,
 const hp::QCollection< 2 > &,
 const Function< 1 > &,
  parallel::distributed::Vector<double>  &,
 const bool,
 const hp::QCollection< 2 -1> &,
 const bool);

 template
 void project
 (const hp::DoFHandler< 2 , 1 > &,
 const ConstraintMatrix &,
 const hp::QCollection< 2 > &,
 const Function< 1 > &,
  parallel::distributed::Vector<double>  &,
 const bool,
 const hp::QCollection< 2 -1> &,
 const bool);
 }
#endif
 
#if  2  <=  2 
 namespace VectorTools {

 template
 void project
 (const Mapping< 2 , 2 > &,
 const DoFHandler< 2 , 2 > &,
 const ConstraintMatrix &,
 const Quadrature< 2 > &,
 const Function< 2 > &,
  parallel::distributed::Vector<double>  &,
 const bool,
 const Quadrature< 2 -1> &,
 const bool);

 template
 void project
 (const DoFHandler< 2 , 2 > &,
 const ConstraintMatrix &,
 const Quadrature< 2 > &,
 const Function< 2 > &,
  parallel::distributed::Vector<double>  &,
 const bool,
 const Quadrature< 2 -1> &,
 const bool);

 template
 void project
 (const hp::MappingCollection< 2 , 2 > &,
 const hp::DoFHandler< 2 , 2 > &,
 const ConstraintMatrix &,
 const hp::QCollection< 2 > &,
 const Function< 2 > &,
  parallel::distributed::Vector<double>  &,
 const bool,
 const hp::QCollection< 2 -1> &,
 const bool);

 template
 void project
 (const hp::DoFHandler< 2 , 2 > &,
 const ConstraintMatrix &,
 const hp::QCollection< 2 > &,
 const Function< 2 > &,
  parallel::distributed::Vector<double>  &,
 const bool,
 const hp::QCollection< 2 -1> &,
 const bool);
 }
#endif
 
#if  2  <=  3 
 namespace VectorTools {

 template
 void project
 (const Mapping< 2 , 3 > &,
 const DoFHandler< 2 , 3 > &,
 const ConstraintMatrix &,
 const Quadrature< 2 > &,
 const Function< 3 > &,
  parallel::distributed::Vector<double>  &,
 const bool,
 const Quadrature< 2 -1> &,
 const bool);

 template
 void project
 (const DoFHandler< 2 , 3 > &,
 const ConstraintMatrix &,
 const Quadrature< 2 > &,
 const Function< 3 > &,
  parallel::distributed::Vector<double>  &,
 const bool,
 const Quadrature< 2 -1> &,
 const bool);

 template
 void project
 (const hp::MappingCollection< 2 , 3 > &,
 const hp::DoFHandler< 2 , 3 > &,
 const ConstraintMatrix &,
 const hp::QCollection< 2 > &,
 const Function< 3 > &,
  parallel::distributed::Vector<double>  &,
 const bool,
 const hp::QCollection< 2 -1> &,
 const bool);

 template
 void project
 (const hp::DoFHandler< 2 , 3 > &,
 const ConstraintMatrix &,
 const hp::QCollection< 2 > &,
 const Function< 3 > &,
  parallel::distributed::Vector<double>  &,
 const bool,
 const hp::QCollection< 2 -1> &,
 const bool);
 }
#endif
 
#if  3  <=  1 
 namespace VectorTools {

 template
 void project
 (const Mapping< 3 , 1 > &,
 const DoFHandler< 3 , 1 > &,
 const ConstraintMatrix &,
 const Quadrature< 3 > &,
 const Function< 1 > &,
  parallel::distributed::Vector<double>  &,
 const bool,
 const Quadrature< 3 -1> &,
 const bool);

 template
 void project
 (const DoFHandler< 3 , 1 > &,
 const ConstraintMatrix &,
 const Quadrature< 3 > &,
 const Function< 1 > &,
  parallel::distributed::Vector<double>  &,
 const bool,
 const Quadrature< 3 -1> &,
 const bool);

 template
 void project
 (const hp::MappingCollection< 3 , 1 > &,
 const hp::DoFHandler< 3 , 1 > &,
 const ConstraintMatrix &,
 const hp::QCollection< 3 > &,
 const Function< 1 > &,
  parallel::distributed::Vector<double>  &,
 const bool,
 const hp::QCollection< 3 -1> &,
 const bool);

 template
 void project
 (const hp::DoFHandler< 3 , 1 > &,
 const ConstraintMatrix &,
 const hp::QCollection< 3 > &,
 const Function< 1 > &,
  parallel::distributed::Vector<double>  &,
 const bool,
 const hp::QCollection< 3 -1> &,
 const bool);
 }
#endif
 
#if  3  <=  2 
 namespace VectorTools {

 template
 void project
 (const Mapping< 3 , 2 > &,
 const DoFHandler< 3 , 2 > &,
 const ConstraintMatrix &,
 const Quadrature< 3 > &,
 const Function< 2 > &,
  parallel::distributed::Vector<double>  &,
 const bool,
 const Quadrature< 3 -1> &,
 const bool);

 template
 void project
 (const DoFHandler< 3 , 2 > &,
 const ConstraintMatrix &,
 const Quadrature< 3 > &,
 const Function< 2 > &,
  parallel::distributed::Vector<double>  &,
 const bool,
 const Quadrature< 3 -1> &,
 const bool);

 template
 void project
 (const hp::MappingCollection< 3 , 2 > &,
 const hp::DoFHandler< 3 , 2 > &,
 const ConstraintMatrix &,
 const hp::QCollection< 3 > &,
 const Function< 2 > &,
  parallel::distributed::Vector<double>  &,
 const bool,
 const hp::QCollection< 3 -1> &,
 const bool);

 template
 void project
 (const hp::DoFHandler< 3 , 2 > &,
 const ConstraintMatrix &,
 const hp::QCollection< 3 > &,
 const Function< 2 > &,
  parallel::distributed::Vector<double>  &,
 const bool,
 const hp::QCollection< 3 -1> &,
 const bool);
 }
#endif
 
#if  3  <=  3 
 namespace VectorTools {

 template
 void project
 (const Mapping< 3 , 3 > &,
 const DoFHandler< 3 , 3 > &,
 const ConstraintMatrix &,
 const Quadrature< 3 > &,
 const Function< 3 > &,
  parallel::distributed::Vector<double>  &,
 const bool,
 const Quadrature< 3 -1> &,
 const bool);

 template
 void project
 (const DoFHandler< 3 , 3 > &,
 const ConstraintMatrix &,
 const Quadrature< 3 > &,
 const Function< 3 > &,
  parallel::distributed::Vector<double>  &,
 const bool,
 const Quadrature< 3 -1> &,
 const bool);

 template
 void project
 (const hp::MappingCollection< 3 , 3 > &,
 const hp::DoFHandler< 3 , 3 > &,
 const ConstraintMatrix &,
 const hp::QCollection< 3 > &,
 const Function< 3 > &,
  parallel::distributed::Vector<double>  &,
 const bool,
 const hp::QCollection< 3 -1> &,
 const bool);

 template
 void project
 (const hp::DoFHandler< 3 , 3 > &,
 const ConstraintMatrix &,
 const hp::QCollection< 3 > &,
 const Function< 3 > &,
  parallel::distributed::Vector<double>  &,
 const bool,
 const hp::QCollection< 3 -1> &,
 const bool);
 }
#endif
 
#if  1  <=  1 
 namespace VectorTools {

 template
 void project
 (const Mapping< 1 , 1 > &,
 const DoFHandler< 1 , 1 > &,
 const ConstraintMatrix &,
 const Quadrature< 1 > &,
 const Function< 1 > &,
  parallel::distributed::Vector<float>  &,
 const bool,
 const Quadrature< 1 -1> &,
 const bool);

 template
 void project
 (const DoFHandler< 1 , 1 > &,
 const ConstraintMatrix &,
 const Quadrature< 1 > &,
 const Function< 1 > &,
  parallel::distributed::Vector<float>  &,
 const bool,
 const Quadrature< 1 -1> &,
 const bool);

 template
 void project
 (const hp::MappingCollection< 1 , 1 > &,
 const hp::DoFHandler< 1 , 1 > &,
 const ConstraintMatrix &,
 const hp::QCollection< 1 > &,
 const Function< 1 > &,
  parallel::distributed::Vector<float>  &,
 const bool,
 const hp::QCollection< 1 -1> &,
 const bool);

 template
 void project
 (const hp::DoFHandler< 1 , 1 > &,
 const ConstraintMatrix &,
 const hp::QCollection< 1 > &,
 const Function< 1 > &,
  parallel::distributed::Vector<float>  &,
 const bool,
 const hp::QCollection< 1 -1> &,
 const bool);
 }
#endif
 
#if  1  <=  2 
 namespace VectorTools {

 template
 void project
 (const Mapping< 1 , 2 > &,
 const DoFHandler< 1 , 2 > &,
 const ConstraintMatrix &,
 const Quadrature< 1 > &,
 const Function< 2 > &,
  parallel::distributed::Vector<float>  &,
 const bool,
 const Quadrature< 1 -1> &,
 const bool);

 template
 void project
 (const DoFHandler< 1 , 2 > &,
 const ConstraintMatrix &,
 const Quadrature< 1 > &,
 const Function< 2 > &,
  parallel::distributed::Vector<float>  &,
 const bool,
 const Quadrature< 1 -1> &,
 const bool);

 template
 void project
 (const hp::MappingCollection< 1 , 2 > &,
 const hp::DoFHandler< 1 , 2 > &,
 const ConstraintMatrix &,
 const hp::QCollection< 1 > &,
 const Function< 2 > &,
  parallel::distributed::Vector<float>  &,
 const bool,
 const hp::QCollection< 1 -1> &,
 const bool);

 template
 void project
 (const hp::DoFHandler< 1 , 2 > &,
 const ConstraintMatrix &,
 const hp::QCollection< 1 > &,
 const Function< 2 > &,
  parallel::distributed::Vector<float>  &,
 const bool,
 const hp::QCollection< 1 -1> &,
 const bool);
 }
#endif
 
#if  1  <=  3 
 namespace VectorTools {

 template
 void project
 (const Mapping< 1 , 3 > &,
 const DoFHandler< 1 , 3 > &,
 const ConstraintMatrix &,
 const Quadrature< 1 > &,
 const Function< 3 > &,
  parallel::distributed::Vector<float>  &,
 const bool,
 const Quadrature< 1 -1> &,
 const bool);

 template
 void project
 (const DoFHandler< 1 , 3 > &,
 const ConstraintMatrix &,
 const Quadrature< 1 > &,
 const Function< 3 > &,
  parallel::distributed::Vector<float>  &,
 const bool,
 const Quadrature< 1 -1> &,
 const bool);

 template
 void project
 (const hp::MappingCollection< 1 , 3 > &,
 const hp::DoFHandler< 1 , 3 > &,
 const ConstraintMatrix &,
 const hp::QCollection< 1 > &,
 const Function< 3 > &,
  parallel::distributed::Vector<float>  &,
 const bool,
 const hp::QCollection< 1 -1> &,
 const bool);

 template
 void project
 (const hp::DoFHandler< 1 , 3 > &,
 const ConstraintMatrix &,
 const hp::QCollection< 1 > &,
 const Function< 3 > &,
  parallel::distributed::Vector<float>  &,
 const bool,
 const hp::QCollection< 1 -1> &,
 const bool);
 }
#endif
 
#if  2  <=  1 
 namespace VectorTools {

 template
 void project
 (const Mapping< 2 , 1 > &,
 const DoFHandler< 2 , 1 > &,
 const ConstraintMatrix &,
 const Quadrature< 2 > &,
 const Function< 1 > &,
  parallel::distributed::Vector<float>  &,
 const bool,
 const Quadrature< 2 -1> &,
 const bool);

 template
 void project
 (const DoFHandler< 2 , 1 > &,
 const ConstraintMatrix &,
 const Quadrature< 2 > &,
 const Function< 1 > &,
  parallel::distributed::Vector<float>  &,
 const bool,
 const Quadrature< 2 -1> &,
 const bool);

 template
 void project
 (const hp::MappingCollection< 2 , 1 > &,
 const hp::DoFHandler< 2 , 1 > &,
 const ConstraintMatrix &,
 const hp::QCollection< 2 > &,
 const Function< 1 > &,
  parallel::distributed::Vector<float>  &,
 const bool,
 const hp::QCollection< 2 -1> &,
 const bool);

 template
 void project
 (const hp::DoFHandler< 2 , 1 > &,
 const ConstraintMatrix &,
 const hp::QCollection< 2 > &,
 const Function< 1 > &,
  parallel::distributed::Vector<float>  &,
 const bool,
 const hp::QCollection< 2 -1> &,
 const bool);
 }
#endif
 
#if  2  <=  2 
 namespace VectorTools {

 template
 void project
 (const Mapping< 2 , 2 > &,
 const DoFHandler< 2 , 2 > &,
 const ConstraintMatrix &,
 const Quadrature< 2 > &,
 const Function< 2 > &,
  parallel::distributed::Vector<float>  &,
 const bool,
 const Quadrature< 2 -1> &,
 const bool);

 template
 void project
 (const DoFHandler< 2 , 2 > &,
 const ConstraintMatrix &,
 const Quadrature< 2 > &,
 const Function< 2 > &,
  parallel::distributed::Vector<float>  &,
 const bool,
 const Quadrature< 2 -1> &,
 const bool);

 template
 void project
 (const hp::MappingCollection< 2 , 2 > &,
 const hp::DoFHandler< 2 , 2 > &,
 const ConstraintMatrix &,
 const hp::QCollection< 2 > &,
 const Function< 2 > &,
  parallel::distributed::Vector<float>  &,
 const bool,
 const hp::QCollection< 2 -1> &,
 const bool);

 template
 void project
 (const hp::DoFHandler< 2 , 2 > &,
 const ConstraintMatrix &,
 const hp::QCollection< 2 > &,
 const Function< 2 > &,
  parallel::distributed::Vector<float>  &,
 const bool,
 const hp::QCollection< 2 -1> &,
 const bool);
 }
#endif
 
#if  2  <=  3 
 namespace VectorTools {

 template
 void project
 (const Mapping< 2 , 3 > &,
 const DoFHandler< 2 , 3 > &,
 const ConstraintMatrix &,
 const Quadrature< 2 > &,
 const Function< 3 > &,
  parallel::distributed::Vector<float>  &,
 const bool,
 const Quadrature< 2 -1> &,
 const bool);

 template
 void project
 (const DoFHandler< 2 , 3 > &,
 const ConstraintMatrix &,
 const Quadrature< 2 > &,
 const Function< 3 > &,
  parallel::distributed::Vector<float>  &,
 const bool,
 const Quadrature< 2 -1> &,
 const bool);

 template
 void project
 (const hp::MappingCollection< 2 , 3 > &,
 const hp::DoFHandler< 2 , 3 > &,
 const ConstraintMatrix &,
 const hp::QCollection< 2 > &,
 const Function< 3 > &,
  parallel::distributed::Vector<float>  &,
 const bool,
 const hp::QCollection< 2 -1> &,
 const bool);

 template
 void project
 (const hp::DoFHandler< 2 , 3 > &,
 const ConstraintMatrix &,
 const hp::QCollection< 2 > &,
 const Function< 3 > &,
  parallel::distributed::Vector<float>  &,
 const bool,
 const hp::QCollection< 2 -1> &,
 const bool);
 }
#endif
 
#if  3  <=  1 
 namespace VectorTools {

 template
 void project
 (const Mapping< 3 , 1 > &,
 const DoFHandler< 3 , 1 > &,
 const ConstraintMatrix &,
 const Quadrature< 3 > &,
 const Function< 1 > &,
  parallel::distributed::Vector<float>  &,
 const bool,
 const Quadrature< 3 -1> &,
 const bool);

 template
 void project
 (const DoFHandler< 3 , 1 > &,
 const ConstraintMatrix &,
 const Quadrature< 3 > &,
 const Function< 1 > &,
  parallel::distributed::Vector<float>  &,
 const bool,
 const Quadrature< 3 -1> &,
 const bool);

 template
 void project
 (const hp::MappingCollection< 3 , 1 > &,
 const hp::DoFHandler< 3 , 1 > &,
 const ConstraintMatrix &,
 const hp::QCollection< 3 > &,
 const Function< 1 > &,
  parallel::distributed::Vector<float>  &,
 const bool,
 const hp::QCollection< 3 -1> &,
 const bool);

 template
 void project
 (const hp::DoFHandler< 3 , 1 > &,
 const ConstraintMatrix &,
 const hp::QCollection< 3 > &,
 const Function< 1 > &,
  parallel::distributed::Vector<float>  &,
 const bool,
 const hp::QCollection< 3 -1> &,
 const bool);
 }
#endif
 
#if  3  <=  2 
 namespace VectorTools {

 template
 void project
 (const Mapping< 3 , 2 > &,
 const DoFHandler< 3 , 2 > &,
 const ConstraintMatrix &,
 const Quadrature< 3 > &,
 const Function< 2 > &,
  parallel::distributed::Vector<float>  &,
 const bool,
 const Quadrature< 3 -1> &,
 const bool);

 template
 void project
 (const DoFHandler< 3 , 2 > &,
 const ConstraintMatrix &,
 const Quadrature< 3 > &,
 const Function< 2 > &,
  parallel::distributed::Vector<float>  &,
 const bool,
 const Quadrature< 3 -1> &,
 const bool);

 template
 void project
 (const hp::MappingCollection< 3 , 2 > &,
 const hp::DoFHandler< 3 , 2 > &,
 const ConstraintMatrix &,
 const hp::QCollection< 3 > &,
 const Function< 2 > &,
  parallel::distributed::Vector<float>  &,
 const bool,
 const hp::QCollection< 3 -1> &,
 const bool);

 template
 void project
 (const hp::DoFHandler< 3 , 2 > &,
 const ConstraintMatrix &,
 const hp::QCollection< 3 > &,
 const Function< 2 > &,
  parallel::distributed::Vector<float>  &,
 const bool,
 const hp::QCollection< 3 -1> &,
 const bool);
 }
#endif
 
#if  3  <=  3 
 namespace VectorTools {

 template
 void project
 (const Mapping< 3 , 3 > &,
 const DoFHandler< 3 , 3 > &,
 const ConstraintMatrix &,
 const Quadrature< 3 > &,
 const Function< 3 > &,
  parallel::distributed::Vector<float>  &,
 const bool,
 const Quadrature< 3 -1> &,
 const bool);

 template
 void project
 (const DoFHandler< 3 , 3 > &,
 const ConstraintMatrix &,
 const Quadrature< 3 > &,
 const Function< 3 > &,
  parallel::distributed::Vector<float>  &,
 const bool,
 const Quadrature< 3 -1> &,
 const bool);

 template
 void project
 (const hp::MappingCollection< 3 , 3 > &,
 const hp::DoFHandler< 3 , 3 > &,
 const ConstraintMatrix &,
 const hp::QCollection< 3 > &,
 const Function< 3 > &,
  parallel::distributed::Vector<float>  &,
 const bool,
 const hp::QCollection< 3 -1> &,
 const bool);

 template
 void project
 (const hp::DoFHandler< 3 , 3 > &,
 const ConstraintMatrix &,
 const hp::QCollection< 3 > &,
 const Function< 3 > &,
  parallel::distributed::Vector<float>  &,
 const bool,
 const hp::QCollection< 3 -1> &,
 const bool);
 }
#endif
 
#if  1  <=  1 
 namespace VectorTools {

 template
 void project
 (const Mapping< 1 , 1 > &,
 const DoFHandler< 1 , 1 > &,
 const ConstraintMatrix &,
 const Quadrature< 1 > &,
 const Function< 1 > &,
  parallel::distributed::Vector<long double>  &,
 const bool,
 const Quadrature< 1 -1> &,
 const bool);

 template
 void project
 (const DoFHandler< 1 , 1 > &,
 const ConstraintMatrix &,
 const Quadrature< 1 > &,
 const Function< 1 > &,
  parallel::distributed::Vector<long double>  &,
 const bool,
 const Quadrature< 1 -1> &,
 const bool);

 template
 void project
 (const hp::MappingCollection< 1 , 1 > &,
 const hp::DoFHandler< 1 , 1 > &,
 const ConstraintMatrix &,
 const hp::QCollection< 1 > &,
 const Function< 1 > &,
  parallel::distributed::Vector<long double>  &,
 const bool,
 const hp::QCollection< 1 -1> &,
 const bool);

 template
 void project
 (const hp::DoFHandler< 1 , 1 > &,
 const ConstraintMatrix &,
 const hp::QCollection< 1 > &,
 const Function< 1 > &,
  parallel::distributed::Vector<long double>  &,
 const bool,
 const hp::QCollection< 1 -1> &,
 const bool);
 }
#endif
 
#if  1  <=  2 
 namespace VectorTools {

 template
 void project
 (const Mapping< 1 , 2 > &,
 const DoFHandler< 1 , 2 > &,
 const ConstraintMatrix &,
 const Quadrature< 1 > &,
 const Function< 2 > &,
  parallel::distributed::Vector<long double>  &,
 const bool,
 const Quadrature< 1 -1> &,
 const bool);

 template
 void project
 (const DoFHandler< 1 , 2 > &,
 const ConstraintMatrix &,
 const Quadrature< 1 > &,
 const Function< 2 > &,
  parallel::distributed::Vector<long double>  &,
 const bool,
 const Quadrature< 1 -1> &,
 const bool);

 template
 void project
 (const hp::MappingCollection< 1 , 2 > &,
 const hp::DoFHandler< 1 , 2 > &,
 const ConstraintMatrix &,
 const hp::QCollection< 1 > &,
 const Function< 2 > &,
  parallel::distributed::Vector<long double>  &,
 const bool,
 const hp::QCollection< 1 -1> &,
 const bool);

 template
 void project
 (const hp::DoFHandler< 1 , 2 > &,
 const ConstraintMatrix &,
 const hp::QCollection< 1 > &,
 const Function< 2 > &,
  parallel::distributed::Vector<long double>  &,
 const bool,
 const hp::QCollection< 1 -1> &,
 const bool);
 }
#endif
 
#if  1  <=  3 
 namespace VectorTools {

 template
 void project
 (const Mapping< 1 , 3 > &,
 const DoFHandler< 1 , 3 > &,
 const ConstraintMatrix &,
 const Quadrature< 1 > &,
 const Function< 3 > &,
  parallel::distributed::Vector<long double>  &,
 const bool,
 const Quadrature< 1 -1> &,
 const bool);

 template
 void project
 (const DoFHandler< 1 , 3 > &,
 const ConstraintMatrix &,
 const Quadrature< 1 > &,
 const Function< 3 > &,
  parallel::distributed::Vector<long double>  &,
 const bool,
 const Quadrature< 1 -1> &,
 const bool);

 template
 void project
 (const hp::MappingCollection< 1 , 3 > &,
 const hp::DoFHandler< 1 , 3 > &,
 const ConstraintMatrix &,
 const hp::QCollection< 1 > &,
 const Function< 3 > &,
  parallel::distributed::Vector<long double>  &,
 const bool,
 const hp::QCollection< 1 -1> &,
 const bool);

 template
 void project
 (const hp::DoFHandler< 1 , 3 > &,
 const ConstraintMatrix &,
 const hp::QCollection< 1 > &,
 const Function< 3 > &,
  parallel::distributed::Vector<long double>  &,
 const bool,
 const hp::QCollection< 1 -1> &,
 const bool);
 }
#endif
 
#if  2  <=  1 
 namespace VectorTools {

 template
 void project
 (const Mapping< 2 , 1 > &,
 const DoFHandler< 2 , 1 > &,
 const ConstraintMatrix &,
 const Quadrature< 2 > &,
 const Function< 1 > &,
  parallel::distributed::Vector<long double>  &,
 const bool,
 const Quadrature< 2 -1> &,
 const bool);

 template
 void project
 (const DoFHandler< 2 , 1 > &,
 const ConstraintMatrix &,
 const Quadrature< 2 > &,
 const Function< 1 > &,
  parallel::distributed::Vector<long double>  &,
 const bool,
 const Quadrature< 2 -1> &,
 const bool);

 template
 void project
 (const hp::MappingCollection< 2 , 1 > &,
 const hp::DoFHandler< 2 , 1 > &,
 const ConstraintMatrix &,
 const hp::QCollection< 2 > &,
 const Function< 1 > &,
  parallel::distributed::Vector<long double>  &,
 const bool,
 const hp::QCollection< 2 -1> &,
 const bool);

 template
 void project
 (const hp::DoFHandler< 2 , 1 > &,
 const ConstraintMatrix &,
 const hp::QCollection< 2 > &,
 const Function< 1 > &,
  parallel::distributed::Vector<long double>  &,
 const bool,
 const hp::QCollection< 2 -1> &,
 const bool);
 }
#endif
 
#if  2  <=  2 
 namespace VectorTools {

 template
 void project
 (const Mapping< 2 , 2 > &,
 const DoFHandler< 2 , 2 > &,
 const ConstraintMatrix &,
 const Quadrature< 2 > &,
 const Function< 2 > &,
  parallel::distributed::Vector<long double>  &,
 const bool,
 const Quadrature< 2 -1> &,
 const bool);

 template
 void project
 (const DoFHandler< 2 , 2 > &,
 const ConstraintMatrix &,
 const Quadrature< 2 > &,
 const Function< 2 > &,
  parallel::distributed::Vector<long double>  &,
 const bool,
 const Quadrature< 2 -1> &,
 const bool);

 template
 void project
 (const hp::MappingCollection< 2 , 2 > &,
 const hp::DoFHandler< 2 , 2 > &,
 const ConstraintMatrix &,
 const hp::QCollection< 2 > &,
 const Function< 2 > &,
  parallel::distributed::Vector<long double>  &,
 const bool,
 const hp::QCollection< 2 -1> &,
 const bool);

 template
 void project
 (const hp::DoFHandler< 2 , 2 > &,
 const ConstraintMatrix &,
 const hp::QCollection< 2 > &,
 const Function< 2 > &,
  parallel::distributed::Vector<long double>  &,
 const bool,
 const hp::QCollection< 2 -1> &,
 const bool);
 }
#endif
 
#if  2  <=  3 
 namespace VectorTools {

 template
 void project
 (const Mapping< 2 , 3 > &,
 const DoFHandler< 2 , 3 > &,
 const ConstraintMatrix &,
 const Quadrature< 2 > &,
 const Function< 3 > &,
  parallel::distributed::Vector<long double>  &,
 const bool,
 const Quadrature< 2 -1> &,
 const bool);

 template
 void project
 (const DoFHandler< 2 , 3 > &,
 const ConstraintMatrix &,
 const Quadrature< 2 > &,
 const Function< 3 > &,
  parallel::distributed::Vector<long double>  &,
 const bool,
 const Quadrature< 2 -1> &,
 const bool);

 template
 void project
 (const hp::MappingCollection< 2 , 3 > &,
 const hp::DoFHandler< 2 , 3 > &,
 const ConstraintMatrix &,
 const hp::QCollection< 2 > &,
 const Function< 3 > &,
  parallel::distributed::Vector<long double>  &,
 const bool,
 const hp::QCollection< 2 -1> &,
 const bool);

 template
 void project
 (const hp::DoFHandler< 2 , 3 > &,
 const ConstraintMatrix &,
 const hp::QCollection< 2 > &,
 const Function< 3 > &,
  parallel::distributed::Vector<long double>  &,
 const bool,
 const hp::QCollection< 2 -1> &,
 const bool);
 }
#endif
 
#if  3  <=  1 
 namespace VectorTools {

 template
 void project
 (const Mapping< 3 , 1 > &,
 const DoFHandler< 3 , 1 > &,
 const ConstraintMatrix &,
 const Quadrature< 3 > &,
 const Function< 1 > &,
  parallel::distributed::Vector<long double>  &,
 const bool,
 const Quadrature< 3 -1> &,
 const bool);

 template
 void project
 (const DoFHandler< 3 , 1 > &,
 const ConstraintMatrix &,
 const Quadrature< 3 > &,
 const Function< 1 > &,
  parallel::distributed::Vector<long double>  &,
 const bool,
 const Quadrature< 3 -1> &,
 const bool);

 template
 void project
 (const hp::MappingCollection< 3 , 1 > &,
 const hp::DoFHandler< 3 , 1 > &,
 const ConstraintMatrix &,
 const hp::QCollection< 3 > &,
 const Function< 1 > &,
  parallel::distributed::Vector<long double>  &,
 const bool,
 const hp::QCollection< 3 -1> &,
 const bool);

 template
 void project
 (const hp::DoFHandler< 3 , 1 > &,
 const ConstraintMatrix &,
 const hp::QCollection< 3 > &,
 const Function< 1 > &,
  parallel::distributed::Vector<long double>  &,
 const bool,
 const hp::QCollection< 3 -1> &,
 const bool);
 }
#endif
 
#if  3  <=  2 
 namespace VectorTools {

 template
 void project
 (const Mapping< 3 , 2 > &,
 const DoFHandler< 3 , 2 > &,
 const ConstraintMatrix &,
 const Quadrature< 3 > &,
 const Function< 2 > &,
  parallel::distributed::Vector<long double>  &,
 const bool,
 const Quadrature< 3 -1> &,
 const bool);

 template
 void project
 (const DoFHandler< 3 , 2 > &,
 const ConstraintMatrix &,
 const Quadrature< 3 > &,
 const Function< 2 > &,
  parallel::distributed::Vector<long double>  &,
 const bool,
 const Quadrature< 3 -1> &,
 const bool);

 template
 void project
 (const hp::MappingCollection< 3 , 2 > &,
 const hp::DoFHandler< 3 , 2 > &,
 const ConstraintMatrix &,
 const hp::QCollection< 3 > &,
 const Function< 2 > &,
  parallel::distributed::Vector<long double>  &,
 const bool,
 const hp::QCollection< 3 -1> &,
 const bool);

 template
 void project
 (const hp::DoFHandler< 3 , 2 > &,
 const ConstraintMatrix &,
 const hp::QCollection< 3 > &,
 const Function< 2 > &,
  parallel::distributed::Vector<long double>  &,
 const bool,
 const hp::QCollection< 3 -1> &,
 const bool);
 }
#endif
 
#if  3  <=  3 
 namespace VectorTools {

 template
 void project
 (const Mapping< 3 , 3 > &,
 const DoFHandler< 3 , 3 > &,
 const ConstraintMatrix &,
 const Quadrature< 3 > &,
 const Function< 3 > &,
  parallel::distributed::Vector<long double>  &,
 const bool,
 const Quadrature< 3 -1> &,
 const bool);

 template
 void project
 (const DoFHandler< 3 , 3 > &,
 const ConstraintMatrix &,
 const Quadrature< 3 > &,
 const Function< 3 > &,
  parallel::distributed::Vector<long double>  &,
 const bool,
 const Quadrature< 3 -1> &,
 const bool);

 template
 void project
 (const hp::MappingCollection< 3 , 3 > &,
 const hp::DoFHandler< 3 , 3 > &,
 const ConstraintMatrix &,
 const hp::QCollection< 3 > &,
 const Function< 3 > &,
  parallel::distributed::Vector<long double>  &,
 const bool,
 const hp::QCollection< 3 -1> &,
 const bool);

 template
 void project
 (const hp::DoFHandler< 3 , 3 > &,
 const ConstraintMatrix &,
 const hp::QCollection< 3 > &,
 const Function< 3 > &,
  parallel::distributed::Vector<long double>  &,
 const bool,
 const hp::QCollection< 3 -1> &,
 const bool);
 }
#endif
 
#if  1  <=  1 
 namespace VectorTools {

 template
 void project
 (const Mapping< 1 , 1 > &,
 const DoFHandler< 1 , 1 > &,
 const ConstraintMatrix &,
 const Quadrature< 1 > &,
 const Function< 1 > &,
  parallel::distributed::BlockVector<double>  &,
 const bool,
 const Quadrature< 1 -1> &,
 const bool);

 template
 void project
 (const DoFHandler< 1 , 1 > &,
 const ConstraintMatrix &,
 const Quadrature< 1 > &,
 const Function< 1 > &,
  parallel::distributed::BlockVector<double>  &,
 const bool,
 const Quadrature< 1 -1> &,
 const bool);

 template
 void project
 (const hp::MappingCollection< 1 , 1 > &,
 const hp::DoFHandler< 1 , 1 > &,
 const ConstraintMatrix &,
 const hp::QCollection< 1 > &,
 const Function< 1 > &,
  parallel::distributed::BlockVector<double>  &,
 const bool,
 const hp::QCollection< 1 -1> &,
 const bool);

 template
 void project
 (const hp::DoFHandler< 1 , 1 > &,
 const ConstraintMatrix &,
 const hp::QCollection< 1 > &,
 const Function< 1 > &,
  parallel::distributed::BlockVector<double>  &,
 const bool,
 const hp::QCollection< 1 -1> &,
 const bool);
 }
#endif
 
#if  1  <=  2 
 namespace VectorTools {

 template
 void project
 (const Mapping< 1 , 2 > &,
 const DoFHandler< 1 , 2 > &,
 const ConstraintMatrix &,
 const Quadrature< 1 > &,
 const Function< 2 > &,
  parallel::distributed::BlockVector<double>  &,
 const bool,
 const Quadrature< 1 -1> &,
 const bool);

 template
 void project
 (const DoFHandler< 1 , 2 > &,
 const ConstraintMatrix &,
 const Quadrature< 1 > &,
 const Function< 2 > &,
  parallel::distributed::BlockVector<double>  &,
 const bool,
 const Quadrature< 1 -1> &,
 const bool);

 template
 void project
 (const hp::MappingCollection< 1 , 2 > &,
 const hp::DoFHandler< 1 , 2 > &,
 const ConstraintMatrix &,
 const hp::QCollection< 1 > &,
 const Function< 2 > &,
  parallel::distributed::BlockVector<double>  &,
 const bool,
 const hp::QCollection< 1 -1> &,
 const bool);

 template
 void project
 (const hp::DoFHandler< 1 , 2 > &,
 const ConstraintMatrix &,
 const hp::QCollection< 1 > &,
 const Function< 2 > &,
  parallel::distributed::BlockVector<double>  &,
 const bool,
 const hp::QCollection< 1 -1> &,
 const bool);
 }
#endif
 
#if  1  <=  3 
 namespace VectorTools {

 template
 void project
 (const Mapping< 1 , 3 > &,
 const DoFHandler< 1 , 3 > &,
 const ConstraintMatrix &,
 const Quadrature< 1 > &,
 const Function< 3 > &,
  parallel::distributed::BlockVector<double>  &,
 const bool,
 const Quadrature< 1 -1> &,
 const bool);

 template
 void project
 (const DoFHandler< 1 , 3 > &,
 const ConstraintMatrix &,
 const Quadrature< 1 > &,
 const Function< 3 > &,
  parallel::distributed::BlockVector<double>  &,
 const bool,
 const Quadrature< 1 -1> &,
 const bool);

 template
 void project
 (const hp::MappingCollection< 1 , 3 > &,
 const hp::DoFHandler< 1 , 3 > &,
 const ConstraintMatrix &,
 const hp::QCollection< 1 > &,
 const Function< 3 > &,
  parallel::distributed::BlockVector<double>  &,
 const bool,
 const hp::QCollection< 1 -1> &,
 const bool);

 template
 void project
 (const hp::DoFHandler< 1 , 3 > &,
 const ConstraintMatrix &,
 const hp::QCollection< 1 > &,
 const Function< 3 > &,
  parallel::distributed::BlockVector<double>  &,
 const bool,
 const hp::QCollection< 1 -1> &,
 const bool);
 }
#endif
 
#if  2  <=  1 
 namespace VectorTools {

 template
 void project
 (const Mapping< 2 , 1 > &,
 const DoFHandler< 2 , 1 > &,
 const ConstraintMatrix &,
 const Quadrature< 2 > &,
 const Function< 1 > &,
  parallel::distributed::BlockVector<double>  &,
 const bool,
 const Quadrature< 2 -1> &,
 const bool);

 template
 void project
 (const DoFHandler< 2 , 1 > &,
 const ConstraintMatrix &,
 const Quadrature< 2 > &,
 const Function< 1 > &,
  parallel::distributed::BlockVector<double>  &,
 const bool,
 const Quadrature< 2 -1> &,
 const bool);

 template
 void project
 (const hp::MappingCollection< 2 , 1 > &,
 const hp::DoFHandler< 2 , 1 > &,
 const ConstraintMatrix &,
 const hp::QCollection< 2 > &,
 const Function< 1 > &,
  parallel::distributed::BlockVector<double>  &,
 const bool,
 const hp::QCollection< 2 -1> &,
 const bool);

 template
 void project
 (const hp::DoFHandler< 2 , 1 > &,
 const ConstraintMatrix &,
 const hp::QCollection< 2 > &,
 const Function< 1 > &,
  parallel::distributed::BlockVector<double>  &,
 const bool,
 const hp::QCollection< 2 -1> &,
 const bool);
 }
#endif
 
#if  2  <=  2 
 namespace VectorTools {

 template
 void project
 (const Mapping< 2 , 2 > &,
 const DoFHandler< 2 , 2 > &,
 const ConstraintMatrix &,
 const Quadrature< 2 > &,
 const Function< 2 > &,
  parallel::distributed::BlockVector<double>  &,
 const bool,
 const Quadrature< 2 -1> &,
 const bool);

 template
 void project
 (const DoFHandler< 2 , 2 > &,
 const ConstraintMatrix &,
 const Quadrature< 2 > &,
 const Function< 2 > &,
  parallel::distributed::BlockVector<double>  &,
 const bool,
 const Quadrature< 2 -1> &,
 const bool);

 template
 void project
 (const hp::MappingCollection< 2 , 2 > &,
 const hp::DoFHandler< 2 , 2 > &,
 const ConstraintMatrix &,
 const hp::QCollection< 2 > &,
 const Function< 2 > &,
  parallel::distributed::BlockVector<double>  &,
 const bool,
 const hp::QCollection< 2 -1> &,
 const bool);

 template
 void project
 (const hp::DoFHandler< 2 , 2 > &,
 const ConstraintMatrix &,
 const hp::QCollection< 2 > &,
 const Function< 2 > &,
  parallel::distributed::BlockVector<double>  &,
 const bool,
 const hp::QCollection< 2 -1> &,
 const bool);
 }
#endif
 
#if  2  <=  3 
 namespace VectorTools {

 template
 void project
 (const Mapping< 2 , 3 > &,
 const DoFHandler< 2 , 3 > &,
 const ConstraintMatrix &,
 const Quadrature< 2 > &,
 const Function< 3 > &,
  parallel::distributed::BlockVector<double>  &,
 const bool,
 const Quadrature< 2 -1> &,
 const bool);

 template
 void project
 (const DoFHandler< 2 , 3 > &,
 const ConstraintMatrix &,
 const Quadrature< 2 > &,
 const Function< 3 > &,
  parallel::distributed::BlockVector<double>  &,
 const bool,
 const Quadrature< 2 -1> &,
 const bool);

 template
 void project
 (const hp::MappingCollection< 2 , 3 > &,
 const hp::DoFHandler< 2 , 3 > &,
 const ConstraintMatrix &,
 const hp::QCollection< 2 > &,
 const Function< 3 > &,
  parallel::distributed::BlockVector<double>  &,
 const bool,
 const hp::QCollection< 2 -1> &,
 const bool);

 template
 void project
 (const hp::DoFHandler< 2 , 3 > &,
 const ConstraintMatrix &,
 const hp::QCollection< 2 > &,
 const Function< 3 > &,
  parallel::distributed::BlockVector<double>  &,
 const bool,
 const hp::QCollection< 2 -1> &,
 const bool);
 }
#endif
 
#if  3  <=  1 
 namespace VectorTools {

 template
 void project
 (const Mapping< 3 , 1 > &,
 const DoFHandler< 3 , 1 > &,
 const ConstraintMatrix &,
 const Quadrature< 3 > &,
 const Function< 1 > &,
  parallel::distributed::BlockVector<double>  &,
 const bool,
 const Quadrature< 3 -1> &,
 const bool);

 template
 void project
 (const DoFHandler< 3 , 1 > &,
 const ConstraintMatrix &,
 const Quadrature< 3 > &,
 const Function< 1 > &,
  parallel::distributed::BlockVector<double>  &,
 const bool,
 const Quadrature< 3 -1> &,
 const bool);

 template
 void project
 (const hp::MappingCollection< 3 , 1 > &,
 const hp::DoFHandler< 3 , 1 > &,
 const ConstraintMatrix &,
 const hp::QCollection< 3 > &,
 const Function< 1 > &,
  parallel::distributed::BlockVector<double>  &,
 const bool,
 const hp::QCollection< 3 -1> &,
 const bool);

 template
 void project
 (const hp::DoFHandler< 3 , 1 > &,
 const ConstraintMatrix &,
 const hp::QCollection< 3 > &,
 const Function< 1 > &,
  parallel::distributed::BlockVector<double>  &,
 const bool,
 const hp::QCollection< 3 -1> &,
 const bool);
 }
#endif
 
#if  3  <=  2 
 namespace VectorTools {

 template
 void project
 (const Mapping< 3 , 2 > &,
 const DoFHandler< 3 , 2 > &,
 const ConstraintMatrix &,
 const Quadrature< 3 > &,
 const Function< 2 > &,
  parallel::distributed::BlockVector<double>  &,
 const bool,
 const Quadrature< 3 -1> &,
 const bool);

 template
 void project
 (const DoFHandler< 3 , 2 > &,
 const ConstraintMatrix &,
 const Quadrature< 3 > &,
 const Function< 2 > &,
  parallel::distributed::BlockVector<double>  &,
 const bool,
 const Quadrature< 3 -1> &,
 const bool);

 template
 void project
 (const hp::MappingCollection< 3 , 2 > &,
 const hp::DoFHandler< 3 , 2 > &,
 const ConstraintMatrix &,
 const hp::QCollection< 3 > &,
 const Function< 2 > &,
  parallel::distributed::BlockVector<double>  &,
 const bool,
 const hp::QCollection< 3 -1> &,
 const bool);

 template
 void project
 (const hp::DoFHandler< 3 , 2 > &,
 const ConstraintMatrix &,
 const hp::QCollection< 3 > &,
 const Function< 2 > &,
  parallel::distributed::BlockVector<double>  &,
 const bool,
 const hp::QCollection< 3 -1> &,
 const bool);
 }
#endif
 
#if  3  <=  3 
 namespace VectorTools {

 template
 void project
 (const Mapping< 3 , 3 > &,
 const DoFHandler< 3 , 3 > &,
 const ConstraintMatrix &,
 const Quadrature< 3 > &,
 const Function< 3 > &,
  parallel::distributed::BlockVector<double>  &,
 const bool,
 const Quadrature< 3 -1> &,
 const bool);

 template
 void project
 (const DoFHandler< 3 , 3 > &,
 const ConstraintMatrix &,
 const Quadrature< 3 > &,
 const Function< 3 > &,
  parallel::distributed::BlockVector<double>  &,
 const bool,
 const Quadrature< 3 -1> &,
 const bool);

 template
 void project
 (const hp::MappingCollection< 3 , 3 > &,
 const hp::DoFHandler< 3 , 3 > &,
 const ConstraintMatrix &,
 const hp::QCollection< 3 > &,
 const Function< 3 > &,
  parallel::distributed::BlockVector<double>  &,
 const bool,
 const hp::QCollection< 3 -1> &,
 const bool);

 template
 void project
 (const hp::DoFHandler< 3 , 3 > &,
 const ConstraintMatrix &,
 const hp::QCollection< 3 > &,
 const Function< 3 > &,
  parallel::distributed::BlockVector<double>  &,
 const bool,
 const hp::QCollection< 3 -1> &,
 const bool);
 }
#endif
 
#if  1  <=  1 
 namespace VectorTools {

 template
 void project
 (const Mapping< 1 , 1 > &,
 const DoFHandler< 1 , 1 > &,
 const ConstraintMatrix &,
 const Quadrature< 1 > &,
 const Function< 1 > &,
  parallel::distributed::BlockVector<float>  &,
 const bool,
 const Quadrature< 1 -1> &,
 const bool);

 template
 void project
 (const DoFHandler< 1 , 1 > &,
 const ConstraintMatrix &,
 const Quadrature< 1 > &,
 const Function< 1 > &,
  parallel::distributed::BlockVector<float>  &,
 const bool,
 const Quadrature< 1 -1> &,
 const bool);

 template
 void project
 (const hp::MappingCollection< 1 , 1 > &,
 const hp::DoFHandler< 1 , 1 > &,
 const ConstraintMatrix &,
 const hp::QCollection< 1 > &,
 const Function< 1 > &,
  parallel::distributed::BlockVector<float>  &,
 const bool,
 const hp::QCollection< 1 -1> &,
 const bool);

 template
 void project
 (const hp::DoFHandler< 1 , 1 > &,
 const ConstraintMatrix &,
 const hp::QCollection< 1 > &,
 const Function< 1 > &,
  parallel::distributed::BlockVector<float>  &,
 const bool,
 const hp::QCollection< 1 -1> &,
 const bool);
 }
#endif
 
#if  1  <=  2 
 namespace VectorTools {

 template
 void project
 (const Mapping< 1 , 2 > &,
 const DoFHandler< 1 , 2 > &,
 const ConstraintMatrix &,
 const Quadrature< 1 > &,
 const Function< 2 > &,
  parallel::distributed::BlockVector<float>  &,
 const bool,
 const Quadrature< 1 -1> &,
 const bool);

 template
 void project
 (const DoFHandler< 1 , 2 > &,
 const ConstraintMatrix &,
 const Quadrature< 1 > &,
 const Function< 2 > &,
  parallel::distributed::BlockVector<float>  &,
 const bool,
 const Quadrature< 1 -1> &,
 const bool);

 template
 void project
 (const hp::MappingCollection< 1 , 2 > &,
 const hp::DoFHandler< 1 , 2 > &,
 const ConstraintMatrix &,
 const hp::QCollection< 1 > &,
 const Function< 2 > &,
  parallel::distributed::BlockVector<float>  &,
 const bool,
 const hp::QCollection< 1 -1> &,
 const bool);

 template
 void project
 (const hp::DoFHandler< 1 , 2 > &,
 const ConstraintMatrix &,
 const hp::QCollection< 1 > &,
 const Function< 2 > &,
  parallel::distributed::BlockVector<float>  &,
 const bool,
 const hp::QCollection< 1 -1> &,
 const bool);
 }
#endif
 
#if  1  <=  3 
 namespace VectorTools {

 template
 void project
 (const Mapping< 1 , 3 > &,
 const DoFHandler< 1 , 3 > &,
 const ConstraintMatrix &,
 const Quadrature< 1 > &,
 const Function< 3 > &,
  parallel::distributed::BlockVector<float>  &,
 const bool,
 const Quadrature< 1 -1> &,
 const bool);

 template
 void project
 (const DoFHandler< 1 , 3 > &,
 const ConstraintMatrix &,
 const Quadrature< 1 > &,
 const Function< 3 > &,
  parallel::distributed::BlockVector<float>  &,
 const bool,
 const Quadrature< 1 -1> &,
 const bool);

 template
 void project
 (const hp::MappingCollection< 1 , 3 > &,
 const hp::DoFHandler< 1 , 3 > &,
 const ConstraintMatrix &,
 const hp::QCollection< 1 > &,
 const Function< 3 > &,
  parallel::distributed::BlockVector<float>  &,
 const bool,
 const hp::QCollection< 1 -1> &,
 const bool);

 template
 void project
 (const hp::DoFHandler< 1 , 3 > &,
 const ConstraintMatrix &,
 const hp::QCollection< 1 > &,
 const Function< 3 > &,
  parallel::distributed::BlockVector<float>  &,
 const bool,
 const hp::QCollection< 1 -1> &,
 const bool);
 }
#endif
 
#if  2  <=  1 
 namespace VectorTools {

 template
 void project
 (const Mapping< 2 , 1 > &,
 const DoFHandler< 2 , 1 > &,
 const ConstraintMatrix &,
 const Quadrature< 2 > &,
 const Function< 1 > &,
  parallel::distributed::BlockVector<float>  &,
 const bool,
 const Quadrature< 2 -1> &,
 const bool);

 template
 void project
 (const DoFHandler< 2 , 1 > &,
 const ConstraintMatrix &,
 const Quadrature< 2 > &,
 const Function< 1 > &,
  parallel::distributed::BlockVector<float>  &,
 const bool,
 const Quadrature< 2 -1> &,
 const bool);

 template
 void project
 (const hp::MappingCollection< 2 , 1 > &,
 const hp::DoFHandler< 2 , 1 > &,
 const ConstraintMatrix &,
 const hp::QCollection< 2 > &,
 const Function< 1 > &,
  parallel::distributed::BlockVector<float>  &,
 const bool,
 const hp::QCollection< 2 -1> &,
 const bool);

 template
 void project
 (const hp::DoFHandler< 2 , 1 > &,
 const ConstraintMatrix &,
 const hp::QCollection< 2 > &,
 const Function< 1 > &,
  parallel::distributed::BlockVector<float>  &,
 const bool,
 const hp::QCollection< 2 -1> &,
 const bool);
 }
#endif
 
#if  2  <=  2 
 namespace VectorTools {

 template
 void project
 (const Mapping< 2 , 2 > &,
 const DoFHandler< 2 , 2 > &,
 const ConstraintMatrix &,
 const Quadrature< 2 > &,
 const Function< 2 > &,
  parallel::distributed::BlockVector<float>  &,
 const bool,
 const Quadrature< 2 -1> &,
 const bool);

 template
 void project
 (const DoFHandler< 2 , 2 > &,
 const ConstraintMatrix &,
 const Quadrature< 2 > &,
 const Function< 2 > &,
  parallel::distributed::BlockVector<float>  &,
 const bool,
 const Quadrature< 2 -1> &,
 const bool);

 template
 void project
 (const hp::MappingCollection< 2 , 2 > &,
 const hp::DoFHandler< 2 , 2 > &,
 const ConstraintMatrix &,
 const hp::QCollection< 2 > &,
 const Function< 2 > &,
  parallel::distributed::BlockVector<float>  &,
 const bool,
 const hp::QCollection< 2 -1> &,
 const bool);

 template
 void project
 (const hp::DoFHandler< 2 , 2 > &,
 const ConstraintMatrix &,
 const hp::QCollection< 2 > &,
 const Function< 2 > &,
  parallel::distributed::BlockVector<float>  &,
 const bool,
 const hp::QCollection< 2 -1> &,
 const bool);
 }
#endif
 
#if  2  <=  3 
 namespace VectorTools {

 template
 void project
 (const Mapping< 2 , 3 > &,
 const DoFHandler< 2 , 3 > &,
 const ConstraintMatrix &,
 const Quadrature< 2 > &,
 const Function< 3 > &,
  parallel::distributed::BlockVector<float>  &,
 const bool,
 const Quadrature< 2 -1> &,
 const bool);

 template
 void project
 (const DoFHandler< 2 , 3 > &,
 const ConstraintMatrix &,
 const Quadrature< 2 > &,
 const Function< 3 > &,
  parallel::distributed::BlockVector<float>  &,
 const bool,
 const Quadrature< 2 -1> &,
 const bool);

 template
 void project
 (const hp::MappingCollection< 2 , 3 > &,
 const hp::DoFHandler< 2 , 3 > &,
 const ConstraintMatrix &,
 const hp::QCollection< 2 > &,
 const Function< 3 > &,
  parallel::distributed::BlockVector<float>  &,
 const bool,
 const hp::QCollection< 2 -1> &,
 const bool);

 template
 void project
 (const hp::DoFHandler< 2 , 3 > &,
 const ConstraintMatrix &,
 const hp::QCollection< 2 > &,
 const Function< 3 > &,
  parallel::distributed::BlockVector<float>  &,
 const bool,
 const hp::QCollection< 2 -1> &,
 const bool);
 }
#endif
 
#if  3  <=  1 
 namespace VectorTools {

 template
 void project
 (const Mapping< 3 , 1 > &,
 const DoFHandler< 3 , 1 > &,
 const ConstraintMatrix &,
 const Quadrature< 3 > &,
 const Function< 1 > &,
  parallel::distributed::BlockVector<float>  &,
 const bool,
 const Quadrature< 3 -1> &,
 const bool);

 template
 void project
 (const DoFHandler< 3 , 1 > &,
 const ConstraintMatrix &,
 const Quadrature< 3 > &,
 const Function< 1 > &,
  parallel::distributed::BlockVector<float>  &,
 const bool,
 const Quadrature< 3 -1> &,
 const bool);

 template
 void project
 (const hp::MappingCollection< 3 , 1 > &,
 const hp::DoFHandler< 3 , 1 > &,
 const ConstraintMatrix &,
 const hp::QCollection< 3 > &,
 const Function< 1 > &,
  parallel::distributed::BlockVector<float>  &,
 const bool,
 const hp::QCollection< 3 -1> &,
 const bool);

 template
 void project
 (const hp::DoFHandler< 3 , 1 > &,
 const ConstraintMatrix &,
 const hp::QCollection< 3 > &,
 const Function< 1 > &,
  parallel::distributed::BlockVector<float>  &,
 const bool,
 const hp::QCollection< 3 -1> &,
 const bool);
 }
#endif
 
#if  3  <=  2 
 namespace VectorTools {

 template
 void project
 (const Mapping< 3 , 2 > &,
 const DoFHandler< 3 , 2 > &,
 const ConstraintMatrix &,
 const Quadrature< 3 > &,
 const Function< 2 > &,
  parallel::distributed::BlockVector<float>  &,
 const bool,
 const Quadrature< 3 -1> &,
 const bool);

 template
 void project
 (const DoFHandler< 3 , 2 > &,
 const ConstraintMatrix &,
 const Quadrature< 3 > &,
 const Function< 2 > &,
  parallel::distributed::BlockVector<float>  &,
 const bool,
 const Quadrature< 3 -1> &,
 const bool);

 template
 void project
 (const hp::MappingCollection< 3 , 2 > &,
 const hp::DoFHandler< 3 , 2 > &,
 const ConstraintMatrix &,
 const hp::QCollection< 3 > &,
 const Function< 2 > &,
  parallel::distributed::BlockVector<float>  &,
 const bool,
 const hp::QCollection< 3 -1> &,
 const bool);

 template
 void project
 (const hp::DoFHandler< 3 , 2 > &,
 const ConstraintMatrix &,
 const hp::QCollection< 3 > &,
 const Function< 2 > &,
  parallel::distributed::BlockVector<float>  &,
 const bool,
 const hp::QCollection< 3 -1> &,
 const bool);
 }
#endif
 
#if  3  <=  3 
 namespace VectorTools {

 template
 void project
 (const Mapping< 3 , 3 > &,
 const DoFHandler< 3 , 3 > &,
 const ConstraintMatrix &,
 const Quadrature< 3 > &,
 const Function< 3 > &,
  parallel::distributed::BlockVector<float>  &,
 const bool,
 const Quadrature< 3 -1> &,
 const bool);

 template
 void project
 (const DoFHandler< 3 , 3 > &,
 const ConstraintMatrix &,
 const Quadrature< 3 > &,
 const Function< 3 > &,
  parallel::distributed::BlockVector<float>  &,
 const bool,
 const Quadrature< 3 -1> &,
 const bool);

 template
 void project
 (const hp::MappingCollection< 3 , 3 > &,
 const hp::DoFHandler< 3 , 3 > &,
 const ConstraintMatrix &,
 const hp::QCollection< 3 > &,
 const Function< 3 > &,
  parallel::distributed::BlockVector<float>  &,
 const bool,
 const hp::QCollection< 3 -1> &,
 const bool);

 template
 void project
 (const hp::DoFHandler< 3 , 3 > &,
 const ConstraintMatrix &,
 const hp::QCollection< 3 > &,
 const Function< 3 > &,
  parallel::distributed::BlockVector<float>  &,
 const bool,
 const hp::QCollection< 3 -1> &,
 const bool);
 }
#endif
 
#if  1  <=  1 
 namespace VectorTools {

 template
 void project
 (const Mapping< 1 , 1 > &,
 const DoFHandler< 1 , 1 > &,
 const ConstraintMatrix &,
 const Quadrature< 1 > &,
 const Function< 1 > &,
  parallel::distributed::BlockVector<long double>  &,
 const bool,
 const Quadrature< 1 -1> &,
 const bool);

 template
 void project
 (const DoFHandler< 1 , 1 > &,
 const ConstraintMatrix &,
 const Quadrature< 1 > &,
 const Function< 1 > &,
  parallel::distributed::BlockVector<long double>  &,
 const bool,
 const Quadrature< 1 -1> &,
 const bool);

 template
 void project
 (const hp::MappingCollection< 1 , 1 > &,
 const hp::DoFHandler< 1 , 1 > &,
 const ConstraintMatrix &,
 const hp::QCollection< 1 > &,
 const Function< 1 > &,
  parallel::distributed::BlockVector<long double>  &,
 const bool,
 const hp::QCollection< 1 -1> &,
 const bool);

 template
 void project
 (const hp::DoFHandler< 1 , 1 > &,
 const ConstraintMatrix &,
 const hp::QCollection< 1 > &,
 const Function< 1 > &,
  parallel::distributed::BlockVector<long double>  &,
 const bool,
 const hp::QCollection< 1 -1> &,
 const bool);
 }
#endif
 
#if  1  <=  2 
 namespace VectorTools {

 template
 void project
 (const Mapping< 1 , 2 > &,
 const DoFHandler< 1 , 2 > &,
 const ConstraintMatrix &,
 const Quadrature< 1 > &,
 const Function< 2 > &,
  parallel::distributed::BlockVector<long double>  &,
 const bool,
 const Quadrature< 1 -1> &,
 const bool);

 template
 void project
 (const DoFHandler< 1 , 2 > &,
 const ConstraintMatrix &,
 const Quadrature< 1 > &,
 const Function< 2 > &,
  parallel::distributed::BlockVector<long double>  &,
 const bool,
 const Quadrature< 1 -1> &,
 const bool);

 template
 void project
 (const hp::MappingCollection< 1 , 2 > &,
 const hp::DoFHandler< 1 , 2 > &,
 const ConstraintMatrix &,
 const hp::QCollection< 1 > &,
 const Function< 2 > &,
  parallel::distributed::BlockVector<long double>  &,
 const bool,
 const hp::QCollection< 1 -1> &,
 const bool);

 template
 void project
 (const hp::DoFHandler< 1 , 2 > &,
 const ConstraintMatrix &,
 const hp::QCollection< 1 > &,
 const Function< 2 > &,
  parallel::distributed::BlockVector<long double>  &,
 const bool,
 const hp::QCollection< 1 -1> &,
 const bool);
 }
#endif
 
#if  1  <=  3 
 namespace VectorTools {

 template
 void project
 (const Mapping< 1 , 3 > &,
 const DoFHandler< 1 , 3 > &,
 const ConstraintMatrix &,
 const Quadrature< 1 > &,
 const Function< 3 > &,
  parallel::distributed::BlockVector<long double>  &,
 const bool,
 const Quadrature< 1 -1> &,
 const bool);

 template
 void project
 (const DoFHandler< 1 , 3 > &,
 const ConstraintMatrix &,
 const Quadrature< 1 > &,
 const Function< 3 > &,
  parallel::distributed::BlockVector<long double>  &,
 const bool,
 const Quadrature< 1 -1> &,
 const bool);

 template
 void project
 (const hp::MappingCollection< 1 , 3 > &,
 const hp::DoFHandler< 1 , 3 > &,
 const ConstraintMatrix &,
 const hp::QCollection< 1 > &,
 const Function< 3 > &,
  parallel::distributed::BlockVector<long double>  &,
 const bool,
 const hp::QCollection< 1 -1> &,
 const bool);

 template
 void project
 (const hp::DoFHandler< 1 , 3 > &,
 const ConstraintMatrix &,
 const hp::QCollection< 1 > &,
 const Function< 3 > &,
  parallel::distributed::BlockVector<long double>  &,
 const bool,
 const hp::QCollection< 1 -1> &,
 const bool);
 }
#endif
 
#if  2  <=  1 
 namespace VectorTools {

 template
 void project
 (const Mapping< 2 , 1 > &,
 const DoFHandler< 2 , 1 > &,
 const ConstraintMatrix &,
 const Quadrature< 2 > &,
 const Function< 1 > &,
  parallel::distributed::BlockVector<long double>  &,
 const bool,
 const Quadrature< 2 -1> &,
 const bool);

 template
 void project
 (const DoFHandler< 2 , 1 > &,
 const ConstraintMatrix &,
 const Quadrature< 2 > &,
 const Function< 1 > &,
  parallel::distributed::BlockVector<long double>  &,
 const bool,
 const Quadrature< 2 -1> &,
 const bool);

 template
 void project
 (const hp::MappingCollection< 2 , 1 > &,
 const hp::DoFHandler< 2 , 1 > &,
 const ConstraintMatrix &,
 const hp::QCollection< 2 > &,
 const Function< 1 > &,
  parallel::distributed::BlockVector<long double>  &,
 const bool,
 const hp::QCollection< 2 -1> &,
 const bool);

 template
 void project
 (const hp::DoFHandler< 2 , 1 > &,
 const ConstraintMatrix &,
 const hp::QCollection< 2 > &,
 const Function< 1 > &,
  parallel::distributed::BlockVector<long double>  &,
 const bool,
 const hp::QCollection< 2 -1> &,
 const bool);
 }
#endif
 
#if  2  <=  2 
 namespace VectorTools {

 template
 void project
 (const Mapping< 2 , 2 > &,
 const DoFHandler< 2 , 2 > &,
 const ConstraintMatrix &,
 const Quadrature< 2 > &,
 const Function< 2 > &,
  parallel::distributed::BlockVector<long double>  &,
 const bool,
 const Quadrature< 2 -1> &,
 const bool);

 template
 void project
 (const DoFHandler< 2 , 2 > &,
 const ConstraintMatrix &,
 const Quadrature< 2 > &,
 const Function< 2 > &,
  parallel::distributed::BlockVector<long double>  &,
 const bool,
 const Quadrature< 2 -1> &,
 const bool);

 template
 void project
 (const hp::MappingCollection< 2 , 2 > &,
 const hp::DoFHandler< 2 , 2 > &,
 const ConstraintMatrix &,
 const hp::QCollection< 2 > &,
 const Function< 2 > &,
  parallel::distributed::BlockVector<long double>  &,
 const bool,
 const hp::QCollection< 2 -1> &,
 const bool);

 template
 void project
 (const hp::DoFHandler< 2 , 2 > &,
 const ConstraintMatrix &,
 const hp::QCollection< 2 > &,
 const Function< 2 > &,
  parallel::distributed::BlockVector<long double>  &,
 const bool,
 const hp::QCollection< 2 -1> &,
 const bool);
 }
#endif
 
#if  2  <=  3 
 namespace VectorTools {

 template
 void project
 (const Mapping< 2 , 3 > &,
 const DoFHandler< 2 , 3 > &,
 const ConstraintMatrix &,
 const Quadrature< 2 > &,
 const Function< 3 > &,
  parallel::distributed::BlockVector<long double>  &,
 const bool,
 const Quadrature< 2 -1> &,
 const bool);

 template
 void project
 (const DoFHandler< 2 , 3 > &,
 const ConstraintMatrix &,
 const Quadrature< 2 > &,
 const Function< 3 > &,
  parallel::distributed::BlockVector<long double>  &,
 const bool,
 const Quadrature< 2 -1> &,
 const bool);

 template
 void project
 (const hp::MappingCollection< 2 , 3 > &,
 const hp::DoFHandler< 2 , 3 > &,
 const ConstraintMatrix &,
 const hp::QCollection< 2 > &,
 const Function< 3 > &,
  parallel::distributed::BlockVector<long double>  &,
 const bool,
 const hp::QCollection< 2 -1> &,
 const bool);

 template
 void project
 (const hp::DoFHandler< 2 , 3 > &,
 const ConstraintMatrix &,
 const hp::QCollection< 2 > &,
 const Function< 3 > &,
  parallel::distributed::BlockVector<long double>  &,
 const bool,
 const hp::QCollection< 2 -1> &,
 const bool);
 }
#endif
 
#if  3  <=  1 
 namespace VectorTools {

 template
 void project
 (const Mapping< 3 , 1 > &,
 const DoFHandler< 3 , 1 > &,
 const ConstraintMatrix &,
 const Quadrature< 3 > &,
 const Function< 1 > &,
  parallel::distributed::BlockVector<long double>  &,
 const bool,
 const Quadrature< 3 -1> &,
 const bool);

 template
 void project
 (const DoFHandler< 3 , 1 > &,
 const ConstraintMatrix &,
 const Quadrature< 3 > &,
 const Function< 1 > &,
  parallel::distributed::BlockVector<long double>  &,
 const bool,
 const Quadrature< 3 -1> &,
 const bool);

 template
 void project
 (const hp::MappingCollection< 3 , 1 > &,
 const hp::DoFHandler< 3 , 1 > &,
 const ConstraintMatrix &,
 const hp::QCollection< 3 > &,
 const Function< 1 > &,
  parallel::distributed::BlockVector<long double>  &,
 const bool,
 const hp::QCollection< 3 -1> &,
 const bool);

 template
 void project
 (const hp::DoFHandler< 3 , 1 > &,
 const ConstraintMatrix &,
 const hp::QCollection< 3 > &,
 const Function< 1 > &,
  parallel::distributed::BlockVector<long double>  &,
 const bool,
 const hp::QCollection< 3 -1> &,
 const bool);
 }
#endif
 
#if  3  <=  2 
 namespace VectorTools {

 template
 void project
 (const Mapping< 3 , 2 > &,
 const DoFHandler< 3 , 2 > &,
 const ConstraintMatrix &,
 const Quadrature< 3 > &,
 const Function< 2 > &,
  parallel::distributed::BlockVector<long double>  &,
 const bool,
 const Quadrature< 3 -1> &,
 const bool);

 template
 void project
 (const DoFHandler< 3 , 2 > &,
 const ConstraintMatrix &,
 const Quadrature< 3 > &,
 const Function< 2 > &,
  parallel::distributed::BlockVector<long double>  &,
 const bool,
 const Quadrature< 3 -1> &,
 const bool);

 template
 void project
 (const hp::MappingCollection< 3 , 2 > &,
 const hp::DoFHandler< 3 , 2 > &,
 const ConstraintMatrix &,
 const hp::QCollection< 3 > &,
 const Function< 2 > &,
  parallel::distributed::BlockVector<long double>  &,
 const bool,
 const hp::QCollection< 3 -1> &,
 const bool);

 template
 void project
 (const hp::DoFHandler< 3 , 2 > &,
 const ConstraintMatrix &,
 const hp::QCollection< 3 > &,
 const Function< 2 > &,
  parallel::distributed::BlockVector<long double>  &,
 const bool,
 const hp::QCollection< 3 -1> &,
 const bool);
 }
#endif
 
#if  3  <=  3 
 namespace VectorTools {

 template
 void project
 (const Mapping< 3 , 3 > &,
 const DoFHandler< 3 , 3 > &,
 const ConstraintMatrix &,
 const Quadrature< 3 > &,
 const Function< 3 > &,
  parallel::distributed::BlockVector<long double>  &,
 const bool,
 const Quadrature< 3 -1> &,
 const bool);

 template
 void project
 (const DoFHandler< 3 , 3 > &,
 const ConstraintMatrix &,
 const Quadrature< 3 > &,
 const Function< 3 > &,
  parallel::distributed::BlockVector<long double>  &,
 const bool,
 const Quadrature< 3 -1> &,
 const bool);

 template
 void project
 (const hp::MappingCollection< 3 , 3 > &,
 const hp::DoFHandler< 3 , 3 > &,
 const ConstraintMatrix &,
 const hp::QCollection< 3 > &,
 const Function< 3 > &,
  parallel::distributed::BlockVector<long double>  &,
 const bool,
 const hp::QCollection< 3 -1> &,
 const bool);

 template
 void project
 (const hp::DoFHandler< 3 , 3 > &,
 const ConstraintMatrix &,
 const hp::QCollection< 3 > &,
 const Function< 3 > &,
  parallel::distributed::BlockVector<long double>  &,
 const bool,
 const hp::QCollection< 3 -1> &,
 const bool);
 }
#endif
 
