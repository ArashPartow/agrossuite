#if  1  ==  1 

 namespace VectorTools {

 template
 void point_value< 1 > (
 const hp::DoFHandler< 1 >&,
 const  Vector<double> &,
 const Point< 1 >&,
 Vector<double>&);

 template
 double point_value< 1 > (
 const hp::DoFHandler< 1 >&,
 const  Vector<double> &,
 const Point< 1 >&);

 template
 void point_value< 1 > (
 const hp::MappingCollection< 1 >&,
 const hp::DoFHandler< 1 >&,
 const  Vector<double> &,
 const Point< 1 >&,
 Vector<double>&);

 template
 double point_value< 1 > (
 const hp::MappingCollection< 1 >&,
 const hp::DoFHandler< 1 >&,
 const  Vector<double> &,
 const Point< 1 >&);

 template
 void point_difference< 1 > (
 const DoFHandler< 1 >&,
 const  Vector<double> &,
 const Function< 1 >&,
 Vector<double>&,
 const Point< 1 >&);

 template
 void point_difference< 1 > (
 const Mapping< 1 >&,
 const DoFHandler< 1 >&,
 const  Vector<double> &,
 const Function< 1 >&,
 Vector<double>&,
 const Point< 1 >&);

 template
 void point_value< 1 > (
 const DoFHandler< 1 >&,
 const  Vector<double> &,
 const Point< 1 >&,
 Vector<double>&);

 template
 double point_value< 1 > (
 const DoFHandler< 1 >&,
 const  Vector<double> &,
 const Point< 1 >&);

 template
 void point_value< 1 > (
 const Mapping< 1 >&,
 const DoFHandler< 1 >&,
 const  Vector<double> &,
 const Point< 1 >&,
 Vector<double>&);

 template
 double point_value< 1 > (
 const Mapping< 1 >&,
 const DoFHandler< 1 >&,
 const  Vector<double> &,
 const Point< 1 >&);

 }
#endif
 
#if  1  ==  2 

 namespace VectorTools {

 template
 void point_value< 1 > (
 const hp::DoFHandler< 1 >&,
 const  Vector<double> &,
 const Point< 1 >&,
 Vector<double>&);

 template
 double point_value< 1 > (
 const hp::DoFHandler< 1 >&,
 const  Vector<double> &,
 const Point< 1 >&);

 template
 void point_value< 1 > (
 const hp::MappingCollection< 1 >&,
 const hp::DoFHandler< 1 >&,
 const  Vector<double> &,
 const Point< 1 >&,
 Vector<double>&);

 template
 double point_value< 1 > (
 const hp::MappingCollection< 1 >&,
 const hp::DoFHandler< 1 >&,
 const  Vector<double> &,
 const Point< 1 >&);

 template
 void point_difference< 1 > (
 const DoFHandler< 1 >&,
 const  Vector<double> &,
 const Function< 1 >&,
 Vector<double>&,
 const Point< 1 >&);

 template
 void point_difference< 1 > (
 const Mapping< 1 >&,
 const DoFHandler< 1 >&,
 const  Vector<double> &,
 const Function< 1 >&,
 Vector<double>&,
 const Point< 1 >&);

 template
 void point_value< 1 > (
 const DoFHandler< 1 >&,
 const  Vector<double> &,
 const Point< 1 >&,
 Vector<double>&);

 template
 double point_value< 1 > (
 const DoFHandler< 1 >&,
 const  Vector<double> &,
 const Point< 1 >&);

 template
 void point_value< 1 > (
 const Mapping< 1 >&,
 const DoFHandler< 1 >&,
 const  Vector<double> &,
 const Point< 1 >&,
 Vector<double>&);

 template
 double point_value< 1 > (
 const Mapping< 1 >&,
 const DoFHandler< 1 >&,
 const  Vector<double> &,
 const Point< 1 >&);

 }
#endif
 
#if  1  ==  3 

 namespace VectorTools {

 template
 void point_value< 1 > (
 const hp::DoFHandler< 1 >&,
 const  Vector<double> &,
 const Point< 1 >&,
 Vector<double>&);

 template
 double point_value< 1 > (
 const hp::DoFHandler< 1 >&,
 const  Vector<double> &,
 const Point< 1 >&);

 template
 void point_value< 1 > (
 const hp::MappingCollection< 1 >&,
 const hp::DoFHandler< 1 >&,
 const  Vector<double> &,
 const Point< 1 >&,
 Vector<double>&);

 template
 double point_value< 1 > (
 const hp::MappingCollection< 1 >&,
 const hp::DoFHandler< 1 >&,
 const  Vector<double> &,
 const Point< 1 >&);

 template
 void point_difference< 1 > (
 const DoFHandler< 1 >&,
 const  Vector<double> &,
 const Function< 1 >&,
 Vector<double>&,
 const Point< 1 >&);

 template
 void point_difference< 1 > (
 const Mapping< 1 >&,
 const DoFHandler< 1 >&,
 const  Vector<double> &,
 const Function< 1 >&,
 Vector<double>&,
 const Point< 1 >&);

 template
 void point_value< 1 > (
 const DoFHandler< 1 >&,
 const  Vector<double> &,
 const Point< 1 >&,
 Vector<double>&);

 template
 double point_value< 1 > (
 const DoFHandler< 1 >&,
 const  Vector<double> &,
 const Point< 1 >&);

 template
 void point_value< 1 > (
 const Mapping< 1 >&,
 const DoFHandler< 1 >&,
 const  Vector<double> &,
 const Point< 1 >&,
 Vector<double>&);

 template
 double point_value< 1 > (
 const Mapping< 1 >&,
 const DoFHandler< 1 >&,
 const  Vector<double> &,
 const Point< 1 >&);

 }
#endif
 
#if  2  ==  1 

 namespace VectorTools {

 template
 void point_value< 2 > (
 const hp::DoFHandler< 2 >&,
 const  Vector<double> &,
 const Point< 2 >&,
 Vector<double>&);

 template
 double point_value< 2 > (
 const hp::DoFHandler< 2 >&,
 const  Vector<double> &,
 const Point< 2 >&);

 template
 void point_value< 2 > (
 const hp::MappingCollection< 2 >&,
 const hp::DoFHandler< 2 >&,
 const  Vector<double> &,
 const Point< 2 >&,
 Vector<double>&);

 template
 double point_value< 2 > (
 const hp::MappingCollection< 2 >&,
 const hp::DoFHandler< 2 >&,
 const  Vector<double> &,
 const Point< 2 >&);

 template
 void point_difference< 2 > (
 const DoFHandler< 2 >&,
 const  Vector<double> &,
 const Function< 2 >&,
 Vector<double>&,
 const Point< 2 >&);

 template
 void point_difference< 2 > (
 const Mapping< 2 >&,
 const DoFHandler< 2 >&,
 const  Vector<double> &,
 const Function< 2 >&,
 Vector<double>&,
 const Point< 2 >&);

 template
 void point_value< 2 > (
 const DoFHandler< 2 >&,
 const  Vector<double> &,
 const Point< 2 >&,
 Vector<double>&);

 template
 double point_value< 2 > (
 const DoFHandler< 2 >&,
 const  Vector<double> &,
 const Point< 2 >&);

 template
 void point_value< 2 > (
 const Mapping< 2 >&,
 const DoFHandler< 2 >&,
 const  Vector<double> &,
 const Point< 2 >&,
 Vector<double>&);

 template
 double point_value< 2 > (
 const Mapping< 2 >&,
 const DoFHandler< 2 >&,
 const  Vector<double> &,
 const Point< 2 >&);

 }
#endif
 
#if  2  ==  2 

 namespace VectorTools {

 template
 void point_value< 2 > (
 const hp::DoFHandler< 2 >&,
 const  Vector<double> &,
 const Point< 2 >&,
 Vector<double>&);

 template
 double point_value< 2 > (
 const hp::DoFHandler< 2 >&,
 const  Vector<double> &,
 const Point< 2 >&);

 template
 void point_value< 2 > (
 const hp::MappingCollection< 2 >&,
 const hp::DoFHandler< 2 >&,
 const  Vector<double> &,
 const Point< 2 >&,
 Vector<double>&);

 template
 double point_value< 2 > (
 const hp::MappingCollection< 2 >&,
 const hp::DoFHandler< 2 >&,
 const  Vector<double> &,
 const Point< 2 >&);

 template
 void point_difference< 2 > (
 const DoFHandler< 2 >&,
 const  Vector<double> &,
 const Function< 2 >&,
 Vector<double>&,
 const Point< 2 >&);

 template
 void point_difference< 2 > (
 const Mapping< 2 >&,
 const DoFHandler< 2 >&,
 const  Vector<double> &,
 const Function< 2 >&,
 Vector<double>&,
 const Point< 2 >&);

 template
 void point_value< 2 > (
 const DoFHandler< 2 >&,
 const  Vector<double> &,
 const Point< 2 >&,
 Vector<double>&);

 template
 double point_value< 2 > (
 const DoFHandler< 2 >&,
 const  Vector<double> &,
 const Point< 2 >&);

 template
 void point_value< 2 > (
 const Mapping< 2 >&,
 const DoFHandler< 2 >&,
 const  Vector<double> &,
 const Point< 2 >&,
 Vector<double>&);

 template
 double point_value< 2 > (
 const Mapping< 2 >&,
 const DoFHandler< 2 >&,
 const  Vector<double> &,
 const Point< 2 >&);

 }
#endif
 
#if  2  ==  3 

 namespace VectorTools {

 template
 void point_value< 2 > (
 const hp::DoFHandler< 2 >&,
 const  Vector<double> &,
 const Point< 2 >&,
 Vector<double>&);

 template
 double point_value< 2 > (
 const hp::DoFHandler< 2 >&,
 const  Vector<double> &,
 const Point< 2 >&);

 template
 void point_value< 2 > (
 const hp::MappingCollection< 2 >&,
 const hp::DoFHandler< 2 >&,
 const  Vector<double> &,
 const Point< 2 >&,
 Vector<double>&);

 template
 double point_value< 2 > (
 const hp::MappingCollection< 2 >&,
 const hp::DoFHandler< 2 >&,
 const  Vector<double> &,
 const Point< 2 >&);

 template
 void point_difference< 2 > (
 const DoFHandler< 2 >&,
 const  Vector<double> &,
 const Function< 2 >&,
 Vector<double>&,
 const Point< 2 >&);

 template
 void point_difference< 2 > (
 const Mapping< 2 >&,
 const DoFHandler< 2 >&,
 const  Vector<double> &,
 const Function< 2 >&,
 Vector<double>&,
 const Point< 2 >&);

 template
 void point_value< 2 > (
 const DoFHandler< 2 >&,
 const  Vector<double> &,
 const Point< 2 >&,
 Vector<double>&);

 template
 double point_value< 2 > (
 const DoFHandler< 2 >&,
 const  Vector<double> &,
 const Point< 2 >&);

 template
 void point_value< 2 > (
 const Mapping< 2 >&,
 const DoFHandler< 2 >&,
 const  Vector<double> &,
 const Point< 2 >&,
 Vector<double>&);

 template
 double point_value< 2 > (
 const Mapping< 2 >&,
 const DoFHandler< 2 >&,
 const  Vector<double> &,
 const Point< 2 >&);

 }
#endif
 
#if  3  ==  1 

 namespace VectorTools {

 template
 void point_value< 3 > (
 const hp::DoFHandler< 3 >&,
 const  Vector<double> &,
 const Point< 3 >&,
 Vector<double>&);

 template
 double point_value< 3 > (
 const hp::DoFHandler< 3 >&,
 const  Vector<double> &,
 const Point< 3 >&);

 template
 void point_value< 3 > (
 const hp::MappingCollection< 3 >&,
 const hp::DoFHandler< 3 >&,
 const  Vector<double> &,
 const Point< 3 >&,
 Vector<double>&);

 template
 double point_value< 3 > (
 const hp::MappingCollection< 3 >&,
 const hp::DoFHandler< 3 >&,
 const  Vector<double> &,
 const Point< 3 >&);

 template
 void point_difference< 3 > (
 const DoFHandler< 3 >&,
 const  Vector<double> &,
 const Function< 3 >&,
 Vector<double>&,
 const Point< 3 >&);

 template
 void point_difference< 3 > (
 const Mapping< 3 >&,
 const DoFHandler< 3 >&,
 const  Vector<double> &,
 const Function< 3 >&,
 Vector<double>&,
 const Point< 3 >&);

 template
 void point_value< 3 > (
 const DoFHandler< 3 >&,
 const  Vector<double> &,
 const Point< 3 >&,
 Vector<double>&);

 template
 double point_value< 3 > (
 const DoFHandler< 3 >&,
 const  Vector<double> &,
 const Point< 3 >&);

 template
 void point_value< 3 > (
 const Mapping< 3 >&,
 const DoFHandler< 3 >&,
 const  Vector<double> &,
 const Point< 3 >&,
 Vector<double>&);

 template
 double point_value< 3 > (
 const Mapping< 3 >&,
 const DoFHandler< 3 >&,
 const  Vector<double> &,
 const Point< 3 >&);

 }
#endif
 
#if  3  ==  2 

 namespace VectorTools {

 template
 void point_value< 3 > (
 const hp::DoFHandler< 3 >&,
 const  Vector<double> &,
 const Point< 3 >&,
 Vector<double>&);

 template
 double point_value< 3 > (
 const hp::DoFHandler< 3 >&,
 const  Vector<double> &,
 const Point< 3 >&);

 template
 void point_value< 3 > (
 const hp::MappingCollection< 3 >&,
 const hp::DoFHandler< 3 >&,
 const  Vector<double> &,
 const Point< 3 >&,
 Vector<double>&);

 template
 double point_value< 3 > (
 const hp::MappingCollection< 3 >&,
 const hp::DoFHandler< 3 >&,
 const  Vector<double> &,
 const Point< 3 >&);

 template
 void point_difference< 3 > (
 const DoFHandler< 3 >&,
 const  Vector<double> &,
 const Function< 3 >&,
 Vector<double>&,
 const Point< 3 >&);

 template
 void point_difference< 3 > (
 const Mapping< 3 >&,
 const DoFHandler< 3 >&,
 const  Vector<double> &,
 const Function< 3 >&,
 Vector<double>&,
 const Point< 3 >&);

 template
 void point_value< 3 > (
 const DoFHandler< 3 >&,
 const  Vector<double> &,
 const Point< 3 >&,
 Vector<double>&);

 template
 double point_value< 3 > (
 const DoFHandler< 3 >&,
 const  Vector<double> &,
 const Point< 3 >&);

 template
 void point_value< 3 > (
 const Mapping< 3 >&,
 const DoFHandler< 3 >&,
 const  Vector<double> &,
 const Point< 3 >&,
 Vector<double>&);

 template
 double point_value< 3 > (
 const Mapping< 3 >&,
 const DoFHandler< 3 >&,
 const  Vector<double> &,
 const Point< 3 >&);

 }
#endif
 
#if  3  ==  3 

 namespace VectorTools {

 template
 void point_value< 3 > (
 const hp::DoFHandler< 3 >&,
 const  Vector<double> &,
 const Point< 3 >&,
 Vector<double>&);

 template
 double point_value< 3 > (
 const hp::DoFHandler< 3 >&,
 const  Vector<double> &,
 const Point< 3 >&);

 template
 void point_value< 3 > (
 const hp::MappingCollection< 3 >&,
 const hp::DoFHandler< 3 >&,
 const  Vector<double> &,
 const Point< 3 >&,
 Vector<double>&);

 template
 double point_value< 3 > (
 const hp::MappingCollection< 3 >&,
 const hp::DoFHandler< 3 >&,
 const  Vector<double> &,
 const Point< 3 >&);

 template
 void point_difference< 3 > (
 const DoFHandler< 3 >&,
 const  Vector<double> &,
 const Function< 3 >&,
 Vector<double>&,
 const Point< 3 >&);

 template
 void point_difference< 3 > (
 const Mapping< 3 >&,
 const DoFHandler< 3 >&,
 const  Vector<double> &,
 const Function< 3 >&,
 Vector<double>&,
 const Point< 3 >&);

 template
 void point_value< 3 > (
 const DoFHandler< 3 >&,
 const  Vector<double> &,
 const Point< 3 >&,
 Vector<double>&);

 template
 double point_value< 3 > (
 const DoFHandler< 3 >&,
 const  Vector<double> &,
 const Point< 3 >&);

 template
 void point_value< 3 > (
 const Mapping< 3 >&,
 const DoFHandler< 3 >&,
 const  Vector<double> &,
 const Point< 3 >&,
 Vector<double>&);

 template
 double point_value< 3 > (
 const Mapping< 3 >&,
 const DoFHandler< 3 >&,
 const  Vector<double> &,
 const Point< 3 >&);

 }
#endif
 
#if  1  ==  1 

 namespace VectorTools {

 template
 void point_value< 1 > (
 const hp::DoFHandler< 1 >&,
 const  Vector<float> &,
 const Point< 1 >&,
 Vector<double>&);

 template
 double point_value< 1 > (
 const hp::DoFHandler< 1 >&,
 const  Vector<float> &,
 const Point< 1 >&);

 template
 void point_value< 1 > (
 const hp::MappingCollection< 1 >&,
 const hp::DoFHandler< 1 >&,
 const  Vector<float> &,
 const Point< 1 >&,
 Vector<double>&);

 template
 double point_value< 1 > (
 const hp::MappingCollection< 1 >&,
 const hp::DoFHandler< 1 >&,
 const  Vector<float> &,
 const Point< 1 >&);

 template
 void point_difference< 1 > (
 const DoFHandler< 1 >&,
 const  Vector<float> &,
 const Function< 1 >&,
 Vector<double>&,
 const Point< 1 >&);

 template
 void point_difference< 1 > (
 const Mapping< 1 >&,
 const DoFHandler< 1 >&,
 const  Vector<float> &,
 const Function< 1 >&,
 Vector<double>&,
 const Point< 1 >&);

 template
 void point_value< 1 > (
 const DoFHandler< 1 >&,
 const  Vector<float> &,
 const Point< 1 >&,
 Vector<double>&);

 template
 double point_value< 1 > (
 const DoFHandler< 1 >&,
 const  Vector<float> &,
 const Point< 1 >&);

 template
 void point_value< 1 > (
 const Mapping< 1 >&,
 const DoFHandler< 1 >&,
 const  Vector<float> &,
 const Point< 1 >&,
 Vector<double>&);

 template
 double point_value< 1 > (
 const Mapping< 1 >&,
 const DoFHandler< 1 >&,
 const  Vector<float> &,
 const Point< 1 >&);

 }
#endif
 
#if  1  ==  2 

 namespace VectorTools {

 template
 void point_value< 1 > (
 const hp::DoFHandler< 1 >&,
 const  Vector<float> &,
 const Point< 1 >&,
 Vector<double>&);

 template
 double point_value< 1 > (
 const hp::DoFHandler< 1 >&,
 const  Vector<float> &,
 const Point< 1 >&);

 template
 void point_value< 1 > (
 const hp::MappingCollection< 1 >&,
 const hp::DoFHandler< 1 >&,
 const  Vector<float> &,
 const Point< 1 >&,
 Vector<double>&);

 template
 double point_value< 1 > (
 const hp::MappingCollection< 1 >&,
 const hp::DoFHandler< 1 >&,
 const  Vector<float> &,
 const Point< 1 >&);

 template
 void point_difference< 1 > (
 const DoFHandler< 1 >&,
 const  Vector<float> &,
 const Function< 1 >&,
 Vector<double>&,
 const Point< 1 >&);

 template
 void point_difference< 1 > (
 const Mapping< 1 >&,
 const DoFHandler< 1 >&,
 const  Vector<float> &,
 const Function< 1 >&,
 Vector<double>&,
 const Point< 1 >&);

 template
 void point_value< 1 > (
 const DoFHandler< 1 >&,
 const  Vector<float> &,
 const Point< 1 >&,
 Vector<double>&);

 template
 double point_value< 1 > (
 const DoFHandler< 1 >&,
 const  Vector<float> &,
 const Point< 1 >&);

 template
 void point_value< 1 > (
 const Mapping< 1 >&,
 const DoFHandler< 1 >&,
 const  Vector<float> &,
 const Point< 1 >&,
 Vector<double>&);

 template
 double point_value< 1 > (
 const Mapping< 1 >&,
 const DoFHandler< 1 >&,
 const  Vector<float> &,
 const Point< 1 >&);

 }
#endif
 
#if  1  ==  3 

 namespace VectorTools {

 template
 void point_value< 1 > (
 const hp::DoFHandler< 1 >&,
 const  Vector<float> &,
 const Point< 1 >&,
 Vector<double>&);

 template
 double point_value< 1 > (
 const hp::DoFHandler< 1 >&,
 const  Vector<float> &,
 const Point< 1 >&);

 template
 void point_value< 1 > (
 const hp::MappingCollection< 1 >&,
 const hp::DoFHandler< 1 >&,
 const  Vector<float> &,
 const Point< 1 >&,
 Vector<double>&);

 template
 double point_value< 1 > (
 const hp::MappingCollection< 1 >&,
 const hp::DoFHandler< 1 >&,
 const  Vector<float> &,
 const Point< 1 >&);

 template
 void point_difference< 1 > (
 const DoFHandler< 1 >&,
 const  Vector<float> &,
 const Function< 1 >&,
 Vector<double>&,
 const Point< 1 >&);

 template
 void point_difference< 1 > (
 const Mapping< 1 >&,
 const DoFHandler< 1 >&,
 const  Vector<float> &,
 const Function< 1 >&,
 Vector<double>&,
 const Point< 1 >&);

 template
 void point_value< 1 > (
 const DoFHandler< 1 >&,
 const  Vector<float> &,
 const Point< 1 >&,
 Vector<double>&);

 template
 double point_value< 1 > (
 const DoFHandler< 1 >&,
 const  Vector<float> &,
 const Point< 1 >&);

 template
 void point_value< 1 > (
 const Mapping< 1 >&,
 const DoFHandler< 1 >&,
 const  Vector<float> &,
 const Point< 1 >&,
 Vector<double>&);

 template
 double point_value< 1 > (
 const Mapping< 1 >&,
 const DoFHandler< 1 >&,
 const  Vector<float> &,
 const Point< 1 >&);

 }
#endif
 
#if  2  ==  1 

 namespace VectorTools {

 template
 void point_value< 2 > (
 const hp::DoFHandler< 2 >&,
 const  Vector<float> &,
 const Point< 2 >&,
 Vector<double>&);

 template
 double point_value< 2 > (
 const hp::DoFHandler< 2 >&,
 const  Vector<float> &,
 const Point< 2 >&);

 template
 void point_value< 2 > (
 const hp::MappingCollection< 2 >&,
 const hp::DoFHandler< 2 >&,
 const  Vector<float> &,
 const Point< 2 >&,
 Vector<double>&);

 template
 double point_value< 2 > (
 const hp::MappingCollection< 2 >&,
 const hp::DoFHandler< 2 >&,
 const  Vector<float> &,
 const Point< 2 >&);

 template
 void point_difference< 2 > (
 const DoFHandler< 2 >&,
 const  Vector<float> &,
 const Function< 2 >&,
 Vector<double>&,
 const Point< 2 >&);

 template
 void point_difference< 2 > (
 const Mapping< 2 >&,
 const DoFHandler< 2 >&,
 const  Vector<float> &,
 const Function< 2 >&,
 Vector<double>&,
 const Point< 2 >&);

 template
 void point_value< 2 > (
 const DoFHandler< 2 >&,
 const  Vector<float> &,
 const Point< 2 >&,
 Vector<double>&);

 template
 double point_value< 2 > (
 const DoFHandler< 2 >&,
 const  Vector<float> &,
 const Point< 2 >&);

 template
 void point_value< 2 > (
 const Mapping< 2 >&,
 const DoFHandler< 2 >&,
 const  Vector<float> &,
 const Point< 2 >&,
 Vector<double>&);

 template
 double point_value< 2 > (
 const Mapping< 2 >&,
 const DoFHandler< 2 >&,
 const  Vector<float> &,
 const Point< 2 >&);

 }
#endif
 
#if  2  ==  2 

 namespace VectorTools {

 template
 void point_value< 2 > (
 const hp::DoFHandler< 2 >&,
 const  Vector<float> &,
 const Point< 2 >&,
 Vector<double>&);

 template
 double point_value< 2 > (
 const hp::DoFHandler< 2 >&,
 const  Vector<float> &,
 const Point< 2 >&);

 template
 void point_value< 2 > (
 const hp::MappingCollection< 2 >&,
 const hp::DoFHandler< 2 >&,
 const  Vector<float> &,
 const Point< 2 >&,
 Vector<double>&);

 template
 double point_value< 2 > (
 const hp::MappingCollection< 2 >&,
 const hp::DoFHandler< 2 >&,
 const  Vector<float> &,
 const Point< 2 >&);

 template
 void point_difference< 2 > (
 const DoFHandler< 2 >&,
 const  Vector<float> &,
 const Function< 2 >&,
 Vector<double>&,
 const Point< 2 >&);

 template
 void point_difference< 2 > (
 const Mapping< 2 >&,
 const DoFHandler< 2 >&,
 const  Vector<float> &,
 const Function< 2 >&,
 Vector<double>&,
 const Point< 2 >&);

 template
 void point_value< 2 > (
 const DoFHandler< 2 >&,
 const  Vector<float> &,
 const Point< 2 >&,
 Vector<double>&);

 template
 double point_value< 2 > (
 const DoFHandler< 2 >&,
 const  Vector<float> &,
 const Point< 2 >&);

 template
 void point_value< 2 > (
 const Mapping< 2 >&,
 const DoFHandler< 2 >&,
 const  Vector<float> &,
 const Point< 2 >&,
 Vector<double>&);

 template
 double point_value< 2 > (
 const Mapping< 2 >&,
 const DoFHandler< 2 >&,
 const  Vector<float> &,
 const Point< 2 >&);

 }
#endif
 
#if  2  ==  3 

 namespace VectorTools {

 template
 void point_value< 2 > (
 const hp::DoFHandler< 2 >&,
 const  Vector<float> &,
 const Point< 2 >&,
 Vector<double>&);

 template
 double point_value< 2 > (
 const hp::DoFHandler< 2 >&,
 const  Vector<float> &,
 const Point< 2 >&);

 template
 void point_value< 2 > (
 const hp::MappingCollection< 2 >&,
 const hp::DoFHandler< 2 >&,
 const  Vector<float> &,
 const Point< 2 >&,
 Vector<double>&);

 template
 double point_value< 2 > (
 const hp::MappingCollection< 2 >&,
 const hp::DoFHandler< 2 >&,
 const  Vector<float> &,
 const Point< 2 >&);

 template
 void point_difference< 2 > (
 const DoFHandler< 2 >&,
 const  Vector<float> &,
 const Function< 2 >&,
 Vector<double>&,
 const Point< 2 >&);

 template
 void point_difference< 2 > (
 const Mapping< 2 >&,
 const DoFHandler< 2 >&,
 const  Vector<float> &,
 const Function< 2 >&,
 Vector<double>&,
 const Point< 2 >&);

 template
 void point_value< 2 > (
 const DoFHandler< 2 >&,
 const  Vector<float> &,
 const Point< 2 >&,
 Vector<double>&);

 template
 double point_value< 2 > (
 const DoFHandler< 2 >&,
 const  Vector<float> &,
 const Point< 2 >&);

 template
 void point_value< 2 > (
 const Mapping< 2 >&,
 const DoFHandler< 2 >&,
 const  Vector<float> &,
 const Point< 2 >&,
 Vector<double>&);

 template
 double point_value< 2 > (
 const Mapping< 2 >&,
 const DoFHandler< 2 >&,
 const  Vector<float> &,
 const Point< 2 >&);

 }
#endif
 
#if  3  ==  1 

 namespace VectorTools {

 template
 void point_value< 3 > (
 const hp::DoFHandler< 3 >&,
 const  Vector<float> &,
 const Point< 3 >&,
 Vector<double>&);

 template
 double point_value< 3 > (
 const hp::DoFHandler< 3 >&,
 const  Vector<float> &,
 const Point< 3 >&);

 template
 void point_value< 3 > (
 const hp::MappingCollection< 3 >&,
 const hp::DoFHandler< 3 >&,
 const  Vector<float> &,
 const Point< 3 >&,
 Vector<double>&);

 template
 double point_value< 3 > (
 const hp::MappingCollection< 3 >&,
 const hp::DoFHandler< 3 >&,
 const  Vector<float> &,
 const Point< 3 >&);

 template
 void point_difference< 3 > (
 const DoFHandler< 3 >&,
 const  Vector<float> &,
 const Function< 3 >&,
 Vector<double>&,
 const Point< 3 >&);

 template
 void point_difference< 3 > (
 const Mapping< 3 >&,
 const DoFHandler< 3 >&,
 const  Vector<float> &,
 const Function< 3 >&,
 Vector<double>&,
 const Point< 3 >&);

 template
 void point_value< 3 > (
 const DoFHandler< 3 >&,
 const  Vector<float> &,
 const Point< 3 >&,
 Vector<double>&);

 template
 double point_value< 3 > (
 const DoFHandler< 3 >&,
 const  Vector<float> &,
 const Point< 3 >&);

 template
 void point_value< 3 > (
 const Mapping< 3 >&,
 const DoFHandler< 3 >&,
 const  Vector<float> &,
 const Point< 3 >&,
 Vector<double>&);

 template
 double point_value< 3 > (
 const Mapping< 3 >&,
 const DoFHandler< 3 >&,
 const  Vector<float> &,
 const Point< 3 >&);

 }
#endif
 
#if  3  ==  2 

 namespace VectorTools {

 template
 void point_value< 3 > (
 const hp::DoFHandler< 3 >&,
 const  Vector<float> &,
 const Point< 3 >&,
 Vector<double>&);

 template
 double point_value< 3 > (
 const hp::DoFHandler< 3 >&,
 const  Vector<float> &,
 const Point< 3 >&);

 template
 void point_value< 3 > (
 const hp::MappingCollection< 3 >&,
 const hp::DoFHandler< 3 >&,
 const  Vector<float> &,
 const Point< 3 >&,
 Vector<double>&);

 template
 double point_value< 3 > (
 const hp::MappingCollection< 3 >&,
 const hp::DoFHandler< 3 >&,
 const  Vector<float> &,
 const Point< 3 >&);

 template
 void point_difference< 3 > (
 const DoFHandler< 3 >&,
 const  Vector<float> &,
 const Function< 3 >&,
 Vector<double>&,
 const Point< 3 >&);

 template
 void point_difference< 3 > (
 const Mapping< 3 >&,
 const DoFHandler< 3 >&,
 const  Vector<float> &,
 const Function< 3 >&,
 Vector<double>&,
 const Point< 3 >&);

 template
 void point_value< 3 > (
 const DoFHandler< 3 >&,
 const  Vector<float> &,
 const Point< 3 >&,
 Vector<double>&);

 template
 double point_value< 3 > (
 const DoFHandler< 3 >&,
 const  Vector<float> &,
 const Point< 3 >&);

 template
 void point_value< 3 > (
 const Mapping< 3 >&,
 const DoFHandler< 3 >&,
 const  Vector<float> &,
 const Point< 3 >&,
 Vector<double>&);

 template
 double point_value< 3 > (
 const Mapping< 3 >&,
 const DoFHandler< 3 >&,
 const  Vector<float> &,
 const Point< 3 >&);

 }
#endif
 
#if  3  ==  3 

 namespace VectorTools {

 template
 void point_value< 3 > (
 const hp::DoFHandler< 3 >&,
 const  Vector<float> &,
 const Point< 3 >&,
 Vector<double>&);

 template
 double point_value< 3 > (
 const hp::DoFHandler< 3 >&,
 const  Vector<float> &,
 const Point< 3 >&);

 template
 void point_value< 3 > (
 const hp::MappingCollection< 3 >&,
 const hp::DoFHandler< 3 >&,
 const  Vector<float> &,
 const Point< 3 >&,
 Vector<double>&);

 template
 double point_value< 3 > (
 const hp::MappingCollection< 3 >&,
 const hp::DoFHandler< 3 >&,
 const  Vector<float> &,
 const Point< 3 >&);

 template
 void point_difference< 3 > (
 const DoFHandler< 3 >&,
 const  Vector<float> &,
 const Function< 3 >&,
 Vector<double>&,
 const Point< 3 >&);

 template
 void point_difference< 3 > (
 const Mapping< 3 >&,
 const DoFHandler< 3 >&,
 const  Vector<float> &,
 const Function< 3 >&,
 Vector<double>&,
 const Point< 3 >&);

 template
 void point_value< 3 > (
 const DoFHandler< 3 >&,
 const  Vector<float> &,
 const Point< 3 >&,
 Vector<double>&);

 template
 double point_value< 3 > (
 const DoFHandler< 3 >&,
 const  Vector<float> &,
 const Point< 3 >&);

 template
 void point_value< 3 > (
 const Mapping< 3 >&,
 const DoFHandler< 3 >&,
 const  Vector<float> &,
 const Point< 3 >&,
 Vector<double>&);

 template
 double point_value< 3 > (
 const Mapping< 3 >&,
 const DoFHandler< 3 >&,
 const  Vector<float> &,
 const Point< 3 >&);

 }
#endif
 
#if  1  ==  1 

 namespace VectorTools {

 template
 void point_value< 1 > (
 const hp::DoFHandler< 1 >&,
 const  Vector<long double> &,
 const Point< 1 >&,
 Vector<double>&);

 template
 double point_value< 1 > (
 const hp::DoFHandler< 1 >&,
 const  Vector<long double> &,
 const Point< 1 >&);

 template
 void point_value< 1 > (
 const hp::MappingCollection< 1 >&,
 const hp::DoFHandler< 1 >&,
 const  Vector<long double> &,
 const Point< 1 >&,
 Vector<double>&);

 template
 double point_value< 1 > (
 const hp::MappingCollection< 1 >&,
 const hp::DoFHandler< 1 >&,
 const  Vector<long double> &,
 const Point< 1 >&);

 template
 void point_difference< 1 > (
 const DoFHandler< 1 >&,
 const  Vector<long double> &,
 const Function< 1 >&,
 Vector<double>&,
 const Point< 1 >&);

 template
 void point_difference< 1 > (
 const Mapping< 1 >&,
 const DoFHandler< 1 >&,
 const  Vector<long double> &,
 const Function< 1 >&,
 Vector<double>&,
 const Point< 1 >&);

 template
 void point_value< 1 > (
 const DoFHandler< 1 >&,
 const  Vector<long double> &,
 const Point< 1 >&,
 Vector<double>&);

 template
 double point_value< 1 > (
 const DoFHandler< 1 >&,
 const  Vector<long double> &,
 const Point< 1 >&);

 template
 void point_value< 1 > (
 const Mapping< 1 >&,
 const DoFHandler< 1 >&,
 const  Vector<long double> &,
 const Point< 1 >&,
 Vector<double>&);

 template
 double point_value< 1 > (
 const Mapping< 1 >&,
 const DoFHandler< 1 >&,
 const  Vector<long double> &,
 const Point< 1 >&);

 }
#endif
 
#if  1  ==  2 

 namespace VectorTools {

 template
 void point_value< 1 > (
 const hp::DoFHandler< 1 >&,
 const  Vector<long double> &,
 const Point< 1 >&,
 Vector<double>&);

 template
 double point_value< 1 > (
 const hp::DoFHandler< 1 >&,
 const  Vector<long double> &,
 const Point< 1 >&);

 template
 void point_value< 1 > (
 const hp::MappingCollection< 1 >&,
 const hp::DoFHandler< 1 >&,
 const  Vector<long double> &,
 const Point< 1 >&,
 Vector<double>&);

 template
 double point_value< 1 > (
 const hp::MappingCollection< 1 >&,
 const hp::DoFHandler< 1 >&,
 const  Vector<long double> &,
 const Point< 1 >&);

 template
 void point_difference< 1 > (
 const DoFHandler< 1 >&,
 const  Vector<long double> &,
 const Function< 1 >&,
 Vector<double>&,
 const Point< 1 >&);

 template
 void point_difference< 1 > (
 const Mapping< 1 >&,
 const DoFHandler< 1 >&,
 const  Vector<long double> &,
 const Function< 1 >&,
 Vector<double>&,
 const Point< 1 >&);

 template
 void point_value< 1 > (
 const DoFHandler< 1 >&,
 const  Vector<long double> &,
 const Point< 1 >&,
 Vector<double>&);

 template
 double point_value< 1 > (
 const DoFHandler< 1 >&,
 const  Vector<long double> &,
 const Point< 1 >&);

 template
 void point_value< 1 > (
 const Mapping< 1 >&,
 const DoFHandler< 1 >&,
 const  Vector<long double> &,
 const Point< 1 >&,
 Vector<double>&);

 template
 double point_value< 1 > (
 const Mapping< 1 >&,
 const DoFHandler< 1 >&,
 const  Vector<long double> &,
 const Point< 1 >&);

 }
#endif
 
#if  1  ==  3 

 namespace VectorTools {

 template
 void point_value< 1 > (
 const hp::DoFHandler< 1 >&,
 const  Vector<long double> &,
 const Point< 1 >&,
 Vector<double>&);

 template
 double point_value< 1 > (
 const hp::DoFHandler< 1 >&,
 const  Vector<long double> &,
 const Point< 1 >&);

 template
 void point_value< 1 > (
 const hp::MappingCollection< 1 >&,
 const hp::DoFHandler< 1 >&,
 const  Vector<long double> &,
 const Point< 1 >&,
 Vector<double>&);

 template
 double point_value< 1 > (
 const hp::MappingCollection< 1 >&,
 const hp::DoFHandler< 1 >&,
 const  Vector<long double> &,
 const Point< 1 >&);

 template
 void point_difference< 1 > (
 const DoFHandler< 1 >&,
 const  Vector<long double> &,
 const Function< 1 >&,
 Vector<double>&,
 const Point< 1 >&);

 template
 void point_difference< 1 > (
 const Mapping< 1 >&,
 const DoFHandler< 1 >&,
 const  Vector<long double> &,
 const Function< 1 >&,
 Vector<double>&,
 const Point< 1 >&);

 template
 void point_value< 1 > (
 const DoFHandler< 1 >&,
 const  Vector<long double> &,
 const Point< 1 >&,
 Vector<double>&);

 template
 double point_value< 1 > (
 const DoFHandler< 1 >&,
 const  Vector<long double> &,
 const Point< 1 >&);

 template
 void point_value< 1 > (
 const Mapping< 1 >&,
 const DoFHandler< 1 >&,
 const  Vector<long double> &,
 const Point< 1 >&,
 Vector<double>&);

 template
 double point_value< 1 > (
 const Mapping< 1 >&,
 const DoFHandler< 1 >&,
 const  Vector<long double> &,
 const Point< 1 >&);

 }
#endif
 
#if  2  ==  1 

 namespace VectorTools {

 template
 void point_value< 2 > (
 const hp::DoFHandler< 2 >&,
 const  Vector<long double> &,
 const Point< 2 >&,
 Vector<double>&);

 template
 double point_value< 2 > (
 const hp::DoFHandler< 2 >&,
 const  Vector<long double> &,
 const Point< 2 >&);

 template
 void point_value< 2 > (
 const hp::MappingCollection< 2 >&,
 const hp::DoFHandler< 2 >&,
 const  Vector<long double> &,
 const Point< 2 >&,
 Vector<double>&);

 template
 double point_value< 2 > (
 const hp::MappingCollection< 2 >&,
 const hp::DoFHandler< 2 >&,
 const  Vector<long double> &,
 const Point< 2 >&);

 template
 void point_difference< 2 > (
 const DoFHandler< 2 >&,
 const  Vector<long double> &,
 const Function< 2 >&,
 Vector<double>&,
 const Point< 2 >&);

 template
 void point_difference< 2 > (
 const Mapping< 2 >&,
 const DoFHandler< 2 >&,
 const  Vector<long double> &,
 const Function< 2 >&,
 Vector<double>&,
 const Point< 2 >&);

 template
 void point_value< 2 > (
 const DoFHandler< 2 >&,
 const  Vector<long double> &,
 const Point< 2 >&,
 Vector<double>&);

 template
 double point_value< 2 > (
 const DoFHandler< 2 >&,
 const  Vector<long double> &,
 const Point< 2 >&);

 template
 void point_value< 2 > (
 const Mapping< 2 >&,
 const DoFHandler< 2 >&,
 const  Vector<long double> &,
 const Point< 2 >&,
 Vector<double>&);

 template
 double point_value< 2 > (
 const Mapping< 2 >&,
 const DoFHandler< 2 >&,
 const  Vector<long double> &,
 const Point< 2 >&);

 }
#endif
 
#if  2  ==  2 

 namespace VectorTools {

 template
 void point_value< 2 > (
 const hp::DoFHandler< 2 >&,
 const  Vector<long double> &,
 const Point< 2 >&,
 Vector<double>&);

 template
 double point_value< 2 > (
 const hp::DoFHandler< 2 >&,
 const  Vector<long double> &,
 const Point< 2 >&);

 template
 void point_value< 2 > (
 const hp::MappingCollection< 2 >&,
 const hp::DoFHandler< 2 >&,
 const  Vector<long double> &,
 const Point< 2 >&,
 Vector<double>&);

 template
 double point_value< 2 > (
 const hp::MappingCollection< 2 >&,
 const hp::DoFHandler< 2 >&,
 const  Vector<long double> &,
 const Point< 2 >&);

 template
 void point_difference< 2 > (
 const DoFHandler< 2 >&,
 const  Vector<long double> &,
 const Function< 2 >&,
 Vector<double>&,
 const Point< 2 >&);

 template
 void point_difference< 2 > (
 const Mapping< 2 >&,
 const DoFHandler< 2 >&,
 const  Vector<long double> &,
 const Function< 2 >&,
 Vector<double>&,
 const Point< 2 >&);

 template
 void point_value< 2 > (
 const DoFHandler< 2 >&,
 const  Vector<long double> &,
 const Point< 2 >&,
 Vector<double>&);

 template
 double point_value< 2 > (
 const DoFHandler< 2 >&,
 const  Vector<long double> &,
 const Point< 2 >&);

 template
 void point_value< 2 > (
 const Mapping< 2 >&,
 const DoFHandler< 2 >&,
 const  Vector<long double> &,
 const Point< 2 >&,
 Vector<double>&);

 template
 double point_value< 2 > (
 const Mapping< 2 >&,
 const DoFHandler< 2 >&,
 const  Vector<long double> &,
 const Point< 2 >&);

 }
#endif
 
#if  2  ==  3 

 namespace VectorTools {

 template
 void point_value< 2 > (
 const hp::DoFHandler< 2 >&,
 const  Vector<long double> &,
 const Point< 2 >&,
 Vector<double>&);

 template
 double point_value< 2 > (
 const hp::DoFHandler< 2 >&,
 const  Vector<long double> &,
 const Point< 2 >&);

 template
 void point_value< 2 > (
 const hp::MappingCollection< 2 >&,
 const hp::DoFHandler< 2 >&,
 const  Vector<long double> &,
 const Point< 2 >&,
 Vector<double>&);

 template
 double point_value< 2 > (
 const hp::MappingCollection< 2 >&,
 const hp::DoFHandler< 2 >&,
 const  Vector<long double> &,
 const Point< 2 >&);

 template
 void point_difference< 2 > (
 const DoFHandler< 2 >&,
 const  Vector<long double> &,
 const Function< 2 >&,
 Vector<double>&,
 const Point< 2 >&);

 template
 void point_difference< 2 > (
 const Mapping< 2 >&,
 const DoFHandler< 2 >&,
 const  Vector<long double> &,
 const Function< 2 >&,
 Vector<double>&,
 const Point< 2 >&);

 template
 void point_value< 2 > (
 const DoFHandler< 2 >&,
 const  Vector<long double> &,
 const Point< 2 >&,
 Vector<double>&);

 template
 double point_value< 2 > (
 const DoFHandler< 2 >&,
 const  Vector<long double> &,
 const Point< 2 >&);

 template
 void point_value< 2 > (
 const Mapping< 2 >&,
 const DoFHandler< 2 >&,
 const  Vector<long double> &,
 const Point< 2 >&,
 Vector<double>&);

 template
 double point_value< 2 > (
 const Mapping< 2 >&,
 const DoFHandler< 2 >&,
 const  Vector<long double> &,
 const Point< 2 >&);

 }
#endif
 
#if  3  ==  1 

 namespace VectorTools {

 template
 void point_value< 3 > (
 const hp::DoFHandler< 3 >&,
 const  Vector<long double> &,
 const Point< 3 >&,
 Vector<double>&);

 template
 double point_value< 3 > (
 const hp::DoFHandler< 3 >&,
 const  Vector<long double> &,
 const Point< 3 >&);

 template
 void point_value< 3 > (
 const hp::MappingCollection< 3 >&,
 const hp::DoFHandler< 3 >&,
 const  Vector<long double> &,
 const Point< 3 >&,
 Vector<double>&);

 template
 double point_value< 3 > (
 const hp::MappingCollection< 3 >&,
 const hp::DoFHandler< 3 >&,
 const  Vector<long double> &,
 const Point< 3 >&);

 template
 void point_difference< 3 > (
 const DoFHandler< 3 >&,
 const  Vector<long double> &,
 const Function< 3 >&,
 Vector<double>&,
 const Point< 3 >&);

 template
 void point_difference< 3 > (
 const Mapping< 3 >&,
 const DoFHandler< 3 >&,
 const  Vector<long double> &,
 const Function< 3 >&,
 Vector<double>&,
 const Point< 3 >&);

 template
 void point_value< 3 > (
 const DoFHandler< 3 >&,
 const  Vector<long double> &,
 const Point< 3 >&,
 Vector<double>&);

 template
 double point_value< 3 > (
 const DoFHandler< 3 >&,
 const  Vector<long double> &,
 const Point< 3 >&);

 template
 void point_value< 3 > (
 const Mapping< 3 >&,
 const DoFHandler< 3 >&,
 const  Vector<long double> &,
 const Point< 3 >&,
 Vector<double>&);

 template
 double point_value< 3 > (
 const Mapping< 3 >&,
 const DoFHandler< 3 >&,
 const  Vector<long double> &,
 const Point< 3 >&);

 }
#endif
 
#if  3  ==  2 

 namespace VectorTools {

 template
 void point_value< 3 > (
 const hp::DoFHandler< 3 >&,
 const  Vector<long double> &,
 const Point< 3 >&,
 Vector<double>&);

 template
 double point_value< 3 > (
 const hp::DoFHandler< 3 >&,
 const  Vector<long double> &,
 const Point< 3 >&);

 template
 void point_value< 3 > (
 const hp::MappingCollection< 3 >&,
 const hp::DoFHandler< 3 >&,
 const  Vector<long double> &,
 const Point< 3 >&,
 Vector<double>&);

 template
 double point_value< 3 > (
 const hp::MappingCollection< 3 >&,
 const hp::DoFHandler< 3 >&,
 const  Vector<long double> &,
 const Point< 3 >&);

 template
 void point_difference< 3 > (
 const DoFHandler< 3 >&,
 const  Vector<long double> &,
 const Function< 3 >&,
 Vector<double>&,
 const Point< 3 >&);

 template
 void point_difference< 3 > (
 const Mapping< 3 >&,
 const DoFHandler< 3 >&,
 const  Vector<long double> &,
 const Function< 3 >&,
 Vector<double>&,
 const Point< 3 >&);

 template
 void point_value< 3 > (
 const DoFHandler< 3 >&,
 const  Vector<long double> &,
 const Point< 3 >&,
 Vector<double>&);

 template
 double point_value< 3 > (
 const DoFHandler< 3 >&,
 const  Vector<long double> &,
 const Point< 3 >&);

 template
 void point_value< 3 > (
 const Mapping< 3 >&,
 const DoFHandler< 3 >&,
 const  Vector<long double> &,
 const Point< 3 >&,
 Vector<double>&);

 template
 double point_value< 3 > (
 const Mapping< 3 >&,
 const DoFHandler< 3 >&,
 const  Vector<long double> &,
 const Point< 3 >&);

 }
#endif
 
#if  3  ==  3 

 namespace VectorTools {

 template
 void point_value< 3 > (
 const hp::DoFHandler< 3 >&,
 const  Vector<long double> &,
 const Point< 3 >&,
 Vector<double>&);

 template
 double point_value< 3 > (
 const hp::DoFHandler< 3 >&,
 const  Vector<long double> &,
 const Point< 3 >&);

 template
 void point_value< 3 > (
 const hp::MappingCollection< 3 >&,
 const hp::DoFHandler< 3 >&,
 const  Vector<long double> &,
 const Point< 3 >&,
 Vector<double>&);

 template
 double point_value< 3 > (
 const hp::MappingCollection< 3 >&,
 const hp::DoFHandler< 3 >&,
 const  Vector<long double> &,
 const Point< 3 >&);

 template
 void point_difference< 3 > (
 const DoFHandler< 3 >&,
 const  Vector<long double> &,
 const Function< 3 >&,
 Vector<double>&,
 const Point< 3 >&);

 template
 void point_difference< 3 > (
 const Mapping< 3 >&,
 const DoFHandler< 3 >&,
 const  Vector<long double> &,
 const Function< 3 >&,
 Vector<double>&,
 const Point< 3 >&);

 template
 void point_value< 3 > (
 const DoFHandler< 3 >&,
 const  Vector<long double> &,
 const Point< 3 >&,
 Vector<double>&);

 template
 double point_value< 3 > (
 const DoFHandler< 3 >&,
 const  Vector<long double> &,
 const Point< 3 >&);

 template
 void point_value< 3 > (
 const Mapping< 3 >&,
 const DoFHandler< 3 >&,
 const  Vector<long double> &,
 const Point< 3 >&,
 Vector<double>&);

 template
 double point_value< 3 > (
 const Mapping< 3 >&,
 const DoFHandler< 3 >&,
 const  Vector<long double> &,
 const Point< 3 >&);

 }
#endif
 
#if  1  ==  1 

 namespace VectorTools {

 template
 void point_value< 1 > (
 const hp::DoFHandler< 1 >&,
 const  BlockVector<double> &,
 const Point< 1 >&,
 Vector<double>&);

 template
 double point_value< 1 > (
 const hp::DoFHandler< 1 >&,
 const  BlockVector<double> &,
 const Point< 1 >&);

 template
 void point_value< 1 > (
 const hp::MappingCollection< 1 >&,
 const hp::DoFHandler< 1 >&,
 const  BlockVector<double> &,
 const Point< 1 >&,
 Vector<double>&);

 template
 double point_value< 1 > (
 const hp::MappingCollection< 1 >&,
 const hp::DoFHandler< 1 >&,
 const  BlockVector<double> &,
 const Point< 1 >&);

 template
 void point_difference< 1 > (
 const DoFHandler< 1 >&,
 const  BlockVector<double> &,
 const Function< 1 >&,
 Vector<double>&,
 const Point< 1 >&);

 template
 void point_difference< 1 > (
 const Mapping< 1 >&,
 const DoFHandler< 1 >&,
 const  BlockVector<double> &,
 const Function< 1 >&,
 Vector<double>&,
 const Point< 1 >&);

 template
 void point_value< 1 > (
 const DoFHandler< 1 >&,
 const  BlockVector<double> &,
 const Point< 1 >&,
 Vector<double>&);

 template
 double point_value< 1 > (
 const DoFHandler< 1 >&,
 const  BlockVector<double> &,
 const Point< 1 >&);

 template
 void point_value< 1 > (
 const Mapping< 1 >&,
 const DoFHandler< 1 >&,
 const  BlockVector<double> &,
 const Point< 1 >&,
 Vector<double>&);

 template
 double point_value< 1 > (
 const Mapping< 1 >&,
 const DoFHandler< 1 >&,
 const  BlockVector<double> &,
 const Point< 1 >&);

 }
#endif
 
#if  1  ==  2 

 namespace VectorTools {

 template
 void point_value< 1 > (
 const hp::DoFHandler< 1 >&,
 const  BlockVector<double> &,
 const Point< 1 >&,
 Vector<double>&);

 template
 double point_value< 1 > (
 const hp::DoFHandler< 1 >&,
 const  BlockVector<double> &,
 const Point< 1 >&);

 template
 void point_value< 1 > (
 const hp::MappingCollection< 1 >&,
 const hp::DoFHandler< 1 >&,
 const  BlockVector<double> &,
 const Point< 1 >&,
 Vector<double>&);

 template
 double point_value< 1 > (
 const hp::MappingCollection< 1 >&,
 const hp::DoFHandler< 1 >&,
 const  BlockVector<double> &,
 const Point< 1 >&);

 template
 void point_difference< 1 > (
 const DoFHandler< 1 >&,
 const  BlockVector<double> &,
 const Function< 1 >&,
 Vector<double>&,
 const Point< 1 >&);

 template
 void point_difference< 1 > (
 const Mapping< 1 >&,
 const DoFHandler< 1 >&,
 const  BlockVector<double> &,
 const Function< 1 >&,
 Vector<double>&,
 const Point< 1 >&);

 template
 void point_value< 1 > (
 const DoFHandler< 1 >&,
 const  BlockVector<double> &,
 const Point< 1 >&,
 Vector<double>&);

 template
 double point_value< 1 > (
 const DoFHandler< 1 >&,
 const  BlockVector<double> &,
 const Point< 1 >&);

 template
 void point_value< 1 > (
 const Mapping< 1 >&,
 const DoFHandler< 1 >&,
 const  BlockVector<double> &,
 const Point< 1 >&,
 Vector<double>&);

 template
 double point_value< 1 > (
 const Mapping< 1 >&,
 const DoFHandler< 1 >&,
 const  BlockVector<double> &,
 const Point< 1 >&);

 }
#endif
 
#if  1  ==  3 

 namespace VectorTools {

 template
 void point_value< 1 > (
 const hp::DoFHandler< 1 >&,
 const  BlockVector<double> &,
 const Point< 1 >&,
 Vector<double>&);

 template
 double point_value< 1 > (
 const hp::DoFHandler< 1 >&,
 const  BlockVector<double> &,
 const Point< 1 >&);

 template
 void point_value< 1 > (
 const hp::MappingCollection< 1 >&,
 const hp::DoFHandler< 1 >&,
 const  BlockVector<double> &,
 const Point< 1 >&,
 Vector<double>&);

 template
 double point_value< 1 > (
 const hp::MappingCollection< 1 >&,
 const hp::DoFHandler< 1 >&,
 const  BlockVector<double> &,
 const Point< 1 >&);

 template
 void point_difference< 1 > (
 const DoFHandler< 1 >&,
 const  BlockVector<double> &,
 const Function< 1 >&,
 Vector<double>&,
 const Point< 1 >&);

 template
 void point_difference< 1 > (
 const Mapping< 1 >&,
 const DoFHandler< 1 >&,
 const  BlockVector<double> &,
 const Function< 1 >&,
 Vector<double>&,
 const Point< 1 >&);

 template
 void point_value< 1 > (
 const DoFHandler< 1 >&,
 const  BlockVector<double> &,
 const Point< 1 >&,
 Vector<double>&);

 template
 double point_value< 1 > (
 const DoFHandler< 1 >&,
 const  BlockVector<double> &,
 const Point< 1 >&);

 template
 void point_value< 1 > (
 const Mapping< 1 >&,
 const DoFHandler< 1 >&,
 const  BlockVector<double> &,
 const Point< 1 >&,
 Vector<double>&);

 template
 double point_value< 1 > (
 const Mapping< 1 >&,
 const DoFHandler< 1 >&,
 const  BlockVector<double> &,
 const Point< 1 >&);

 }
#endif
 
#if  2  ==  1 

 namespace VectorTools {

 template
 void point_value< 2 > (
 const hp::DoFHandler< 2 >&,
 const  BlockVector<double> &,
 const Point< 2 >&,
 Vector<double>&);

 template
 double point_value< 2 > (
 const hp::DoFHandler< 2 >&,
 const  BlockVector<double> &,
 const Point< 2 >&);

 template
 void point_value< 2 > (
 const hp::MappingCollection< 2 >&,
 const hp::DoFHandler< 2 >&,
 const  BlockVector<double> &,
 const Point< 2 >&,
 Vector<double>&);

 template
 double point_value< 2 > (
 const hp::MappingCollection< 2 >&,
 const hp::DoFHandler< 2 >&,
 const  BlockVector<double> &,
 const Point< 2 >&);

 template
 void point_difference< 2 > (
 const DoFHandler< 2 >&,
 const  BlockVector<double> &,
 const Function< 2 >&,
 Vector<double>&,
 const Point< 2 >&);

 template
 void point_difference< 2 > (
 const Mapping< 2 >&,
 const DoFHandler< 2 >&,
 const  BlockVector<double> &,
 const Function< 2 >&,
 Vector<double>&,
 const Point< 2 >&);

 template
 void point_value< 2 > (
 const DoFHandler< 2 >&,
 const  BlockVector<double> &,
 const Point< 2 >&,
 Vector<double>&);

 template
 double point_value< 2 > (
 const DoFHandler< 2 >&,
 const  BlockVector<double> &,
 const Point< 2 >&);

 template
 void point_value< 2 > (
 const Mapping< 2 >&,
 const DoFHandler< 2 >&,
 const  BlockVector<double> &,
 const Point< 2 >&,
 Vector<double>&);

 template
 double point_value< 2 > (
 const Mapping< 2 >&,
 const DoFHandler< 2 >&,
 const  BlockVector<double> &,
 const Point< 2 >&);

 }
#endif
 
#if  2  ==  2 

 namespace VectorTools {

 template
 void point_value< 2 > (
 const hp::DoFHandler< 2 >&,
 const  BlockVector<double> &,
 const Point< 2 >&,
 Vector<double>&);

 template
 double point_value< 2 > (
 const hp::DoFHandler< 2 >&,
 const  BlockVector<double> &,
 const Point< 2 >&);

 template
 void point_value< 2 > (
 const hp::MappingCollection< 2 >&,
 const hp::DoFHandler< 2 >&,
 const  BlockVector<double> &,
 const Point< 2 >&,
 Vector<double>&);

 template
 double point_value< 2 > (
 const hp::MappingCollection< 2 >&,
 const hp::DoFHandler< 2 >&,
 const  BlockVector<double> &,
 const Point< 2 >&);

 template
 void point_difference< 2 > (
 const DoFHandler< 2 >&,
 const  BlockVector<double> &,
 const Function< 2 >&,
 Vector<double>&,
 const Point< 2 >&);

 template
 void point_difference< 2 > (
 const Mapping< 2 >&,
 const DoFHandler< 2 >&,
 const  BlockVector<double> &,
 const Function< 2 >&,
 Vector<double>&,
 const Point< 2 >&);

 template
 void point_value< 2 > (
 const DoFHandler< 2 >&,
 const  BlockVector<double> &,
 const Point< 2 >&,
 Vector<double>&);

 template
 double point_value< 2 > (
 const DoFHandler< 2 >&,
 const  BlockVector<double> &,
 const Point< 2 >&);

 template
 void point_value< 2 > (
 const Mapping< 2 >&,
 const DoFHandler< 2 >&,
 const  BlockVector<double> &,
 const Point< 2 >&,
 Vector<double>&);

 template
 double point_value< 2 > (
 const Mapping< 2 >&,
 const DoFHandler< 2 >&,
 const  BlockVector<double> &,
 const Point< 2 >&);

 }
#endif
 
#if  2  ==  3 

 namespace VectorTools {

 template
 void point_value< 2 > (
 const hp::DoFHandler< 2 >&,
 const  BlockVector<double> &,
 const Point< 2 >&,
 Vector<double>&);

 template
 double point_value< 2 > (
 const hp::DoFHandler< 2 >&,
 const  BlockVector<double> &,
 const Point< 2 >&);

 template
 void point_value< 2 > (
 const hp::MappingCollection< 2 >&,
 const hp::DoFHandler< 2 >&,
 const  BlockVector<double> &,
 const Point< 2 >&,
 Vector<double>&);

 template
 double point_value< 2 > (
 const hp::MappingCollection< 2 >&,
 const hp::DoFHandler< 2 >&,
 const  BlockVector<double> &,
 const Point< 2 >&);

 template
 void point_difference< 2 > (
 const DoFHandler< 2 >&,
 const  BlockVector<double> &,
 const Function< 2 >&,
 Vector<double>&,
 const Point< 2 >&);

 template
 void point_difference< 2 > (
 const Mapping< 2 >&,
 const DoFHandler< 2 >&,
 const  BlockVector<double> &,
 const Function< 2 >&,
 Vector<double>&,
 const Point< 2 >&);

 template
 void point_value< 2 > (
 const DoFHandler< 2 >&,
 const  BlockVector<double> &,
 const Point< 2 >&,
 Vector<double>&);

 template
 double point_value< 2 > (
 const DoFHandler< 2 >&,
 const  BlockVector<double> &,
 const Point< 2 >&);

 template
 void point_value< 2 > (
 const Mapping< 2 >&,
 const DoFHandler< 2 >&,
 const  BlockVector<double> &,
 const Point< 2 >&,
 Vector<double>&);

 template
 double point_value< 2 > (
 const Mapping< 2 >&,
 const DoFHandler< 2 >&,
 const  BlockVector<double> &,
 const Point< 2 >&);

 }
#endif
 
#if  3  ==  1 

 namespace VectorTools {

 template
 void point_value< 3 > (
 const hp::DoFHandler< 3 >&,
 const  BlockVector<double> &,
 const Point< 3 >&,
 Vector<double>&);

 template
 double point_value< 3 > (
 const hp::DoFHandler< 3 >&,
 const  BlockVector<double> &,
 const Point< 3 >&);

 template
 void point_value< 3 > (
 const hp::MappingCollection< 3 >&,
 const hp::DoFHandler< 3 >&,
 const  BlockVector<double> &,
 const Point< 3 >&,
 Vector<double>&);

 template
 double point_value< 3 > (
 const hp::MappingCollection< 3 >&,
 const hp::DoFHandler< 3 >&,
 const  BlockVector<double> &,
 const Point< 3 >&);

 template
 void point_difference< 3 > (
 const DoFHandler< 3 >&,
 const  BlockVector<double> &,
 const Function< 3 >&,
 Vector<double>&,
 const Point< 3 >&);

 template
 void point_difference< 3 > (
 const Mapping< 3 >&,
 const DoFHandler< 3 >&,
 const  BlockVector<double> &,
 const Function< 3 >&,
 Vector<double>&,
 const Point< 3 >&);

 template
 void point_value< 3 > (
 const DoFHandler< 3 >&,
 const  BlockVector<double> &,
 const Point< 3 >&,
 Vector<double>&);

 template
 double point_value< 3 > (
 const DoFHandler< 3 >&,
 const  BlockVector<double> &,
 const Point< 3 >&);

 template
 void point_value< 3 > (
 const Mapping< 3 >&,
 const DoFHandler< 3 >&,
 const  BlockVector<double> &,
 const Point< 3 >&,
 Vector<double>&);

 template
 double point_value< 3 > (
 const Mapping< 3 >&,
 const DoFHandler< 3 >&,
 const  BlockVector<double> &,
 const Point< 3 >&);

 }
#endif
 
#if  3  ==  2 

 namespace VectorTools {

 template
 void point_value< 3 > (
 const hp::DoFHandler< 3 >&,
 const  BlockVector<double> &,
 const Point< 3 >&,
 Vector<double>&);

 template
 double point_value< 3 > (
 const hp::DoFHandler< 3 >&,
 const  BlockVector<double> &,
 const Point< 3 >&);

 template
 void point_value< 3 > (
 const hp::MappingCollection< 3 >&,
 const hp::DoFHandler< 3 >&,
 const  BlockVector<double> &,
 const Point< 3 >&,
 Vector<double>&);

 template
 double point_value< 3 > (
 const hp::MappingCollection< 3 >&,
 const hp::DoFHandler< 3 >&,
 const  BlockVector<double> &,
 const Point< 3 >&);

 template
 void point_difference< 3 > (
 const DoFHandler< 3 >&,
 const  BlockVector<double> &,
 const Function< 3 >&,
 Vector<double>&,
 const Point< 3 >&);

 template
 void point_difference< 3 > (
 const Mapping< 3 >&,
 const DoFHandler< 3 >&,
 const  BlockVector<double> &,
 const Function< 3 >&,
 Vector<double>&,
 const Point< 3 >&);

 template
 void point_value< 3 > (
 const DoFHandler< 3 >&,
 const  BlockVector<double> &,
 const Point< 3 >&,
 Vector<double>&);

 template
 double point_value< 3 > (
 const DoFHandler< 3 >&,
 const  BlockVector<double> &,
 const Point< 3 >&);

 template
 void point_value< 3 > (
 const Mapping< 3 >&,
 const DoFHandler< 3 >&,
 const  BlockVector<double> &,
 const Point< 3 >&,
 Vector<double>&);

 template
 double point_value< 3 > (
 const Mapping< 3 >&,
 const DoFHandler< 3 >&,
 const  BlockVector<double> &,
 const Point< 3 >&);

 }
#endif
 
#if  3  ==  3 

 namespace VectorTools {

 template
 void point_value< 3 > (
 const hp::DoFHandler< 3 >&,
 const  BlockVector<double> &,
 const Point< 3 >&,
 Vector<double>&);

 template
 double point_value< 3 > (
 const hp::DoFHandler< 3 >&,
 const  BlockVector<double> &,
 const Point< 3 >&);

 template
 void point_value< 3 > (
 const hp::MappingCollection< 3 >&,
 const hp::DoFHandler< 3 >&,
 const  BlockVector<double> &,
 const Point< 3 >&,
 Vector<double>&);

 template
 double point_value< 3 > (
 const hp::MappingCollection< 3 >&,
 const hp::DoFHandler< 3 >&,
 const  BlockVector<double> &,
 const Point< 3 >&);

 template
 void point_difference< 3 > (
 const DoFHandler< 3 >&,
 const  BlockVector<double> &,
 const Function< 3 >&,
 Vector<double>&,
 const Point< 3 >&);

 template
 void point_difference< 3 > (
 const Mapping< 3 >&,
 const DoFHandler< 3 >&,
 const  BlockVector<double> &,
 const Function< 3 >&,
 Vector<double>&,
 const Point< 3 >&);

 template
 void point_value< 3 > (
 const DoFHandler< 3 >&,
 const  BlockVector<double> &,
 const Point< 3 >&,
 Vector<double>&);

 template
 double point_value< 3 > (
 const DoFHandler< 3 >&,
 const  BlockVector<double> &,
 const Point< 3 >&);

 template
 void point_value< 3 > (
 const Mapping< 3 >&,
 const DoFHandler< 3 >&,
 const  BlockVector<double> &,
 const Point< 3 >&,
 Vector<double>&);

 template
 double point_value< 3 > (
 const Mapping< 3 >&,
 const DoFHandler< 3 >&,
 const  BlockVector<double> &,
 const Point< 3 >&);

 }
#endif
 
#if  1  ==  1 

 namespace VectorTools {

 template
 void point_value< 1 > (
 const hp::DoFHandler< 1 >&,
 const  BlockVector<float> &,
 const Point< 1 >&,
 Vector<double>&);

 template
 double point_value< 1 > (
 const hp::DoFHandler< 1 >&,
 const  BlockVector<float> &,
 const Point< 1 >&);

 template
 void point_value< 1 > (
 const hp::MappingCollection< 1 >&,
 const hp::DoFHandler< 1 >&,
 const  BlockVector<float> &,
 const Point< 1 >&,
 Vector<double>&);

 template
 double point_value< 1 > (
 const hp::MappingCollection< 1 >&,
 const hp::DoFHandler< 1 >&,
 const  BlockVector<float> &,
 const Point< 1 >&);

 template
 void point_difference< 1 > (
 const DoFHandler< 1 >&,
 const  BlockVector<float> &,
 const Function< 1 >&,
 Vector<double>&,
 const Point< 1 >&);

 template
 void point_difference< 1 > (
 const Mapping< 1 >&,
 const DoFHandler< 1 >&,
 const  BlockVector<float> &,
 const Function< 1 >&,
 Vector<double>&,
 const Point< 1 >&);

 template
 void point_value< 1 > (
 const DoFHandler< 1 >&,
 const  BlockVector<float> &,
 const Point< 1 >&,
 Vector<double>&);

 template
 double point_value< 1 > (
 const DoFHandler< 1 >&,
 const  BlockVector<float> &,
 const Point< 1 >&);

 template
 void point_value< 1 > (
 const Mapping< 1 >&,
 const DoFHandler< 1 >&,
 const  BlockVector<float> &,
 const Point< 1 >&,
 Vector<double>&);

 template
 double point_value< 1 > (
 const Mapping< 1 >&,
 const DoFHandler< 1 >&,
 const  BlockVector<float> &,
 const Point< 1 >&);

 }
#endif
 
#if  1  ==  2 

 namespace VectorTools {

 template
 void point_value< 1 > (
 const hp::DoFHandler< 1 >&,
 const  BlockVector<float> &,
 const Point< 1 >&,
 Vector<double>&);

 template
 double point_value< 1 > (
 const hp::DoFHandler< 1 >&,
 const  BlockVector<float> &,
 const Point< 1 >&);

 template
 void point_value< 1 > (
 const hp::MappingCollection< 1 >&,
 const hp::DoFHandler< 1 >&,
 const  BlockVector<float> &,
 const Point< 1 >&,
 Vector<double>&);

 template
 double point_value< 1 > (
 const hp::MappingCollection< 1 >&,
 const hp::DoFHandler< 1 >&,
 const  BlockVector<float> &,
 const Point< 1 >&);

 template
 void point_difference< 1 > (
 const DoFHandler< 1 >&,
 const  BlockVector<float> &,
 const Function< 1 >&,
 Vector<double>&,
 const Point< 1 >&);

 template
 void point_difference< 1 > (
 const Mapping< 1 >&,
 const DoFHandler< 1 >&,
 const  BlockVector<float> &,
 const Function< 1 >&,
 Vector<double>&,
 const Point< 1 >&);

 template
 void point_value< 1 > (
 const DoFHandler< 1 >&,
 const  BlockVector<float> &,
 const Point< 1 >&,
 Vector<double>&);

 template
 double point_value< 1 > (
 const DoFHandler< 1 >&,
 const  BlockVector<float> &,
 const Point< 1 >&);

 template
 void point_value< 1 > (
 const Mapping< 1 >&,
 const DoFHandler< 1 >&,
 const  BlockVector<float> &,
 const Point< 1 >&,
 Vector<double>&);

 template
 double point_value< 1 > (
 const Mapping< 1 >&,
 const DoFHandler< 1 >&,
 const  BlockVector<float> &,
 const Point< 1 >&);

 }
#endif
 
#if  1  ==  3 

 namespace VectorTools {

 template
 void point_value< 1 > (
 const hp::DoFHandler< 1 >&,
 const  BlockVector<float> &,
 const Point< 1 >&,
 Vector<double>&);

 template
 double point_value< 1 > (
 const hp::DoFHandler< 1 >&,
 const  BlockVector<float> &,
 const Point< 1 >&);

 template
 void point_value< 1 > (
 const hp::MappingCollection< 1 >&,
 const hp::DoFHandler< 1 >&,
 const  BlockVector<float> &,
 const Point< 1 >&,
 Vector<double>&);

 template
 double point_value< 1 > (
 const hp::MappingCollection< 1 >&,
 const hp::DoFHandler< 1 >&,
 const  BlockVector<float> &,
 const Point< 1 >&);

 template
 void point_difference< 1 > (
 const DoFHandler< 1 >&,
 const  BlockVector<float> &,
 const Function< 1 >&,
 Vector<double>&,
 const Point< 1 >&);

 template
 void point_difference< 1 > (
 const Mapping< 1 >&,
 const DoFHandler< 1 >&,
 const  BlockVector<float> &,
 const Function< 1 >&,
 Vector<double>&,
 const Point< 1 >&);

 template
 void point_value< 1 > (
 const DoFHandler< 1 >&,
 const  BlockVector<float> &,
 const Point< 1 >&,
 Vector<double>&);

 template
 double point_value< 1 > (
 const DoFHandler< 1 >&,
 const  BlockVector<float> &,
 const Point< 1 >&);

 template
 void point_value< 1 > (
 const Mapping< 1 >&,
 const DoFHandler< 1 >&,
 const  BlockVector<float> &,
 const Point< 1 >&,
 Vector<double>&);

 template
 double point_value< 1 > (
 const Mapping< 1 >&,
 const DoFHandler< 1 >&,
 const  BlockVector<float> &,
 const Point< 1 >&);

 }
#endif
 
#if  2  ==  1 

 namespace VectorTools {

 template
 void point_value< 2 > (
 const hp::DoFHandler< 2 >&,
 const  BlockVector<float> &,
 const Point< 2 >&,
 Vector<double>&);

 template
 double point_value< 2 > (
 const hp::DoFHandler< 2 >&,
 const  BlockVector<float> &,
 const Point< 2 >&);

 template
 void point_value< 2 > (
 const hp::MappingCollection< 2 >&,
 const hp::DoFHandler< 2 >&,
 const  BlockVector<float> &,
 const Point< 2 >&,
 Vector<double>&);

 template
 double point_value< 2 > (
 const hp::MappingCollection< 2 >&,
 const hp::DoFHandler< 2 >&,
 const  BlockVector<float> &,
 const Point< 2 >&);

 template
 void point_difference< 2 > (
 const DoFHandler< 2 >&,
 const  BlockVector<float> &,
 const Function< 2 >&,
 Vector<double>&,
 const Point< 2 >&);

 template
 void point_difference< 2 > (
 const Mapping< 2 >&,
 const DoFHandler< 2 >&,
 const  BlockVector<float> &,
 const Function< 2 >&,
 Vector<double>&,
 const Point< 2 >&);

 template
 void point_value< 2 > (
 const DoFHandler< 2 >&,
 const  BlockVector<float> &,
 const Point< 2 >&,
 Vector<double>&);

 template
 double point_value< 2 > (
 const DoFHandler< 2 >&,
 const  BlockVector<float> &,
 const Point< 2 >&);

 template
 void point_value< 2 > (
 const Mapping< 2 >&,
 const DoFHandler< 2 >&,
 const  BlockVector<float> &,
 const Point< 2 >&,
 Vector<double>&);

 template
 double point_value< 2 > (
 const Mapping< 2 >&,
 const DoFHandler< 2 >&,
 const  BlockVector<float> &,
 const Point< 2 >&);

 }
#endif
 
#if  2  ==  2 

 namespace VectorTools {

 template
 void point_value< 2 > (
 const hp::DoFHandler< 2 >&,
 const  BlockVector<float> &,
 const Point< 2 >&,
 Vector<double>&);

 template
 double point_value< 2 > (
 const hp::DoFHandler< 2 >&,
 const  BlockVector<float> &,
 const Point< 2 >&);

 template
 void point_value< 2 > (
 const hp::MappingCollection< 2 >&,
 const hp::DoFHandler< 2 >&,
 const  BlockVector<float> &,
 const Point< 2 >&,
 Vector<double>&);

 template
 double point_value< 2 > (
 const hp::MappingCollection< 2 >&,
 const hp::DoFHandler< 2 >&,
 const  BlockVector<float> &,
 const Point< 2 >&);

 template
 void point_difference< 2 > (
 const DoFHandler< 2 >&,
 const  BlockVector<float> &,
 const Function< 2 >&,
 Vector<double>&,
 const Point< 2 >&);

 template
 void point_difference< 2 > (
 const Mapping< 2 >&,
 const DoFHandler< 2 >&,
 const  BlockVector<float> &,
 const Function< 2 >&,
 Vector<double>&,
 const Point< 2 >&);

 template
 void point_value< 2 > (
 const DoFHandler< 2 >&,
 const  BlockVector<float> &,
 const Point< 2 >&,
 Vector<double>&);

 template
 double point_value< 2 > (
 const DoFHandler< 2 >&,
 const  BlockVector<float> &,
 const Point< 2 >&);

 template
 void point_value< 2 > (
 const Mapping< 2 >&,
 const DoFHandler< 2 >&,
 const  BlockVector<float> &,
 const Point< 2 >&,
 Vector<double>&);

 template
 double point_value< 2 > (
 const Mapping< 2 >&,
 const DoFHandler< 2 >&,
 const  BlockVector<float> &,
 const Point< 2 >&);

 }
#endif
 
#if  2  ==  3 

 namespace VectorTools {

 template
 void point_value< 2 > (
 const hp::DoFHandler< 2 >&,
 const  BlockVector<float> &,
 const Point< 2 >&,
 Vector<double>&);

 template
 double point_value< 2 > (
 const hp::DoFHandler< 2 >&,
 const  BlockVector<float> &,
 const Point< 2 >&);

 template
 void point_value< 2 > (
 const hp::MappingCollection< 2 >&,
 const hp::DoFHandler< 2 >&,
 const  BlockVector<float> &,
 const Point< 2 >&,
 Vector<double>&);

 template
 double point_value< 2 > (
 const hp::MappingCollection< 2 >&,
 const hp::DoFHandler< 2 >&,
 const  BlockVector<float> &,
 const Point< 2 >&);

 template
 void point_difference< 2 > (
 const DoFHandler< 2 >&,
 const  BlockVector<float> &,
 const Function< 2 >&,
 Vector<double>&,
 const Point< 2 >&);

 template
 void point_difference< 2 > (
 const Mapping< 2 >&,
 const DoFHandler< 2 >&,
 const  BlockVector<float> &,
 const Function< 2 >&,
 Vector<double>&,
 const Point< 2 >&);

 template
 void point_value< 2 > (
 const DoFHandler< 2 >&,
 const  BlockVector<float> &,
 const Point< 2 >&,
 Vector<double>&);

 template
 double point_value< 2 > (
 const DoFHandler< 2 >&,
 const  BlockVector<float> &,
 const Point< 2 >&);

 template
 void point_value< 2 > (
 const Mapping< 2 >&,
 const DoFHandler< 2 >&,
 const  BlockVector<float> &,
 const Point< 2 >&,
 Vector<double>&);

 template
 double point_value< 2 > (
 const Mapping< 2 >&,
 const DoFHandler< 2 >&,
 const  BlockVector<float> &,
 const Point< 2 >&);

 }
#endif
 
#if  3  ==  1 

 namespace VectorTools {

 template
 void point_value< 3 > (
 const hp::DoFHandler< 3 >&,
 const  BlockVector<float> &,
 const Point< 3 >&,
 Vector<double>&);

 template
 double point_value< 3 > (
 const hp::DoFHandler< 3 >&,
 const  BlockVector<float> &,
 const Point< 3 >&);

 template
 void point_value< 3 > (
 const hp::MappingCollection< 3 >&,
 const hp::DoFHandler< 3 >&,
 const  BlockVector<float> &,
 const Point< 3 >&,
 Vector<double>&);

 template
 double point_value< 3 > (
 const hp::MappingCollection< 3 >&,
 const hp::DoFHandler< 3 >&,
 const  BlockVector<float> &,
 const Point< 3 >&);

 template
 void point_difference< 3 > (
 const DoFHandler< 3 >&,
 const  BlockVector<float> &,
 const Function< 3 >&,
 Vector<double>&,
 const Point< 3 >&);

 template
 void point_difference< 3 > (
 const Mapping< 3 >&,
 const DoFHandler< 3 >&,
 const  BlockVector<float> &,
 const Function< 3 >&,
 Vector<double>&,
 const Point< 3 >&);

 template
 void point_value< 3 > (
 const DoFHandler< 3 >&,
 const  BlockVector<float> &,
 const Point< 3 >&,
 Vector<double>&);

 template
 double point_value< 3 > (
 const DoFHandler< 3 >&,
 const  BlockVector<float> &,
 const Point< 3 >&);

 template
 void point_value< 3 > (
 const Mapping< 3 >&,
 const DoFHandler< 3 >&,
 const  BlockVector<float> &,
 const Point< 3 >&,
 Vector<double>&);

 template
 double point_value< 3 > (
 const Mapping< 3 >&,
 const DoFHandler< 3 >&,
 const  BlockVector<float> &,
 const Point< 3 >&);

 }
#endif
 
#if  3  ==  2 

 namespace VectorTools {

 template
 void point_value< 3 > (
 const hp::DoFHandler< 3 >&,
 const  BlockVector<float> &,
 const Point< 3 >&,
 Vector<double>&);

 template
 double point_value< 3 > (
 const hp::DoFHandler< 3 >&,
 const  BlockVector<float> &,
 const Point< 3 >&);

 template
 void point_value< 3 > (
 const hp::MappingCollection< 3 >&,
 const hp::DoFHandler< 3 >&,
 const  BlockVector<float> &,
 const Point< 3 >&,
 Vector<double>&);

 template
 double point_value< 3 > (
 const hp::MappingCollection< 3 >&,
 const hp::DoFHandler< 3 >&,
 const  BlockVector<float> &,
 const Point< 3 >&);

 template
 void point_difference< 3 > (
 const DoFHandler< 3 >&,
 const  BlockVector<float> &,
 const Function< 3 >&,
 Vector<double>&,
 const Point< 3 >&);

 template
 void point_difference< 3 > (
 const Mapping< 3 >&,
 const DoFHandler< 3 >&,
 const  BlockVector<float> &,
 const Function< 3 >&,
 Vector<double>&,
 const Point< 3 >&);

 template
 void point_value< 3 > (
 const DoFHandler< 3 >&,
 const  BlockVector<float> &,
 const Point< 3 >&,
 Vector<double>&);

 template
 double point_value< 3 > (
 const DoFHandler< 3 >&,
 const  BlockVector<float> &,
 const Point< 3 >&);

 template
 void point_value< 3 > (
 const Mapping< 3 >&,
 const DoFHandler< 3 >&,
 const  BlockVector<float> &,
 const Point< 3 >&,
 Vector<double>&);

 template
 double point_value< 3 > (
 const Mapping< 3 >&,
 const DoFHandler< 3 >&,
 const  BlockVector<float> &,
 const Point< 3 >&);

 }
#endif
 
#if  3  ==  3 

 namespace VectorTools {

 template
 void point_value< 3 > (
 const hp::DoFHandler< 3 >&,
 const  BlockVector<float> &,
 const Point< 3 >&,
 Vector<double>&);

 template
 double point_value< 3 > (
 const hp::DoFHandler< 3 >&,
 const  BlockVector<float> &,
 const Point< 3 >&);

 template
 void point_value< 3 > (
 const hp::MappingCollection< 3 >&,
 const hp::DoFHandler< 3 >&,
 const  BlockVector<float> &,
 const Point< 3 >&,
 Vector<double>&);

 template
 double point_value< 3 > (
 const hp::MappingCollection< 3 >&,
 const hp::DoFHandler< 3 >&,
 const  BlockVector<float> &,
 const Point< 3 >&);

 template
 void point_difference< 3 > (
 const DoFHandler< 3 >&,
 const  BlockVector<float> &,
 const Function< 3 >&,
 Vector<double>&,
 const Point< 3 >&);

 template
 void point_difference< 3 > (
 const Mapping< 3 >&,
 const DoFHandler< 3 >&,
 const  BlockVector<float> &,
 const Function< 3 >&,
 Vector<double>&,
 const Point< 3 >&);

 template
 void point_value< 3 > (
 const DoFHandler< 3 >&,
 const  BlockVector<float> &,
 const Point< 3 >&,
 Vector<double>&);

 template
 double point_value< 3 > (
 const DoFHandler< 3 >&,
 const  BlockVector<float> &,
 const Point< 3 >&);

 template
 void point_value< 3 > (
 const Mapping< 3 >&,
 const DoFHandler< 3 >&,
 const  BlockVector<float> &,
 const Point< 3 >&,
 Vector<double>&);

 template
 double point_value< 3 > (
 const Mapping< 3 >&,
 const DoFHandler< 3 >&,
 const  BlockVector<float> &,
 const Point< 3 >&);

 }
#endif
 
#if  1  ==  1 

 namespace VectorTools {

 template
 void point_value< 1 > (
 const hp::DoFHandler< 1 >&,
 const  BlockVector<long double> &,
 const Point< 1 >&,
 Vector<double>&);

 template
 double point_value< 1 > (
 const hp::DoFHandler< 1 >&,
 const  BlockVector<long double> &,
 const Point< 1 >&);

 template
 void point_value< 1 > (
 const hp::MappingCollection< 1 >&,
 const hp::DoFHandler< 1 >&,
 const  BlockVector<long double> &,
 const Point< 1 >&,
 Vector<double>&);

 template
 double point_value< 1 > (
 const hp::MappingCollection< 1 >&,
 const hp::DoFHandler< 1 >&,
 const  BlockVector<long double> &,
 const Point< 1 >&);

 template
 void point_difference< 1 > (
 const DoFHandler< 1 >&,
 const  BlockVector<long double> &,
 const Function< 1 >&,
 Vector<double>&,
 const Point< 1 >&);

 template
 void point_difference< 1 > (
 const Mapping< 1 >&,
 const DoFHandler< 1 >&,
 const  BlockVector<long double> &,
 const Function< 1 >&,
 Vector<double>&,
 const Point< 1 >&);

 template
 void point_value< 1 > (
 const DoFHandler< 1 >&,
 const  BlockVector<long double> &,
 const Point< 1 >&,
 Vector<double>&);

 template
 double point_value< 1 > (
 const DoFHandler< 1 >&,
 const  BlockVector<long double> &,
 const Point< 1 >&);

 template
 void point_value< 1 > (
 const Mapping< 1 >&,
 const DoFHandler< 1 >&,
 const  BlockVector<long double> &,
 const Point< 1 >&,
 Vector<double>&);

 template
 double point_value< 1 > (
 const Mapping< 1 >&,
 const DoFHandler< 1 >&,
 const  BlockVector<long double> &,
 const Point< 1 >&);

 }
#endif
 
#if  1  ==  2 

 namespace VectorTools {

 template
 void point_value< 1 > (
 const hp::DoFHandler< 1 >&,
 const  BlockVector<long double> &,
 const Point< 1 >&,
 Vector<double>&);

 template
 double point_value< 1 > (
 const hp::DoFHandler< 1 >&,
 const  BlockVector<long double> &,
 const Point< 1 >&);

 template
 void point_value< 1 > (
 const hp::MappingCollection< 1 >&,
 const hp::DoFHandler< 1 >&,
 const  BlockVector<long double> &,
 const Point< 1 >&,
 Vector<double>&);

 template
 double point_value< 1 > (
 const hp::MappingCollection< 1 >&,
 const hp::DoFHandler< 1 >&,
 const  BlockVector<long double> &,
 const Point< 1 >&);

 template
 void point_difference< 1 > (
 const DoFHandler< 1 >&,
 const  BlockVector<long double> &,
 const Function< 1 >&,
 Vector<double>&,
 const Point< 1 >&);

 template
 void point_difference< 1 > (
 const Mapping< 1 >&,
 const DoFHandler< 1 >&,
 const  BlockVector<long double> &,
 const Function< 1 >&,
 Vector<double>&,
 const Point< 1 >&);

 template
 void point_value< 1 > (
 const DoFHandler< 1 >&,
 const  BlockVector<long double> &,
 const Point< 1 >&,
 Vector<double>&);

 template
 double point_value< 1 > (
 const DoFHandler< 1 >&,
 const  BlockVector<long double> &,
 const Point< 1 >&);

 template
 void point_value< 1 > (
 const Mapping< 1 >&,
 const DoFHandler< 1 >&,
 const  BlockVector<long double> &,
 const Point< 1 >&,
 Vector<double>&);

 template
 double point_value< 1 > (
 const Mapping< 1 >&,
 const DoFHandler< 1 >&,
 const  BlockVector<long double> &,
 const Point< 1 >&);

 }
#endif
 
#if  1  ==  3 

 namespace VectorTools {

 template
 void point_value< 1 > (
 const hp::DoFHandler< 1 >&,
 const  BlockVector<long double> &,
 const Point< 1 >&,
 Vector<double>&);

 template
 double point_value< 1 > (
 const hp::DoFHandler< 1 >&,
 const  BlockVector<long double> &,
 const Point< 1 >&);

 template
 void point_value< 1 > (
 const hp::MappingCollection< 1 >&,
 const hp::DoFHandler< 1 >&,
 const  BlockVector<long double> &,
 const Point< 1 >&,
 Vector<double>&);

 template
 double point_value< 1 > (
 const hp::MappingCollection< 1 >&,
 const hp::DoFHandler< 1 >&,
 const  BlockVector<long double> &,
 const Point< 1 >&);

 template
 void point_difference< 1 > (
 const DoFHandler< 1 >&,
 const  BlockVector<long double> &,
 const Function< 1 >&,
 Vector<double>&,
 const Point< 1 >&);

 template
 void point_difference< 1 > (
 const Mapping< 1 >&,
 const DoFHandler< 1 >&,
 const  BlockVector<long double> &,
 const Function< 1 >&,
 Vector<double>&,
 const Point< 1 >&);

 template
 void point_value< 1 > (
 const DoFHandler< 1 >&,
 const  BlockVector<long double> &,
 const Point< 1 >&,
 Vector<double>&);

 template
 double point_value< 1 > (
 const DoFHandler< 1 >&,
 const  BlockVector<long double> &,
 const Point< 1 >&);

 template
 void point_value< 1 > (
 const Mapping< 1 >&,
 const DoFHandler< 1 >&,
 const  BlockVector<long double> &,
 const Point< 1 >&,
 Vector<double>&);

 template
 double point_value< 1 > (
 const Mapping< 1 >&,
 const DoFHandler< 1 >&,
 const  BlockVector<long double> &,
 const Point< 1 >&);

 }
#endif
 
#if  2  ==  1 

 namespace VectorTools {

 template
 void point_value< 2 > (
 const hp::DoFHandler< 2 >&,
 const  BlockVector<long double> &,
 const Point< 2 >&,
 Vector<double>&);

 template
 double point_value< 2 > (
 const hp::DoFHandler< 2 >&,
 const  BlockVector<long double> &,
 const Point< 2 >&);

 template
 void point_value< 2 > (
 const hp::MappingCollection< 2 >&,
 const hp::DoFHandler< 2 >&,
 const  BlockVector<long double> &,
 const Point< 2 >&,
 Vector<double>&);

 template
 double point_value< 2 > (
 const hp::MappingCollection< 2 >&,
 const hp::DoFHandler< 2 >&,
 const  BlockVector<long double> &,
 const Point< 2 >&);

 template
 void point_difference< 2 > (
 const DoFHandler< 2 >&,
 const  BlockVector<long double> &,
 const Function< 2 >&,
 Vector<double>&,
 const Point< 2 >&);

 template
 void point_difference< 2 > (
 const Mapping< 2 >&,
 const DoFHandler< 2 >&,
 const  BlockVector<long double> &,
 const Function< 2 >&,
 Vector<double>&,
 const Point< 2 >&);

 template
 void point_value< 2 > (
 const DoFHandler< 2 >&,
 const  BlockVector<long double> &,
 const Point< 2 >&,
 Vector<double>&);

 template
 double point_value< 2 > (
 const DoFHandler< 2 >&,
 const  BlockVector<long double> &,
 const Point< 2 >&);

 template
 void point_value< 2 > (
 const Mapping< 2 >&,
 const DoFHandler< 2 >&,
 const  BlockVector<long double> &,
 const Point< 2 >&,
 Vector<double>&);

 template
 double point_value< 2 > (
 const Mapping< 2 >&,
 const DoFHandler< 2 >&,
 const  BlockVector<long double> &,
 const Point< 2 >&);

 }
#endif
 
#if  2  ==  2 

 namespace VectorTools {

 template
 void point_value< 2 > (
 const hp::DoFHandler< 2 >&,
 const  BlockVector<long double> &,
 const Point< 2 >&,
 Vector<double>&);

 template
 double point_value< 2 > (
 const hp::DoFHandler< 2 >&,
 const  BlockVector<long double> &,
 const Point< 2 >&);

 template
 void point_value< 2 > (
 const hp::MappingCollection< 2 >&,
 const hp::DoFHandler< 2 >&,
 const  BlockVector<long double> &,
 const Point< 2 >&,
 Vector<double>&);

 template
 double point_value< 2 > (
 const hp::MappingCollection< 2 >&,
 const hp::DoFHandler< 2 >&,
 const  BlockVector<long double> &,
 const Point< 2 >&);

 template
 void point_difference< 2 > (
 const DoFHandler< 2 >&,
 const  BlockVector<long double> &,
 const Function< 2 >&,
 Vector<double>&,
 const Point< 2 >&);

 template
 void point_difference< 2 > (
 const Mapping< 2 >&,
 const DoFHandler< 2 >&,
 const  BlockVector<long double> &,
 const Function< 2 >&,
 Vector<double>&,
 const Point< 2 >&);

 template
 void point_value< 2 > (
 const DoFHandler< 2 >&,
 const  BlockVector<long double> &,
 const Point< 2 >&,
 Vector<double>&);

 template
 double point_value< 2 > (
 const DoFHandler< 2 >&,
 const  BlockVector<long double> &,
 const Point< 2 >&);

 template
 void point_value< 2 > (
 const Mapping< 2 >&,
 const DoFHandler< 2 >&,
 const  BlockVector<long double> &,
 const Point< 2 >&,
 Vector<double>&);

 template
 double point_value< 2 > (
 const Mapping< 2 >&,
 const DoFHandler< 2 >&,
 const  BlockVector<long double> &,
 const Point< 2 >&);

 }
#endif
 
#if  2  ==  3 

 namespace VectorTools {

 template
 void point_value< 2 > (
 const hp::DoFHandler< 2 >&,
 const  BlockVector<long double> &,
 const Point< 2 >&,
 Vector<double>&);

 template
 double point_value< 2 > (
 const hp::DoFHandler< 2 >&,
 const  BlockVector<long double> &,
 const Point< 2 >&);

 template
 void point_value< 2 > (
 const hp::MappingCollection< 2 >&,
 const hp::DoFHandler< 2 >&,
 const  BlockVector<long double> &,
 const Point< 2 >&,
 Vector<double>&);

 template
 double point_value< 2 > (
 const hp::MappingCollection< 2 >&,
 const hp::DoFHandler< 2 >&,
 const  BlockVector<long double> &,
 const Point< 2 >&);

 template
 void point_difference< 2 > (
 const DoFHandler< 2 >&,
 const  BlockVector<long double> &,
 const Function< 2 >&,
 Vector<double>&,
 const Point< 2 >&);

 template
 void point_difference< 2 > (
 const Mapping< 2 >&,
 const DoFHandler< 2 >&,
 const  BlockVector<long double> &,
 const Function< 2 >&,
 Vector<double>&,
 const Point< 2 >&);

 template
 void point_value< 2 > (
 const DoFHandler< 2 >&,
 const  BlockVector<long double> &,
 const Point< 2 >&,
 Vector<double>&);

 template
 double point_value< 2 > (
 const DoFHandler< 2 >&,
 const  BlockVector<long double> &,
 const Point< 2 >&);

 template
 void point_value< 2 > (
 const Mapping< 2 >&,
 const DoFHandler< 2 >&,
 const  BlockVector<long double> &,
 const Point< 2 >&,
 Vector<double>&);

 template
 double point_value< 2 > (
 const Mapping< 2 >&,
 const DoFHandler< 2 >&,
 const  BlockVector<long double> &,
 const Point< 2 >&);

 }
#endif
 
#if  3  ==  1 

 namespace VectorTools {

 template
 void point_value< 3 > (
 const hp::DoFHandler< 3 >&,
 const  BlockVector<long double> &,
 const Point< 3 >&,
 Vector<double>&);

 template
 double point_value< 3 > (
 const hp::DoFHandler< 3 >&,
 const  BlockVector<long double> &,
 const Point< 3 >&);

 template
 void point_value< 3 > (
 const hp::MappingCollection< 3 >&,
 const hp::DoFHandler< 3 >&,
 const  BlockVector<long double> &,
 const Point< 3 >&,
 Vector<double>&);

 template
 double point_value< 3 > (
 const hp::MappingCollection< 3 >&,
 const hp::DoFHandler< 3 >&,
 const  BlockVector<long double> &,
 const Point< 3 >&);

 template
 void point_difference< 3 > (
 const DoFHandler< 3 >&,
 const  BlockVector<long double> &,
 const Function< 3 >&,
 Vector<double>&,
 const Point< 3 >&);

 template
 void point_difference< 3 > (
 const Mapping< 3 >&,
 const DoFHandler< 3 >&,
 const  BlockVector<long double> &,
 const Function< 3 >&,
 Vector<double>&,
 const Point< 3 >&);

 template
 void point_value< 3 > (
 const DoFHandler< 3 >&,
 const  BlockVector<long double> &,
 const Point< 3 >&,
 Vector<double>&);

 template
 double point_value< 3 > (
 const DoFHandler< 3 >&,
 const  BlockVector<long double> &,
 const Point< 3 >&);

 template
 void point_value< 3 > (
 const Mapping< 3 >&,
 const DoFHandler< 3 >&,
 const  BlockVector<long double> &,
 const Point< 3 >&,
 Vector<double>&);

 template
 double point_value< 3 > (
 const Mapping< 3 >&,
 const DoFHandler< 3 >&,
 const  BlockVector<long double> &,
 const Point< 3 >&);

 }
#endif
 
#if  3  ==  2 

 namespace VectorTools {

 template
 void point_value< 3 > (
 const hp::DoFHandler< 3 >&,
 const  BlockVector<long double> &,
 const Point< 3 >&,
 Vector<double>&);

 template
 double point_value< 3 > (
 const hp::DoFHandler< 3 >&,
 const  BlockVector<long double> &,
 const Point< 3 >&);

 template
 void point_value< 3 > (
 const hp::MappingCollection< 3 >&,
 const hp::DoFHandler< 3 >&,
 const  BlockVector<long double> &,
 const Point< 3 >&,
 Vector<double>&);

 template
 double point_value< 3 > (
 const hp::MappingCollection< 3 >&,
 const hp::DoFHandler< 3 >&,
 const  BlockVector<long double> &,
 const Point< 3 >&);

 template
 void point_difference< 3 > (
 const DoFHandler< 3 >&,
 const  BlockVector<long double> &,
 const Function< 3 >&,
 Vector<double>&,
 const Point< 3 >&);

 template
 void point_difference< 3 > (
 const Mapping< 3 >&,
 const DoFHandler< 3 >&,
 const  BlockVector<long double> &,
 const Function< 3 >&,
 Vector<double>&,
 const Point< 3 >&);

 template
 void point_value< 3 > (
 const DoFHandler< 3 >&,
 const  BlockVector<long double> &,
 const Point< 3 >&,
 Vector<double>&);

 template
 double point_value< 3 > (
 const DoFHandler< 3 >&,
 const  BlockVector<long double> &,
 const Point< 3 >&);

 template
 void point_value< 3 > (
 const Mapping< 3 >&,
 const DoFHandler< 3 >&,
 const  BlockVector<long double> &,
 const Point< 3 >&,
 Vector<double>&);

 template
 double point_value< 3 > (
 const Mapping< 3 >&,
 const DoFHandler< 3 >&,
 const  BlockVector<long double> &,
 const Point< 3 >&);

 }
#endif
 
#if  3  ==  3 

 namespace VectorTools {

 template
 void point_value< 3 > (
 const hp::DoFHandler< 3 >&,
 const  BlockVector<long double> &,
 const Point< 3 >&,
 Vector<double>&);

 template
 double point_value< 3 > (
 const hp::DoFHandler< 3 >&,
 const  BlockVector<long double> &,
 const Point< 3 >&);

 template
 void point_value< 3 > (
 const hp::MappingCollection< 3 >&,
 const hp::DoFHandler< 3 >&,
 const  BlockVector<long double> &,
 const Point< 3 >&,
 Vector<double>&);

 template
 double point_value< 3 > (
 const hp::MappingCollection< 3 >&,
 const hp::DoFHandler< 3 >&,
 const  BlockVector<long double> &,
 const Point< 3 >&);

 template
 void point_difference< 3 > (
 const DoFHandler< 3 >&,
 const  BlockVector<long double> &,
 const Function< 3 >&,
 Vector<double>&,
 const Point< 3 >&);

 template
 void point_difference< 3 > (
 const Mapping< 3 >&,
 const DoFHandler< 3 >&,
 const  BlockVector<long double> &,
 const Function< 3 >&,
 Vector<double>&,
 const Point< 3 >&);

 template
 void point_value< 3 > (
 const DoFHandler< 3 >&,
 const  BlockVector<long double> &,
 const Point< 3 >&,
 Vector<double>&);

 template
 double point_value< 3 > (
 const DoFHandler< 3 >&,
 const  BlockVector<long double> &,
 const Point< 3 >&);

 template
 void point_value< 3 > (
 const Mapping< 3 >&,
 const DoFHandler< 3 >&,
 const  BlockVector<long double> &,
 const Point< 3 >&,
 Vector<double>&);

 template
 double point_value< 3 > (
 const Mapping< 3 >&,
 const DoFHandler< 3 >&,
 const  BlockVector<long double> &,
 const Point< 3 >&);

 }
#endif
 
#if  1  ==  1 

 namespace VectorTools {

 template
 void point_value< 1 > (
 const hp::DoFHandler< 1 >&,
 const  parallel::distributed::Vector<double> &,
 const Point< 1 >&,
 Vector<double>&);

 template
 double point_value< 1 > (
 const hp::DoFHandler< 1 >&,
 const  parallel::distributed::Vector<double> &,
 const Point< 1 >&);

 template
 void point_value< 1 > (
 const hp::MappingCollection< 1 >&,
 const hp::DoFHandler< 1 >&,
 const  parallel::distributed::Vector<double> &,
 const Point< 1 >&,
 Vector<double>&);

 template
 double point_value< 1 > (
 const hp::MappingCollection< 1 >&,
 const hp::DoFHandler< 1 >&,
 const  parallel::distributed::Vector<double> &,
 const Point< 1 >&);

 template
 void point_difference< 1 > (
 const DoFHandler< 1 >&,
 const  parallel::distributed::Vector<double> &,
 const Function< 1 >&,
 Vector<double>&,
 const Point< 1 >&);

 template
 void point_difference< 1 > (
 const Mapping< 1 >&,
 const DoFHandler< 1 >&,
 const  parallel::distributed::Vector<double> &,
 const Function< 1 >&,
 Vector<double>&,
 const Point< 1 >&);

 template
 void point_value< 1 > (
 const DoFHandler< 1 >&,
 const  parallel::distributed::Vector<double> &,
 const Point< 1 >&,
 Vector<double>&);

 template
 double point_value< 1 > (
 const DoFHandler< 1 >&,
 const  parallel::distributed::Vector<double> &,
 const Point< 1 >&);

 template
 void point_value< 1 > (
 const Mapping< 1 >&,
 const DoFHandler< 1 >&,
 const  parallel::distributed::Vector<double> &,
 const Point< 1 >&,
 Vector<double>&);

 template
 double point_value< 1 > (
 const Mapping< 1 >&,
 const DoFHandler< 1 >&,
 const  parallel::distributed::Vector<double> &,
 const Point< 1 >&);

 }
#endif
 
#if  1  ==  2 

 namespace VectorTools {

 template
 void point_value< 1 > (
 const hp::DoFHandler< 1 >&,
 const  parallel::distributed::Vector<double> &,
 const Point< 1 >&,
 Vector<double>&);

 template
 double point_value< 1 > (
 const hp::DoFHandler< 1 >&,
 const  parallel::distributed::Vector<double> &,
 const Point< 1 >&);

 template
 void point_value< 1 > (
 const hp::MappingCollection< 1 >&,
 const hp::DoFHandler< 1 >&,
 const  parallel::distributed::Vector<double> &,
 const Point< 1 >&,
 Vector<double>&);

 template
 double point_value< 1 > (
 const hp::MappingCollection< 1 >&,
 const hp::DoFHandler< 1 >&,
 const  parallel::distributed::Vector<double> &,
 const Point< 1 >&);

 template
 void point_difference< 1 > (
 const DoFHandler< 1 >&,
 const  parallel::distributed::Vector<double> &,
 const Function< 1 >&,
 Vector<double>&,
 const Point< 1 >&);

 template
 void point_difference< 1 > (
 const Mapping< 1 >&,
 const DoFHandler< 1 >&,
 const  parallel::distributed::Vector<double> &,
 const Function< 1 >&,
 Vector<double>&,
 const Point< 1 >&);

 template
 void point_value< 1 > (
 const DoFHandler< 1 >&,
 const  parallel::distributed::Vector<double> &,
 const Point< 1 >&,
 Vector<double>&);

 template
 double point_value< 1 > (
 const DoFHandler< 1 >&,
 const  parallel::distributed::Vector<double> &,
 const Point< 1 >&);

 template
 void point_value< 1 > (
 const Mapping< 1 >&,
 const DoFHandler< 1 >&,
 const  parallel::distributed::Vector<double> &,
 const Point< 1 >&,
 Vector<double>&);

 template
 double point_value< 1 > (
 const Mapping< 1 >&,
 const DoFHandler< 1 >&,
 const  parallel::distributed::Vector<double> &,
 const Point< 1 >&);

 }
#endif
 
#if  1  ==  3 

 namespace VectorTools {

 template
 void point_value< 1 > (
 const hp::DoFHandler< 1 >&,
 const  parallel::distributed::Vector<double> &,
 const Point< 1 >&,
 Vector<double>&);

 template
 double point_value< 1 > (
 const hp::DoFHandler< 1 >&,
 const  parallel::distributed::Vector<double> &,
 const Point< 1 >&);

 template
 void point_value< 1 > (
 const hp::MappingCollection< 1 >&,
 const hp::DoFHandler< 1 >&,
 const  parallel::distributed::Vector<double> &,
 const Point< 1 >&,
 Vector<double>&);

 template
 double point_value< 1 > (
 const hp::MappingCollection< 1 >&,
 const hp::DoFHandler< 1 >&,
 const  parallel::distributed::Vector<double> &,
 const Point< 1 >&);

 template
 void point_difference< 1 > (
 const DoFHandler< 1 >&,
 const  parallel::distributed::Vector<double> &,
 const Function< 1 >&,
 Vector<double>&,
 const Point< 1 >&);

 template
 void point_difference< 1 > (
 const Mapping< 1 >&,
 const DoFHandler< 1 >&,
 const  parallel::distributed::Vector<double> &,
 const Function< 1 >&,
 Vector<double>&,
 const Point< 1 >&);

 template
 void point_value< 1 > (
 const DoFHandler< 1 >&,
 const  parallel::distributed::Vector<double> &,
 const Point< 1 >&,
 Vector<double>&);

 template
 double point_value< 1 > (
 const DoFHandler< 1 >&,
 const  parallel::distributed::Vector<double> &,
 const Point< 1 >&);

 template
 void point_value< 1 > (
 const Mapping< 1 >&,
 const DoFHandler< 1 >&,
 const  parallel::distributed::Vector<double> &,
 const Point< 1 >&,
 Vector<double>&);

 template
 double point_value< 1 > (
 const Mapping< 1 >&,
 const DoFHandler< 1 >&,
 const  parallel::distributed::Vector<double> &,
 const Point< 1 >&);

 }
#endif
 
#if  2  ==  1 

 namespace VectorTools {

 template
 void point_value< 2 > (
 const hp::DoFHandler< 2 >&,
 const  parallel::distributed::Vector<double> &,
 const Point< 2 >&,
 Vector<double>&);

 template
 double point_value< 2 > (
 const hp::DoFHandler< 2 >&,
 const  parallel::distributed::Vector<double> &,
 const Point< 2 >&);

 template
 void point_value< 2 > (
 const hp::MappingCollection< 2 >&,
 const hp::DoFHandler< 2 >&,
 const  parallel::distributed::Vector<double> &,
 const Point< 2 >&,
 Vector<double>&);

 template
 double point_value< 2 > (
 const hp::MappingCollection< 2 >&,
 const hp::DoFHandler< 2 >&,
 const  parallel::distributed::Vector<double> &,
 const Point< 2 >&);

 template
 void point_difference< 2 > (
 const DoFHandler< 2 >&,
 const  parallel::distributed::Vector<double> &,
 const Function< 2 >&,
 Vector<double>&,
 const Point< 2 >&);

 template
 void point_difference< 2 > (
 const Mapping< 2 >&,
 const DoFHandler< 2 >&,
 const  parallel::distributed::Vector<double> &,
 const Function< 2 >&,
 Vector<double>&,
 const Point< 2 >&);

 template
 void point_value< 2 > (
 const DoFHandler< 2 >&,
 const  parallel::distributed::Vector<double> &,
 const Point< 2 >&,
 Vector<double>&);

 template
 double point_value< 2 > (
 const DoFHandler< 2 >&,
 const  parallel::distributed::Vector<double> &,
 const Point< 2 >&);

 template
 void point_value< 2 > (
 const Mapping< 2 >&,
 const DoFHandler< 2 >&,
 const  parallel::distributed::Vector<double> &,
 const Point< 2 >&,
 Vector<double>&);

 template
 double point_value< 2 > (
 const Mapping< 2 >&,
 const DoFHandler< 2 >&,
 const  parallel::distributed::Vector<double> &,
 const Point< 2 >&);

 }
#endif
 
#if  2  ==  2 

 namespace VectorTools {

 template
 void point_value< 2 > (
 const hp::DoFHandler< 2 >&,
 const  parallel::distributed::Vector<double> &,
 const Point< 2 >&,
 Vector<double>&);

 template
 double point_value< 2 > (
 const hp::DoFHandler< 2 >&,
 const  parallel::distributed::Vector<double> &,
 const Point< 2 >&);

 template
 void point_value< 2 > (
 const hp::MappingCollection< 2 >&,
 const hp::DoFHandler< 2 >&,
 const  parallel::distributed::Vector<double> &,
 const Point< 2 >&,
 Vector<double>&);

 template
 double point_value< 2 > (
 const hp::MappingCollection< 2 >&,
 const hp::DoFHandler< 2 >&,
 const  parallel::distributed::Vector<double> &,
 const Point< 2 >&);

 template
 void point_difference< 2 > (
 const DoFHandler< 2 >&,
 const  parallel::distributed::Vector<double> &,
 const Function< 2 >&,
 Vector<double>&,
 const Point< 2 >&);

 template
 void point_difference< 2 > (
 const Mapping< 2 >&,
 const DoFHandler< 2 >&,
 const  parallel::distributed::Vector<double> &,
 const Function< 2 >&,
 Vector<double>&,
 const Point< 2 >&);

 template
 void point_value< 2 > (
 const DoFHandler< 2 >&,
 const  parallel::distributed::Vector<double> &,
 const Point< 2 >&,
 Vector<double>&);

 template
 double point_value< 2 > (
 const DoFHandler< 2 >&,
 const  parallel::distributed::Vector<double> &,
 const Point< 2 >&);

 template
 void point_value< 2 > (
 const Mapping< 2 >&,
 const DoFHandler< 2 >&,
 const  parallel::distributed::Vector<double> &,
 const Point< 2 >&,
 Vector<double>&);

 template
 double point_value< 2 > (
 const Mapping< 2 >&,
 const DoFHandler< 2 >&,
 const  parallel::distributed::Vector<double> &,
 const Point< 2 >&);

 }
#endif
 
#if  2  ==  3 

 namespace VectorTools {

 template
 void point_value< 2 > (
 const hp::DoFHandler< 2 >&,
 const  parallel::distributed::Vector<double> &,
 const Point< 2 >&,
 Vector<double>&);

 template
 double point_value< 2 > (
 const hp::DoFHandler< 2 >&,
 const  parallel::distributed::Vector<double> &,
 const Point< 2 >&);

 template
 void point_value< 2 > (
 const hp::MappingCollection< 2 >&,
 const hp::DoFHandler< 2 >&,
 const  parallel::distributed::Vector<double> &,
 const Point< 2 >&,
 Vector<double>&);

 template
 double point_value< 2 > (
 const hp::MappingCollection< 2 >&,
 const hp::DoFHandler< 2 >&,
 const  parallel::distributed::Vector<double> &,
 const Point< 2 >&);

 template
 void point_difference< 2 > (
 const DoFHandler< 2 >&,
 const  parallel::distributed::Vector<double> &,
 const Function< 2 >&,
 Vector<double>&,
 const Point< 2 >&);

 template
 void point_difference< 2 > (
 const Mapping< 2 >&,
 const DoFHandler< 2 >&,
 const  parallel::distributed::Vector<double> &,
 const Function< 2 >&,
 Vector<double>&,
 const Point< 2 >&);

 template
 void point_value< 2 > (
 const DoFHandler< 2 >&,
 const  parallel::distributed::Vector<double> &,
 const Point< 2 >&,
 Vector<double>&);

 template
 double point_value< 2 > (
 const DoFHandler< 2 >&,
 const  parallel::distributed::Vector<double> &,
 const Point< 2 >&);

 template
 void point_value< 2 > (
 const Mapping< 2 >&,
 const DoFHandler< 2 >&,
 const  parallel::distributed::Vector<double> &,
 const Point< 2 >&,
 Vector<double>&);

 template
 double point_value< 2 > (
 const Mapping< 2 >&,
 const DoFHandler< 2 >&,
 const  parallel::distributed::Vector<double> &,
 const Point< 2 >&);

 }
#endif
 
#if  3  ==  1 

 namespace VectorTools {

 template
 void point_value< 3 > (
 const hp::DoFHandler< 3 >&,
 const  parallel::distributed::Vector<double> &,
 const Point< 3 >&,
 Vector<double>&);

 template
 double point_value< 3 > (
 const hp::DoFHandler< 3 >&,
 const  parallel::distributed::Vector<double> &,
 const Point< 3 >&);

 template
 void point_value< 3 > (
 const hp::MappingCollection< 3 >&,
 const hp::DoFHandler< 3 >&,
 const  parallel::distributed::Vector<double> &,
 const Point< 3 >&,
 Vector<double>&);

 template
 double point_value< 3 > (
 const hp::MappingCollection< 3 >&,
 const hp::DoFHandler< 3 >&,
 const  parallel::distributed::Vector<double> &,
 const Point< 3 >&);

 template
 void point_difference< 3 > (
 const DoFHandler< 3 >&,
 const  parallel::distributed::Vector<double> &,
 const Function< 3 >&,
 Vector<double>&,
 const Point< 3 >&);

 template
 void point_difference< 3 > (
 const Mapping< 3 >&,
 const DoFHandler< 3 >&,
 const  parallel::distributed::Vector<double> &,
 const Function< 3 >&,
 Vector<double>&,
 const Point< 3 >&);

 template
 void point_value< 3 > (
 const DoFHandler< 3 >&,
 const  parallel::distributed::Vector<double> &,
 const Point< 3 >&,
 Vector<double>&);

 template
 double point_value< 3 > (
 const DoFHandler< 3 >&,
 const  parallel::distributed::Vector<double> &,
 const Point< 3 >&);

 template
 void point_value< 3 > (
 const Mapping< 3 >&,
 const DoFHandler< 3 >&,
 const  parallel::distributed::Vector<double> &,
 const Point< 3 >&,
 Vector<double>&);

 template
 double point_value< 3 > (
 const Mapping< 3 >&,
 const DoFHandler< 3 >&,
 const  parallel::distributed::Vector<double> &,
 const Point< 3 >&);

 }
#endif
 
#if  3  ==  2 

 namespace VectorTools {

 template
 void point_value< 3 > (
 const hp::DoFHandler< 3 >&,
 const  parallel::distributed::Vector<double> &,
 const Point< 3 >&,
 Vector<double>&);

 template
 double point_value< 3 > (
 const hp::DoFHandler< 3 >&,
 const  parallel::distributed::Vector<double> &,
 const Point< 3 >&);

 template
 void point_value< 3 > (
 const hp::MappingCollection< 3 >&,
 const hp::DoFHandler< 3 >&,
 const  parallel::distributed::Vector<double> &,
 const Point< 3 >&,
 Vector<double>&);

 template
 double point_value< 3 > (
 const hp::MappingCollection< 3 >&,
 const hp::DoFHandler< 3 >&,
 const  parallel::distributed::Vector<double> &,
 const Point< 3 >&);

 template
 void point_difference< 3 > (
 const DoFHandler< 3 >&,
 const  parallel::distributed::Vector<double> &,
 const Function< 3 >&,
 Vector<double>&,
 const Point< 3 >&);

 template
 void point_difference< 3 > (
 const Mapping< 3 >&,
 const DoFHandler< 3 >&,
 const  parallel::distributed::Vector<double> &,
 const Function< 3 >&,
 Vector<double>&,
 const Point< 3 >&);

 template
 void point_value< 3 > (
 const DoFHandler< 3 >&,
 const  parallel::distributed::Vector<double> &,
 const Point< 3 >&,
 Vector<double>&);

 template
 double point_value< 3 > (
 const DoFHandler< 3 >&,
 const  parallel::distributed::Vector<double> &,
 const Point< 3 >&);

 template
 void point_value< 3 > (
 const Mapping< 3 >&,
 const DoFHandler< 3 >&,
 const  parallel::distributed::Vector<double> &,
 const Point< 3 >&,
 Vector<double>&);

 template
 double point_value< 3 > (
 const Mapping< 3 >&,
 const DoFHandler< 3 >&,
 const  parallel::distributed::Vector<double> &,
 const Point< 3 >&);

 }
#endif
 
#if  3  ==  3 

 namespace VectorTools {

 template
 void point_value< 3 > (
 const hp::DoFHandler< 3 >&,
 const  parallel::distributed::Vector<double> &,
 const Point< 3 >&,
 Vector<double>&);

 template
 double point_value< 3 > (
 const hp::DoFHandler< 3 >&,
 const  parallel::distributed::Vector<double> &,
 const Point< 3 >&);

 template
 void point_value< 3 > (
 const hp::MappingCollection< 3 >&,
 const hp::DoFHandler< 3 >&,
 const  parallel::distributed::Vector<double> &,
 const Point< 3 >&,
 Vector<double>&);

 template
 double point_value< 3 > (
 const hp::MappingCollection< 3 >&,
 const hp::DoFHandler< 3 >&,
 const  parallel::distributed::Vector<double> &,
 const Point< 3 >&);

 template
 void point_difference< 3 > (
 const DoFHandler< 3 >&,
 const  parallel::distributed::Vector<double> &,
 const Function< 3 >&,
 Vector<double>&,
 const Point< 3 >&);

 template
 void point_difference< 3 > (
 const Mapping< 3 >&,
 const DoFHandler< 3 >&,
 const  parallel::distributed::Vector<double> &,
 const Function< 3 >&,
 Vector<double>&,
 const Point< 3 >&);

 template
 void point_value< 3 > (
 const DoFHandler< 3 >&,
 const  parallel::distributed::Vector<double> &,
 const Point< 3 >&,
 Vector<double>&);

 template
 double point_value< 3 > (
 const DoFHandler< 3 >&,
 const  parallel::distributed::Vector<double> &,
 const Point< 3 >&);

 template
 void point_value< 3 > (
 const Mapping< 3 >&,
 const DoFHandler< 3 >&,
 const  parallel::distributed::Vector<double> &,
 const Point< 3 >&,
 Vector<double>&);

 template
 double point_value< 3 > (
 const Mapping< 3 >&,
 const DoFHandler< 3 >&,
 const  parallel::distributed::Vector<double> &,
 const Point< 3 >&);

 }
#endif
 
#if  1  ==  1 

 namespace VectorTools {

 template
 void point_value< 1 > (
 const hp::DoFHandler< 1 >&,
 const  parallel::distributed::Vector<float> &,
 const Point< 1 >&,
 Vector<double>&);

 template
 double point_value< 1 > (
 const hp::DoFHandler< 1 >&,
 const  parallel::distributed::Vector<float> &,
 const Point< 1 >&);

 template
 void point_value< 1 > (
 const hp::MappingCollection< 1 >&,
 const hp::DoFHandler< 1 >&,
 const  parallel::distributed::Vector<float> &,
 const Point< 1 >&,
 Vector<double>&);

 template
 double point_value< 1 > (
 const hp::MappingCollection< 1 >&,
 const hp::DoFHandler< 1 >&,
 const  parallel::distributed::Vector<float> &,
 const Point< 1 >&);

 template
 void point_difference< 1 > (
 const DoFHandler< 1 >&,
 const  parallel::distributed::Vector<float> &,
 const Function< 1 >&,
 Vector<double>&,
 const Point< 1 >&);

 template
 void point_difference< 1 > (
 const Mapping< 1 >&,
 const DoFHandler< 1 >&,
 const  parallel::distributed::Vector<float> &,
 const Function< 1 >&,
 Vector<double>&,
 const Point< 1 >&);

 template
 void point_value< 1 > (
 const DoFHandler< 1 >&,
 const  parallel::distributed::Vector<float> &,
 const Point< 1 >&,
 Vector<double>&);

 template
 double point_value< 1 > (
 const DoFHandler< 1 >&,
 const  parallel::distributed::Vector<float> &,
 const Point< 1 >&);

 template
 void point_value< 1 > (
 const Mapping< 1 >&,
 const DoFHandler< 1 >&,
 const  parallel::distributed::Vector<float> &,
 const Point< 1 >&,
 Vector<double>&);

 template
 double point_value< 1 > (
 const Mapping< 1 >&,
 const DoFHandler< 1 >&,
 const  parallel::distributed::Vector<float> &,
 const Point< 1 >&);

 }
#endif
 
#if  1  ==  2 

 namespace VectorTools {

 template
 void point_value< 1 > (
 const hp::DoFHandler< 1 >&,
 const  parallel::distributed::Vector<float> &,
 const Point< 1 >&,
 Vector<double>&);

 template
 double point_value< 1 > (
 const hp::DoFHandler< 1 >&,
 const  parallel::distributed::Vector<float> &,
 const Point< 1 >&);

 template
 void point_value< 1 > (
 const hp::MappingCollection< 1 >&,
 const hp::DoFHandler< 1 >&,
 const  parallel::distributed::Vector<float> &,
 const Point< 1 >&,
 Vector<double>&);

 template
 double point_value< 1 > (
 const hp::MappingCollection< 1 >&,
 const hp::DoFHandler< 1 >&,
 const  parallel::distributed::Vector<float> &,
 const Point< 1 >&);

 template
 void point_difference< 1 > (
 const DoFHandler< 1 >&,
 const  parallel::distributed::Vector<float> &,
 const Function< 1 >&,
 Vector<double>&,
 const Point< 1 >&);

 template
 void point_difference< 1 > (
 const Mapping< 1 >&,
 const DoFHandler< 1 >&,
 const  parallel::distributed::Vector<float> &,
 const Function< 1 >&,
 Vector<double>&,
 const Point< 1 >&);

 template
 void point_value< 1 > (
 const DoFHandler< 1 >&,
 const  parallel::distributed::Vector<float> &,
 const Point< 1 >&,
 Vector<double>&);

 template
 double point_value< 1 > (
 const DoFHandler< 1 >&,
 const  parallel::distributed::Vector<float> &,
 const Point< 1 >&);

 template
 void point_value< 1 > (
 const Mapping< 1 >&,
 const DoFHandler< 1 >&,
 const  parallel::distributed::Vector<float> &,
 const Point< 1 >&,
 Vector<double>&);

 template
 double point_value< 1 > (
 const Mapping< 1 >&,
 const DoFHandler< 1 >&,
 const  parallel::distributed::Vector<float> &,
 const Point< 1 >&);

 }
#endif
 
#if  1  ==  3 

 namespace VectorTools {

 template
 void point_value< 1 > (
 const hp::DoFHandler< 1 >&,
 const  parallel::distributed::Vector<float> &,
 const Point< 1 >&,
 Vector<double>&);

 template
 double point_value< 1 > (
 const hp::DoFHandler< 1 >&,
 const  parallel::distributed::Vector<float> &,
 const Point< 1 >&);

 template
 void point_value< 1 > (
 const hp::MappingCollection< 1 >&,
 const hp::DoFHandler< 1 >&,
 const  parallel::distributed::Vector<float> &,
 const Point< 1 >&,
 Vector<double>&);

 template
 double point_value< 1 > (
 const hp::MappingCollection< 1 >&,
 const hp::DoFHandler< 1 >&,
 const  parallel::distributed::Vector<float> &,
 const Point< 1 >&);

 template
 void point_difference< 1 > (
 const DoFHandler< 1 >&,
 const  parallel::distributed::Vector<float> &,
 const Function< 1 >&,
 Vector<double>&,
 const Point< 1 >&);

 template
 void point_difference< 1 > (
 const Mapping< 1 >&,
 const DoFHandler< 1 >&,
 const  parallel::distributed::Vector<float> &,
 const Function< 1 >&,
 Vector<double>&,
 const Point< 1 >&);

 template
 void point_value< 1 > (
 const DoFHandler< 1 >&,
 const  parallel::distributed::Vector<float> &,
 const Point< 1 >&,
 Vector<double>&);

 template
 double point_value< 1 > (
 const DoFHandler< 1 >&,
 const  parallel::distributed::Vector<float> &,
 const Point< 1 >&);

 template
 void point_value< 1 > (
 const Mapping< 1 >&,
 const DoFHandler< 1 >&,
 const  parallel::distributed::Vector<float> &,
 const Point< 1 >&,
 Vector<double>&);

 template
 double point_value< 1 > (
 const Mapping< 1 >&,
 const DoFHandler< 1 >&,
 const  parallel::distributed::Vector<float> &,
 const Point< 1 >&);

 }
#endif
 
#if  2  ==  1 

 namespace VectorTools {

 template
 void point_value< 2 > (
 const hp::DoFHandler< 2 >&,
 const  parallel::distributed::Vector<float> &,
 const Point< 2 >&,
 Vector<double>&);

 template
 double point_value< 2 > (
 const hp::DoFHandler< 2 >&,
 const  parallel::distributed::Vector<float> &,
 const Point< 2 >&);

 template
 void point_value< 2 > (
 const hp::MappingCollection< 2 >&,
 const hp::DoFHandler< 2 >&,
 const  parallel::distributed::Vector<float> &,
 const Point< 2 >&,
 Vector<double>&);

 template
 double point_value< 2 > (
 const hp::MappingCollection< 2 >&,
 const hp::DoFHandler< 2 >&,
 const  parallel::distributed::Vector<float> &,
 const Point< 2 >&);

 template
 void point_difference< 2 > (
 const DoFHandler< 2 >&,
 const  parallel::distributed::Vector<float> &,
 const Function< 2 >&,
 Vector<double>&,
 const Point< 2 >&);

 template
 void point_difference< 2 > (
 const Mapping< 2 >&,
 const DoFHandler< 2 >&,
 const  parallel::distributed::Vector<float> &,
 const Function< 2 >&,
 Vector<double>&,
 const Point< 2 >&);

 template
 void point_value< 2 > (
 const DoFHandler< 2 >&,
 const  parallel::distributed::Vector<float> &,
 const Point< 2 >&,
 Vector<double>&);

 template
 double point_value< 2 > (
 const DoFHandler< 2 >&,
 const  parallel::distributed::Vector<float> &,
 const Point< 2 >&);

 template
 void point_value< 2 > (
 const Mapping< 2 >&,
 const DoFHandler< 2 >&,
 const  parallel::distributed::Vector<float> &,
 const Point< 2 >&,
 Vector<double>&);

 template
 double point_value< 2 > (
 const Mapping< 2 >&,
 const DoFHandler< 2 >&,
 const  parallel::distributed::Vector<float> &,
 const Point< 2 >&);

 }
#endif
 
#if  2  ==  2 

 namespace VectorTools {

 template
 void point_value< 2 > (
 const hp::DoFHandler< 2 >&,
 const  parallel::distributed::Vector<float> &,
 const Point< 2 >&,
 Vector<double>&);

 template
 double point_value< 2 > (
 const hp::DoFHandler< 2 >&,
 const  parallel::distributed::Vector<float> &,
 const Point< 2 >&);

 template
 void point_value< 2 > (
 const hp::MappingCollection< 2 >&,
 const hp::DoFHandler< 2 >&,
 const  parallel::distributed::Vector<float> &,
 const Point< 2 >&,
 Vector<double>&);

 template
 double point_value< 2 > (
 const hp::MappingCollection< 2 >&,
 const hp::DoFHandler< 2 >&,
 const  parallel::distributed::Vector<float> &,
 const Point< 2 >&);

 template
 void point_difference< 2 > (
 const DoFHandler< 2 >&,
 const  parallel::distributed::Vector<float> &,
 const Function< 2 >&,
 Vector<double>&,
 const Point< 2 >&);

 template
 void point_difference< 2 > (
 const Mapping< 2 >&,
 const DoFHandler< 2 >&,
 const  parallel::distributed::Vector<float> &,
 const Function< 2 >&,
 Vector<double>&,
 const Point< 2 >&);

 template
 void point_value< 2 > (
 const DoFHandler< 2 >&,
 const  parallel::distributed::Vector<float> &,
 const Point< 2 >&,
 Vector<double>&);

 template
 double point_value< 2 > (
 const DoFHandler< 2 >&,
 const  parallel::distributed::Vector<float> &,
 const Point< 2 >&);

 template
 void point_value< 2 > (
 const Mapping< 2 >&,
 const DoFHandler< 2 >&,
 const  parallel::distributed::Vector<float> &,
 const Point< 2 >&,
 Vector<double>&);

 template
 double point_value< 2 > (
 const Mapping< 2 >&,
 const DoFHandler< 2 >&,
 const  parallel::distributed::Vector<float> &,
 const Point< 2 >&);

 }
#endif
 
#if  2  ==  3 

 namespace VectorTools {

 template
 void point_value< 2 > (
 const hp::DoFHandler< 2 >&,
 const  parallel::distributed::Vector<float> &,
 const Point< 2 >&,
 Vector<double>&);

 template
 double point_value< 2 > (
 const hp::DoFHandler< 2 >&,
 const  parallel::distributed::Vector<float> &,
 const Point< 2 >&);

 template
 void point_value< 2 > (
 const hp::MappingCollection< 2 >&,
 const hp::DoFHandler< 2 >&,
 const  parallel::distributed::Vector<float> &,
 const Point< 2 >&,
 Vector<double>&);

 template
 double point_value< 2 > (
 const hp::MappingCollection< 2 >&,
 const hp::DoFHandler< 2 >&,
 const  parallel::distributed::Vector<float> &,
 const Point< 2 >&);

 template
 void point_difference< 2 > (
 const DoFHandler< 2 >&,
 const  parallel::distributed::Vector<float> &,
 const Function< 2 >&,
 Vector<double>&,
 const Point< 2 >&);

 template
 void point_difference< 2 > (
 const Mapping< 2 >&,
 const DoFHandler< 2 >&,
 const  parallel::distributed::Vector<float> &,
 const Function< 2 >&,
 Vector<double>&,
 const Point< 2 >&);

 template
 void point_value< 2 > (
 const DoFHandler< 2 >&,
 const  parallel::distributed::Vector<float> &,
 const Point< 2 >&,
 Vector<double>&);

 template
 double point_value< 2 > (
 const DoFHandler< 2 >&,
 const  parallel::distributed::Vector<float> &,
 const Point< 2 >&);

 template
 void point_value< 2 > (
 const Mapping< 2 >&,
 const DoFHandler< 2 >&,
 const  parallel::distributed::Vector<float> &,
 const Point< 2 >&,
 Vector<double>&);

 template
 double point_value< 2 > (
 const Mapping< 2 >&,
 const DoFHandler< 2 >&,
 const  parallel::distributed::Vector<float> &,
 const Point< 2 >&);

 }
#endif
 
#if  3  ==  1 

 namespace VectorTools {

 template
 void point_value< 3 > (
 const hp::DoFHandler< 3 >&,
 const  parallel::distributed::Vector<float> &,
 const Point< 3 >&,
 Vector<double>&);

 template
 double point_value< 3 > (
 const hp::DoFHandler< 3 >&,
 const  parallel::distributed::Vector<float> &,
 const Point< 3 >&);

 template
 void point_value< 3 > (
 const hp::MappingCollection< 3 >&,
 const hp::DoFHandler< 3 >&,
 const  parallel::distributed::Vector<float> &,
 const Point< 3 >&,
 Vector<double>&);

 template
 double point_value< 3 > (
 const hp::MappingCollection< 3 >&,
 const hp::DoFHandler< 3 >&,
 const  parallel::distributed::Vector<float> &,
 const Point< 3 >&);

 template
 void point_difference< 3 > (
 const DoFHandler< 3 >&,
 const  parallel::distributed::Vector<float> &,
 const Function< 3 >&,
 Vector<double>&,
 const Point< 3 >&);

 template
 void point_difference< 3 > (
 const Mapping< 3 >&,
 const DoFHandler< 3 >&,
 const  parallel::distributed::Vector<float> &,
 const Function< 3 >&,
 Vector<double>&,
 const Point< 3 >&);

 template
 void point_value< 3 > (
 const DoFHandler< 3 >&,
 const  parallel::distributed::Vector<float> &,
 const Point< 3 >&,
 Vector<double>&);

 template
 double point_value< 3 > (
 const DoFHandler< 3 >&,
 const  parallel::distributed::Vector<float> &,
 const Point< 3 >&);

 template
 void point_value< 3 > (
 const Mapping< 3 >&,
 const DoFHandler< 3 >&,
 const  parallel::distributed::Vector<float> &,
 const Point< 3 >&,
 Vector<double>&);

 template
 double point_value< 3 > (
 const Mapping< 3 >&,
 const DoFHandler< 3 >&,
 const  parallel::distributed::Vector<float> &,
 const Point< 3 >&);

 }
#endif
 
#if  3  ==  2 

 namespace VectorTools {

 template
 void point_value< 3 > (
 const hp::DoFHandler< 3 >&,
 const  parallel::distributed::Vector<float> &,
 const Point< 3 >&,
 Vector<double>&);

 template
 double point_value< 3 > (
 const hp::DoFHandler< 3 >&,
 const  parallel::distributed::Vector<float> &,
 const Point< 3 >&);

 template
 void point_value< 3 > (
 const hp::MappingCollection< 3 >&,
 const hp::DoFHandler< 3 >&,
 const  parallel::distributed::Vector<float> &,
 const Point< 3 >&,
 Vector<double>&);

 template
 double point_value< 3 > (
 const hp::MappingCollection< 3 >&,
 const hp::DoFHandler< 3 >&,
 const  parallel::distributed::Vector<float> &,
 const Point< 3 >&);

 template
 void point_difference< 3 > (
 const DoFHandler< 3 >&,
 const  parallel::distributed::Vector<float> &,
 const Function< 3 >&,
 Vector<double>&,
 const Point< 3 >&);

 template
 void point_difference< 3 > (
 const Mapping< 3 >&,
 const DoFHandler< 3 >&,
 const  parallel::distributed::Vector<float> &,
 const Function< 3 >&,
 Vector<double>&,
 const Point< 3 >&);

 template
 void point_value< 3 > (
 const DoFHandler< 3 >&,
 const  parallel::distributed::Vector<float> &,
 const Point< 3 >&,
 Vector<double>&);

 template
 double point_value< 3 > (
 const DoFHandler< 3 >&,
 const  parallel::distributed::Vector<float> &,
 const Point< 3 >&);

 template
 void point_value< 3 > (
 const Mapping< 3 >&,
 const DoFHandler< 3 >&,
 const  parallel::distributed::Vector<float> &,
 const Point< 3 >&,
 Vector<double>&);

 template
 double point_value< 3 > (
 const Mapping< 3 >&,
 const DoFHandler< 3 >&,
 const  parallel::distributed::Vector<float> &,
 const Point< 3 >&);

 }
#endif
 
#if  3  ==  3 

 namespace VectorTools {

 template
 void point_value< 3 > (
 const hp::DoFHandler< 3 >&,
 const  parallel::distributed::Vector<float> &,
 const Point< 3 >&,
 Vector<double>&);

 template
 double point_value< 3 > (
 const hp::DoFHandler< 3 >&,
 const  parallel::distributed::Vector<float> &,
 const Point< 3 >&);

 template
 void point_value< 3 > (
 const hp::MappingCollection< 3 >&,
 const hp::DoFHandler< 3 >&,
 const  parallel::distributed::Vector<float> &,
 const Point< 3 >&,
 Vector<double>&);

 template
 double point_value< 3 > (
 const hp::MappingCollection< 3 >&,
 const hp::DoFHandler< 3 >&,
 const  parallel::distributed::Vector<float> &,
 const Point< 3 >&);

 template
 void point_difference< 3 > (
 const DoFHandler< 3 >&,
 const  parallel::distributed::Vector<float> &,
 const Function< 3 >&,
 Vector<double>&,
 const Point< 3 >&);

 template
 void point_difference< 3 > (
 const Mapping< 3 >&,
 const DoFHandler< 3 >&,
 const  parallel::distributed::Vector<float> &,
 const Function< 3 >&,
 Vector<double>&,
 const Point< 3 >&);

 template
 void point_value< 3 > (
 const DoFHandler< 3 >&,
 const  parallel::distributed::Vector<float> &,
 const Point< 3 >&,
 Vector<double>&);

 template
 double point_value< 3 > (
 const DoFHandler< 3 >&,
 const  parallel::distributed::Vector<float> &,
 const Point< 3 >&);

 template
 void point_value< 3 > (
 const Mapping< 3 >&,
 const DoFHandler< 3 >&,
 const  parallel::distributed::Vector<float> &,
 const Point< 3 >&,
 Vector<double>&);

 template
 double point_value< 3 > (
 const Mapping< 3 >&,
 const DoFHandler< 3 >&,
 const  parallel::distributed::Vector<float> &,
 const Point< 3 >&);

 }
#endif
 
#if  1  ==  1 

 namespace VectorTools {

 template
 void point_value< 1 > (
 const hp::DoFHandler< 1 >&,
 const  parallel::distributed::Vector<long double> &,
 const Point< 1 >&,
 Vector<double>&);

 template
 double point_value< 1 > (
 const hp::DoFHandler< 1 >&,
 const  parallel::distributed::Vector<long double> &,
 const Point< 1 >&);

 template
 void point_value< 1 > (
 const hp::MappingCollection< 1 >&,
 const hp::DoFHandler< 1 >&,
 const  parallel::distributed::Vector<long double> &,
 const Point< 1 >&,
 Vector<double>&);

 template
 double point_value< 1 > (
 const hp::MappingCollection< 1 >&,
 const hp::DoFHandler< 1 >&,
 const  parallel::distributed::Vector<long double> &,
 const Point< 1 >&);

 template
 void point_difference< 1 > (
 const DoFHandler< 1 >&,
 const  parallel::distributed::Vector<long double> &,
 const Function< 1 >&,
 Vector<double>&,
 const Point< 1 >&);

 template
 void point_difference< 1 > (
 const Mapping< 1 >&,
 const DoFHandler< 1 >&,
 const  parallel::distributed::Vector<long double> &,
 const Function< 1 >&,
 Vector<double>&,
 const Point< 1 >&);

 template
 void point_value< 1 > (
 const DoFHandler< 1 >&,
 const  parallel::distributed::Vector<long double> &,
 const Point< 1 >&,
 Vector<double>&);

 template
 double point_value< 1 > (
 const DoFHandler< 1 >&,
 const  parallel::distributed::Vector<long double> &,
 const Point< 1 >&);

 template
 void point_value< 1 > (
 const Mapping< 1 >&,
 const DoFHandler< 1 >&,
 const  parallel::distributed::Vector<long double> &,
 const Point< 1 >&,
 Vector<double>&);

 template
 double point_value< 1 > (
 const Mapping< 1 >&,
 const DoFHandler< 1 >&,
 const  parallel::distributed::Vector<long double> &,
 const Point< 1 >&);

 }
#endif
 
#if  1  ==  2 

 namespace VectorTools {

 template
 void point_value< 1 > (
 const hp::DoFHandler< 1 >&,
 const  parallel::distributed::Vector<long double> &,
 const Point< 1 >&,
 Vector<double>&);

 template
 double point_value< 1 > (
 const hp::DoFHandler< 1 >&,
 const  parallel::distributed::Vector<long double> &,
 const Point< 1 >&);

 template
 void point_value< 1 > (
 const hp::MappingCollection< 1 >&,
 const hp::DoFHandler< 1 >&,
 const  parallel::distributed::Vector<long double> &,
 const Point< 1 >&,
 Vector<double>&);

 template
 double point_value< 1 > (
 const hp::MappingCollection< 1 >&,
 const hp::DoFHandler< 1 >&,
 const  parallel::distributed::Vector<long double> &,
 const Point< 1 >&);

 template
 void point_difference< 1 > (
 const DoFHandler< 1 >&,
 const  parallel::distributed::Vector<long double> &,
 const Function< 1 >&,
 Vector<double>&,
 const Point< 1 >&);

 template
 void point_difference< 1 > (
 const Mapping< 1 >&,
 const DoFHandler< 1 >&,
 const  parallel::distributed::Vector<long double> &,
 const Function< 1 >&,
 Vector<double>&,
 const Point< 1 >&);

 template
 void point_value< 1 > (
 const DoFHandler< 1 >&,
 const  parallel::distributed::Vector<long double> &,
 const Point< 1 >&,
 Vector<double>&);

 template
 double point_value< 1 > (
 const DoFHandler< 1 >&,
 const  parallel::distributed::Vector<long double> &,
 const Point< 1 >&);

 template
 void point_value< 1 > (
 const Mapping< 1 >&,
 const DoFHandler< 1 >&,
 const  parallel::distributed::Vector<long double> &,
 const Point< 1 >&,
 Vector<double>&);

 template
 double point_value< 1 > (
 const Mapping< 1 >&,
 const DoFHandler< 1 >&,
 const  parallel::distributed::Vector<long double> &,
 const Point< 1 >&);

 }
#endif
 
#if  1  ==  3 

 namespace VectorTools {

 template
 void point_value< 1 > (
 const hp::DoFHandler< 1 >&,
 const  parallel::distributed::Vector<long double> &,
 const Point< 1 >&,
 Vector<double>&);

 template
 double point_value< 1 > (
 const hp::DoFHandler< 1 >&,
 const  parallel::distributed::Vector<long double> &,
 const Point< 1 >&);

 template
 void point_value< 1 > (
 const hp::MappingCollection< 1 >&,
 const hp::DoFHandler< 1 >&,
 const  parallel::distributed::Vector<long double> &,
 const Point< 1 >&,
 Vector<double>&);

 template
 double point_value< 1 > (
 const hp::MappingCollection< 1 >&,
 const hp::DoFHandler< 1 >&,
 const  parallel::distributed::Vector<long double> &,
 const Point< 1 >&);

 template
 void point_difference< 1 > (
 const DoFHandler< 1 >&,
 const  parallel::distributed::Vector<long double> &,
 const Function< 1 >&,
 Vector<double>&,
 const Point< 1 >&);

 template
 void point_difference< 1 > (
 const Mapping< 1 >&,
 const DoFHandler< 1 >&,
 const  parallel::distributed::Vector<long double> &,
 const Function< 1 >&,
 Vector<double>&,
 const Point< 1 >&);

 template
 void point_value< 1 > (
 const DoFHandler< 1 >&,
 const  parallel::distributed::Vector<long double> &,
 const Point< 1 >&,
 Vector<double>&);

 template
 double point_value< 1 > (
 const DoFHandler< 1 >&,
 const  parallel::distributed::Vector<long double> &,
 const Point< 1 >&);

 template
 void point_value< 1 > (
 const Mapping< 1 >&,
 const DoFHandler< 1 >&,
 const  parallel::distributed::Vector<long double> &,
 const Point< 1 >&,
 Vector<double>&);

 template
 double point_value< 1 > (
 const Mapping< 1 >&,
 const DoFHandler< 1 >&,
 const  parallel::distributed::Vector<long double> &,
 const Point< 1 >&);

 }
#endif
 
#if  2  ==  1 

 namespace VectorTools {

 template
 void point_value< 2 > (
 const hp::DoFHandler< 2 >&,
 const  parallel::distributed::Vector<long double> &,
 const Point< 2 >&,
 Vector<double>&);

 template
 double point_value< 2 > (
 const hp::DoFHandler< 2 >&,
 const  parallel::distributed::Vector<long double> &,
 const Point< 2 >&);

 template
 void point_value< 2 > (
 const hp::MappingCollection< 2 >&,
 const hp::DoFHandler< 2 >&,
 const  parallel::distributed::Vector<long double> &,
 const Point< 2 >&,
 Vector<double>&);

 template
 double point_value< 2 > (
 const hp::MappingCollection< 2 >&,
 const hp::DoFHandler< 2 >&,
 const  parallel::distributed::Vector<long double> &,
 const Point< 2 >&);

 template
 void point_difference< 2 > (
 const DoFHandler< 2 >&,
 const  parallel::distributed::Vector<long double> &,
 const Function< 2 >&,
 Vector<double>&,
 const Point< 2 >&);

 template
 void point_difference< 2 > (
 const Mapping< 2 >&,
 const DoFHandler< 2 >&,
 const  parallel::distributed::Vector<long double> &,
 const Function< 2 >&,
 Vector<double>&,
 const Point< 2 >&);

 template
 void point_value< 2 > (
 const DoFHandler< 2 >&,
 const  parallel::distributed::Vector<long double> &,
 const Point< 2 >&,
 Vector<double>&);

 template
 double point_value< 2 > (
 const DoFHandler< 2 >&,
 const  parallel::distributed::Vector<long double> &,
 const Point< 2 >&);

 template
 void point_value< 2 > (
 const Mapping< 2 >&,
 const DoFHandler< 2 >&,
 const  parallel::distributed::Vector<long double> &,
 const Point< 2 >&,
 Vector<double>&);

 template
 double point_value< 2 > (
 const Mapping< 2 >&,
 const DoFHandler< 2 >&,
 const  parallel::distributed::Vector<long double> &,
 const Point< 2 >&);

 }
#endif
 
#if  2  ==  2 

 namespace VectorTools {

 template
 void point_value< 2 > (
 const hp::DoFHandler< 2 >&,
 const  parallel::distributed::Vector<long double> &,
 const Point< 2 >&,
 Vector<double>&);

 template
 double point_value< 2 > (
 const hp::DoFHandler< 2 >&,
 const  parallel::distributed::Vector<long double> &,
 const Point< 2 >&);

 template
 void point_value< 2 > (
 const hp::MappingCollection< 2 >&,
 const hp::DoFHandler< 2 >&,
 const  parallel::distributed::Vector<long double> &,
 const Point< 2 >&,
 Vector<double>&);

 template
 double point_value< 2 > (
 const hp::MappingCollection< 2 >&,
 const hp::DoFHandler< 2 >&,
 const  parallel::distributed::Vector<long double> &,
 const Point< 2 >&);

 template
 void point_difference< 2 > (
 const DoFHandler< 2 >&,
 const  parallel::distributed::Vector<long double> &,
 const Function< 2 >&,
 Vector<double>&,
 const Point< 2 >&);

 template
 void point_difference< 2 > (
 const Mapping< 2 >&,
 const DoFHandler< 2 >&,
 const  parallel::distributed::Vector<long double> &,
 const Function< 2 >&,
 Vector<double>&,
 const Point< 2 >&);

 template
 void point_value< 2 > (
 const DoFHandler< 2 >&,
 const  parallel::distributed::Vector<long double> &,
 const Point< 2 >&,
 Vector<double>&);

 template
 double point_value< 2 > (
 const DoFHandler< 2 >&,
 const  parallel::distributed::Vector<long double> &,
 const Point< 2 >&);

 template
 void point_value< 2 > (
 const Mapping< 2 >&,
 const DoFHandler< 2 >&,
 const  parallel::distributed::Vector<long double> &,
 const Point< 2 >&,
 Vector<double>&);

 template
 double point_value< 2 > (
 const Mapping< 2 >&,
 const DoFHandler< 2 >&,
 const  parallel::distributed::Vector<long double> &,
 const Point< 2 >&);

 }
#endif
 
#if  2  ==  3 

 namespace VectorTools {

 template
 void point_value< 2 > (
 const hp::DoFHandler< 2 >&,
 const  parallel::distributed::Vector<long double> &,
 const Point< 2 >&,
 Vector<double>&);

 template
 double point_value< 2 > (
 const hp::DoFHandler< 2 >&,
 const  parallel::distributed::Vector<long double> &,
 const Point< 2 >&);

 template
 void point_value< 2 > (
 const hp::MappingCollection< 2 >&,
 const hp::DoFHandler< 2 >&,
 const  parallel::distributed::Vector<long double> &,
 const Point< 2 >&,
 Vector<double>&);

 template
 double point_value< 2 > (
 const hp::MappingCollection< 2 >&,
 const hp::DoFHandler< 2 >&,
 const  parallel::distributed::Vector<long double> &,
 const Point< 2 >&);

 template
 void point_difference< 2 > (
 const DoFHandler< 2 >&,
 const  parallel::distributed::Vector<long double> &,
 const Function< 2 >&,
 Vector<double>&,
 const Point< 2 >&);

 template
 void point_difference< 2 > (
 const Mapping< 2 >&,
 const DoFHandler< 2 >&,
 const  parallel::distributed::Vector<long double> &,
 const Function< 2 >&,
 Vector<double>&,
 const Point< 2 >&);

 template
 void point_value< 2 > (
 const DoFHandler< 2 >&,
 const  parallel::distributed::Vector<long double> &,
 const Point< 2 >&,
 Vector<double>&);

 template
 double point_value< 2 > (
 const DoFHandler< 2 >&,
 const  parallel::distributed::Vector<long double> &,
 const Point< 2 >&);

 template
 void point_value< 2 > (
 const Mapping< 2 >&,
 const DoFHandler< 2 >&,
 const  parallel::distributed::Vector<long double> &,
 const Point< 2 >&,
 Vector<double>&);

 template
 double point_value< 2 > (
 const Mapping< 2 >&,
 const DoFHandler< 2 >&,
 const  parallel::distributed::Vector<long double> &,
 const Point< 2 >&);

 }
#endif
 
#if  3  ==  1 

 namespace VectorTools {

 template
 void point_value< 3 > (
 const hp::DoFHandler< 3 >&,
 const  parallel::distributed::Vector<long double> &,
 const Point< 3 >&,
 Vector<double>&);

 template
 double point_value< 3 > (
 const hp::DoFHandler< 3 >&,
 const  parallel::distributed::Vector<long double> &,
 const Point< 3 >&);

 template
 void point_value< 3 > (
 const hp::MappingCollection< 3 >&,
 const hp::DoFHandler< 3 >&,
 const  parallel::distributed::Vector<long double> &,
 const Point< 3 >&,
 Vector<double>&);

 template
 double point_value< 3 > (
 const hp::MappingCollection< 3 >&,
 const hp::DoFHandler< 3 >&,
 const  parallel::distributed::Vector<long double> &,
 const Point< 3 >&);

 template
 void point_difference< 3 > (
 const DoFHandler< 3 >&,
 const  parallel::distributed::Vector<long double> &,
 const Function< 3 >&,
 Vector<double>&,
 const Point< 3 >&);

 template
 void point_difference< 3 > (
 const Mapping< 3 >&,
 const DoFHandler< 3 >&,
 const  parallel::distributed::Vector<long double> &,
 const Function< 3 >&,
 Vector<double>&,
 const Point< 3 >&);

 template
 void point_value< 3 > (
 const DoFHandler< 3 >&,
 const  parallel::distributed::Vector<long double> &,
 const Point< 3 >&,
 Vector<double>&);

 template
 double point_value< 3 > (
 const DoFHandler< 3 >&,
 const  parallel::distributed::Vector<long double> &,
 const Point< 3 >&);

 template
 void point_value< 3 > (
 const Mapping< 3 >&,
 const DoFHandler< 3 >&,
 const  parallel::distributed::Vector<long double> &,
 const Point< 3 >&,
 Vector<double>&);

 template
 double point_value< 3 > (
 const Mapping< 3 >&,
 const DoFHandler< 3 >&,
 const  parallel::distributed::Vector<long double> &,
 const Point< 3 >&);

 }
#endif
 
#if  3  ==  2 

 namespace VectorTools {

 template
 void point_value< 3 > (
 const hp::DoFHandler< 3 >&,
 const  parallel::distributed::Vector<long double> &,
 const Point< 3 >&,
 Vector<double>&);

 template
 double point_value< 3 > (
 const hp::DoFHandler< 3 >&,
 const  parallel::distributed::Vector<long double> &,
 const Point< 3 >&);

 template
 void point_value< 3 > (
 const hp::MappingCollection< 3 >&,
 const hp::DoFHandler< 3 >&,
 const  parallel::distributed::Vector<long double> &,
 const Point< 3 >&,
 Vector<double>&);

 template
 double point_value< 3 > (
 const hp::MappingCollection< 3 >&,
 const hp::DoFHandler< 3 >&,
 const  parallel::distributed::Vector<long double> &,
 const Point< 3 >&);

 template
 void point_difference< 3 > (
 const DoFHandler< 3 >&,
 const  parallel::distributed::Vector<long double> &,
 const Function< 3 >&,
 Vector<double>&,
 const Point< 3 >&);

 template
 void point_difference< 3 > (
 const Mapping< 3 >&,
 const DoFHandler< 3 >&,
 const  parallel::distributed::Vector<long double> &,
 const Function< 3 >&,
 Vector<double>&,
 const Point< 3 >&);

 template
 void point_value< 3 > (
 const DoFHandler< 3 >&,
 const  parallel::distributed::Vector<long double> &,
 const Point< 3 >&,
 Vector<double>&);

 template
 double point_value< 3 > (
 const DoFHandler< 3 >&,
 const  parallel::distributed::Vector<long double> &,
 const Point< 3 >&);

 template
 void point_value< 3 > (
 const Mapping< 3 >&,
 const DoFHandler< 3 >&,
 const  parallel::distributed::Vector<long double> &,
 const Point< 3 >&,
 Vector<double>&);

 template
 double point_value< 3 > (
 const Mapping< 3 >&,
 const DoFHandler< 3 >&,
 const  parallel::distributed::Vector<long double> &,
 const Point< 3 >&);

 }
#endif
 
#if  3  ==  3 

 namespace VectorTools {

 template
 void point_value< 3 > (
 const hp::DoFHandler< 3 >&,
 const  parallel::distributed::Vector<long double> &,
 const Point< 3 >&,
 Vector<double>&);

 template
 double point_value< 3 > (
 const hp::DoFHandler< 3 >&,
 const  parallel::distributed::Vector<long double> &,
 const Point< 3 >&);

 template
 void point_value< 3 > (
 const hp::MappingCollection< 3 >&,
 const hp::DoFHandler< 3 >&,
 const  parallel::distributed::Vector<long double> &,
 const Point< 3 >&,
 Vector<double>&);

 template
 double point_value< 3 > (
 const hp::MappingCollection< 3 >&,
 const hp::DoFHandler< 3 >&,
 const  parallel::distributed::Vector<long double> &,
 const Point< 3 >&);

 template
 void point_difference< 3 > (
 const DoFHandler< 3 >&,
 const  parallel::distributed::Vector<long double> &,
 const Function< 3 >&,
 Vector<double>&,
 const Point< 3 >&);

 template
 void point_difference< 3 > (
 const Mapping< 3 >&,
 const DoFHandler< 3 >&,
 const  parallel::distributed::Vector<long double> &,
 const Function< 3 >&,
 Vector<double>&,
 const Point< 3 >&);

 template
 void point_value< 3 > (
 const DoFHandler< 3 >&,
 const  parallel::distributed::Vector<long double> &,
 const Point< 3 >&,
 Vector<double>&);

 template
 double point_value< 3 > (
 const DoFHandler< 3 >&,
 const  parallel::distributed::Vector<long double> &,
 const Point< 3 >&);

 template
 void point_value< 3 > (
 const Mapping< 3 >&,
 const DoFHandler< 3 >&,
 const  parallel::distributed::Vector<long double> &,
 const Point< 3 >&,
 Vector<double>&);

 template
 double point_value< 3 > (
 const Mapping< 3 >&,
 const DoFHandler< 3 >&,
 const  parallel::distributed::Vector<long double> &,
 const Point< 3 >&);

 }
#endif
 
#if  1  ==  1 

 namespace VectorTools {

 template
 void point_value< 1 > (
 const hp::DoFHandler< 1 >&,
 const  parallel::distributed::BlockVector<double> &,
 const Point< 1 >&,
 Vector<double>&);

 template
 double point_value< 1 > (
 const hp::DoFHandler< 1 >&,
 const  parallel::distributed::BlockVector<double> &,
 const Point< 1 >&);

 template
 void point_value< 1 > (
 const hp::MappingCollection< 1 >&,
 const hp::DoFHandler< 1 >&,
 const  parallel::distributed::BlockVector<double> &,
 const Point< 1 >&,
 Vector<double>&);

 template
 double point_value< 1 > (
 const hp::MappingCollection< 1 >&,
 const hp::DoFHandler< 1 >&,
 const  parallel::distributed::BlockVector<double> &,
 const Point< 1 >&);

 template
 void point_difference< 1 > (
 const DoFHandler< 1 >&,
 const  parallel::distributed::BlockVector<double> &,
 const Function< 1 >&,
 Vector<double>&,
 const Point< 1 >&);

 template
 void point_difference< 1 > (
 const Mapping< 1 >&,
 const DoFHandler< 1 >&,
 const  parallel::distributed::BlockVector<double> &,
 const Function< 1 >&,
 Vector<double>&,
 const Point< 1 >&);

 template
 void point_value< 1 > (
 const DoFHandler< 1 >&,
 const  parallel::distributed::BlockVector<double> &,
 const Point< 1 >&,
 Vector<double>&);

 template
 double point_value< 1 > (
 const DoFHandler< 1 >&,
 const  parallel::distributed::BlockVector<double> &,
 const Point< 1 >&);

 template
 void point_value< 1 > (
 const Mapping< 1 >&,
 const DoFHandler< 1 >&,
 const  parallel::distributed::BlockVector<double> &,
 const Point< 1 >&,
 Vector<double>&);

 template
 double point_value< 1 > (
 const Mapping< 1 >&,
 const DoFHandler< 1 >&,
 const  parallel::distributed::BlockVector<double> &,
 const Point< 1 >&);

 }
#endif
 
#if  1  ==  2 

 namespace VectorTools {

 template
 void point_value< 1 > (
 const hp::DoFHandler< 1 >&,
 const  parallel::distributed::BlockVector<double> &,
 const Point< 1 >&,
 Vector<double>&);

 template
 double point_value< 1 > (
 const hp::DoFHandler< 1 >&,
 const  parallel::distributed::BlockVector<double> &,
 const Point< 1 >&);

 template
 void point_value< 1 > (
 const hp::MappingCollection< 1 >&,
 const hp::DoFHandler< 1 >&,
 const  parallel::distributed::BlockVector<double> &,
 const Point< 1 >&,
 Vector<double>&);

 template
 double point_value< 1 > (
 const hp::MappingCollection< 1 >&,
 const hp::DoFHandler< 1 >&,
 const  parallel::distributed::BlockVector<double> &,
 const Point< 1 >&);

 template
 void point_difference< 1 > (
 const DoFHandler< 1 >&,
 const  parallel::distributed::BlockVector<double> &,
 const Function< 1 >&,
 Vector<double>&,
 const Point< 1 >&);

 template
 void point_difference< 1 > (
 const Mapping< 1 >&,
 const DoFHandler< 1 >&,
 const  parallel::distributed::BlockVector<double> &,
 const Function< 1 >&,
 Vector<double>&,
 const Point< 1 >&);

 template
 void point_value< 1 > (
 const DoFHandler< 1 >&,
 const  parallel::distributed::BlockVector<double> &,
 const Point< 1 >&,
 Vector<double>&);

 template
 double point_value< 1 > (
 const DoFHandler< 1 >&,
 const  parallel::distributed::BlockVector<double> &,
 const Point< 1 >&);

 template
 void point_value< 1 > (
 const Mapping< 1 >&,
 const DoFHandler< 1 >&,
 const  parallel::distributed::BlockVector<double> &,
 const Point< 1 >&,
 Vector<double>&);

 template
 double point_value< 1 > (
 const Mapping< 1 >&,
 const DoFHandler< 1 >&,
 const  parallel::distributed::BlockVector<double> &,
 const Point< 1 >&);

 }
#endif
 
#if  1  ==  3 

 namespace VectorTools {

 template
 void point_value< 1 > (
 const hp::DoFHandler< 1 >&,
 const  parallel::distributed::BlockVector<double> &,
 const Point< 1 >&,
 Vector<double>&);

 template
 double point_value< 1 > (
 const hp::DoFHandler< 1 >&,
 const  parallel::distributed::BlockVector<double> &,
 const Point< 1 >&);

 template
 void point_value< 1 > (
 const hp::MappingCollection< 1 >&,
 const hp::DoFHandler< 1 >&,
 const  parallel::distributed::BlockVector<double> &,
 const Point< 1 >&,
 Vector<double>&);

 template
 double point_value< 1 > (
 const hp::MappingCollection< 1 >&,
 const hp::DoFHandler< 1 >&,
 const  parallel::distributed::BlockVector<double> &,
 const Point< 1 >&);

 template
 void point_difference< 1 > (
 const DoFHandler< 1 >&,
 const  parallel::distributed::BlockVector<double> &,
 const Function< 1 >&,
 Vector<double>&,
 const Point< 1 >&);

 template
 void point_difference< 1 > (
 const Mapping< 1 >&,
 const DoFHandler< 1 >&,
 const  parallel::distributed::BlockVector<double> &,
 const Function< 1 >&,
 Vector<double>&,
 const Point< 1 >&);

 template
 void point_value< 1 > (
 const DoFHandler< 1 >&,
 const  parallel::distributed::BlockVector<double> &,
 const Point< 1 >&,
 Vector<double>&);

 template
 double point_value< 1 > (
 const DoFHandler< 1 >&,
 const  parallel::distributed::BlockVector<double> &,
 const Point< 1 >&);

 template
 void point_value< 1 > (
 const Mapping< 1 >&,
 const DoFHandler< 1 >&,
 const  parallel::distributed::BlockVector<double> &,
 const Point< 1 >&,
 Vector<double>&);

 template
 double point_value< 1 > (
 const Mapping< 1 >&,
 const DoFHandler< 1 >&,
 const  parallel::distributed::BlockVector<double> &,
 const Point< 1 >&);

 }
#endif
 
#if  2  ==  1 

 namespace VectorTools {

 template
 void point_value< 2 > (
 const hp::DoFHandler< 2 >&,
 const  parallel::distributed::BlockVector<double> &,
 const Point< 2 >&,
 Vector<double>&);

 template
 double point_value< 2 > (
 const hp::DoFHandler< 2 >&,
 const  parallel::distributed::BlockVector<double> &,
 const Point< 2 >&);

 template
 void point_value< 2 > (
 const hp::MappingCollection< 2 >&,
 const hp::DoFHandler< 2 >&,
 const  parallel::distributed::BlockVector<double> &,
 const Point< 2 >&,
 Vector<double>&);

 template
 double point_value< 2 > (
 const hp::MappingCollection< 2 >&,
 const hp::DoFHandler< 2 >&,
 const  parallel::distributed::BlockVector<double> &,
 const Point< 2 >&);

 template
 void point_difference< 2 > (
 const DoFHandler< 2 >&,
 const  parallel::distributed::BlockVector<double> &,
 const Function< 2 >&,
 Vector<double>&,
 const Point< 2 >&);

 template
 void point_difference< 2 > (
 const Mapping< 2 >&,
 const DoFHandler< 2 >&,
 const  parallel::distributed::BlockVector<double> &,
 const Function< 2 >&,
 Vector<double>&,
 const Point< 2 >&);

 template
 void point_value< 2 > (
 const DoFHandler< 2 >&,
 const  parallel::distributed::BlockVector<double> &,
 const Point< 2 >&,
 Vector<double>&);

 template
 double point_value< 2 > (
 const DoFHandler< 2 >&,
 const  parallel::distributed::BlockVector<double> &,
 const Point< 2 >&);

 template
 void point_value< 2 > (
 const Mapping< 2 >&,
 const DoFHandler< 2 >&,
 const  parallel::distributed::BlockVector<double> &,
 const Point< 2 >&,
 Vector<double>&);

 template
 double point_value< 2 > (
 const Mapping< 2 >&,
 const DoFHandler< 2 >&,
 const  parallel::distributed::BlockVector<double> &,
 const Point< 2 >&);

 }
#endif
 
#if  2  ==  2 

 namespace VectorTools {

 template
 void point_value< 2 > (
 const hp::DoFHandler< 2 >&,
 const  parallel::distributed::BlockVector<double> &,
 const Point< 2 >&,
 Vector<double>&);

 template
 double point_value< 2 > (
 const hp::DoFHandler< 2 >&,
 const  parallel::distributed::BlockVector<double> &,
 const Point< 2 >&);

 template
 void point_value< 2 > (
 const hp::MappingCollection< 2 >&,
 const hp::DoFHandler< 2 >&,
 const  parallel::distributed::BlockVector<double> &,
 const Point< 2 >&,
 Vector<double>&);

 template
 double point_value< 2 > (
 const hp::MappingCollection< 2 >&,
 const hp::DoFHandler< 2 >&,
 const  parallel::distributed::BlockVector<double> &,
 const Point< 2 >&);

 template
 void point_difference< 2 > (
 const DoFHandler< 2 >&,
 const  parallel::distributed::BlockVector<double> &,
 const Function< 2 >&,
 Vector<double>&,
 const Point< 2 >&);

 template
 void point_difference< 2 > (
 const Mapping< 2 >&,
 const DoFHandler< 2 >&,
 const  parallel::distributed::BlockVector<double> &,
 const Function< 2 >&,
 Vector<double>&,
 const Point< 2 >&);

 template
 void point_value< 2 > (
 const DoFHandler< 2 >&,
 const  parallel::distributed::BlockVector<double> &,
 const Point< 2 >&,
 Vector<double>&);

 template
 double point_value< 2 > (
 const DoFHandler< 2 >&,
 const  parallel::distributed::BlockVector<double> &,
 const Point< 2 >&);

 template
 void point_value< 2 > (
 const Mapping< 2 >&,
 const DoFHandler< 2 >&,
 const  parallel::distributed::BlockVector<double> &,
 const Point< 2 >&,
 Vector<double>&);

 template
 double point_value< 2 > (
 const Mapping< 2 >&,
 const DoFHandler< 2 >&,
 const  parallel::distributed::BlockVector<double> &,
 const Point< 2 >&);

 }
#endif
 
#if  2  ==  3 

 namespace VectorTools {

 template
 void point_value< 2 > (
 const hp::DoFHandler< 2 >&,
 const  parallel::distributed::BlockVector<double> &,
 const Point< 2 >&,
 Vector<double>&);

 template
 double point_value< 2 > (
 const hp::DoFHandler< 2 >&,
 const  parallel::distributed::BlockVector<double> &,
 const Point< 2 >&);

 template
 void point_value< 2 > (
 const hp::MappingCollection< 2 >&,
 const hp::DoFHandler< 2 >&,
 const  parallel::distributed::BlockVector<double> &,
 const Point< 2 >&,
 Vector<double>&);

 template
 double point_value< 2 > (
 const hp::MappingCollection< 2 >&,
 const hp::DoFHandler< 2 >&,
 const  parallel::distributed::BlockVector<double> &,
 const Point< 2 >&);

 template
 void point_difference< 2 > (
 const DoFHandler< 2 >&,
 const  parallel::distributed::BlockVector<double> &,
 const Function< 2 >&,
 Vector<double>&,
 const Point< 2 >&);

 template
 void point_difference< 2 > (
 const Mapping< 2 >&,
 const DoFHandler< 2 >&,
 const  parallel::distributed::BlockVector<double> &,
 const Function< 2 >&,
 Vector<double>&,
 const Point< 2 >&);

 template
 void point_value< 2 > (
 const DoFHandler< 2 >&,
 const  parallel::distributed::BlockVector<double> &,
 const Point< 2 >&,
 Vector<double>&);

 template
 double point_value< 2 > (
 const DoFHandler< 2 >&,
 const  parallel::distributed::BlockVector<double> &,
 const Point< 2 >&);

 template
 void point_value< 2 > (
 const Mapping< 2 >&,
 const DoFHandler< 2 >&,
 const  parallel::distributed::BlockVector<double> &,
 const Point< 2 >&,
 Vector<double>&);

 template
 double point_value< 2 > (
 const Mapping< 2 >&,
 const DoFHandler< 2 >&,
 const  parallel::distributed::BlockVector<double> &,
 const Point< 2 >&);

 }
#endif
 
#if  3  ==  1 

 namespace VectorTools {

 template
 void point_value< 3 > (
 const hp::DoFHandler< 3 >&,
 const  parallel::distributed::BlockVector<double> &,
 const Point< 3 >&,
 Vector<double>&);

 template
 double point_value< 3 > (
 const hp::DoFHandler< 3 >&,
 const  parallel::distributed::BlockVector<double> &,
 const Point< 3 >&);

 template
 void point_value< 3 > (
 const hp::MappingCollection< 3 >&,
 const hp::DoFHandler< 3 >&,
 const  parallel::distributed::BlockVector<double> &,
 const Point< 3 >&,
 Vector<double>&);

 template
 double point_value< 3 > (
 const hp::MappingCollection< 3 >&,
 const hp::DoFHandler< 3 >&,
 const  parallel::distributed::BlockVector<double> &,
 const Point< 3 >&);

 template
 void point_difference< 3 > (
 const DoFHandler< 3 >&,
 const  parallel::distributed::BlockVector<double> &,
 const Function< 3 >&,
 Vector<double>&,
 const Point< 3 >&);

 template
 void point_difference< 3 > (
 const Mapping< 3 >&,
 const DoFHandler< 3 >&,
 const  parallel::distributed::BlockVector<double> &,
 const Function< 3 >&,
 Vector<double>&,
 const Point< 3 >&);

 template
 void point_value< 3 > (
 const DoFHandler< 3 >&,
 const  parallel::distributed::BlockVector<double> &,
 const Point< 3 >&,
 Vector<double>&);

 template
 double point_value< 3 > (
 const DoFHandler< 3 >&,
 const  parallel::distributed::BlockVector<double> &,
 const Point< 3 >&);

 template
 void point_value< 3 > (
 const Mapping< 3 >&,
 const DoFHandler< 3 >&,
 const  parallel::distributed::BlockVector<double> &,
 const Point< 3 >&,
 Vector<double>&);

 template
 double point_value< 3 > (
 const Mapping< 3 >&,
 const DoFHandler< 3 >&,
 const  parallel::distributed::BlockVector<double> &,
 const Point< 3 >&);

 }
#endif
 
#if  3  ==  2 

 namespace VectorTools {

 template
 void point_value< 3 > (
 const hp::DoFHandler< 3 >&,
 const  parallel::distributed::BlockVector<double> &,
 const Point< 3 >&,
 Vector<double>&);

 template
 double point_value< 3 > (
 const hp::DoFHandler< 3 >&,
 const  parallel::distributed::BlockVector<double> &,
 const Point< 3 >&);

 template
 void point_value< 3 > (
 const hp::MappingCollection< 3 >&,
 const hp::DoFHandler< 3 >&,
 const  parallel::distributed::BlockVector<double> &,
 const Point< 3 >&,
 Vector<double>&);

 template
 double point_value< 3 > (
 const hp::MappingCollection< 3 >&,
 const hp::DoFHandler< 3 >&,
 const  parallel::distributed::BlockVector<double> &,
 const Point< 3 >&);

 template
 void point_difference< 3 > (
 const DoFHandler< 3 >&,
 const  parallel::distributed::BlockVector<double> &,
 const Function< 3 >&,
 Vector<double>&,
 const Point< 3 >&);

 template
 void point_difference< 3 > (
 const Mapping< 3 >&,
 const DoFHandler< 3 >&,
 const  parallel::distributed::BlockVector<double> &,
 const Function< 3 >&,
 Vector<double>&,
 const Point< 3 >&);

 template
 void point_value< 3 > (
 const DoFHandler< 3 >&,
 const  parallel::distributed::BlockVector<double> &,
 const Point< 3 >&,
 Vector<double>&);

 template
 double point_value< 3 > (
 const DoFHandler< 3 >&,
 const  parallel::distributed::BlockVector<double> &,
 const Point< 3 >&);

 template
 void point_value< 3 > (
 const Mapping< 3 >&,
 const DoFHandler< 3 >&,
 const  parallel::distributed::BlockVector<double> &,
 const Point< 3 >&,
 Vector<double>&);

 template
 double point_value< 3 > (
 const Mapping< 3 >&,
 const DoFHandler< 3 >&,
 const  parallel::distributed::BlockVector<double> &,
 const Point< 3 >&);

 }
#endif
 
#if  3  ==  3 

 namespace VectorTools {

 template
 void point_value< 3 > (
 const hp::DoFHandler< 3 >&,
 const  parallel::distributed::BlockVector<double> &,
 const Point< 3 >&,
 Vector<double>&);

 template
 double point_value< 3 > (
 const hp::DoFHandler< 3 >&,
 const  parallel::distributed::BlockVector<double> &,
 const Point< 3 >&);

 template
 void point_value< 3 > (
 const hp::MappingCollection< 3 >&,
 const hp::DoFHandler< 3 >&,
 const  parallel::distributed::BlockVector<double> &,
 const Point< 3 >&,
 Vector<double>&);

 template
 double point_value< 3 > (
 const hp::MappingCollection< 3 >&,
 const hp::DoFHandler< 3 >&,
 const  parallel::distributed::BlockVector<double> &,
 const Point< 3 >&);

 template
 void point_difference< 3 > (
 const DoFHandler< 3 >&,
 const  parallel::distributed::BlockVector<double> &,
 const Function< 3 >&,
 Vector<double>&,
 const Point< 3 >&);

 template
 void point_difference< 3 > (
 const Mapping< 3 >&,
 const DoFHandler< 3 >&,
 const  parallel::distributed::BlockVector<double> &,
 const Function< 3 >&,
 Vector<double>&,
 const Point< 3 >&);

 template
 void point_value< 3 > (
 const DoFHandler< 3 >&,
 const  parallel::distributed::BlockVector<double> &,
 const Point< 3 >&,
 Vector<double>&);

 template
 double point_value< 3 > (
 const DoFHandler< 3 >&,
 const  parallel::distributed::BlockVector<double> &,
 const Point< 3 >&);

 template
 void point_value< 3 > (
 const Mapping< 3 >&,
 const DoFHandler< 3 >&,
 const  parallel::distributed::BlockVector<double> &,
 const Point< 3 >&,
 Vector<double>&);

 template
 double point_value< 3 > (
 const Mapping< 3 >&,
 const DoFHandler< 3 >&,
 const  parallel::distributed::BlockVector<double> &,
 const Point< 3 >&);

 }
#endif
 
#if  1  ==  1 

 namespace VectorTools {

 template
 void point_value< 1 > (
 const hp::DoFHandler< 1 >&,
 const  parallel::distributed::BlockVector<float> &,
 const Point< 1 >&,
 Vector<double>&);

 template
 double point_value< 1 > (
 const hp::DoFHandler< 1 >&,
 const  parallel::distributed::BlockVector<float> &,
 const Point< 1 >&);

 template
 void point_value< 1 > (
 const hp::MappingCollection< 1 >&,
 const hp::DoFHandler< 1 >&,
 const  parallel::distributed::BlockVector<float> &,
 const Point< 1 >&,
 Vector<double>&);

 template
 double point_value< 1 > (
 const hp::MappingCollection< 1 >&,
 const hp::DoFHandler< 1 >&,
 const  parallel::distributed::BlockVector<float> &,
 const Point< 1 >&);

 template
 void point_difference< 1 > (
 const DoFHandler< 1 >&,
 const  parallel::distributed::BlockVector<float> &,
 const Function< 1 >&,
 Vector<double>&,
 const Point< 1 >&);

 template
 void point_difference< 1 > (
 const Mapping< 1 >&,
 const DoFHandler< 1 >&,
 const  parallel::distributed::BlockVector<float> &,
 const Function< 1 >&,
 Vector<double>&,
 const Point< 1 >&);

 template
 void point_value< 1 > (
 const DoFHandler< 1 >&,
 const  parallel::distributed::BlockVector<float> &,
 const Point< 1 >&,
 Vector<double>&);

 template
 double point_value< 1 > (
 const DoFHandler< 1 >&,
 const  parallel::distributed::BlockVector<float> &,
 const Point< 1 >&);

 template
 void point_value< 1 > (
 const Mapping< 1 >&,
 const DoFHandler< 1 >&,
 const  parallel::distributed::BlockVector<float> &,
 const Point< 1 >&,
 Vector<double>&);

 template
 double point_value< 1 > (
 const Mapping< 1 >&,
 const DoFHandler< 1 >&,
 const  parallel::distributed::BlockVector<float> &,
 const Point< 1 >&);

 }
#endif
 
#if  1  ==  2 

 namespace VectorTools {

 template
 void point_value< 1 > (
 const hp::DoFHandler< 1 >&,
 const  parallel::distributed::BlockVector<float> &,
 const Point< 1 >&,
 Vector<double>&);

 template
 double point_value< 1 > (
 const hp::DoFHandler< 1 >&,
 const  parallel::distributed::BlockVector<float> &,
 const Point< 1 >&);

 template
 void point_value< 1 > (
 const hp::MappingCollection< 1 >&,
 const hp::DoFHandler< 1 >&,
 const  parallel::distributed::BlockVector<float> &,
 const Point< 1 >&,
 Vector<double>&);

 template
 double point_value< 1 > (
 const hp::MappingCollection< 1 >&,
 const hp::DoFHandler< 1 >&,
 const  parallel::distributed::BlockVector<float> &,
 const Point< 1 >&);

 template
 void point_difference< 1 > (
 const DoFHandler< 1 >&,
 const  parallel::distributed::BlockVector<float> &,
 const Function< 1 >&,
 Vector<double>&,
 const Point< 1 >&);

 template
 void point_difference< 1 > (
 const Mapping< 1 >&,
 const DoFHandler< 1 >&,
 const  parallel::distributed::BlockVector<float> &,
 const Function< 1 >&,
 Vector<double>&,
 const Point< 1 >&);

 template
 void point_value< 1 > (
 const DoFHandler< 1 >&,
 const  parallel::distributed::BlockVector<float> &,
 const Point< 1 >&,
 Vector<double>&);

 template
 double point_value< 1 > (
 const DoFHandler< 1 >&,
 const  parallel::distributed::BlockVector<float> &,
 const Point< 1 >&);

 template
 void point_value< 1 > (
 const Mapping< 1 >&,
 const DoFHandler< 1 >&,
 const  parallel::distributed::BlockVector<float> &,
 const Point< 1 >&,
 Vector<double>&);

 template
 double point_value< 1 > (
 const Mapping< 1 >&,
 const DoFHandler< 1 >&,
 const  parallel::distributed::BlockVector<float> &,
 const Point< 1 >&);

 }
#endif
 
#if  1  ==  3 

 namespace VectorTools {

 template
 void point_value< 1 > (
 const hp::DoFHandler< 1 >&,
 const  parallel::distributed::BlockVector<float> &,
 const Point< 1 >&,
 Vector<double>&);

 template
 double point_value< 1 > (
 const hp::DoFHandler< 1 >&,
 const  parallel::distributed::BlockVector<float> &,
 const Point< 1 >&);

 template
 void point_value< 1 > (
 const hp::MappingCollection< 1 >&,
 const hp::DoFHandler< 1 >&,
 const  parallel::distributed::BlockVector<float> &,
 const Point< 1 >&,
 Vector<double>&);

 template
 double point_value< 1 > (
 const hp::MappingCollection< 1 >&,
 const hp::DoFHandler< 1 >&,
 const  parallel::distributed::BlockVector<float> &,
 const Point< 1 >&);

 template
 void point_difference< 1 > (
 const DoFHandler< 1 >&,
 const  parallel::distributed::BlockVector<float> &,
 const Function< 1 >&,
 Vector<double>&,
 const Point< 1 >&);

 template
 void point_difference< 1 > (
 const Mapping< 1 >&,
 const DoFHandler< 1 >&,
 const  parallel::distributed::BlockVector<float> &,
 const Function< 1 >&,
 Vector<double>&,
 const Point< 1 >&);

 template
 void point_value< 1 > (
 const DoFHandler< 1 >&,
 const  parallel::distributed::BlockVector<float> &,
 const Point< 1 >&,
 Vector<double>&);

 template
 double point_value< 1 > (
 const DoFHandler< 1 >&,
 const  parallel::distributed::BlockVector<float> &,
 const Point< 1 >&);

 template
 void point_value< 1 > (
 const Mapping< 1 >&,
 const DoFHandler< 1 >&,
 const  parallel::distributed::BlockVector<float> &,
 const Point< 1 >&,
 Vector<double>&);

 template
 double point_value< 1 > (
 const Mapping< 1 >&,
 const DoFHandler< 1 >&,
 const  parallel::distributed::BlockVector<float> &,
 const Point< 1 >&);

 }
#endif
 
#if  2  ==  1 

 namespace VectorTools {

 template
 void point_value< 2 > (
 const hp::DoFHandler< 2 >&,
 const  parallel::distributed::BlockVector<float> &,
 const Point< 2 >&,
 Vector<double>&);

 template
 double point_value< 2 > (
 const hp::DoFHandler< 2 >&,
 const  parallel::distributed::BlockVector<float> &,
 const Point< 2 >&);

 template
 void point_value< 2 > (
 const hp::MappingCollection< 2 >&,
 const hp::DoFHandler< 2 >&,
 const  parallel::distributed::BlockVector<float> &,
 const Point< 2 >&,
 Vector<double>&);

 template
 double point_value< 2 > (
 const hp::MappingCollection< 2 >&,
 const hp::DoFHandler< 2 >&,
 const  parallel::distributed::BlockVector<float> &,
 const Point< 2 >&);

 template
 void point_difference< 2 > (
 const DoFHandler< 2 >&,
 const  parallel::distributed::BlockVector<float> &,
 const Function< 2 >&,
 Vector<double>&,
 const Point< 2 >&);

 template
 void point_difference< 2 > (
 const Mapping< 2 >&,
 const DoFHandler< 2 >&,
 const  parallel::distributed::BlockVector<float> &,
 const Function< 2 >&,
 Vector<double>&,
 const Point< 2 >&);

 template
 void point_value< 2 > (
 const DoFHandler< 2 >&,
 const  parallel::distributed::BlockVector<float> &,
 const Point< 2 >&,
 Vector<double>&);

 template
 double point_value< 2 > (
 const DoFHandler< 2 >&,
 const  parallel::distributed::BlockVector<float> &,
 const Point< 2 >&);

 template
 void point_value< 2 > (
 const Mapping< 2 >&,
 const DoFHandler< 2 >&,
 const  parallel::distributed::BlockVector<float> &,
 const Point< 2 >&,
 Vector<double>&);

 template
 double point_value< 2 > (
 const Mapping< 2 >&,
 const DoFHandler< 2 >&,
 const  parallel::distributed::BlockVector<float> &,
 const Point< 2 >&);

 }
#endif
 
#if  2  ==  2 

 namespace VectorTools {

 template
 void point_value< 2 > (
 const hp::DoFHandler< 2 >&,
 const  parallel::distributed::BlockVector<float> &,
 const Point< 2 >&,
 Vector<double>&);

 template
 double point_value< 2 > (
 const hp::DoFHandler< 2 >&,
 const  parallel::distributed::BlockVector<float> &,
 const Point< 2 >&);

 template
 void point_value< 2 > (
 const hp::MappingCollection< 2 >&,
 const hp::DoFHandler< 2 >&,
 const  parallel::distributed::BlockVector<float> &,
 const Point< 2 >&,
 Vector<double>&);

 template
 double point_value< 2 > (
 const hp::MappingCollection< 2 >&,
 const hp::DoFHandler< 2 >&,
 const  parallel::distributed::BlockVector<float> &,
 const Point< 2 >&);

 template
 void point_difference< 2 > (
 const DoFHandler< 2 >&,
 const  parallel::distributed::BlockVector<float> &,
 const Function< 2 >&,
 Vector<double>&,
 const Point< 2 >&);

 template
 void point_difference< 2 > (
 const Mapping< 2 >&,
 const DoFHandler< 2 >&,
 const  parallel::distributed::BlockVector<float> &,
 const Function< 2 >&,
 Vector<double>&,
 const Point< 2 >&);

 template
 void point_value< 2 > (
 const DoFHandler< 2 >&,
 const  parallel::distributed::BlockVector<float> &,
 const Point< 2 >&,
 Vector<double>&);

 template
 double point_value< 2 > (
 const DoFHandler< 2 >&,
 const  parallel::distributed::BlockVector<float> &,
 const Point< 2 >&);

 template
 void point_value< 2 > (
 const Mapping< 2 >&,
 const DoFHandler< 2 >&,
 const  parallel::distributed::BlockVector<float> &,
 const Point< 2 >&,
 Vector<double>&);

 template
 double point_value< 2 > (
 const Mapping< 2 >&,
 const DoFHandler< 2 >&,
 const  parallel::distributed::BlockVector<float> &,
 const Point< 2 >&);

 }
#endif
 
#if  2  ==  3 

 namespace VectorTools {

 template
 void point_value< 2 > (
 const hp::DoFHandler< 2 >&,
 const  parallel::distributed::BlockVector<float> &,
 const Point< 2 >&,
 Vector<double>&);

 template
 double point_value< 2 > (
 const hp::DoFHandler< 2 >&,
 const  parallel::distributed::BlockVector<float> &,
 const Point< 2 >&);

 template
 void point_value< 2 > (
 const hp::MappingCollection< 2 >&,
 const hp::DoFHandler< 2 >&,
 const  parallel::distributed::BlockVector<float> &,
 const Point< 2 >&,
 Vector<double>&);

 template
 double point_value< 2 > (
 const hp::MappingCollection< 2 >&,
 const hp::DoFHandler< 2 >&,
 const  parallel::distributed::BlockVector<float> &,
 const Point< 2 >&);

 template
 void point_difference< 2 > (
 const DoFHandler< 2 >&,
 const  parallel::distributed::BlockVector<float> &,
 const Function< 2 >&,
 Vector<double>&,
 const Point< 2 >&);

 template
 void point_difference< 2 > (
 const Mapping< 2 >&,
 const DoFHandler< 2 >&,
 const  parallel::distributed::BlockVector<float> &,
 const Function< 2 >&,
 Vector<double>&,
 const Point< 2 >&);

 template
 void point_value< 2 > (
 const DoFHandler< 2 >&,
 const  parallel::distributed::BlockVector<float> &,
 const Point< 2 >&,
 Vector<double>&);

 template
 double point_value< 2 > (
 const DoFHandler< 2 >&,
 const  parallel::distributed::BlockVector<float> &,
 const Point< 2 >&);

 template
 void point_value< 2 > (
 const Mapping< 2 >&,
 const DoFHandler< 2 >&,
 const  parallel::distributed::BlockVector<float> &,
 const Point< 2 >&,
 Vector<double>&);

 template
 double point_value< 2 > (
 const Mapping< 2 >&,
 const DoFHandler< 2 >&,
 const  parallel::distributed::BlockVector<float> &,
 const Point< 2 >&);

 }
#endif
 
#if  3  ==  1 

 namespace VectorTools {

 template
 void point_value< 3 > (
 const hp::DoFHandler< 3 >&,
 const  parallel::distributed::BlockVector<float> &,
 const Point< 3 >&,
 Vector<double>&);

 template
 double point_value< 3 > (
 const hp::DoFHandler< 3 >&,
 const  parallel::distributed::BlockVector<float> &,
 const Point< 3 >&);

 template
 void point_value< 3 > (
 const hp::MappingCollection< 3 >&,
 const hp::DoFHandler< 3 >&,
 const  parallel::distributed::BlockVector<float> &,
 const Point< 3 >&,
 Vector<double>&);

 template
 double point_value< 3 > (
 const hp::MappingCollection< 3 >&,
 const hp::DoFHandler< 3 >&,
 const  parallel::distributed::BlockVector<float> &,
 const Point< 3 >&);

 template
 void point_difference< 3 > (
 const DoFHandler< 3 >&,
 const  parallel::distributed::BlockVector<float> &,
 const Function< 3 >&,
 Vector<double>&,
 const Point< 3 >&);

 template
 void point_difference< 3 > (
 const Mapping< 3 >&,
 const DoFHandler< 3 >&,
 const  parallel::distributed::BlockVector<float> &,
 const Function< 3 >&,
 Vector<double>&,
 const Point< 3 >&);

 template
 void point_value< 3 > (
 const DoFHandler< 3 >&,
 const  parallel::distributed::BlockVector<float> &,
 const Point< 3 >&,
 Vector<double>&);

 template
 double point_value< 3 > (
 const DoFHandler< 3 >&,
 const  parallel::distributed::BlockVector<float> &,
 const Point< 3 >&);

 template
 void point_value< 3 > (
 const Mapping< 3 >&,
 const DoFHandler< 3 >&,
 const  parallel::distributed::BlockVector<float> &,
 const Point< 3 >&,
 Vector<double>&);

 template
 double point_value< 3 > (
 const Mapping< 3 >&,
 const DoFHandler< 3 >&,
 const  parallel::distributed::BlockVector<float> &,
 const Point< 3 >&);

 }
#endif
 
#if  3  ==  2 

 namespace VectorTools {

 template
 void point_value< 3 > (
 const hp::DoFHandler< 3 >&,
 const  parallel::distributed::BlockVector<float> &,
 const Point< 3 >&,
 Vector<double>&);

 template
 double point_value< 3 > (
 const hp::DoFHandler< 3 >&,
 const  parallel::distributed::BlockVector<float> &,
 const Point< 3 >&);

 template
 void point_value< 3 > (
 const hp::MappingCollection< 3 >&,
 const hp::DoFHandler< 3 >&,
 const  parallel::distributed::BlockVector<float> &,
 const Point< 3 >&,
 Vector<double>&);

 template
 double point_value< 3 > (
 const hp::MappingCollection< 3 >&,
 const hp::DoFHandler< 3 >&,
 const  parallel::distributed::BlockVector<float> &,
 const Point< 3 >&);

 template
 void point_difference< 3 > (
 const DoFHandler< 3 >&,
 const  parallel::distributed::BlockVector<float> &,
 const Function< 3 >&,
 Vector<double>&,
 const Point< 3 >&);

 template
 void point_difference< 3 > (
 const Mapping< 3 >&,
 const DoFHandler< 3 >&,
 const  parallel::distributed::BlockVector<float> &,
 const Function< 3 >&,
 Vector<double>&,
 const Point< 3 >&);

 template
 void point_value< 3 > (
 const DoFHandler< 3 >&,
 const  parallel::distributed::BlockVector<float> &,
 const Point< 3 >&,
 Vector<double>&);

 template
 double point_value< 3 > (
 const DoFHandler< 3 >&,
 const  parallel::distributed::BlockVector<float> &,
 const Point< 3 >&);

 template
 void point_value< 3 > (
 const Mapping< 3 >&,
 const DoFHandler< 3 >&,
 const  parallel::distributed::BlockVector<float> &,
 const Point< 3 >&,
 Vector<double>&);

 template
 double point_value< 3 > (
 const Mapping< 3 >&,
 const DoFHandler< 3 >&,
 const  parallel::distributed::BlockVector<float> &,
 const Point< 3 >&);

 }
#endif
 
#if  3  ==  3 

 namespace VectorTools {

 template
 void point_value< 3 > (
 const hp::DoFHandler< 3 >&,
 const  parallel::distributed::BlockVector<float> &,
 const Point< 3 >&,
 Vector<double>&);

 template
 double point_value< 3 > (
 const hp::DoFHandler< 3 >&,
 const  parallel::distributed::BlockVector<float> &,
 const Point< 3 >&);

 template
 void point_value< 3 > (
 const hp::MappingCollection< 3 >&,
 const hp::DoFHandler< 3 >&,
 const  parallel::distributed::BlockVector<float> &,
 const Point< 3 >&,
 Vector<double>&);

 template
 double point_value< 3 > (
 const hp::MappingCollection< 3 >&,
 const hp::DoFHandler< 3 >&,
 const  parallel::distributed::BlockVector<float> &,
 const Point< 3 >&);

 template
 void point_difference< 3 > (
 const DoFHandler< 3 >&,
 const  parallel::distributed::BlockVector<float> &,
 const Function< 3 >&,
 Vector<double>&,
 const Point< 3 >&);

 template
 void point_difference< 3 > (
 const Mapping< 3 >&,
 const DoFHandler< 3 >&,
 const  parallel::distributed::BlockVector<float> &,
 const Function< 3 >&,
 Vector<double>&,
 const Point< 3 >&);

 template
 void point_value< 3 > (
 const DoFHandler< 3 >&,
 const  parallel::distributed::BlockVector<float> &,
 const Point< 3 >&,
 Vector<double>&);

 template
 double point_value< 3 > (
 const DoFHandler< 3 >&,
 const  parallel::distributed::BlockVector<float> &,
 const Point< 3 >&);

 template
 void point_value< 3 > (
 const Mapping< 3 >&,
 const DoFHandler< 3 >&,
 const  parallel::distributed::BlockVector<float> &,
 const Point< 3 >&,
 Vector<double>&);

 template
 double point_value< 3 > (
 const Mapping< 3 >&,
 const DoFHandler< 3 >&,
 const  parallel::distributed::BlockVector<float> &,
 const Point< 3 >&);

 }
#endif
 
#if  1  ==  1 

 namespace VectorTools {

 template
 void point_value< 1 > (
 const hp::DoFHandler< 1 >&,
 const  parallel::distributed::BlockVector<long double> &,
 const Point< 1 >&,
 Vector<double>&);

 template
 double point_value< 1 > (
 const hp::DoFHandler< 1 >&,
 const  parallel::distributed::BlockVector<long double> &,
 const Point< 1 >&);

 template
 void point_value< 1 > (
 const hp::MappingCollection< 1 >&,
 const hp::DoFHandler< 1 >&,
 const  parallel::distributed::BlockVector<long double> &,
 const Point< 1 >&,
 Vector<double>&);

 template
 double point_value< 1 > (
 const hp::MappingCollection< 1 >&,
 const hp::DoFHandler< 1 >&,
 const  parallel::distributed::BlockVector<long double> &,
 const Point< 1 >&);

 template
 void point_difference< 1 > (
 const DoFHandler< 1 >&,
 const  parallel::distributed::BlockVector<long double> &,
 const Function< 1 >&,
 Vector<double>&,
 const Point< 1 >&);

 template
 void point_difference< 1 > (
 const Mapping< 1 >&,
 const DoFHandler< 1 >&,
 const  parallel::distributed::BlockVector<long double> &,
 const Function< 1 >&,
 Vector<double>&,
 const Point< 1 >&);

 template
 void point_value< 1 > (
 const DoFHandler< 1 >&,
 const  parallel::distributed::BlockVector<long double> &,
 const Point< 1 >&,
 Vector<double>&);

 template
 double point_value< 1 > (
 const DoFHandler< 1 >&,
 const  parallel::distributed::BlockVector<long double> &,
 const Point< 1 >&);

 template
 void point_value< 1 > (
 const Mapping< 1 >&,
 const DoFHandler< 1 >&,
 const  parallel::distributed::BlockVector<long double> &,
 const Point< 1 >&,
 Vector<double>&);

 template
 double point_value< 1 > (
 const Mapping< 1 >&,
 const DoFHandler< 1 >&,
 const  parallel::distributed::BlockVector<long double> &,
 const Point< 1 >&);

 }
#endif
 
#if  1  ==  2 

 namespace VectorTools {

 template
 void point_value< 1 > (
 const hp::DoFHandler< 1 >&,
 const  parallel::distributed::BlockVector<long double> &,
 const Point< 1 >&,
 Vector<double>&);

 template
 double point_value< 1 > (
 const hp::DoFHandler< 1 >&,
 const  parallel::distributed::BlockVector<long double> &,
 const Point< 1 >&);

 template
 void point_value< 1 > (
 const hp::MappingCollection< 1 >&,
 const hp::DoFHandler< 1 >&,
 const  parallel::distributed::BlockVector<long double> &,
 const Point< 1 >&,
 Vector<double>&);

 template
 double point_value< 1 > (
 const hp::MappingCollection< 1 >&,
 const hp::DoFHandler< 1 >&,
 const  parallel::distributed::BlockVector<long double> &,
 const Point< 1 >&);

 template
 void point_difference< 1 > (
 const DoFHandler< 1 >&,
 const  parallel::distributed::BlockVector<long double> &,
 const Function< 1 >&,
 Vector<double>&,
 const Point< 1 >&);

 template
 void point_difference< 1 > (
 const Mapping< 1 >&,
 const DoFHandler< 1 >&,
 const  parallel::distributed::BlockVector<long double> &,
 const Function< 1 >&,
 Vector<double>&,
 const Point< 1 >&);

 template
 void point_value< 1 > (
 const DoFHandler< 1 >&,
 const  parallel::distributed::BlockVector<long double> &,
 const Point< 1 >&,
 Vector<double>&);

 template
 double point_value< 1 > (
 const DoFHandler< 1 >&,
 const  parallel::distributed::BlockVector<long double> &,
 const Point< 1 >&);

 template
 void point_value< 1 > (
 const Mapping< 1 >&,
 const DoFHandler< 1 >&,
 const  parallel::distributed::BlockVector<long double> &,
 const Point< 1 >&,
 Vector<double>&);

 template
 double point_value< 1 > (
 const Mapping< 1 >&,
 const DoFHandler< 1 >&,
 const  parallel::distributed::BlockVector<long double> &,
 const Point< 1 >&);

 }
#endif
 
#if  1  ==  3 

 namespace VectorTools {

 template
 void point_value< 1 > (
 const hp::DoFHandler< 1 >&,
 const  parallel::distributed::BlockVector<long double> &,
 const Point< 1 >&,
 Vector<double>&);

 template
 double point_value< 1 > (
 const hp::DoFHandler< 1 >&,
 const  parallel::distributed::BlockVector<long double> &,
 const Point< 1 >&);

 template
 void point_value< 1 > (
 const hp::MappingCollection< 1 >&,
 const hp::DoFHandler< 1 >&,
 const  parallel::distributed::BlockVector<long double> &,
 const Point< 1 >&,
 Vector<double>&);

 template
 double point_value< 1 > (
 const hp::MappingCollection< 1 >&,
 const hp::DoFHandler< 1 >&,
 const  parallel::distributed::BlockVector<long double> &,
 const Point< 1 >&);

 template
 void point_difference< 1 > (
 const DoFHandler< 1 >&,
 const  parallel::distributed::BlockVector<long double> &,
 const Function< 1 >&,
 Vector<double>&,
 const Point< 1 >&);

 template
 void point_difference< 1 > (
 const Mapping< 1 >&,
 const DoFHandler< 1 >&,
 const  parallel::distributed::BlockVector<long double> &,
 const Function< 1 >&,
 Vector<double>&,
 const Point< 1 >&);

 template
 void point_value< 1 > (
 const DoFHandler< 1 >&,
 const  parallel::distributed::BlockVector<long double> &,
 const Point< 1 >&,
 Vector<double>&);

 template
 double point_value< 1 > (
 const DoFHandler< 1 >&,
 const  parallel::distributed::BlockVector<long double> &,
 const Point< 1 >&);

 template
 void point_value< 1 > (
 const Mapping< 1 >&,
 const DoFHandler< 1 >&,
 const  parallel::distributed::BlockVector<long double> &,
 const Point< 1 >&,
 Vector<double>&);

 template
 double point_value< 1 > (
 const Mapping< 1 >&,
 const DoFHandler< 1 >&,
 const  parallel::distributed::BlockVector<long double> &,
 const Point< 1 >&);

 }
#endif
 
#if  2  ==  1 

 namespace VectorTools {

 template
 void point_value< 2 > (
 const hp::DoFHandler< 2 >&,
 const  parallel::distributed::BlockVector<long double> &,
 const Point< 2 >&,
 Vector<double>&);

 template
 double point_value< 2 > (
 const hp::DoFHandler< 2 >&,
 const  parallel::distributed::BlockVector<long double> &,
 const Point< 2 >&);

 template
 void point_value< 2 > (
 const hp::MappingCollection< 2 >&,
 const hp::DoFHandler< 2 >&,
 const  parallel::distributed::BlockVector<long double> &,
 const Point< 2 >&,
 Vector<double>&);

 template
 double point_value< 2 > (
 const hp::MappingCollection< 2 >&,
 const hp::DoFHandler< 2 >&,
 const  parallel::distributed::BlockVector<long double> &,
 const Point< 2 >&);

 template
 void point_difference< 2 > (
 const DoFHandler< 2 >&,
 const  parallel::distributed::BlockVector<long double> &,
 const Function< 2 >&,
 Vector<double>&,
 const Point< 2 >&);

 template
 void point_difference< 2 > (
 const Mapping< 2 >&,
 const DoFHandler< 2 >&,
 const  parallel::distributed::BlockVector<long double> &,
 const Function< 2 >&,
 Vector<double>&,
 const Point< 2 >&);

 template
 void point_value< 2 > (
 const DoFHandler< 2 >&,
 const  parallel::distributed::BlockVector<long double> &,
 const Point< 2 >&,
 Vector<double>&);

 template
 double point_value< 2 > (
 const DoFHandler< 2 >&,
 const  parallel::distributed::BlockVector<long double> &,
 const Point< 2 >&);

 template
 void point_value< 2 > (
 const Mapping< 2 >&,
 const DoFHandler< 2 >&,
 const  parallel::distributed::BlockVector<long double> &,
 const Point< 2 >&,
 Vector<double>&);

 template
 double point_value< 2 > (
 const Mapping< 2 >&,
 const DoFHandler< 2 >&,
 const  parallel::distributed::BlockVector<long double> &,
 const Point< 2 >&);

 }
#endif
 
#if  2  ==  2 

 namespace VectorTools {

 template
 void point_value< 2 > (
 const hp::DoFHandler< 2 >&,
 const  parallel::distributed::BlockVector<long double> &,
 const Point< 2 >&,
 Vector<double>&);

 template
 double point_value< 2 > (
 const hp::DoFHandler< 2 >&,
 const  parallel::distributed::BlockVector<long double> &,
 const Point< 2 >&);

 template
 void point_value< 2 > (
 const hp::MappingCollection< 2 >&,
 const hp::DoFHandler< 2 >&,
 const  parallel::distributed::BlockVector<long double> &,
 const Point< 2 >&,
 Vector<double>&);

 template
 double point_value< 2 > (
 const hp::MappingCollection< 2 >&,
 const hp::DoFHandler< 2 >&,
 const  parallel::distributed::BlockVector<long double> &,
 const Point< 2 >&);

 template
 void point_difference< 2 > (
 const DoFHandler< 2 >&,
 const  parallel::distributed::BlockVector<long double> &,
 const Function< 2 >&,
 Vector<double>&,
 const Point< 2 >&);

 template
 void point_difference< 2 > (
 const Mapping< 2 >&,
 const DoFHandler< 2 >&,
 const  parallel::distributed::BlockVector<long double> &,
 const Function< 2 >&,
 Vector<double>&,
 const Point< 2 >&);

 template
 void point_value< 2 > (
 const DoFHandler< 2 >&,
 const  parallel::distributed::BlockVector<long double> &,
 const Point< 2 >&,
 Vector<double>&);

 template
 double point_value< 2 > (
 const DoFHandler< 2 >&,
 const  parallel::distributed::BlockVector<long double> &,
 const Point< 2 >&);

 template
 void point_value< 2 > (
 const Mapping< 2 >&,
 const DoFHandler< 2 >&,
 const  parallel::distributed::BlockVector<long double> &,
 const Point< 2 >&,
 Vector<double>&);

 template
 double point_value< 2 > (
 const Mapping< 2 >&,
 const DoFHandler< 2 >&,
 const  parallel::distributed::BlockVector<long double> &,
 const Point< 2 >&);

 }
#endif
 
#if  2  ==  3 

 namespace VectorTools {

 template
 void point_value< 2 > (
 const hp::DoFHandler< 2 >&,
 const  parallel::distributed::BlockVector<long double> &,
 const Point< 2 >&,
 Vector<double>&);

 template
 double point_value< 2 > (
 const hp::DoFHandler< 2 >&,
 const  parallel::distributed::BlockVector<long double> &,
 const Point< 2 >&);

 template
 void point_value< 2 > (
 const hp::MappingCollection< 2 >&,
 const hp::DoFHandler< 2 >&,
 const  parallel::distributed::BlockVector<long double> &,
 const Point< 2 >&,
 Vector<double>&);

 template
 double point_value< 2 > (
 const hp::MappingCollection< 2 >&,
 const hp::DoFHandler< 2 >&,
 const  parallel::distributed::BlockVector<long double> &,
 const Point< 2 >&);

 template
 void point_difference< 2 > (
 const DoFHandler< 2 >&,
 const  parallel::distributed::BlockVector<long double> &,
 const Function< 2 >&,
 Vector<double>&,
 const Point< 2 >&);

 template
 void point_difference< 2 > (
 const Mapping< 2 >&,
 const DoFHandler< 2 >&,
 const  parallel::distributed::BlockVector<long double> &,
 const Function< 2 >&,
 Vector<double>&,
 const Point< 2 >&);

 template
 void point_value< 2 > (
 const DoFHandler< 2 >&,
 const  parallel::distributed::BlockVector<long double> &,
 const Point< 2 >&,
 Vector<double>&);

 template
 double point_value< 2 > (
 const DoFHandler< 2 >&,
 const  parallel::distributed::BlockVector<long double> &,
 const Point< 2 >&);

 template
 void point_value< 2 > (
 const Mapping< 2 >&,
 const DoFHandler< 2 >&,
 const  parallel::distributed::BlockVector<long double> &,
 const Point< 2 >&,
 Vector<double>&);

 template
 double point_value< 2 > (
 const Mapping< 2 >&,
 const DoFHandler< 2 >&,
 const  parallel::distributed::BlockVector<long double> &,
 const Point< 2 >&);

 }
#endif
 
#if  3  ==  1 

 namespace VectorTools {

 template
 void point_value< 3 > (
 const hp::DoFHandler< 3 >&,
 const  parallel::distributed::BlockVector<long double> &,
 const Point< 3 >&,
 Vector<double>&);

 template
 double point_value< 3 > (
 const hp::DoFHandler< 3 >&,
 const  parallel::distributed::BlockVector<long double> &,
 const Point< 3 >&);

 template
 void point_value< 3 > (
 const hp::MappingCollection< 3 >&,
 const hp::DoFHandler< 3 >&,
 const  parallel::distributed::BlockVector<long double> &,
 const Point< 3 >&,
 Vector<double>&);

 template
 double point_value< 3 > (
 const hp::MappingCollection< 3 >&,
 const hp::DoFHandler< 3 >&,
 const  parallel::distributed::BlockVector<long double> &,
 const Point< 3 >&);

 template
 void point_difference< 3 > (
 const DoFHandler< 3 >&,
 const  parallel::distributed::BlockVector<long double> &,
 const Function< 3 >&,
 Vector<double>&,
 const Point< 3 >&);

 template
 void point_difference< 3 > (
 const Mapping< 3 >&,
 const DoFHandler< 3 >&,
 const  parallel::distributed::BlockVector<long double> &,
 const Function< 3 >&,
 Vector<double>&,
 const Point< 3 >&);

 template
 void point_value< 3 > (
 const DoFHandler< 3 >&,
 const  parallel::distributed::BlockVector<long double> &,
 const Point< 3 >&,
 Vector<double>&);

 template
 double point_value< 3 > (
 const DoFHandler< 3 >&,
 const  parallel::distributed::BlockVector<long double> &,
 const Point< 3 >&);

 template
 void point_value< 3 > (
 const Mapping< 3 >&,
 const DoFHandler< 3 >&,
 const  parallel::distributed::BlockVector<long double> &,
 const Point< 3 >&,
 Vector<double>&);

 template
 double point_value< 3 > (
 const Mapping< 3 >&,
 const DoFHandler< 3 >&,
 const  parallel::distributed::BlockVector<long double> &,
 const Point< 3 >&);

 }
#endif
 
#if  3  ==  2 

 namespace VectorTools {

 template
 void point_value< 3 > (
 const hp::DoFHandler< 3 >&,
 const  parallel::distributed::BlockVector<long double> &,
 const Point< 3 >&,
 Vector<double>&);

 template
 double point_value< 3 > (
 const hp::DoFHandler< 3 >&,
 const  parallel::distributed::BlockVector<long double> &,
 const Point< 3 >&);

 template
 void point_value< 3 > (
 const hp::MappingCollection< 3 >&,
 const hp::DoFHandler< 3 >&,
 const  parallel::distributed::BlockVector<long double> &,
 const Point< 3 >&,
 Vector<double>&);

 template
 double point_value< 3 > (
 const hp::MappingCollection< 3 >&,
 const hp::DoFHandler< 3 >&,
 const  parallel::distributed::BlockVector<long double> &,
 const Point< 3 >&);

 template
 void point_difference< 3 > (
 const DoFHandler< 3 >&,
 const  parallel::distributed::BlockVector<long double> &,
 const Function< 3 >&,
 Vector<double>&,
 const Point< 3 >&);

 template
 void point_difference< 3 > (
 const Mapping< 3 >&,
 const DoFHandler< 3 >&,
 const  parallel::distributed::BlockVector<long double> &,
 const Function< 3 >&,
 Vector<double>&,
 const Point< 3 >&);

 template
 void point_value< 3 > (
 const DoFHandler< 3 >&,
 const  parallel::distributed::BlockVector<long double> &,
 const Point< 3 >&,
 Vector<double>&);

 template
 double point_value< 3 > (
 const DoFHandler< 3 >&,
 const  parallel::distributed::BlockVector<long double> &,
 const Point< 3 >&);

 template
 void point_value< 3 > (
 const Mapping< 3 >&,
 const DoFHandler< 3 >&,
 const  parallel::distributed::BlockVector<long double> &,
 const Point< 3 >&,
 Vector<double>&);

 template
 double point_value< 3 > (
 const Mapping< 3 >&,
 const DoFHandler< 3 >&,
 const  parallel::distributed::BlockVector<long double> &,
 const Point< 3 >&);

 }
#endif
 
#if  3  ==  3 

 namespace VectorTools {

 template
 void point_value< 3 > (
 const hp::DoFHandler< 3 >&,
 const  parallel::distributed::BlockVector<long double> &,
 const Point< 3 >&,
 Vector<double>&);

 template
 double point_value< 3 > (
 const hp::DoFHandler< 3 >&,
 const  parallel::distributed::BlockVector<long double> &,
 const Point< 3 >&);

 template
 void point_value< 3 > (
 const hp::MappingCollection< 3 >&,
 const hp::DoFHandler< 3 >&,
 const  parallel::distributed::BlockVector<long double> &,
 const Point< 3 >&,
 Vector<double>&);

 template
 double point_value< 3 > (
 const hp::MappingCollection< 3 >&,
 const hp::DoFHandler< 3 >&,
 const  parallel::distributed::BlockVector<long double> &,
 const Point< 3 >&);

 template
 void point_difference< 3 > (
 const DoFHandler< 3 >&,
 const  parallel::distributed::BlockVector<long double> &,
 const Function< 3 >&,
 Vector<double>&,
 const Point< 3 >&);

 template
 void point_difference< 3 > (
 const Mapping< 3 >&,
 const DoFHandler< 3 >&,
 const  parallel::distributed::BlockVector<long double> &,
 const Function< 3 >&,
 Vector<double>&,
 const Point< 3 >&);

 template
 void point_value< 3 > (
 const DoFHandler< 3 >&,
 const  parallel::distributed::BlockVector<long double> &,
 const Point< 3 >&,
 Vector<double>&);

 template
 double point_value< 3 > (
 const DoFHandler< 3 >&,
 const  parallel::distributed::BlockVector<long double> &,
 const Point< 3 >&);

 template
 void point_value< 3 > (
 const Mapping< 3 >&,
 const DoFHandler< 3 >&,
 const  parallel::distributed::BlockVector<long double> &,
 const Point< 3 >&,
 Vector<double>&);

 template
 double point_value< 3 > (
 const Mapping< 3 >&,
 const DoFHandler< 3 >&,
 const  parallel::distributed::BlockVector<long double> &,
 const Point< 3 >&);

 }
#endif
 
namespace VectorTools {

#if  1  ==  1 

 template
 void create_point_source_vector< 1 >
 (const Mapping< 1 > &,
 const DoFHandler< 1 > &,
 const Point< 1 > &,
 Vector<double> &);
 template
 void create_point_source_vector< 1 >
 (const DoFHandler< 1 > &,
 const Point< 1 > &,
 Vector<double> &);

 template
 void create_point_source_vector< 1 >
 (const hp::MappingCollection< 1 > &,
 const hp::DoFHandler< 1 > &,
 const Point< 1 > &,
 Vector<double> &);
 template
 void create_point_source_vector< 1 >
 (const hp::DoFHandler< 1 > &,
 const Point< 1 > &,
 Vector<double> &);
 template
 void create_point_source_vector< 1 >
 (const Mapping< 1 > &,
 const DoFHandler< 1 > &,
 const Point< 1 > &,
 const Point< 1 > &,
 Vector<double> &);
 template
 void create_point_source_vector< 1 >
 (const DoFHandler< 1 > &,
 const Point< 1 > &,
 const Point< 1 > &,
 Vector<double> &);

 template
 void create_point_source_vector< 1 >
 (const hp::MappingCollection< 1 > &,
 const hp::DoFHandler< 1 > &,
 const Point< 1 > &,
 const Point< 1 > &,
 Vector<double> &);
 template
 void create_point_source_vector< 1 >
 (const hp::DoFHandler< 1 > &,
 const Point< 1 > &,
 const Point< 1 > &,
 Vector<double> &);
#endif
 }
 
namespace VectorTools {

#if  1  ==  2 

 template
 void create_point_source_vector< 1 >
 (const Mapping< 1 > &,
 const DoFHandler< 1 > &,
 const Point< 1 > &,
 Vector<double> &);
 template
 void create_point_source_vector< 1 >
 (const DoFHandler< 1 > &,
 const Point< 1 > &,
 Vector<double> &);

 template
 void create_point_source_vector< 1 >
 (const hp::MappingCollection< 1 > &,
 const hp::DoFHandler< 1 > &,
 const Point< 1 > &,
 Vector<double> &);
 template
 void create_point_source_vector< 1 >
 (const hp::DoFHandler< 1 > &,
 const Point< 1 > &,
 Vector<double> &);
 template
 void create_point_source_vector< 1 >
 (const Mapping< 1 > &,
 const DoFHandler< 1 > &,
 const Point< 1 > &,
 const Point< 1 > &,
 Vector<double> &);
 template
 void create_point_source_vector< 1 >
 (const DoFHandler< 1 > &,
 const Point< 1 > &,
 const Point< 1 > &,
 Vector<double> &);

 template
 void create_point_source_vector< 1 >
 (const hp::MappingCollection< 1 > &,
 const hp::DoFHandler< 1 > &,
 const Point< 1 > &,
 const Point< 1 > &,
 Vector<double> &);
 template
 void create_point_source_vector< 1 >
 (const hp::DoFHandler< 1 > &,
 const Point< 1 > &,
 const Point< 1 > &,
 Vector<double> &);
#endif
 }
 
namespace VectorTools {

#if  1  ==  3 

 template
 void create_point_source_vector< 1 >
 (const Mapping< 1 > &,
 const DoFHandler< 1 > &,
 const Point< 1 > &,
 Vector<double> &);
 template
 void create_point_source_vector< 1 >
 (const DoFHandler< 1 > &,
 const Point< 1 > &,
 Vector<double> &);

 template
 void create_point_source_vector< 1 >
 (const hp::MappingCollection< 1 > &,
 const hp::DoFHandler< 1 > &,
 const Point< 1 > &,
 Vector<double> &);
 template
 void create_point_source_vector< 1 >
 (const hp::DoFHandler< 1 > &,
 const Point< 1 > &,
 Vector<double> &);
 template
 void create_point_source_vector< 1 >
 (const Mapping< 1 > &,
 const DoFHandler< 1 > &,
 const Point< 1 > &,
 const Point< 1 > &,
 Vector<double> &);
 template
 void create_point_source_vector< 1 >
 (const DoFHandler< 1 > &,
 const Point< 1 > &,
 const Point< 1 > &,
 Vector<double> &);

 template
 void create_point_source_vector< 1 >
 (const hp::MappingCollection< 1 > &,
 const hp::DoFHandler< 1 > &,
 const Point< 1 > &,
 const Point< 1 > &,
 Vector<double> &);
 template
 void create_point_source_vector< 1 >
 (const hp::DoFHandler< 1 > &,
 const Point< 1 > &,
 const Point< 1 > &,
 Vector<double> &);
#endif
 }
 
namespace VectorTools {

#if  2  ==  1 

 template
 void create_point_source_vector< 2 >
 (const Mapping< 2 > &,
 const DoFHandler< 2 > &,
 const Point< 2 > &,
 Vector<double> &);
 template
 void create_point_source_vector< 2 >
 (const DoFHandler< 2 > &,
 const Point< 2 > &,
 Vector<double> &);

 template
 void create_point_source_vector< 2 >
 (const hp::MappingCollection< 2 > &,
 const hp::DoFHandler< 2 > &,
 const Point< 2 > &,
 Vector<double> &);
 template
 void create_point_source_vector< 2 >
 (const hp::DoFHandler< 2 > &,
 const Point< 2 > &,
 Vector<double> &);
 template
 void create_point_source_vector< 2 >
 (const Mapping< 2 > &,
 const DoFHandler< 2 > &,
 const Point< 2 > &,
 const Point< 2 > &,
 Vector<double> &);
 template
 void create_point_source_vector< 2 >
 (const DoFHandler< 2 > &,
 const Point< 2 > &,
 const Point< 2 > &,
 Vector<double> &);

 template
 void create_point_source_vector< 2 >
 (const hp::MappingCollection< 2 > &,
 const hp::DoFHandler< 2 > &,
 const Point< 2 > &,
 const Point< 2 > &,
 Vector<double> &);
 template
 void create_point_source_vector< 2 >
 (const hp::DoFHandler< 2 > &,
 const Point< 2 > &,
 const Point< 2 > &,
 Vector<double> &);
#endif
 }
 
namespace VectorTools {

#if  2  ==  2 

 template
 void create_point_source_vector< 2 >
 (const Mapping< 2 > &,
 const DoFHandler< 2 > &,
 const Point< 2 > &,
 Vector<double> &);
 template
 void create_point_source_vector< 2 >
 (const DoFHandler< 2 > &,
 const Point< 2 > &,
 Vector<double> &);

 template
 void create_point_source_vector< 2 >
 (const hp::MappingCollection< 2 > &,
 const hp::DoFHandler< 2 > &,
 const Point< 2 > &,
 Vector<double> &);
 template
 void create_point_source_vector< 2 >
 (const hp::DoFHandler< 2 > &,
 const Point< 2 > &,
 Vector<double> &);
 template
 void create_point_source_vector< 2 >
 (const Mapping< 2 > &,
 const DoFHandler< 2 > &,
 const Point< 2 > &,
 const Point< 2 > &,
 Vector<double> &);
 template
 void create_point_source_vector< 2 >
 (const DoFHandler< 2 > &,
 const Point< 2 > &,
 const Point< 2 > &,
 Vector<double> &);

 template
 void create_point_source_vector< 2 >
 (const hp::MappingCollection< 2 > &,
 const hp::DoFHandler< 2 > &,
 const Point< 2 > &,
 const Point< 2 > &,
 Vector<double> &);
 template
 void create_point_source_vector< 2 >
 (const hp::DoFHandler< 2 > &,
 const Point< 2 > &,
 const Point< 2 > &,
 Vector<double> &);
#endif
 }
 
namespace VectorTools {

#if  2  ==  3 

 template
 void create_point_source_vector< 2 >
 (const Mapping< 2 > &,
 const DoFHandler< 2 > &,
 const Point< 2 > &,
 Vector<double> &);
 template
 void create_point_source_vector< 2 >
 (const DoFHandler< 2 > &,
 const Point< 2 > &,
 Vector<double> &);

 template
 void create_point_source_vector< 2 >
 (const hp::MappingCollection< 2 > &,
 const hp::DoFHandler< 2 > &,
 const Point< 2 > &,
 Vector<double> &);
 template
 void create_point_source_vector< 2 >
 (const hp::DoFHandler< 2 > &,
 const Point< 2 > &,
 Vector<double> &);
 template
 void create_point_source_vector< 2 >
 (const Mapping< 2 > &,
 const DoFHandler< 2 > &,
 const Point< 2 > &,
 const Point< 2 > &,
 Vector<double> &);
 template
 void create_point_source_vector< 2 >
 (const DoFHandler< 2 > &,
 const Point< 2 > &,
 const Point< 2 > &,
 Vector<double> &);

 template
 void create_point_source_vector< 2 >
 (const hp::MappingCollection< 2 > &,
 const hp::DoFHandler< 2 > &,
 const Point< 2 > &,
 const Point< 2 > &,
 Vector<double> &);
 template
 void create_point_source_vector< 2 >
 (const hp::DoFHandler< 2 > &,
 const Point< 2 > &,
 const Point< 2 > &,
 Vector<double> &);
#endif
 }
 
namespace VectorTools {

#if  3  ==  1 

 template
 void create_point_source_vector< 3 >
 (const Mapping< 3 > &,
 const DoFHandler< 3 > &,
 const Point< 3 > &,
 Vector<double> &);
 template
 void create_point_source_vector< 3 >
 (const DoFHandler< 3 > &,
 const Point< 3 > &,
 Vector<double> &);

 template
 void create_point_source_vector< 3 >
 (const hp::MappingCollection< 3 > &,
 const hp::DoFHandler< 3 > &,
 const Point< 3 > &,
 Vector<double> &);
 template
 void create_point_source_vector< 3 >
 (const hp::DoFHandler< 3 > &,
 const Point< 3 > &,
 Vector<double> &);
 template
 void create_point_source_vector< 3 >
 (const Mapping< 3 > &,
 const DoFHandler< 3 > &,
 const Point< 3 > &,
 const Point< 3 > &,
 Vector<double> &);
 template
 void create_point_source_vector< 3 >
 (const DoFHandler< 3 > &,
 const Point< 3 > &,
 const Point< 3 > &,
 Vector<double> &);

 template
 void create_point_source_vector< 3 >
 (const hp::MappingCollection< 3 > &,
 const hp::DoFHandler< 3 > &,
 const Point< 3 > &,
 const Point< 3 > &,
 Vector<double> &);
 template
 void create_point_source_vector< 3 >
 (const hp::DoFHandler< 3 > &,
 const Point< 3 > &,
 const Point< 3 > &,
 Vector<double> &);
#endif
 }
 
namespace VectorTools {

#if  3  ==  2 

 template
 void create_point_source_vector< 3 >
 (const Mapping< 3 > &,
 const DoFHandler< 3 > &,
 const Point< 3 > &,
 Vector<double> &);
 template
 void create_point_source_vector< 3 >
 (const DoFHandler< 3 > &,
 const Point< 3 > &,
 Vector<double> &);

 template
 void create_point_source_vector< 3 >
 (const hp::MappingCollection< 3 > &,
 const hp::DoFHandler< 3 > &,
 const Point< 3 > &,
 Vector<double> &);
 template
 void create_point_source_vector< 3 >
 (const hp::DoFHandler< 3 > &,
 const Point< 3 > &,
 Vector<double> &);
 template
 void create_point_source_vector< 3 >
 (const Mapping< 3 > &,
 const DoFHandler< 3 > &,
 const Point< 3 > &,
 const Point< 3 > &,
 Vector<double> &);
 template
 void create_point_source_vector< 3 >
 (const DoFHandler< 3 > &,
 const Point< 3 > &,
 const Point< 3 > &,
 Vector<double> &);

 template
 void create_point_source_vector< 3 >
 (const hp::MappingCollection< 3 > &,
 const hp::DoFHandler< 3 > &,
 const Point< 3 > &,
 const Point< 3 > &,
 Vector<double> &);
 template
 void create_point_source_vector< 3 >
 (const hp::DoFHandler< 3 > &,
 const Point< 3 > &,
 const Point< 3 > &,
 Vector<double> &);
#endif
 }
 
namespace VectorTools {

#if  3  ==  3 

 template
 void create_point_source_vector< 3 >
 (const Mapping< 3 > &,
 const DoFHandler< 3 > &,
 const Point< 3 > &,
 Vector<double> &);
 template
 void create_point_source_vector< 3 >
 (const DoFHandler< 3 > &,
 const Point< 3 > &,
 Vector<double> &);

 template
 void create_point_source_vector< 3 >
 (const hp::MappingCollection< 3 > &,
 const hp::DoFHandler< 3 > &,
 const Point< 3 > &,
 Vector<double> &);
 template
 void create_point_source_vector< 3 >
 (const hp::DoFHandler< 3 > &,
 const Point< 3 > &,
 Vector<double> &);
 template
 void create_point_source_vector< 3 >
 (const Mapping< 3 > &,
 const DoFHandler< 3 > &,
 const Point< 3 > &,
 const Point< 3 > &,
 Vector<double> &);
 template
 void create_point_source_vector< 3 >
 (const DoFHandler< 3 > &,
 const Point< 3 > &,
 const Point< 3 > &,
 Vector<double> &);

 template
 void create_point_source_vector< 3 >
 (const hp::MappingCollection< 3 > &,
 const hp::DoFHandler< 3 > &,
 const Point< 3 > &,
 const Point< 3 > &,
 Vector<double> &);
 template
 void create_point_source_vector< 3 >
 (const hp::DoFHandler< 3 > &,
 const Point< 3 > &,
 const Point< 3 > &,
 Vector<double> &);
#endif
 }
 
