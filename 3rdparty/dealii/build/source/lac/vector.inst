template class Vector< double >;
 
template class Vector< float >;
 
template class Vector< long double >;
 
namespace internal
 {
 namespace Vector
 {
 template void copy_vector< double , double > (const dealii::Vector< double >&,
 dealii::Vector< double >&);
 }
 }
 template
 bool
 Vector< double >::operator==< double >(const Vector< double >&) const;
 template
  double 
 Vector< double >::operator*< double >(const Vector< double >&) const;
 template
 void Vector< double >::reinit< double >(const Vector< double >&, const bool);
 
namespace internal
 {
 namespace Vector
 {
 template void copy_vector< double , float > (const dealii::Vector< double >&,
 dealii::Vector< float >&);
 }
 }
 template
 bool
 Vector< double >::operator==< float >(const Vector< float >&) const;
 template
  double 
 Vector< double >::operator*< float >(const Vector< float >&) const;
 template
 void Vector< double >::reinit< float >(const Vector< float >&, const bool);
 
namespace internal
 {
 namespace Vector
 {
 template void copy_vector< double , long double > (const dealii::Vector< double >&,
 dealii::Vector< long double >&);
 }
 }
 template
 bool
 Vector< double >::operator==< long double >(const Vector< long double >&) const;
 template
  double 
 Vector< double >::operator*< long double >(const Vector< long double >&) const;
 template
 void Vector< double >::reinit< long double >(const Vector< long double >&, const bool);
 
namespace internal
 {
 namespace Vector
 {
 template void copy_vector< float , double > (const dealii::Vector< float >&,
 dealii::Vector< double >&);
 }
 }
 template
 bool
 Vector< float >::operator==< double >(const Vector< double >&) const;
 template
  float 
 Vector< float >::operator*< double >(const Vector< double >&) const;
 template
 void Vector< float >::reinit< double >(const Vector< double >&, const bool);
 
namespace internal
 {
 namespace Vector
 {
 template void copy_vector< float , float > (const dealii::Vector< float >&,
 dealii::Vector< float >&);
 }
 }
 template
 bool
 Vector< float >::operator==< float >(const Vector< float >&) const;
 template
  float 
 Vector< float >::operator*< float >(const Vector< float >&) const;
 template
 void Vector< float >::reinit< float >(const Vector< float >&, const bool);
 
namespace internal
 {
 namespace Vector
 {
 template void copy_vector< float , long double > (const dealii::Vector< float >&,
 dealii::Vector< long double >&);
 }
 }
 template
 bool
 Vector< float >::operator==< long double >(const Vector< long double >&) const;
 template
  float 
 Vector< float >::operator*< long double >(const Vector< long double >&) const;
 template
 void Vector< float >::reinit< long double >(const Vector< long double >&, const bool);
 
namespace internal
 {
 namespace Vector
 {
 template void copy_vector< long double , double > (const dealii::Vector< long double >&,
 dealii::Vector< double >&);
 }
 }
 template
 bool
 Vector< long double >::operator==< double >(const Vector< double >&) const;
 template
  long double 
 Vector< long double >::operator*< double >(const Vector< double >&) const;
 template
 void Vector< long double >::reinit< double >(const Vector< double >&, const bool);
 
namespace internal
 {
 namespace Vector
 {
 template void copy_vector< long double , float > (const dealii::Vector< long double >&,
 dealii::Vector< float >&);
 }
 }
 template
 bool
 Vector< long double >::operator==< float >(const Vector< float >&) const;
 template
  long double 
 Vector< long double >::operator*< float >(const Vector< float >&) const;
 template
 void Vector< long double >::reinit< float >(const Vector< float >&, const bool);
 
namespace internal
 {
 namespace Vector
 {
 template void copy_vector< long double , long double > (const dealii::Vector< long double >&,
 dealii::Vector< long double >&);
 }
 }
 template
 bool
 Vector< long double >::operator==< long double >(const Vector< long double >&) const;
 template
  long double 
 Vector< long double >::operator*< long double >(const Vector< long double >&) const;
 template
 void Vector< long double >::reinit< long double >(const Vector< long double >&, const bool);
 
template class Vector< std::complex<double> >;
 
template class Vector< std::complex<float> >;
 
template class Vector< std::complex<long double> >;
 
namespace internal
 {
 namespace Vector
 {
 template void copy_vector< std::complex<double> , std::complex<double> > (const dealii::Vector< std::complex<double> >&,
 dealii::Vector< std::complex<double> >&);
 }
 }
 template
 bool
 Vector< std::complex<double> >::operator==< std::complex<double> >(const Vector< std::complex<double> >&) const;
 template
  std::complex<double> 
 Vector< std::complex<double> >::operator*< std::complex<double> >(const Vector< std::complex<double> >&) const;
 template
 void Vector< std::complex<double> >::reinit< std::complex<double> >(const Vector< std::complex<double> >&, const bool);
 
namespace internal
 {
 namespace Vector
 {
 template void copy_vector< std::complex<double> , std::complex<float> > (const dealii::Vector< std::complex<double> >&,
 dealii::Vector< std::complex<float> >&);
 }
 }
 template
 bool
 Vector< std::complex<double> >::operator==< std::complex<float> >(const Vector< std::complex<float> >&) const;
 template
  std::complex<double> 
 Vector< std::complex<double> >::operator*< std::complex<float> >(const Vector< std::complex<float> >&) const;
 template
 void Vector< std::complex<double> >::reinit< std::complex<float> >(const Vector< std::complex<float> >&, const bool);
 
namespace internal
 {
 namespace Vector
 {
 template void copy_vector< std::complex<double> , std::complex<long double> > (const dealii::Vector< std::complex<double> >&,
 dealii::Vector< std::complex<long double> >&);
 }
 }
 template
 bool
 Vector< std::complex<double> >::operator==< std::complex<long double> >(const Vector< std::complex<long double> >&) const;
 template
  std::complex<double> 
 Vector< std::complex<double> >::operator*< std::complex<long double> >(const Vector< std::complex<long double> >&) const;
 template
 void Vector< std::complex<double> >::reinit< std::complex<long double> >(const Vector< std::complex<long double> >&, const bool);
 
namespace internal
 {
 namespace Vector
 {
 template void copy_vector< std::complex<float> , std::complex<double> > (const dealii::Vector< std::complex<float> >&,
 dealii::Vector< std::complex<double> >&);
 }
 }
 template
 bool
 Vector< std::complex<float> >::operator==< std::complex<double> >(const Vector< std::complex<double> >&) const;
 template
  std::complex<float> 
 Vector< std::complex<float> >::operator*< std::complex<double> >(const Vector< std::complex<double> >&) const;
 template
 void Vector< std::complex<float> >::reinit< std::complex<double> >(const Vector< std::complex<double> >&, const bool);
 
namespace internal
 {
 namespace Vector
 {
 template void copy_vector< std::complex<float> , std::complex<float> > (const dealii::Vector< std::complex<float> >&,
 dealii::Vector< std::complex<float> >&);
 }
 }
 template
 bool
 Vector< std::complex<float> >::operator==< std::complex<float> >(const Vector< std::complex<float> >&) const;
 template
  std::complex<float> 
 Vector< std::complex<float> >::operator*< std::complex<float> >(const Vector< std::complex<float> >&) const;
 template
 void Vector< std::complex<float> >::reinit< std::complex<float> >(const Vector< std::complex<float> >&, const bool);
 
namespace internal
 {
 namespace Vector
 {
 template void copy_vector< std::complex<float> , std::complex<long double> > (const dealii::Vector< std::complex<float> >&,
 dealii::Vector< std::complex<long double> >&);
 }
 }
 template
 bool
 Vector< std::complex<float> >::operator==< std::complex<long double> >(const Vector< std::complex<long double> >&) const;
 template
  std::complex<float> 
 Vector< std::complex<float> >::operator*< std::complex<long double> >(const Vector< std::complex<long double> >&) const;
 template
 void Vector< std::complex<float> >::reinit< std::complex<long double> >(const Vector< std::complex<long double> >&, const bool);
 
namespace internal
 {
 namespace Vector
 {
 template void copy_vector< std::complex<long double> , std::complex<double> > (const dealii::Vector< std::complex<long double> >&,
 dealii::Vector< std::complex<double> >&);
 }
 }
 template
 bool
 Vector< std::complex<long double> >::operator==< std::complex<double> >(const Vector< std::complex<double> >&) const;
 template
  std::complex<long double> 
 Vector< std::complex<long double> >::operator*< std::complex<double> >(const Vector< std::complex<double> >&) const;
 template
 void Vector< std::complex<long double> >::reinit< std::complex<double> >(const Vector< std::complex<double> >&, const bool);
 
namespace internal
 {
 namespace Vector
 {
 template void copy_vector< std::complex<long double> , std::complex<float> > (const dealii::Vector< std::complex<long double> >&,
 dealii::Vector< std::complex<float> >&);
 }
 }
 template
 bool
 Vector< std::complex<long double> >::operator==< std::complex<float> >(const Vector< std::complex<float> >&) const;
 template
  std::complex<long double> 
 Vector< std::complex<long double> >::operator*< std::complex<float> >(const Vector< std::complex<float> >&) const;
 template
 void Vector< std::complex<long double> >::reinit< std::complex<float> >(const Vector< std::complex<float> >&, const bool);
 
namespace internal
 {
 namespace Vector
 {
 template void copy_vector< std::complex<long double> , std::complex<long double> > (const dealii::Vector< std::complex<long double> >&,
 dealii::Vector< std::complex<long double> >&);
 }
 }
 template
 bool
 Vector< std::complex<long double> >::operator==< std::complex<long double> >(const Vector< std::complex<long double> >&) const;
 template
  std::complex<long double> 
 Vector< std::complex<long double> >::operator*< std::complex<long double> >(const Vector< std::complex<long double> >&) const;
 template
 void Vector< std::complex<long double> >::reinit< std::complex<long double> >(const Vector< std::complex<long double> >&, const bool);
 
