namespace parallel
 {
 namespace distributed
 {
 template class Vector< double >;
 }
 }

namespace parallel
 {
 namespace distributed
 {
 template class Vector< float >;
 }
 }

namespace parallel
 {
 namespace distributed
 {
 template class Vector< long double >;
 }
 }

namespace parallel
 {
 namespace distributed
 {
 template void Vector< double >::reinit< double > (const Vector< double >&,
 const bool);
 }
 }

namespace parallel
 {
 namespace distributed
 {
 template void Vector< double >::reinit< float > (const Vector< float >&,
 const bool);
 }
 }

namespace parallel
 {
 namespace distributed
 {
 template void Vector< double >::reinit< long double > (const Vector< long double >&,
 const bool);
 }
 }

namespace parallel
 {
 namespace distributed
 {
 template void Vector< float >::reinit< double > (const Vector< double >&,
 const bool);
 }
 }

namespace parallel
 {
 namespace distributed
 {
 template void Vector< float >::reinit< float > (const Vector< float >&,
 const bool);
 }
 }

namespace parallel
 {
 namespace distributed
 {
 template void Vector< float >::reinit< long double > (const Vector< long double >&,
 const bool);
 }
 }

namespace parallel
 {
 namespace distributed
 {
 template void Vector< long double >::reinit< double > (const Vector< double >&,
 const bool);
 }
 }

namespace parallel
 {
 namespace distributed
 {
 template void Vector< long double >::reinit< float > (const Vector< float >&,
 const bool);
 }
 }

namespace parallel
 {
 namespace distributed
 {
 template void Vector< long double >::reinit< long double > (const Vector< long double >&,
 const bool);
 }
 }

