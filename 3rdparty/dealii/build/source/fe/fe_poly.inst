#if  1  <=  1 
 template class FE_Poly<TensorProductPolynomials< 1 >,  1 ,  1 >;
 template class FE_Poly<TensorProductPolynomialsConst< 1 >,  1 ,  1 >;
 template class FE_Poly<TensorProductPolynomials< 1 ,Polynomials::PiecewisePolynomial<double> >,  1 ,  1 >;
 template class FE_Poly<PolynomialSpace< 1 >,  1 ,  1 >;
 template class FE_Poly<PolynomialsP< 1 >,  1 ,  1 >;
#endif
 
#if  1  <=  2 
 template class FE_Poly<TensorProductPolynomials< 1 >,  1 ,  2 >;
 template class FE_Poly<TensorProductPolynomialsConst< 1 >,  1 ,  2 >;
 template class FE_Poly<TensorProductPolynomials< 1 ,Polynomials::PiecewisePolynomial<double> >,  1 ,  2 >;
 template class FE_Poly<PolynomialSpace< 1 >,  1 ,  2 >;
 template class FE_Poly<PolynomialsP< 1 >,  1 ,  2 >;
#endif
 
#if  1  <=  3 
 template class FE_Poly<TensorProductPolynomials< 1 >,  1 ,  3 >;
 template class FE_Poly<TensorProductPolynomialsConst< 1 >,  1 ,  3 >;
 template class FE_Poly<TensorProductPolynomials< 1 ,Polynomials::PiecewisePolynomial<double> >,  1 ,  3 >;
 template class FE_Poly<PolynomialSpace< 1 >,  1 ,  3 >;
 template class FE_Poly<PolynomialsP< 1 >,  1 ,  3 >;
#endif
 
#if  2  <=  1 
 template class FE_Poly<TensorProductPolynomials< 2 >,  2 ,  1 >;
 template class FE_Poly<TensorProductPolynomialsConst< 2 >,  2 ,  1 >;
 template class FE_Poly<TensorProductPolynomials< 2 ,Polynomials::PiecewisePolynomial<double> >,  2 ,  1 >;
 template class FE_Poly<PolynomialSpace< 2 >,  2 ,  1 >;
 template class FE_Poly<PolynomialsP< 2 >,  2 ,  1 >;
#endif
 
#if  2  <=  2 
 template class FE_Poly<TensorProductPolynomials< 2 >,  2 ,  2 >;
 template class FE_Poly<TensorProductPolynomialsConst< 2 >,  2 ,  2 >;
 template class FE_Poly<TensorProductPolynomials< 2 ,Polynomials::PiecewisePolynomial<double> >,  2 ,  2 >;
 template class FE_Poly<PolynomialSpace< 2 >,  2 ,  2 >;
 template class FE_Poly<PolynomialsP< 2 >,  2 ,  2 >;
#endif
 
#if  2  <=  3 
 template class FE_Poly<TensorProductPolynomials< 2 >,  2 ,  3 >;
 template class FE_Poly<TensorProductPolynomialsConst< 2 >,  2 ,  3 >;
 template class FE_Poly<TensorProductPolynomials< 2 ,Polynomials::PiecewisePolynomial<double> >,  2 ,  3 >;
 template class FE_Poly<PolynomialSpace< 2 >,  2 ,  3 >;
 template class FE_Poly<PolynomialsP< 2 >,  2 ,  3 >;
#endif
 
#if  3  <=  1 
 template class FE_Poly<TensorProductPolynomials< 3 >,  3 ,  1 >;
 template class FE_Poly<TensorProductPolynomialsConst< 3 >,  3 ,  1 >;
 template class FE_Poly<TensorProductPolynomials< 3 ,Polynomials::PiecewisePolynomial<double> >,  3 ,  1 >;
 template class FE_Poly<PolynomialSpace< 3 >,  3 ,  1 >;
 template class FE_Poly<PolynomialsP< 3 >,  3 ,  1 >;
#endif
 
#if  3  <=  2 
 template class FE_Poly<TensorProductPolynomials< 3 >,  3 ,  2 >;
 template class FE_Poly<TensorProductPolynomialsConst< 3 >,  3 ,  2 >;
 template class FE_Poly<TensorProductPolynomials< 3 ,Polynomials::PiecewisePolynomial<double> >,  3 ,  2 >;
 template class FE_Poly<PolynomialSpace< 3 >,  3 ,  2 >;
 template class FE_Poly<PolynomialsP< 3 >,  3 ,  2 >;
#endif
 
#if  3  <=  3 
 template class FE_Poly<TensorProductPolynomials< 3 >,  3 ,  3 >;
 template class FE_Poly<TensorProductPolynomialsConst< 3 >,  3 ,  3 >;
 template class FE_Poly<TensorProductPolynomials< 3 ,Polynomials::PiecewisePolynomial<double> >,  3 ,  3 >;
 template class FE_Poly<PolynomialSpace< 3 >,  3 ,  3 >;
 template class FE_Poly<PolynomialsP< 3 >,  3 ,  3 >;
#endif
 
