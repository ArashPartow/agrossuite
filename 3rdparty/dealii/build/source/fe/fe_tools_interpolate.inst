namespace FETools
 {
#if  1  <=  1 
 template
 void interpolate< 1 , 1 >
 (const DoFHandler< 1 , 1 > &, const  Vector<double>  &,
 const DoFHandler< 1 , 1 > &,  Vector<double>  &);

 template
 void interpolate< 1 , 1 >
 (const DoFHandler< 1 , 1 > &, const  Vector<double>  &,
 const DoFHandler< 1 , 1 > &, const ConstraintMatrix &,
  Vector<double>  &);
#endif
 }
 
namespace FETools
 {
#if  1  <=  1 
 template
 void interpolate< 1 , 1 >
 (const DoFHandler< 1 , 1 > &, const  Vector<float>  &,
 const DoFHandler< 1 , 1 > &,  Vector<float>  &);

 template
 void interpolate< 1 , 1 >
 (const DoFHandler< 1 , 1 > &, const  Vector<float>  &,
 const DoFHandler< 1 , 1 > &, const ConstraintMatrix &,
  Vector<float>  &);
#endif
 }
 
namespace FETools
 {
#if  1  <=  1 
 template
 void interpolate< 1 , 1 >
 (const DoFHandler< 1 , 1 > &, const  Vector<long double>  &,
 const DoFHandler< 1 , 1 > &,  Vector<long double>  &);

 template
 void interpolate< 1 , 1 >
 (const DoFHandler< 1 , 1 > &, const  Vector<long double>  &,
 const DoFHandler< 1 , 1 > &, const ConstraintMatrix &,
  Vector<long double>  &);
#endif
 }
 
namespace FETools
 {
#if  1  <=  1 
 template
 void interpolate< 1 , 1 >
 (const DoFHandler< 1 , 1 > &, const  BlockVector<double>  &,
 const DoFHandler< 1 , 1 > &,  BlockVector<double>  &);

 template
 void interpolate< 1 , 1 >
 (const DoFHandler< 1 , 1 > &, const  BlockVector<double>  &,
 const DoFHandler< 1 , 1 > &, const ConstraintMatrix &,
  BlockVector<double>  &);
#endif
 }
 
namespace FETools
 {
#if  1  <=  1 
 template
 void interpolate< 1 , 1 >
 (const DoFHandler< 1 , 1 > &, const  BlockVector<float>  &,
 const DoFHandler< 1 , 1 > &,  BlockVector<float>  &);

 template
 void interpolate< 1 , 1 >
 (const DoFHandler< 1 , 1 > &, const  BlockVector<float>  &,
 const DoFHandler< 1 , 1 > &, const ConstraintMatrix &,
  BlockVector<float>  &);
#endif
 }
 
namespace FETools
 {
#if  1  <=  1 
 template
 void interpolate< 1 , 1 >
 (const DoFHandler< 1 , 1 > &, const  BlockVector<long double>  &,
 const DoFHandler< 1 , 1 > &,  BlockVector<long double>  &);

 template
 void interpolate< 1 , 1 >
 (const DoFHandler< 1 , 1 > &, const  BlockVector<long double>  &,
 const DoFHandler< 1 , 1 > &, const ConstraintMatrix &,
  BlockVector<long double>  &);
#endif
 }
 
namespace FETools
 {
#if  1  <=  1 
 template
 void interpolate< 1 , 1 >
 (const DoFHandler< 1 , 1 > &, const  parallel::distributed::Vector<double>  &,
 const DoFHandler< 1 , 1 > &,  parallel::distributed::Vector<double>  &);

 template
 void interpolate< 1 , 1 >
 (const DoFHandler< 1 , 1 > &, const  parallel::distributed::Vector<double>  &,
 const DoFHandler< 1 , 1 > &, const ConstraintMatrix &,
  parallel::distributed::Vector<double>  &);
#endif
 }
 
namespace FETools
 {
#if  1  <=  1 
 template
 void interpolate< 1 , 1 >
 (const DoFHandler< 1 , 1 > &, const  parallel::distributed::Vector<float>  &,
 const DoFHandler< 1 , 1 > &,  parallel::distributed::Vector<float>  &);

 template
 void interpolate< 1 , 1 >
 (const DoFHandler< 1 , 1 > &, const  parallel::distributed::Vector<float>  &,
 const DoFHandler< 1 , 1 > &, const ConstraintMatrix &,
  parallel::distributed::Vector<float>  &);
#endif
 }
 
namespace FETools
 {
#if  1  <=  1 
 template
 void interpolate< 1 , 1 >
 (const DoFHandler< 1 , 1 > &, const  parallel::distributed::Vector<long double>  &,
 const DoFHandler< 1 , 1 > &,  parallel::distributed::Vector<long double>  &);

 template
 void interpolate< 1 , 1 >
 (const DoFHandler< 1 , 1 > &, const  parallel::distributed::Vector<long double>  &,
 const DoFHandler< 1 , 1 > &, const ConstraintMatrix &,
  parallel::distributed::Vector<long double>  &);
#endif
 }
 
namespace FETools
 {
#if  1  <=  1 
 template
 void interpolate< 1 , 1 >
 (const DoFHandler< 1 , 1 > &, const  parallel::distributed::BlockVector<double>  &,
 const DoFHandler< 1 , 1 > &,  parallel::distributed::BlockVector<double>  &);

 template
 void interpolate< 1 , 1 >
 (const DoFHandler< 1 , 1 > &, const  parallel::distributed::BlockVector<double>  &,
 const DoFHandler< 1 , 1 > &, const ConstraintMatrix &,
  parallel::distributed::BlockVector<double>  &);
#endif
 }
 
namespace FETools
 {
#if  1  <=  1 
 template
 void interpolate< 1 , 1 >
 (const DoFHandler< 1 , 1 > &, const  parallel::distributed::BlockVector<float>  &,
 const DoFHandler< 1 , 1 > &,  parallel::distributed::BlockVector<float>  &);

 template
 void interpolate< 1 , 1 >
 (const DoFHandler< 1 , 1 > &, const  parallel::distributed::BlockVector<float>  &,
 const DoFHandler< 1 , 1 > &, const ConstraintMatrix &,
  parallel::distributed::BlockVector<float>  &);
#endif
 }
 
namespace FETools
 {
#if  1  <=  1 
 template
 void interpolate< 1 , 1 >
 (const DoFHandler< 1 , 1 > &, const  parallel::distributed::BlockVector<long double>  &,
 const DoFHandler< 1 , 1 > &,  parallel::distributed::BlockVector<long double>  &);

 template
 void interpolate< 1 , 1 >
 (const DoFHandler< 1 , 1 > &, const  parallel::distributed::BlockVector<long double>  &,
 const DoFHandler< 1 , 1 > &, const ConstraintMatrix &,
  parallel::distributed::BlockVector<long double>  &);
#endif
 }
 
namespace FETools
 {
#if  1  <=  2 
 template
 void interpolate< 1 , 2 >
 (const DoFHandler< 1 , 2 > &, const  Vector<double>  &,
 const DoFHandler< 1 , 2 > &,  Vector<double>  &);

 template
 void interpolate< 1 , 2 >
 (const DoFHandler< 1 , 2 > &, const  Vector<double>  &,
 const DoFHandler< 1 , 2 > &, const ConstraintMatrix &,
  Vector<double>  &);
#endif
 }
 
namespace FETools
 {
#if  1  <=  2 
 template
 void interpolate< 1 , 2 >
 (const DoFHandler< 1 , 2 > &, const  Vector<float>  &,
 const DoFHandler< 1 , 2 > &,  Vector<float>  &);

 template
 void interpolate< 1 , 2 >
 (const DoFHandler< 1 , 2 > &, const  Vector<float>  &,
 const DoFHandler< 1 , 2 > &, const ConstraintMatrix &,
  Vector<float>  &);
#endif
 }
 
namespace FETools
 {
#if  1  <=  2 
 template
 void interpolate< 1 , 2 >
 (const DoFHandler< 1 , 2 > &, const  Vector<long double>  &,
 const DoFHandler< 1 , 2 > &,  Vector<long double>  &);

 template
 void interpolate< 1 , 2 >
 (const DoFHandler< 1 , 2 > &, const  Vector<long double>  &,
 const DoFHandler< 1 , 2 > &, const ConstraintMatrix &,
  Vector<long double>  &);
#endif
 }
 
namespace FETools
 {
#if  1  <=  2 
 template
 void interpolate< 1 , 2 >
 (const DoFHandler< 1 , 2 > &, const  BlockVector<double>  &,
 const DoFHandler< 1 , 2 > &,  BlockVector<double>  &);

 template
 void interpolate< 1 , 2 >
 (const DoFHandler< 1 , 2 > &, const  BlockVector<double>  &,
 const DoFHandler< 1 , 2 > &, const ConstraintMatrix &,
  BlockVector<double>  &);
#endif
 }
 
namespace FETools
 {
#if  1  <=  2 
 template
 void interpolate< 1 , 2 >
 (const DoFHandler< 1 , 2 > &, const  BlockVector<float>  &,
 const DoFHandler< 1 , 2 > &,  BlockVector<float>  &);

 template
 void interpolate< 1 , 2 >
 (const DoFHandler< 1 , 2 > &, const  BlockVector<float>  &,
 const DoFHandler< 1 , 2 > &, const ConstraintMatrix &,
  BlockVector<float>  &);
#endif
 }
 
namespace FETools
 {
#if  1  <=  2 
 template
 void interpolate< 1 , 2 >
 (const DoFHandler< 1 , 2 > &, const  BlockVector<long double>  &,
 const DoFHandler< 1 , 2 > &,  BlockVector<long double>  &);

 template
 void interpolate< 1 , 2 >
 (const DoFHandler< 1 , 2 > &, const  BlockVector<long double>  &,
 const DoFHandler< 1 , 2 > &, const ConstraintMatrix &,
  BlockVector<long double>  &);
#endif
 }
 
namespace FETools
 {
#if  1  <=  2 
 template
 void interpolate< 1 , 2 >
 (const DoFHandler< 1 , 2 > &, const  parallel::distributed::Vector<double>  &,
 const DoFHandler< 1 , 2 > &,  parallel::distributed::Vector<double>  &);

 template
 void interpolate< 1 , 2 >
 (const DoFHandler< 1 , 2 > &, const  parallel::distributed::Vector<double>  &,
 const DoFHandler< 1 , 2 > &, const ConstraintMatrix &,
  parallel::distributed::Vector<double>  &);
#endif
 }
 
namespace FETools
 {
#if  1  <=  2 
 template
 void interpolate< 1 , 2 >
 (const DoFHandler< 1 , 2 > &, const  parallel::distributed::Vector<float>  &,
 const DoFHandler< 1 , 2 > &,  parallel::distributed::Vector<float>  &);

 template
 void interpolate< 1 , 2 >
 (const DoFHandler< 1 , 2 > &, const  parallel::distributed::Vector<float>  &,
 const DoFHandler< 1 , 2 > &, const ConstraintMatrix &,
  parallel::distributed::Vector<float>  &);
#endif
 }
 
namespace FETools
 {
#if  1  <=  2 
 template
 void interpolate< 1 , 2 >
 (const DoFHandler< 1 , 2 > &, const  parallel::distributed::Vector<long double>  &,
 const DoFHandler< 1 , 2 > &,  parallel::distributed::Vector<long double>  &);

 template
 void interpolate< 1 , 2 >
 (const DoFHandler< 1 , 2 > &, const  parallel::distributed::Vector<long double>  &,
 const DoFHandler< 1 , 2 > &, const ConstraintMatrix &,
  parallel::distributed::Vector<long double>  &);
#endif
 }
 
namespace FETools
 {
#if  1  <=  2 
 template
 void interpolate< 1 , 2 >
 (const DoFHandler< 1 , 2 > &, const  parallel::distributed::BlockVector<double>  &,
 const DoFHandler< 1 , 2 > &,  parallel::distributed::BlockVector<double>  &);

 template
 void interpolate< 1 , 2 >
 (const DoFHandler< 1 , 2 > &, const  parallel::distributed::BlockVector<double>  &,
 const DoFHandler< 1 , 2 > &, const ConstraintMatrix &,
  parallel::distributed::BlockVector<double>  &);
#endif
 }
 
namespace FETools
 {
#if  1  <=  2 
 template
 void interpolate< 1 , 2 >
 (const DoFHandler< 1 , 2 > &, const  parallel::distributed::BlockVector<float>  &,
 const DoFHandler< 1 , 2 > &,  parallel::distributed::BlockVector<float>  &);

 template
 void interpolate< 1 , 2 >
 (const DoFHandler< 1 , 2 > &, const  parallel::distributed::BlockVector<float>  &,
 const DoFHandler< 1 , 2 > &, const ConstraintMatrix &,
  parallel::distributed::BlockVector<float>  &);
#endif
 }
 
namespace FETools
 {
#if  1  <=  2 
 template
 void interpolate< 1 , 2 >
 (const DoFHandler< 1 , 2 > &, const  parallel::distributed::BlockVector<long double>  &,
 const DoFHandler< 1 , 2 > &,  parallel::distributed::BlockVector<long double>  &);

 template
 void interpolate< 1 , 2 >
 (const DoFHandler< 1 , 2 > &, const  parallel::distributed::BlockVector<long double>  &,
 const DoFHandler< 1 , 2 > &, const ConstraintMatrix &,
  parallel::distributed::BlockVector<long double>  &);
#endif
 }
 
namespace FETools
 {
#if  1  <=  3 
 template
 void interpolate< 1 , 3 >
 (const DoFHandler< 1 , 3 > &, const  Vector<double>  &,
 const DoFHandler< 1 , 3 > &,  Vector<double>  &);

 template
 void interpolate< 1 , 3 >
 (const DoFHandler< 1 , 3 > &, const  Vector<double>  &,
 const DoFHandler< 1 , 3 > &, const ConstraintMatrix &,
  Vector<double>  &);
#endif
 }
 
namespace FETools
 {
#if  1  <=  3 
 template
 void interpolate< 1 , 3 >
 (const DoFHandler< 1 , 3 > &, const  Vector<float>  &,
 const DoFHandler< 1 , 3 > &,  Vector<float>  &);

 template
 void interpolate< 1 , 3 >
 (const DoFHandler< 1 , 3 > &, const  Vector<float>  &,
 const DoFHandler< 1 , 3 > &, const ConstraintMatrix &,
  Vector<float>  &);
#endif
 }
 
namespace FETools
 {
#if  1  <=  3 
 template
 void interpolate< 1 , 3 >
 (const DoFHandler< 1 , 3 > &, const  Vector<long double>  &,
 const DoFHandler< 1 , 3 > &,  Vector<long double>  &);

 template
 void interpolate< 1 , 3 >
 (const DoFHandler< 1 , 3 > &, const  Vector<long double>  &,
 const DoFHandler< 1 , 3 > &, const ConstraintMatrix &,
  Vector<long double>  &);
#endif
 }
 
namespace FETools
 {
#if  1  <=  3 
 template
 void interpolate< 1 , 3 >
 (const DoFHandler< 1 , 3 > &, const  BlockVector<double>  &,
 const DoFHandler< 1 , 3 > &,  BlockVector<double>  &);

 template
 void interpolate< 1 , 3 >
 (const DoFHandler< 1 , 3 > &, const  BlockVector<double>  &,
 const DoFHandler< 1 , 3 > &, const ConstraintMatrix &,
  BlockVector<double>  &);
#endif
 }
 
namespace FETools
 {
#if  1  <=  3 
 template
 void interpolate< 1 , 3 >
 (const DoFHandler< 1 , 3 > &, const  BlockVector<float>  &,
 const DoFHandler< 1 , 3 > &,  BlockVector<float>  &);

 template
 void interpolate< 1 , 3 >
 (const DoFHandler< 1 , 3 > &, const  BlockVector<float>  &,
 const DoFHandler< 1 , 3 > &, const ConstraintMatrix &,
  BlockVector<float>  &);
#endif
 }
 
namespace FETools
 {
#if  1  <=  3 
 template
 void interpolate< 1 , 3 >
 (const DoFHandler< 1 , 3 > &, const  BlockVector<long double>  &,
 const DoFHandler< 1 , 3 > &,  BlockVector<long double>  &);

 template
 void interpolate< 1 , 3 >
 (const DoFHandler< 1 , 3 > &, const  BlockVector<long double>  &,
 const DoFHandler< 1 , 3 > &, const ConstraintMatrix &,
  BlockVector<long double>  &);
#endif
 }
 
namespace FETools
 {
#if  1  <=  3 
 template
 void interpolate< 1 , 3 >
 (const DoFHandler< 1 , 3 > &, const  parallel::distributed::Vector<double>  &,
 const DoFHandler< 1 , 3 > &,  parallel::distributed::Vector<double>  &);

 template
 void interpolate< 1 , 3 >
 (const DoFHandler< 1 , 3 > &, const  parallel::distributed::Vector<double>  &,
 const DoFHandler< 1 , 3 > &, const ConstraintMatrix &,
  parallel::distributed::Vector<double>  &);
#endif
 }
 
namespace FETools
 {
#if  1  <=  3 
 template
 void interpolate< 1 , 3 >
 (const DoFHandler< 1 , 3 > &, const  parallel::distributed::Vector<float>  &,
 const DoFHandler< 1 , 3 > &,  parallel::distributed::Vector<float>  &);

 template
 void interpolate< 1 , 3 >
 (const DoFHandler< 1 , 3 > &, const  parallel::distributed::Vector<float>  &,
 const DoFHandler< 1 , 3 > &, const ConstraintMatrix &,
  parallel::distributed::Vector<float>  &);
#endif
 }
 
namespace FETools
 {
#if  1  <=  3 
 template
 void interpolate< 1 , 3 >
 (const DoFHandler< 1 , 3 > &, const  parallel::distributed::Vector<long double>  &,
 const DoFHandler< 1 , 3 > &,  parallel::distributed::Vector<long double>  &);

 template
 void interpolate< 1 , 3 >
 (const DoFHandler< 1 , 3 > &, const  parallel::distributed::Vector<long double>  &,
 const DoFHandler< 1 , 3 > &, const ConstraintMatrix &,
  parallel::distributed::Vector<long double>  &);
#endif
 }
 
namespace FETools
 {
#if  1  <=  3 
 template
 void interpolate< 1 , 3 >
 (const DoFHandler< 1 , 3 > &, const  parallel::distributed::BlockVector<double>  &,
 const DoFHandler< 1 , 3 > &,  parallel::distributed::BlockVector<double>  &);

 template
 void interpolate< 1 , 3 >
 (const DoFHandler< 1 , 3 > &, const  parallel::distributed::BlockVector<double>  &,
 const DoFHandler< 1 , 3 > &, const ConstraintMatrix &,
  parallel::distributed::BlockVector<double>  &);
#endif
 }
 
namespace FETools
 {
#if  1  <=  3 
 template
 void interpolate< 1 , 3 >
 (const DoFHandler< 1 , 3 > &, const  parallel::distributed::BlockVector<float>  &,
 const DoFHandler< 1 , 3 > &,  parallel::distributed::BlockVector<float>  &);

 template
 void interpolate< 1 , 3 >
 (const DoFHandler< 1 , 3 > &, const  parallel::distributed::BlockVector<float>  &,
 const DoFHandler< 1 , 3 > &, const ConstraintMatrix &,
  parallel::distributed::BlockVector<float>  &);
#endif
 }
 
namespace FETools
 {
#if  1  <=  3 
 template
 void interpolate< 1 , 3 >
 (const DoFHandler< 1 , 3 > &, const  parallel::distributed::BlockVector<long double>  &,
 const DoFHandler< 1 , 3 > &,  parallel::distributed::BlockVector<long double>  &);

 template
 void interpolate< 1 , 3 >
 (const DoFHandler< 1 , 3 > &, const  parallel::distributed::BlockVector<long double>  &,
 const DoFHandler< 1 , 3 > &, const ConstraintMatrix &,
  parallel::distributed::BlockVector<long double>  &);
#endif
 }
 
namespace FETools
 {
#if  2  <=  1 
 template
 void interpolate< 2 , 1 >
 (const DoFHandler< 2 , 1 > &, const  Vector<double>  &,
 const DoFHandler< 2 , 1 > &,  Vector<double>  &);

 template
 void interpolate< 2 , 1 >
 (const DoFHandler< 2 , 1 > &, const  Vector<double>  &,
 const DoFHandler< 2 , 1 > &, const ConstraintMatrix &,
  Vector<double>  &);
#endif
 }
 
namespace FETools
 {
#if  2  <=  1 
 template
 void interpolate< 2 , 1 >
 (const DoFHandler< 2 , 1 > &, const  Vector<float>  &,
 const DoFHandler< 2 , 1 > &,  Vector<float>  &);

 template
 void interpolate< 2 , 1 >
 (const DoFHandler< 2 , 1 > &, const  Vector<float>  &,
 const DoFHandler< 2 , 1 > &, const ConstraintMatrix &,
  Vector<float>  &);
#endif
 }
 
namespace FETools
 {
#if  2  <=  1 
 template
 void interpolate< 2 , 1 >
 (const DoFHandler< 2 , 1 > &, const  Vector<long double>  &,
 const DoFHandler< 2 , 1 > &,  Vector<long double>  &);

 template
 void interpolate< 2 , 1 >
 (const DoFHandler< 2 , 1 > &, const  Vector<long double>  &,
 const DoFHandler< 2 , 1 > &, const ConstraintMatrix &,
  Vector<long double>  &);
#endif
 }
 
namespace FETools
 {
#if  2  <=  1 
 template
 void interpolate< 2 , 1 >
 (const DoFHandler< 2 , 1 > &, const  BlockVector<double>  &,
 const DoFHandler< 2 , 1 > &,  BlockVector<double>  &);

 template
 void interpolate< 2 , 1 >
 (const DoFHandler< 2 , 1 > &, const  BlockVector<double>  &,
 const DoFHandler< 2 , 1 > &, const ConstraintMatrix &,
  BlockVector<double>  &);
#endif
 }
 
namespace FETools
 {
#if  2  <=  1 
 template
 void interpolate< 2 , 1 >
 (const DoFHandler< 2 , 1 > &, const  BlockVector<float>  &,
 const DoFHandler< 2 , 1 > &,  BlockVector<float>  &);

 template
 void interpolate< 2 , 1 >
 (const DoFHandler< 2 , 1 > &, const  BlockVector<float>  &,
 const DoFHandler< 2 , 1 > &, const ConstraintMatrix &,
  BlockVector<float>  &);
#endif
 }
 
namespace FETools
 {
#if  2  <=  1 
 template
 void interpolate< 2 , 1 >
 (const DoFHandler< 2 , 1 > &, const  BlockVector<long double>  &,
 const DoFHandler< 2 , 1 > &,  BlockVector<long double>  &);

 template
 void interpolate< 2 , 1 >
 (const DoFHandler< 2 , 1 > &, const  BlockVector<long double>  &,
 const DoFHandler< 2 , 1 > &, const ConstraintMatrix &,
  BlockVector<long double>  &);
#endif
 }
 
namespace FETools
 {
#if  2  <=  1 
 template
 void interpolate< 2 , 1 >
 (const DoFHandler< 2 , 1 > &, const  parallel::distributed::Vector<double>  &,
 const DoFHandler< 2 , 1 > &,  parallel::distributed::Vector<double>  &);

 template
 void interpolate< 2 , 1 >
 (const DoFHandler< 2 , 1 > &, const  parallel::distributed::Vector<double>  &,
 const DoFHandler< 2 , 1 > &, const ConstraintMatrix &,
  parallel::distributed::Vector<double>  &);
#endif
 }
 
namespace FETools
 {
#if  2  <=  1 
 template
 void interpolate< 2 , 1 >
 (const DoFHandler< 2 , 1 > &, const  parallel::distributed::Vector<float>  &,
 const DoFHandler< 2 , 1 > &,  parallel::distributed::Vector<float>  &);

 template
 void interpolate< 2 , 1 >
 (const DoFHandler< 2 , 1 > &, const  parallel::distributed::Vector<float>  &,
 const DoFHandler< 2 , 1 > &, const ConstraintMatrix &,
  parallel::distributed::Vector<float>  &);
#endif
 }
 
namespace FETools
 {
#if  2  <=  1 
 template
 void interpolate< 2 , 1 >
 (const DoFHandler< 2 , 1 > &, const  parallel::distributed::Vector<long double>  &,
 const DoFHandler< 2 , 1 > &,  parallel::distributed::Vector<long double>  &);

 template
 void interpolate< 2 , 1 >
 (const DoFHandler< 2 , 1 > &, const  parallel::distributed::Vector<long double>  &,
 const DoFHandler< 2 , 1 > &, const ConstraintMatrix &,
  parallel::distributed::Vector<long double>  &);
#endif
 }
 
namespace FETools
 {
#if  2  <=  1 
 template
 void interpolate< 2 , 1 >
 (const DoFHandler< 2 , 1 > &, const  parallel::distributed::BlockVector<double>  &,
 const DoFHandler< 2 , 1 > &,  parallel::distributed::BlockVector<double>  &);

 template
 void interpolate< 2 , 1 >
 (const DoFHandler< 2 , 1 > &, const  parallel::distributed::BlockVector<double>  &,
 const DoFHandler< 2 , 1 > &, const ConstraintMatrix &,
  parallel::distributed::BlockVector<double>  &);
#endif
 }
 
namespace FETools
 {
#if  2  <=  1 
 template
 void interpolate< 2 , 1 >
 (const DoFHandler< 2 , 1 > &, const  parallel::distributed::BlockVector<float>  &,
 const DoFHandler< 2 , 1 > &,  parallel::distributed::BlockVector<float>  &);

 template
 void interpolate< 2 , 1 >
 (const DoFHandler< 2 , 1 > &, const  parallel::distributed::BlockVector<float>  &,
 const DoFHandler< 2 , 1 > &, const ConstraintMatrix &,
  parallel::distributed::BlockVector<float>  &);
#endif
 }
 
namespace FETools
 {
#if  2  <=  1 
 template
 void interpolate< 2 , 1 >
 (const DoFHandler< 2 , 1 > &, const  parallel::distributed::BlockVector<long double>  &,
 const DoFHandler< 2 , 1 > &,  parallel::distributed::BlockVector<long double>  &);

 template
 void interpolate< 2 , 1 >
 (const DoFHandler< 2 , 1 > &, const  parallel::distributed::BlockVector<long double>  &,
 const DoFHandler< 2 , 1 > &, const ConstraintMatrix &,
  parallel::distributed::BlockVector<long double>  &);
#endif
 }
 
namespace FETools
 {
#if  2  <=  2 
 template
 void interpolate< 2 , 2 >
 (const DoFHandler< 2 , 2 > &, const  Vector<double>  &,
 const DoFHandler< 2 , 2 > &,  Vector<double>  &);

 template
 void interpolate< 2 , 2 >
 (const DoFHandler< 2 , 2 > &, const  Vector<double>  &,
 const DoFHandler< 2 , 2 > &, const ConstraintMatrix &,
  Vector<double>  &);
#endif
 }
 
namespace FETools
 {
#if  2  <=  2 
 template
 void interpolate< 2 , 2 >
 (const DoFHandler< 2 , 2 > &, const  Vector<float>  &,
 const DoFHandler< 2 , 2 > &,  Vector<float>  &);

 template
 void interpolate< 2 , 2 >
 (const DoFHandler< 2 , 2 > &, const  Vector<float>  &,
 const DoFHandler< 2 , 2 > &, const ConstraintMatrix &,
  Vector<float>  &);
#endif
 }
 
namespace FETools
 {
#if  2  <=  2 
 template
 void interpolate< 2 , 2 >
 (const DoFHandler< 2 , 2 > &, const  Vector<long double>  &,
 const DoFHandler< 2 , 2 > &,  Vector<long double>  &);

 template
 void interpolate< 2 , 2 >
 (const DoFHandler< 2 , 2 > &, const  Vector<long double>  &,
 const DoFHandler< 2 , 2 > &, const ConstraintMatrix &,
  Vector<long double>  &);
#endif
 }
 
namespace FETools
 {
#if  2  <=  2 
 template
 void interpolate< 2 , 2 >
 (const DoFHandler< 2 , 2 > &, const  BlockVector<double>  &,
 const DoFHandler< 2 , 2 > &,  BlockVector<double>  &);

 template
 void interpolate< 2 , 2 >
 (const DoFHandler< 2 , 2 > &, const  BlockVector<double>  &,
 const DoFHandler< 2 , 2 > &, const ConstraintMatrix &,
  BlockVector<double>  &);
#endif
 }
 
namespace FETools
 {
#if  2  <=  2 
 template
 void interpolate< 2 , 2 >
 (const DoFHandler< 2 , 2 > &, const  BlockVector<float>  &,
 const DoFHandler< 2 , 2 > &,  BlockVector<float>  &);

 template
 void interpolate< 2 , 2 >
 (const DoFHandler< 2 , 2 > &, const  BlockVector<float>  &,
 const DoFHandler< 2 , 2 > &, const ConstraintMatrix &,
  BlockVector<float>  &);
#endif
 }
 
namespace FETools
 {
#if  2  <=  2 
 template
 void interpolate< 2 , 2 >
 (const DoFHandler< 2 , 2 > &, const  BlockVector<long double>  &,
 const DoFHandler< 2 , 2 > &,  BlockVector<long double>  &);

 template
 void interpolate< 2 , 2 >
 (const DoFHandler< 2 , 2 > &, const  BlockVector<long double>  &,
 const DoFHandler< 2 , 2 > &, const ConstraintMatrix &,
  BlockVector<long double>  &);
#endif
 }
 
namespace FETools
 {
#if  2  <=  2 
 template
 void interpolate< 2 , 2 >
 (const DoFHandler< 2 , 2 > &, const  parallel::distributed::Vector<double>  &,
 const DoFHandler< 2 , 2 > &,  parallel::distributed::Vector<double>  &);

 template
 void interpolate< 2 , 2 >
 (const DoFHandler< 2 , 2 > &, const  parallel::distributed::Vector<double>  &,
 const DoFHandler< 2 , 2 > &, const ConstraintMatrix &,
  parallel::distributed::Vector<double>  &);
#endif
 }
 
namespace FETools
 {
#if  2  <=  2 
 template
 void interpolate< 2 , 2 >
 (const DoFHandler< 2 , 2 > &, const  parallel::distributed::Vector<float>  &,
 const DoFHandler< 2 , 2 > &,  parallel::distributed::Vector<float>  &);

 template
 void interpolate< 2 , 2 >
 (const DoFHandler< 2 , 2 > &, const  parallel::distributed::Vector<float>  &,
 const DoFHandler< 2 , 2 > &, const ConstraintMatrix &,
  parallel::distributed::Vector<float>  &);
#endif
 }
 
namespace FETools
 {
#if  2  <=  2 
 template
 void interpolate< 2 , 2 >
 (const DoFHandler< 2 , 2 > &, const  parallel::distributed::Vector<long double>  &,
 const DoFHandler< 2 , 2 > &,  parallel::distributed::Vector<long double>  &);

 template
 void interpolate< 2 , 2 >
 (const DoFHandler< 2 , 2 > &, const  parallel::distributed::Vector<long double>  &,
 const DoFHandler< 2 , 2 > &, const ConstraintMatrix &,
  parallel::distributed::Vector<long double>  &);
#endif
 }
 
namespace FETools
 {
#if  2  <=  2 
 template
 void interpolate< 2 , 2 >
 (const DoFHandler< 2 , 2 > &, const  parallel::distributed::BlockVector<double>  &,
 const DoFHandler< 2 , 2 > &,  parallel::distributed::BlockVector<double>  &);

 template
 void interpolate< 2 , 2 >
 (const DoFHandler< 2 , 2 > &, const  parallel::distributed::BlockVector<double>  &,
 const DoFHandler< 2 , 2 > &, const ConstraintMatrix &,
  parallel::distributed::BlockVector<double>  &);
#endif
 }
 
namespace FETools
 {
#if  2  <=  2 
 template
 void interpolate< 2 , 2 >
 (const DoFHandler< 2 , 2 > &, const  parallel::distributed::BlockVector<float>  &,
 const DoFHandler< 2 , 2 > &,  parallel::distributed::BlockVector<float>  &);

 template
 void interpolate< 2 , 2 >
 (const DoFHandler< 2 , 2 > &, const  parallel::distributed::BlockVector<float>  &,
 const DoFHandler< 2 , 2 > &, const ConstraintMatrix &,
  parallel::distributed::BlockVector<float>  &);
#endif
 }
 
namespace FETools
 {
#if  2  <=  2 
 template
 void interpolate< 2 , 2 >
 (const DoFHandler< 2 , 2 > &, const  parallel::distributed::BlockVector<long double>  &,
 const DoFHandler< 2 , 2 > &,  parallel::distributed::BlockVector<long double>  &);

 template
 void interpolate< 2 , 2 >
 (const DoFHandler< 2 , 2 > &, const  parallel::distributed::BlockVector<long double>  &,
 const DoFHandler< 2 , 2 > &, const ConstraintMatrix &,
  parallel::distributed::BlockVector<long double>  &);
#endif
 }
 
namespace FETools
 {
#if  2  <=  3 
 template
 void interpolate< 2 , 3 >
 (const DoFHandler< 2 , 3 > &, const  Vector<double>  &,
 const DoFHandler< 2 , 3 > &,  Vector<double>  &);

 template
 void interpolate< 2 , 3 >
 (const DoFHandler< 2 , 3 > &, const  Vector<double>  &,
 const DoFHandler< 2 , 3 > &, const ConstraintMatrix &,
  Vector<double>  &);
#endif
 }
 
namespace FETools
 {
#if  2  <=  3 
 template
 void interpolate< 2 , 3 >
 (const DoFHandler< 2 , 3 > &, const  Vector<float>  &,
 const DoFHandler< 2 , 3 > &,  Vector<float>  &);

 template
 void interpolate< 2 , 3 >
 (const DoFHandler< 2 , 3 > &, const  Vector<float>  &,
 const DoFHandler< 2 , 3 > &, const ConstraintMatrix &,
  Vector<float>  &);
#endif
 }
 
namespace FETools
 {
#if  2  <=  3 
 template
 void interpolate< 2 , 3 >
 (const DoFHandler< 2 , 3 > &, const  Vector<long double>  &,
 const DoFHandler< 2 , 3 > &,  Vector<long double>  &);

 template
 void interpolate< 2 , 3 >
 (const DoFHandler< 2 , 3 > &, const  Vector<long double>  &,
 const DoFHandler< 2 , 3 > &, const ConstraintMatrix &,
  Vector<long double>  &);
#endif
 }
 
namespace FETools
 {
#if  2  <=  3 
 template
 void interpolate< 2 , 3 >
 (const DoFHandler< 2 , 3 > &, const  BlockVector<double>  &,
 const DoFHandler< 2 , 3 > &,  BlockVector<double>  &);

 template
 void interpolate< 2 , 3 >
 (const DoFHandler< 2 , 3 > &, const  BlockVector<double>  &,
 const DoFHandler< 2 , 3 > &, const ConstraintMatrix &,
  BlockVector<double>  &);
#endif
 }
 
namespace FETools
 {
#if  2  <=  3 
 template
 void interpolate< 2 , 3 >
 (const DoFHandler< 2 , 3 > &, const  BlockVector<float>  &,
 const DoFHandler< 2 , 3 > &,  BlockVector<float>  &);

 template
 void interpolate< 2 , 3 >
 (const DoFHandler< 2 , 3 > &, const  BlockVector<float>  &,
 const DoFHandler< 2 , 3 > &, const ConstraintMatrix &,
  BlockVector<float>  &);
#endif
 }
 
namespace FETools
 {
#if  2  <=  3 
 template
 void interpolate< 2 , 3 >
 (const DoFHandler< 2 , 3 > &, const  BlockVector<long double>  &,
 const DoFHandler< 2 , 3 > &,  BlockVector<long double>  &);

 template
 void interpolate< 2 , 3 >
 (const DoFHandler< 2 , 3 > &, const  BlockVector<long double>  &,
 const DoFHandler< 2 , 3 > &, const ConstraintMatrix &,
  BlockVector<long double>  &);
#endif
 }
 
namespace FETools
 {
#if  2  <=  3 
 template
 void interpolate< 2 , 3 >
 (const DoFHandler< 2 , 3 > &, const  parallel::distributed::Vector<double>  &,
 const DoFHandler< 2 , 3 > &,  parallel::distributed::Vector<double>  &);

 template
 void interpolate< 2 , 3 >
 (const DoFHandler< 2 , 3 > &, const  parallel::distributed::Vector<double>  &,
 const DoFHandler< 2 , 3 > &, const ConstraintMatrix &,
  parallel::distributed::Vector<double>  &);
#endif
 }
 
namespace FETools
 {
#if  2  <=  3 
 template
 void interpolate< 2 , 3 >
 (const DoFHandler< 2 , 3 > &, const  parallel::distributed::Vector<float>  &,
 const DoFHandler< 2 , 3 > &,  parallel::distributed::Vector<float>  &);

 template
 void interpolate< 2 , 3 >
 (const DoFHandler< 2 , 3 > &, const  parallel::distributed::Vector<float>  &,
 const DoFHandler< 2 , 3 > &, const ConstraintMatrix &,
  parallel::distributed::Vector<float>  &);
#endif
 }
 
namespace FETools
 {
#if  2  <=  3 
 template
 void interpolate< 2 , 3 >
 (const DoFHandler< 2 , 3 > &, const  parallel::distributed::Vector<long double>  &,
 const DoFHandler< 2 , 3 > &,  parallel::distributed::Vector<long double>  &);

 template
 void interpolate< 2 , 3 >
 (const DoFHandler< 2 , 3 > &, const  parallel::distributed::Vector<long double>  &,
 const DoFHandler< 2 , 3 > &, const ConstraintMatrix &,
  parallel::distributed::Vector<long double>  &);
#endif
 }
 
namespace FETools
 {
#if  2  <=  3 
 template
 void interpolate< 2 , 3 >
 (const DoFHandler< 2 , 3 > &, const  parallel::distributed::BlockVector<double>  &,
 const DoFHandler< 2 , 3 > &,  parallel::distributed::BlockVector<double>  &);

 template
 void interpolate< 2 , 3 >
 (const DoFHandler< 2 , 3 > &, const  parallel::distributed::BlockVector<double>  &,
 const DoFHandler< 2 , 3 > &, const ConstraintMatrix &,
  parallel::distributed::BlockVector<double>  &);
#endif
 }
 
namespace FETools
 {
#if  2  <=  3 
 template
 void interpolate< 2 , 3 >
 (const DoFHandler< 2 , 3 > &, const  parallel::distributed::BlockVector<float>  &,
 const DoFHandler< 2 , 3 > &,  parallel::distributed::BlockVector<float>  &);

 template
 void interpolate< 2 , 3 >
 (const DoFHandler< 2 , 3 > &, const  parallel::distributed::BlockVector<float>  &,
 const DoFHandler< 2 , 3 > &, const ConstraintMatrix &,
  parallel::distributed::BlockVector<float>  &);
#endif
 }
 
namespace FETools
 {
#if  2  <=  3 
 template
 void interpolate< 2 , 3 >
 (const DoFHandler< 2 , 3 > &, const  parallel::distributed::BlockVector<long double>  &,
 const DoFHandler< 2 , 3 > &,  parallel::distributed::BlockVector<long double>  &);

 template
 void interpolate< 2 , 3 >
 (const DoFHandler< 2 , 3 > &, const  parallel::distributed::BlockVector<long double>  &,
 const DoFHandler< 2 , 3 > &, const ConstraintMatrix &,
  parallel::distributed::BlockVector<long double>  &);
#endif
 }
 
namespace FETools
 {
#if  3  <=  1 
 template
 void interpolate< 3 , 1 >
 (const DoFHandler< 3 , 1 > &, const  Vector<double>  &,
 const DoFHandler< 3 , 1 > &,  Vector<double>  &);

 template
 void interpolate< 3 , 1 >
 (const DoFHandler< 3 , 1 > &, const  Vector<double>  &,
 const DoFHandler< 3 , 1 > &, const ConstraintMatrix &,
  Vector<double>  &);
#endif
 }
 
namespace FETools
 {
#if  3  <=  1 
 template
 void interpolate< 3 , 1 >
 (const DoFHandler< 3 , 1 > &, const  Vector<float>  &,
 const DoFHandler< 3 , 1 > &,  Vector<float>  &);

 template
 void interpolate< 3 , 1 >
 (const DoFHandler< 3 , 1 > &, const  Vector<float>  &,
 const DoFHandler< 3 , 1 > &, const ConstraintMatrix &,
  Vector<float>  &);
#endif
 }
 
namespace FETools
 {
#if  3  <=  1 
 template
 void interpolate< 3 , 1 >
 (const DoFHandler< 3 , 1 > &, const  Vector<long double>  &,
 const DoFHandler< 3 , 1 > &,  Vector<long double>  &);

 template
 void interpolate< 3 , 1 >
 (const DoFHandler< 3 , 1 > &, const  Vector<long double>  &,
 const DoFHandler< 3 , 1 > &, const ConstraintMatrix &,
  Vector<long double>  &);
#endif
 }
 
namespace FETools
 {
#if  3  <=  1 
 template
 void interpolate< 3 , 1 >
 (const DoFHandler< 3 , 1 > &, const  BlockVector<double>  &,
 const DoFHandler< 3 , 1 > &,  BlockVector<double>  &);

 template
 void interpolate< 3 , 1 >
 (const DoFHandler< 3 , 1 > &, const  BlockVector<double>  &,
 const DoFHandler< 3 , 1 > &, const ConstraintMatrix &,
  BlockVector<double>  &);
#endif
 }
 
namespace FETools
 {
#if  3  <=  1 
 template
 void interpolate< 3 , 1 >
 (const DoFHandler< 3 , 1 > &, const  BlockVector<float>  &,
 const DoFHandler< 3 , 1 > &,  BlockVector<float>  &);

 template
 void interpolate< 3 , 1 >
 (const DoFHandler< 3 , 1 > &, const  BlockVector<float>  &,
 const DoFHandler< 3 , 1 > &, const ConstraintMatrix &,
  BlockVector<float>  &);
#endif
 }
 
namespace FETools
 {
#if  3  <=  1 
 template
 void interpolate< 3 , 1 >
 (const DoFHandler< 3 , 1 > &, const  BlockVector<long double>  &,
 const DoFHandler< 3 , 1 > &,  BlockVector<long double>  &);

 template
 void interpolate< 3 , 1 >
 (const DoFHandler< 3 , 1 > &, const  BlockVector<long double>  &,
 const DoFHandler< 3 , 1 > &, const ConstraintMatrix &,
  BlockVector<long double>  &);
#endif
 }
 
namespace FETools
 {
#if  3  <=  1 
 template
 void interpolate< 3 , 1 >
 (const DoFHandler< 3 , 1 > &, const  parallel::distributed::Vector<double>  &,
 const DoFHandler< 3 , 1 > &,  parallel::distributed::Vector<double>  &);

 template
 void interpolate< 3 , 1 >
 (const DoFHandler< 3 , 1 > &, const  parallel::distributed::Vector<double>  &,
 const DoFHandler< 3 , 1 > &, const ConstraintMatrix &,
  parallel::distributed::Vector<double>  &);
#endif
 }
 
namespace FETools
 {
#if  3  <=  1 
 template
 void interpolate< 3 , 1 >
 (const DoFHandler< 3 , 1 > &, const  parallel::distributed::Vector<float>  &,
 const DoFHandler< 3 , 1 > &,  parallel::distributed::Vector<float>  &);

 template
 void interpolate< 3 , 1 >
 (const DoFHandler< 3 , 1 > &, const  parallel::distributed::Vector<float>  &,
 const DoFHandler< 3 , 1 > &, const ConstraintMatrix &,
  parallel::distributed::Vector<float>  &);
#endif
 }
 
namespace FETools
 {
#if  3  <=  1 
 template
 void interpolate< 3 , 1 >
 (const DoFHandler< 3 , 1 > &, const  parallel::distributed::Vector<long double>  &,
 const DoFHandler< 3 , 1 > &,  parallel::distributed::Vector<long double>  &);

 template
 void interpolate< 3 , 1 >
 (const DoFHandler< 3 , 1 > &, const  parallel::distributed::Vector<long double>  &,
 const DoFHandler< 3 , 1 > &, const ConstraintMatrix &,
  parallel::distributed::Vector<long double>  &);
#endif
 }
 
namespace FETools
 {
#if  3  <=  1 
 template
 void interpolate< 3 , 1 >
 (const DoFHandler< 3 , 1 > &, const  parallel::distributed::BlockVector<double>  &,
 const DoFHandler< 3 , 1 > &,  parallel::distributed::BlockVector<double>  &);

 template
 void interpolate< 3 , 1 >
 (const DoFHandler< 3 , 1 > &, const  parallel::distributed::BlockVector<double>  &,
 const DoFHandler< 3 , 1 > &, const ConstraintMatrix &,
  parallel::distributed::BlockVector<double>  &);
#endif
 }
 
namespace FETools
 {
#if  3  <=  1 
 template
 void interpolate< 3 , 1 >
 (const DoFHandler< 3 , 1 > &, const  parallel::distributed::BlockVector<float>  &,
 const DoFHandler< 3 , 1 > &,  parallel::distributed::BlockVector<float>  &);

 template
 void interpolate< 3 , 1 >
 (const DoFHandler< 3 , 1 > &, const  parallel::distributed::BlockVector<float>  &,
 const DoFHandler< 3 , 1 > &, const ConstraintMatrix &,
  parallel::distributed::BlockVector<float>  &);
#endif
 }
 
namespace FETools
 {
#if  3  <=  1 
 template
 void interpolate< 3 , 1 >
 (const DoFHandler< 3 , 1 > &, const  parallel::distributed::BlockVector<long double>  &,
 const DoFHandler< 3 , 1 > &,  parallel::distributed::BlockVector<long double>  &);

 template
 void interpolate< 3 , 1 >
 (const DoFHandler< 3 , 1 > &, const  parallel::distributed::BlockVector<long double>  &,
 const DoFHandler< 3 , 1 > &, const ConstraintMatrix &,
  parallel::distributed::BlockVector<long double>  &);
#endif
 }
 
namespace FETools
 {
#if  3  <=  2 
 template
 void interpolate< 3 , 2 >
 (const DoFHandler< 3 , 2 > &, const  Vector<double>  &,
 const DoFHandler< 3 , 2 > &,  Vector<double>  &);

 template
 void interpolate< 3 , 2 >
 (const DoFHandler< 3 , 2 > &, const  Vector<double>  &,
 const DoFHandler< 3 , 2 > &, const ConstraintMatrix &,
  Vector<double>  &);
#endif
 }
 
namespace FETools
 {
#if  3  <=  2 
 template
 void interpolate< 3 , 2 >
 (const DoFHandler< 3 , 2 > &, const  Vector<float>  &,
 const DoFHandler< 3 , 2 > &,  Vector<float>  &);

 template
 void interpolate< 3 , 2 >
 (const DoFHandler< 3 , 2 > &, const  Vector<float>  &,
 const DoFHandler< 3 , 2 > &, const ConstraintMatrix &,
  Vector<float>  &);
#endif
 }
 
namespace FETools
 {
#if  3  <=  2 
 template
 void interpolate< 3 , 2 >
 (const DoFHandler< 3 , 2 > &, const  Vector<long double>  &,
 const DoFHandler< 3 , 2 > &,  Vector<long double>  &);

 template
 void interpolate< 3 , 2 >
 (const DoFHandler< 3 , 2 > &, const  Vector<long double>  &,
 const DoFHandler< 3 , 2 > &, const ConstraintMatrix &,
  Vector<long double>  &);
#endif
 }
 
namespace FETools
 {
#if  3  <=  2 
 template
 void interpolate< 3 , 2 >
 (const DoFHandler< 3 , 2 > &, const  BlockVector<double>  &,
 const DoFHandler< 3 , 2 > &,  BlockVector<double>  &);

 template
 void interpolate< 3 , 2 >
 (const DoFHandler< 3 , 2 > &, const  BlockVector<double>  &,
 const DoFHandler< 3 , 2 > &, const ConstraintMatrix &,
  BlockVector<double>  &);
#endif
 }
 
namespace FETools
 {
#if  3  <=  2 
 template
 void interpolate< 3 , 2 >
 (const DoFHandler< 3 , 2 > &, const  BlockVector<float>  &,
 const DoFHandler< 3 , 2 > &,  BlockVector<float>  &);

 template
 void interpolate< 3 , 2 >
 (const DoFHandler< 3 , 2 > &, const  BlockVector<float>  &,
 const DoFHandler< 3 , 2 > &, const ConstraintMatrix &,
  BlockVector<float>  &);
#endif
 }
 
namespace FETools
 {
#if  3  <=  2 
 template
 void interpolate< 3 , 2 >
 (const DoFHandler< 3 , 2 > &, const  BlockVector<long double>  &,
 const DoFHandler< 3 , 2 > &,  BlockVector<long double>  &);

 template
 void interpolate< 3 , 2 >
 (const DoFHandler< 3 , 2 > &, const  BlockVector<long double>  &,
 const DoFHandler< 3 , 2 > &, const ConstraintMatrix &,
  BlockVector<long double>  &);
#endif
 }
 
namespace FETools
 {
#if  3  <=  2 
 template
 void interpolate< 3 , 2 >
 (const DoFHandler< 3 , 2 > &, const  parallel::distributed::Vector<double>  &,
 const DoFHandler< 3 , 2 > &,  parallel::distributed::Vector<double>  &);

 template
 void interpolate< 3 , 2 >
 (const DoFHandler< 3 , 2 > &, const  parallel::distributed::Vector<double>  &,
 const DoFHandler< 3 , 2 > &, const ConstraintMatrix &,
  parallel::distributed::Vector<double>  &);
#endif
 }
 
namespace FETools
 {
#if  3  <=  2 
 template
 void interpolate< 3 , 2 >
 (const DoFHandler< 3 , 2 > &, const  parallel::distributed::Vector<float>  &,
 const DoFHandler< 3 , 2 > &,  parallel::distributed::Vector<float>  &);

 template
 void interpolate< 3 , 2 >
 (const DoFHandler< 3 , 2 > &, const  parallel::distributed::Vector<float>  &,
 const DoFHandler< 3 , 2 > &, const ConstraintMatrix &,
  parallel::distributed::Vector<float>  &);
#endif
 }
 
namespace FETools
 {
#if  3  <=  2 
 template
 void interpolate< 3 , 2 >
 (const DoFHandler< 3 , 2 > &, const  parallel::distributed::Vector<long double>  &,
 const DoFHandler< 3 , 2 > &,  parallel::distributed::Vector<long double>  &);

 template
 void interpolate< 3 , 2 >
 (const DoFHandler< 3 , 2 > &, const  parallel::distributed::Vector<long double>  &,
 const DoFHandler< 3 , 2 > &, const ConstraintMatrix &,
  parallel::distributed::Vector<long double>  &);
#endif
 }
 
namespace FETools
 {
#if  3  <=  2 
 template
 void interpolate< 3 , 2 >
 (const DoFHandler< 3 , 2 > &, const  parallel::distributed::BlockVector<double>  &,
 const DoFHandler< 3 , 2 > &,  parallel::distributed::BlockVector<double>  &);

 template
 void interpolate< 3 , 2 >
 (const DoFHandler< 3 , 2 > &, const  parallel::distributed::BlockVector<double>  &,
 const DoFHandler< 3 , 2 > &, const ConstraintMatrix &,
  parallel::distributed::BlockVector<double>  &);
#endif
 }
 
namespace FETools
 {
#if  3  <=  2 
 template
 void interpolate< 3 , 2 >
 (const DoFHandler< 3 , 2 > &, const  parallel::distributed::BlockVector<float>  &,
 const DoFHandler< 3 , 2 > &,  parallel::distributed::BlockVector<float>  &);

 template
 void interpolate< 3 , 2 >
 (const DoFHandler< 3 , 2 > &, const  parallel::distributed::BlockVector<float>  &,
 const DoFHandler< 3 , 2 > &, const ConstraintMatrix &,
  parallel::distributed::BlockVector<float>  &);
#endif
 }
 
namespace FETools
 {
#if  3  <=  2 
 template
 void interpolate< 3 , 2 >
 (const DoFHandler< 3 , 2 > &, const  parallel::distributed::BlockVector<long double>  &,
 const DoFHandler< 3 , 2 > &,  parallel::distributed::BlockVector<long double>  &);

 template
 void interpolate< 3 , 2 >
 (const DoFHandler< 3 , 2 > &, const  parallel::distributed::BlockVector<long double>  &,
 const DoFHandler< 3 , 2 > &, const ConstraintMatrix &,
  parallel::distributed::BlockVector<long double>  &);
#endif
 }
 
namespace FETools
 {
#if  3  <=  3 
 template
 void interpolate< 3 , 3 >
 (const DoFHandler< 3 , 3 > &, const  Vector<double>  &,
 const DoFHandler< 3 , 3 > &,  Vector<double>  &);

 template
 void interpolate< 3 , 3 >
 (const DoFHandler< 3 , 3 > &, const  Vector<double>  &,
 const DoFHandler< 3 , 3 > &, const ConstraintMatrix &,
  Vector<double>  &);
#endif
 }
 
namespace FETools
 {
#if  3  <=  3 
 template
 void interpolate< 3 , 3 >
 (const DoFHandler< 3 , 3 > &, const  Vector<float>  &,
 const DoFHandler< 3 , 3 > &,  Vector<float>  &);

 template
 void interpolate< 3 , 3 >
 (const DoFHandler< 3 , 3 > &, const  Vector<float>  &,
 const DoFHandler< 3 , 3 > &, const ConstraintMatrix &,
  Vector<float>  &);
#endif
 }
 
namespace FETools
 {
#if  3  <=  3 
 template
 void interpolate< 3 , 3 >
 (const DoFHandler< 3 , 3 > &, const  Vector<long double>  &,
 const DoFHandler< 3 , 3 > &,  Vector<long double>  &);

 template
 void interpolate< 3 , 3 >
 (const DoFHandler< 3 , 3 > &, const  Vector<long double>  &,
 const DoFHandler< 3 , 3 > &, const ConstraintMatrix &,
  Vector<long double>  &);
#endif
 }
 
namespace FETools
 {
#if  3  <=  3 
 template
 void interpolate< 3 , 3 >
 (const DoFHandler< 3 , 3 > &, const  BlockVector<double>  &,
 const DoFHandler< 3 , 3 > &,  BlockVector<double>  &);

 template
 void interpolate< 3 , 3 >
 (const DoFHandler< 3 , 3 > &, const  BlockVector<double>  &,
 const DoFHandler< 3 , 3 > &, const ConstraintMatrix &,
  BlockVector<double>  &);
#endif
 }
 
namespace FETools
 {
#if  3  <=  3 
 template
 void interpolate< 3 , 3 >
 (const DoFHandler< 3 , 3 > &, const  BlockVector<float>  &,
 const DoFHandler< 3 , 3 > &,  BlockVector<float>  &);

 template
 void interpolate< 3 , 3 >
 (const DoFHandler< 3 , 3 > &, const  BlockVector<float>  &,
 const DoFHandler< 3 , 3 > &, const ConstraintMatrix &,
  BlockVector<float>  &);
#endif
 }
 
namespace FETools
 {
#if  3  <=  3 
 template
 void interpolate< 3 , 3 >
 (const DoFHandler< 3 , 3 > &, const  BlockVector<long double>  &,
 const DoFHandler< 3 , 3 > &,  BlockVector<long double>  &);

 template
 void interpolate< 3 , 3 >
 (const DoFHandler< 3 , 3 > &, const  BlockVector<long double>  &,
 const DoFHandler< 3 , 3 > &, const ConstraintMatrix &,
  BlockVector<long double>  &);
#endif
 }
 
namespace FETools
 {
#if  3  <=  3 
 template
 void interpolate< 3 , 3 >
 (const DoFHandler< 3 , 3 > &, const  parallel::distributed::Vector<double>  &,
 const DoFHandler< 3 , 3 > &,  parallel::distributed::Vector<double>  &);

 template
 void interpolate< 3 , 3 >
 (const DoFHandler< 3 , 3 > &, const  parallel::distributed::Vector<double>  &,
 const DoFHandler< 3 , 3 > &, const ConstraintMatrix &,
  parallel::distributed::Vector<double>  &);
#endif
 }
 
namespace FETools
 {
#if  3  <=  3 
 template
 void interpolate< 3 , 3 >
 (const DoFHandler< 3 , 3 > &, const  parallel::distributed::Vector<float>  &,
 const DoFHandler< 3 , 3 > &,  parallel::distributed::Vector<float>  &);

 template
 void interpolate< 3 , 3 >
 (const DoFHandler< 3 , 3 > &, const  parallel::distributed::Vector<float>  &,
 const DoFHandler< 3 , 3 > &, const ConstraintMatrix &,
  parallel::distributed::Vector<float>  &);
#endif
 }
 
namespace FETools
 {
#if  3  <=  3 
 template
 void interpolate< 3 , 3 >
 (const DoFHandler< 3 , 3 > &, const  parallel::distributed::Vector<long double>  &,
 const DoFHandler< 3 , 3 > &,  parallel::distributed::Vector<long double>  &);

 template
 void interpolate< 3 , 3 >
 (const DoFHandler< 3 , 3 > &, const  parallel::distributed::Vector<long double>  &,
 const DoFHandler< 3 , 3 > &, const ConstraintMatrix &,
  parallel::distributed::Vector<long double>  &);
#endif
 }
 
namespace FETools
 {
#if  3  <=  3 
 template
 void interpolate< 3 , 3 >
 (const DoFHandler< 3 , 3 > &, const  parallel::distributed::BlockVector<double>  &,
 const DoFHandler< 3 , 3 > &,  parallel::distributed::BlockVector<double>  &);

 template
 void interpolate< 3 , 3 >
 (const DoFHandler< 3 , 3 > &, const  parallel::distributed::BlockVector<double>  &,
 const DoFHandler< 3 , 3 > &, const ConstraintMatrix &,
  parallel::distributed::BlockVector<double>  &);
#endif
 }
 
namespace FETools
 {
#if  3  <=  3 
 template
 void interpolate< 3 , 3 >
 (const DoFHandler< 3 , 3 > &, const  parallel::distributed::BlockVector<float>  &,
 const DoFHandler< 3 , 3 > &,  parallel::distributed::BlockVector<float>  &);

 template
 void interpolate< 3 , 3 >
 (const DoFHandler< 3 , 3 > &, const  parallel::distributed::BlockVector<float>  &,
 const DoFHandler< 3 , 3 > &, const ConstraintMatrix &,
  parallel::distributed::BlockVector<float>  &);
#endif
 }
 
namespace FETools
 {
#if  3  <=  3 
 template
 void interpolate< 3 , 3 >
 (const DoFHandler< 3 , 3 > &, const  parallel::distributed::BlockVector<long double>  &,
 const DoFHandler< 3 , 3 > &,  parallel::distributed::BlockVector<long double>  &);

 template
 void interpolate< 3 , 3 >
 (const DoFHandler< 3 , 3 > &, const  parallel::distributed::BlockVector<long double>  &,
 const DoFHandler< 3 , 3 > &, const ConstraintMatrix &,
  parallel::distributed::BlockVector<long double>  &);
#endif
 }
 
namespace FETools
 {
#if  1  ==  1 
 template
 void interpolate< 1 >
 (const hp::DoFHandler< 1 > &, const Vector<double> &,
 const hp::DoFHandler< 1 > &, Vector<double> &);
 template
 void interpolate< 1 >
 (const hp::DoFHandler< 1 > &, const Vector<double> &,
 const hp::DoFHandler< 1 > &, const ConstraintMatrix &,
 Vector<double> &);
 template
 void interpolate< 1 >
 (const hp::DoFHandler< 1 > &, const Vector<float> &,
 const hp::DoFHandler< 1 > &, Vector<float> &);
 template
 void interpolate< 1 >
 (const hp::DoFHandler< 1 > &, const Vector<float> &,
 const hp::DoFHandler< 1 > &, const ConstraintMatrix &,
 Vector<float> &);
#endif
 }
 
namespace FETools
 {
#if  1  ==  2 
 template
 void interpolate< 1 >
 (const hp::DoFHandler< 1 > &, const Vector<double> &,
 const hp::DoFHandler< 1 > &, Vector<double> &);
 template
 void interpolate< 1 >
 (const hp::DoFHandler< 1 > &, const Vector<double> &,
 const hp::DoFHandler< 1 > &, const ConstraintMatrix &,
 Vector<double> &);
 template
 void interpolate< 1 >
 (const hp::DoFHandler< 1 > &, const Vector<float> &,
 const hp::DoFHandler< 1 > &, Vector<float> &);
 template
 void interpolate< 1 >
 (const hp::DoFHandler< 1 > &, const Vector<float> &,
 const hp::DoFHandler< 1 > &, const ConstraintMatrix &,
 Vector<float> &);
#endif
 }
 
namespace FETools
 {
#if  1  ==  3 
 template
 void interpolate< 1 >
 (const hp::DoFHandler< 1 > &, const Vector<double> &,
 const hp::DoFHandler< 1 > &, Vector<double> &);
 template
 void interpolate< 1 >
 (const hp::DoFHandler< 1 > &, const Vector<double> &,
 const hp::DoFHandler< 1 > &, const ConstraintMatrix &,
 Vector<double> &);
 template
 void interpolate< 1 >
 (const hp::DoFHandler< 1 > &, const Vector<float> &,
 const hp::DoFHandler< 1 > &, Vector<float> &);
 template
 void interpolate< 1 >
 (const hp::DoFHandler< 1 > &, const Vector<float> &,
 const hp::DoFHandler< 1 > &, const ConstraintMatrix &,
 Vector<float> &);
#endif
 }
 
namespace FETools
 {
#if  2  ==  1 
 template
 void interpolate< 2 >
 (const hp::DoFHandler< 2 > &, const Vector<double> &,
 const hp::DoFHandler< 2 > &, Vector<double> &);
 template
 void interpolate< 2 >
 (const hp::DoFHandler< 2 > &, const Vector<double> &,
 const hp::DoFHandler< 2 > &, const ConstraintMatrix &,
 Vector<double> &);
 template
 void interpolate< 2 >
 (const hp::DoFHandler< 2 > &, const Vector<float> &,
 const hp::DoFHandler< 2 > &, Vector<float> &);
 template
 void interpolate< 2 >
 (const hp::DoFHandler< 2 > &, const Vector<float> &,
 const hp::DoFHandler< 2 > &, const ConstraintMatrix &,
 Vector<float> &);
#endif
 }
 
namespace FETools
 {
#if  2  ==  2 
 template
 void interpolate< 2 >
 (const hp::DoFHandler< 2 > &, const Vector<double> &,
 const hp::DoFHandler< 2 > &, Vector<double> &);
 template
 void interpolate< 2 >
 (const hp::DoFHandler< 2 > &, const Vector<double> &,
 const hp::DoFHandler< 2 > &, const ConstraintMatrix &,
 Vector<double> &);
 template
 void interpolate< 2 >
 (const hp::DoFHandler< 2 > &, const Vector<float> &,
 const hp::DoFHandler< 2 > &, Vector<float> &);
 template
 void interpolate< 2 >
 (const hp::DoFHandler< 2 > &, const Vector<float> &,
 const hp::DoFHandler< 2 > &, const ConstraintMatrix &,
 Vector<float> &);
#endif
 }
 
namespace FETools
 {
#if  2  ==  3 
 template
 void interpolate< 2 >
 (const hp::DoFHandler< 2 > &, const Vector<double> &,
 const hp::DoFHandler< 2 > &, Vector<double> &);
 template
 void interpolate< 2 >
 (const hp::DoFHandler< 2 > &, const Vector<double> &,
 const hp::DoFHandler< 2 > &, const ConstraintMatrix &,
 Vector<double> &);
 template
 void interpolate< 2 >
 (const hp::DoFHandler< 2 > &, const Vector<float> &,
 const hp::DoFHandler< 2 > &, Vector<float> &);
 template
 void interpolate< 2 >
 (const hp::DoFHandler< 2 > &, const Vector<float> &,
 const hp::DoFHandler< 2 > &, const ConstraintMatrix &,
 Vector<float> &);
#endif
 }
 
namespace FETools
 {
#if  3  ==  1 
 template
 void interpolate< 3 >
 (const hp::DoFHandler< 3 > &, const Vector<double> &,
 const hp::DoFHandler< 3 > &, Vector<double> &);
 template
 void interpolate< 3 >
 (const hp::DoFHandler< 3 > &, const Vector<double> &,
 const hp::DoFHandler< 3 > &, const ConstraintMatrix &,
 Vector<double> &);
 template
 void interpolate< 3 >
 (const hp::DoFHandler< 3 > &, const Vector<float> &,
 const hp::DoFHandler< 3 > &, Vector<float> &);
 template
 void interpolate< 3 >
 (const hp::DoFHandler< 3 > &, const Vector<float> &,
 const hp::DoFHandler< 3 > &, const ConstraintMatrix &,
 Vector<float> &);
#endif
 }
 
namespace FETools
 {
#if  3  ==  2 
 template
 void interpolate< 3 >
 (const hp::DoFHandler< 3 > &, const Vector<double> &,
 const hp::DoFHandler< 3 > &, Vector<double> &);
 template
 void interpolate< 3 >
 (const hp::DoFHandler< 3 > &, const Vector<double> &,
 const hp::DoFHandler< 3 > &, const ConstraintMatrix &,
 Vector<double> &);
 template
 void interpolate< 3 >
 (const hp::DoFHandler< 3 > &, const Vector<float> &,
 const hp::DoFHandler< 3 > &, Vector<float> &);
 template
 void interpolate< 3 >
 (const hp::DoFHandler< 3 > &, const Vector<float> &,
 const hp::DoFHandler< 3 > &, const ConstraintMatrix &,
 Vector<float> &);
#endif
 }
 
namespace FETools
 {
#if  3  ==  3 
 template
 void interpolate< 3 >
 (const hp::DoFHandler< 3 > &, const Vector<double> &,
 const hp::DoFHandler< 3 > &, Vector<double> &);
 template
 void interpolate< 3 >
 (const hp::DoFHandler< 3 > &, const Vector<double> &,
 const hp::DoFHandler< 3 > &, const ConstraintMatrix &,
 Vector<double> &);
 template
 void interpolate< 3 >
 (const hp::DoFHandler< 3 > &, const Vector<float> &,
 const hp::DoFHandler< 3 > &, Vector<float> &);
 template
 void interpolate< 3 >
 (const hp::DoFHandler< 3 > &, const Vector<float> &,
 const hp::DoFHandler< 3 > &, const ConstraintMatrix &,
 Vector<float> &);
#endif
 }
 
namespace FETools
 {
#if  1  ==  1 
 template
 void back_interpolate< 1 >
 (const DoFHandler< 1 > &, const  Vector<double>  &,
 const FiniteElement< 1 > &,  Vector<double>  &);
 template
 void back_interpolate< 1 >
 (const DoFHandler< 1 > &, const ConstraintMatrix &,
 const  Vector<double>  &,
 const DoFHandler< 1 > &, const ConstraintMatrix &,
  Vector<double>  &);
 template
 void interpolation_difference< 1 >
 (const DoFHandler< 1 > &, const  Vector<double>  &,
 const FiniteElement< 1 > &,  Vector<double>  &);
 template
 void interpolation_difference< 1 >
 (const DoFHandler< 1 > &, const ConstraintMatrix &,
 const  Vector<double>  &,
 const DoFHandler< 1 > &, const ConstraintMatrix &,
  Vector<double>  &);
 template
 void project_dg< 1 >
 (const DoFHandler< 1 > &, const  Vector<double>  &,
 const DoFHandler< 1 > &,  Vector<double>  &);
 template
 void extrapolate< 1 >
 (const DoFHandler< 1 > &, const  Vector<double>  &,
 const DoFHandler< 1 > &,  Vector<double>  &);
 template
 void extrapolate< 1 >
 (const DoFHandler< 1 > &, const  Vector<double>  &,
 const DoFHandler< 1 > &, const ConstraintMatrix &,
  Vector<double>  &);
#endif
 }
 
namespace FETools
 {
#if  1  ==  1 
 template
 void back_interpolate< 1 >
 (const DoFHandler< 1 > &, const  Vector<float>  &,
 const FiniteElement< 1 > &,  Vector<float>  &);
 template
 void back_interpolate< 1 >
 (const DoFHandler< 1 > &, const ConstraintMatrix &,
 const  Vector<float>  &,
 const DoFHandler< 1 > &, const ConstraintMatrix &,
  Vector<float>  &);
 template
 void interpolation_difference< 1 >
 (const DoFHandler< 1 > &, const  Vector<float>  &,
 const FiniteElement< 1 > &,  Vector<float>  &);
 template
 void interpolation_difference< 1 >
 (const DoFHandler< 1 > &, const ConstraintMatrix &,
 const  Vector<float>  &,
 const DoFHandler< 1 > &, const ConstraintMatrix &,
  Vector<float>  &);
 template
 void project_dg< 1 >
 (const DoFHandler< 1 > &, const  Vector<float>  &,
 const DoFHandler< 1 > &,  Vector<float>  &);
 template
 void extrapolate< 1 >
 (const DoFHandler< 1 > &, const  Vector<float>  &,
 const DoFHandler< 1 > &,  Vector<float>  &);
 template
 void extrapolate< 1 >
 (const DoFHandler< 1 > &, const  Vector<float>  &,
 const DoFHandler< 1 > &, const ConstraintMatrix &,
  Vector<float>  &);
#endif
 }
 
namespace FETools
 {
#if  1  ==  1 
 template
 void back_interpolate< 1 >
 (const DoFHandler< 1 > &, const  Vector<long double>  &,
 const FiniteElement< 1 > &,  Vector<long double>  &);
 template
 void back_interpolate< 1 >
 (const DoFHandler< 1 > &, const ConstraintMatrix &,
 const  Vector<long double>  &,
 const DoFHandler< 1 > &, const ConstraintMatrix &,
  Vector<long double>  &);
 template
 void interpolation_difference< 1 >
 (const DoFHandler< 1 > &, const  Vector<long double>  &,
 const FiniteElement< 1 > &,  Vector<long double>  &);
 template
 void interpolation_difference< 1 >
 (const DoFHandler< 1 > &, const ConstraintMatrix &,
 const  Vector<long double>  &,
 const DoFHandler< 1 > &, const ConstraintMatrix &,
  Vector<long double>  &);
 template
 void project_dg< 1 >
 (const DoFHandler< 1 > &, const  Vector<long double>  &,
 const DoFHandler< 1 > &,  Vector<long double>  &);
 template
 void extrapolate< 1 >
 (const DoFHandler< 1 > &, const  Vector<long double>  &,
 const DoFHandler< 1 > &,  Vector<long double>  &);
 template
 void extrapolate< 1 >
 (const DoFHandler< 1 > &, const  Vector<long double>  &,
 const DoFHandler< 1 > &, const ConstraintMatrix &,
  Vector<long double>  &);
#endif
 }
 
namespace FETools
 {
#if  1  ==  1 
 template
 void back_interpolate< 1 >
 (const DoFHandler< 1 > &, const  BlockVector<double>  &,
 const FiniteElement< 1 > &,  BlockVector<double>  &);
 template
 void back_interpolate< 1 >
 (const DoFHandler< 1 > &, const ConstraintMatrix &,
 const  BlockVector<double>  &,
 const DoFHandler< 1 > &, const ConstraintMatrix &,
  BlockVector<double>  &);
 template
 void interpolation_difference< 1 >
 (const DoFHandler< 1 > &, const  BlockVector<double>  &,
 const FiniteElement< 1 > &,  BlockVector<double>  &);
 template
 void interpolation_difference< 1 >
 (const DoFHandler< 1 > &, const ConstraintMatrix &,
 const  BlockVector<double>  &,
 const DoFHandler< 1 > &, const ConstraintMatrix &,
  BlockVector<double>  &);
 template
 void project_dg< 1 >
 (const DoFHandler< 1 > &, const  BlockVector<double>  &,
 const DoFHandler< 1 > &,  BlockVector<double>  &);
 template
 void extrapolate< 1 >
 (const DoFHandler< 1 > &, const  BlockVector<double>  &,
 const DoFHandler< 1 > &,  BlockVector<double>  &);
 template
 void extrapolate< 1 >
 (const DoFHandler< 1 > &, const  BlockVector<double>  &,
 const DoFHandler< 1 > &, const ConstraintMatrix &,
  BlockVector<double>  &);
#endif
 }
 
namespace FETools
 {
#if  1  ==  1 
 template
 void back_interpolate< 1 >
 (const DoFHandler< 1 > &, const  BlockVector<float>  &,
 const FiniteElement< 1 > &,  BlockVector<float>  &);
 template
 void back_interpolate< 1 >
 (const DoFHandler< 1 > &, const ConstraintMatrix &,
 const  BlockVector<float>  &,
 const DoFHandler< 1 > &, const ConstraintMatrix &,
  BlockVector<float>  &);
 template
 void interpolation_difference< 1 >
 (const DoFHandler< 1 > &, const  BlockVector<float>  &,
 const FiniteElement< 1 > &,  BlockVector<float>  &);
 template
 void interpolation_difference< 1 >
 (const DoFHandler< 1 > &, const ConstraintMatrix &,
 const  BlockVector<float>  &,
 const DoFHandler< 1 > &, const ConstraintMatrix &,
  BlockVector<float>  &);
 template
 void project_dg< 1 >
 (const DoFHandler< 1 > &, const  BlockVector<float>  &,
 const DoFHandler< 1 > &,  BlockVector<float>  &);
 template
 void extrapolate< 1 >
 (const DoFHandler< 1 > &, const  BlockVector<float>  &,
 const DoFHandler< 1 > &,  BlockVector<float>  &);
 template
 void extrapolate< 1 >
 (const DoFHandler< 1 > &, const  BlockVector<float>  &,
 const DoFHandler< 1 > &, const ConstraintMatrix &,
  BlockVector<float>  &);
#endif
 }
 
namespace FETools
 {
#if  1  ==  1 
 template
 void back_interpolate< 1 >
 (const DoFHandler< 1 > &, const  BlockVector<long double>  &,
 const FiniteElement< 1 > &,  BlockVector<long double>  &);
 template
 void back_interpolate< 1 >
 (const DoFHandler< 1 > &, const ConstraintMatrix &,
 const  BlockVector<long double>  &,
 const DoFHandler< 1 > &, const ConstraintMatrix &,
  BlockVector<long double>  &);
 template
 void interpolation_difference< 1 >
 (const DoFHandler< 1 > &, const  BlockVector<long double>  &,
 const FiniteElement< 1 > &,  BlockVector<long double>  &);
 template
 void interpolation_difference< 1 >
 (const DoFHandler< 1 > &, const ConstraintMatrix &,
 const  BlockVector<long double>  &,
 const DoFHandler< 1 > &, const ConstraintMatrix &,
  BlockVector<long double>  &);
 template
 void project_dg< 1 >
 (const DoFHandler< 1 > &, const  BlockVector<long double>  &,
 const DoFHandler< 1 > &,  BlockVector<long double>  &);
 template
 void extrapolate< 1 >
 (const DoFHandler< 1 > &, const  BlockVector<long double>  &,
 const DoFHandler< 1 > &,  BlockVector<long double>  &);
 template
 void extrapolate< 1 >
 (const DoFHandler< 1 > &, const  BlockVector<long double>  &,
 const DoFHandler< 1 > &, const ConstraintMatrix &,
  BlockVector<long double>  &);
#endif
 }
 
namespace FETools
 {
#if  1  ==  1 
 template
 void back_interpolate< 1 >
 (const DoFHandler< 1 > &, const  parallel::distributed::Vector<double>  &,
 const FiniteElement< 1 > &,  parallel::distributed::Vector<double>  &);
 template
 void back_interpolate< 1 >
 (const DoFHandler< 1 > &, const ConstraintMatrix &,
 const  parallel::distributed::Vector<double>  &,
 const DoFHandler< 1 > &, const ConstraintMatrix &,
  parallel::distributed::Vector<double>  &);
 template
 void interpolation_difference< 1 >
 (const DoFHandler< 1 > &, const  parallel::distributed::Vector<double>  &,
 const FiniteElement< 1 > &,  parallel::distributed::Vector<double>  &);
 template
 void interpolation_difference< 1 >
 (const DoFHandler< 1 > &, const ConstraintMatrix &,
 const  parallel::distributed::Vector<double>  &,
 const DoFHandler< 1 > &, const ConstraintMatrix &,
  parallel::distributed::Vector<double>  &);
 template
 void project_dg< 1 >
 (const DoFHandler< 1 > &, const  parallel::distributed::Vector<double>  &,
 const DoFHandler< 1 > &,  parallel::distributed::Vector<double>  &);
 template
 void extrapolate< 1 >
 (const DoFHandler< 1 > &, const  parallel::distributed::Vector<double>  &,
 const DoFHandler< 1 > &,  parallel::distributed::Vector<double>  &);
 template
 void extrapolate< 1 >
 (const DoFHandler< 1 > &, const  parallel::distributed::Vector<double>  &,
 const DoFHandler< 1 > &, const ConstraintMatrix &,
  parallel::distributed::Vector<double>  &);
#endif
 }
 
namespace FETools
 {
#if  1  ==  1 
 template
 void back_interpolate< 1 >
 (const DoFHandler< 1 > &, const  parallel::distributed::Vector<float>  &,
 const FiniteElement< 1 > &,  parallel::distributed::Vector<float>  &);
 template
 void back_interpolate< 1 >
 (const DoFHandler< 1 > &, const ConstraintMatrix &,
 const  parallel::distributed::Vector<float>  &,
 const DoFHandler< 1 > &, const ConstraintMatrix &,
  parallel::distributed::Vector<float>  &);
 template
 void interpolation_difference< 1 >
 (const DoFHandler< 1 > &, const  parallel::distributed::Vector<float>  &,
 const FiniteElement< 1 > &,  parallel::distributed::Vector<float>  &);
 template
 void interpolation_difference< 1 >
 (const DoFHandler< 1 > &, const ConstraintMatrix &,
 const  parallel::distributed::Vector<float>  &,
 const DoFHandler< 1 > &, const ConstraintMatrix &,
  parallel::distributed::Vector<float>  &);
 template
 void project_dg< 1 >
 (const DoFHandler< 1 > &, const  parallel::distributed::Vector<float>  &,
 const DoFHandler< 1 > &,  parallel::distributed::Vector<float>  &);
 template
 void extrapolate< 1 >
 (const DoFHandler< 1 > &, const  parallel::distributed::Vector<float>  &,
 const DoFHandler< 1 > &,  parallel::distributed::Vector<float>  &);
 template
 void extrapolate< 1 >
 (const DoFHandler< 1 > &, const  parallel::distributed::Vector<float>  &,
 const DoFHandler< 1 > &, const ConstraintMatrix &,
  parallel::distributed::Vector<float>  &);
#endif
 }
 
namespace FETools
 {
#if  1  ==  1 
 template
 void back_interpolate< 1 >
 (const DoFHandler< 1 > &, const  parallel::distributed::Vector<long double>  &,
 const FiniteElement< 1 > &,  parallel::distributed::Vector<long double>  &);
 template
 void back_interpolate< 1 >
 (const DoFHandler< 1 > &, const ConstraintMatrix &,
 const  parallel::distributed::Vector<long double>  &,
 const DoFHandler< 1 > &, const ConstraintMatrix &,
  parallel::distributed::Vector<long double>  &);
 template
 void interpolation_difference< 1 >
 (const DoFHandler< 1 > &, const  parallel::distributed::Vector<long double>  &,
 const FiniteElement< 1 > &,  parallel::distributed::Vector<long double>  &);
 template
 void interpolation_difference< 1 >
 (const DoFHandler< 1 > &, const ConstraintMatrix &,
 const  parallel::distributed::Vector<long double>  &,
 const DoFHandler< 1 > &, const ConstraintMatrix &,
  parallel::distributed::Vector<long double>  &);
 template
 void project_dg< 1 >
 (const DoFHandler< 1 > &, const  parallel::distributed::Vector<long double>  &,
 const DoFHandler< 1 > &,  parallel::distributed::Vector<long double>  &);
 template
 void extrapolate< 1 >
 (const DoFHandler< 1 > &, const  parallel::distributed::Vector<long double>  &,
 const DoFHandler< 1 > &,  parallel::distributed::Vector<long double>  &);
 template
 void extrapolate< 1 >
 (const DoFHandler< 1 > &, const  parallel::distributed::Vector<long double>  &,
 const DoFHandler< 1 > &, const ConstraintMatrix &,
  parallel::distributed::Vector<long double>  &);
#endif
 }
 
namespace FETools
 {
#if  1  ==  1 
 template
 void back_interpolate< 1 >
 (const DoFHandler< 1 > &, const  parallel::distributed::BlockVector<double>  &,
 const FiniteElement< 1 > &,  parallel::distributed::BlockVector<double>  &);
 template
 void back_interpolate< 1 >
 (const DoFHandler< 1 > &, const ConstraintMatrix &,
 const  parallel::distributed::BlockVector<double>  &,
 const DoFHandler< 1 > &, const ConstraintMatrix &,
  parallel::distributed::BlockVector<double>  &);
 template
 void interpolation_difference< 1 >
 (const DoFHandler< 1 > &, const  parallel::distributed::BlockVector<double>  &,
 const FiniteElement< 1 > &,  parallel::distributed::BlockVector<double>  &);
 template
 void interpolation_difference< 1 >
 (const DoFHandler< 1 > &, const ConstraintMatrix &,
 const  parallel::distributed::BlockVector<double>  &,
 const DoFHandler< 1 > &, const ConstraintMatrix &,
  parallel::distributed::BlockVector<double>  &);
 template
 void project_dg< 1 >
 (const DoFHandler< 1 > &, const  parallel::distributed::BlockVector<double>  &,
 const DoFHandler< 1 > &,  parallel::distributed::BlockVector<double>  &);
 template
 void extrapolate< 1 >
 (const DoFHandler< 1 > &, const  parallel::distributed::BlockVector<double>  &,
 const DoFHandler< 1 > &,  parallel::distributed::BlockVector<double>  &);
 template
 void extrapolate< 1 >
 (const DoFHandler< 1 > &, const  parallel::distributed::BlockVector<double>  &,
 const DoFHandler< 1 > &, const ConstraintMatrix &,
  parallel::distributed::BlockVector<double>  &);
#endif
 }
 
namespace FETools
 {
#if  1  ==  1 
 template
 void back_interpolate< 1 >
 (const DoFHandler< 1 > &, const  parallel::distributed::BlockVector<float>  &,
 const FiniteElement< 1 > &,  parallel::distributed::BlockVector<float>  &);
 template
 void back_interpolate< 1 >
 (const DoFHandler< 1 > &, const ConstraintMatrix &,
 const  parallel::distributed::BlockVector<float>  &,
 const DoFHandler< 1 > &, const ConstraintMatrix &,
  parallel::distributed::BlockVector<float>  &);
 template
 void interpolation_difference< 1 >
 (const DoFHandler< 1 > &, const  parallel::distributed::BlockVector<float>  &,
 const FiniteElement< 1 > &,  parallel::distributed::BlockVector<float>  &);
 template
 void interpolation_difference< 1 >
 (const DoFHandler< 1 > &, const ConstraintMatrix &,
 const  parallel::distributed::BlockVector<float>  &,
 const DoFHandler< 1 > &, const ConstraintMatrix &,
  parallel::distributed::BlockVector<float>  &);
 template
 void project_dg< 1 >
 (const DoFHandler< 1 > &, const  parallel::distributed::BlockVector<float>  &,
 const DoFHandler< 1 > &,  parallel::distributed::BlockVector<float>  &);
 template
 void extrapolate< 1 >
 (const DoFHandler< 1 > &, const  parallel::distributed::BlockVector<float>  &,
 const DoFHandler< 1 > &,  parallel::distributed::BlockVector<float>  &);
 template
 void extrapolate< 1 >
 (const DoFHandler< 1 > &, const  parallel::distributed::BlockVector<float>  &,
 const DoFHandler< 1 > &, const ConstraintMatrix &,
  parallel::distributed::BlockVector<float>  &);
#endif
 }
 
namespace FETools
 {
#if  1  ==  1 
 template
 void back_interpolate< 1 >
 (const DoFHandler< 1 > &, const  parallel::distributed::BlockVector<long double>  &,
 const FiniteElement< 1 > &,  parallel::distributed::BlockVector<long double>  &);
 template
 void back_interpolate< 1 >
 (const DoFHandler< 1 > &, const ConstraintMatrix &,
 const  parallel::distributed::BlockVector<long double>  &,
 const DoFHandler< 1 > &, const ConstraintMatrix &,
  parallel::distributed::BlockVector<long double>  &);
 template
 void interpolation_difference< 1 >
 (const DoFHandler< 1 > &, const  parallel::distributed::BlockVector<long double>  &,
 const FiniteElement< 1 > &,  parallel::distributed::BlockVector<long double>  &);
 template
 void interpolation_difference< 1 >
 (const DoFHandler< 1 > &, const ConstraintMatrix &,
 const  parallel::distributed::BlockVector<long double>  &,
 const DoFHandler< 1 > &, const ConstraintMatrix &,
  parallel::distributed::BlockVector<long double>  &);
 template
 void project_dg< 1 >
 (const DoFHandler< 1 > &, const  parallel::distributed::BlockVector<long double>  &,
 const DoFHandler< 1 > &,  parallel::distributed::BlockVector<long double>  &);
 template
 void extrapolate< 1 >
 (const DoFHandler< 1 > &, const  parallel::distributed::BlockVector<long double>  &,
 const DoFHandler< 1 > &,  parallel::distributed::BlockVector<long double>  &);
 template
 void extrapolate< 1 >
 (const DoFHandler< 1 > &, const  parallel::distributed::BlockVector<long double>  &,
 const DoFHandler< 1 > &, const ConstraintMatrix &,
  parallel::distributed::BlockVector<long double>  &);
#endif
 }
 
namespace FETools
 {
#if  1  ==  2 
 template
 void back_interpolate< 1 >
 (const DoFHandler< 1 > &, const  Vector<double>  &,
 const FiniteElement< 1 > &,  Vector<double>  &);
 template
 void back_interpolate< 1 >
 (const DoFHandler< 1 > &, const ConstraintMatrix &,
 const  Vector<double>  &,
 const DoFHandler< 1 > &, const ConstraintMatrix &,
  Vector<double>  &);
 template
 void interpolation_difference< 1 >
 (const DoFHandler< 1 > &, const  Vector<double>  &,
 const FiniteElement< 1 > &,  Vector<double>  &);
 template
 void interpolation_difference< 1 >
 (const DoFHandler< 1 > &, const ConstraintMatrix &,
 const  Vector<double>  &,
 const DoFHandler< 1 > &, const ConstraintMatrix &,
  Vector<double>  &);
 template
 void project_dg< 1 >
 (const DoFHandler< 1 > &, const  Vector<double>  &,
 const DoFHandler< 1 > &,  Vector<double>  &);
 template
 void extrapolate< 1 >
 (const DoFHandler< 1 > &, const  Vector<double>  &,
 const DoFHandler< 1 > &,  Vector<double>  &);
 template
 void extrapolate< 1 >
 (const DoFHandler< 1 > &, const  Vector<double>  &,
 const DoFHandler< 1 > &, const ConstraintMatrix &,
  Vector<double>  &);
#endif
 }
 
namespace FETools
 {
#if  1  ==  2 
 template
 void back_interpolate< 1 >
 (const DoFHandler< 1 > &, const  Vector<float>  &,
 const FiniteElement< 1 > &,  Vector<float>  &);
 template
 void back_interpolate< 1 >
 (const DoFHandler< 1 > &, const ConstraintMatrix &,
 const  Vector<float>  &,
 const DoFHandler< 1 > &, const ConstraintMatrix &,
  Vector<float>  &);
 template
 void interpolation_difference< 1 >
 (const DoFHandler< 1 > &, const  Vector<float>  &,
 const FiniteElement< 1 > &,  Vector<float>  &);
 template
 void interpolation_difference< 1 >
 (const DoFHandler< 1 > &, const ConstraintMatrix &,
 const  Vector<float>  &,
 const DoFHandler< 1 > &, const ConstraintMatrix &,
  Vector<float>  &);
 template
 void project_dg< 1 >
 (const DoFHandler< 1 > &, const  Vector<float>  &,
 const DoFHandler< 1 > &,  Vector<float>  &);
 template
 void extrapolate< 1 >
 (const DoFHandler< 1 > &, const  Vector<float>  &,
 const DoFHandler< 1 > &,  Vector<float>  &);
 template
 void extrapolate< 1 >
 (const DoFHandler< 1 > &, const  Vector<float>  &,
 const DoFHandler< 1 > &, const ConstraintMatrix &,
  Vector<float>  &);
#endif
 }
 
namespace FETools
 {
#if  1  ==  2 
 template
 void back_interpolate< 1 >
 (const DoFHandler< 1 > &, const  Vector<long double>  &,
 const FiniteElement< 1 > &,  Vector<long double>  &);
 template
 void back_interpolate< 1 >
 (const DoFHandler< 1 > &, const ConstraintMatrix &,
 const  Vector<long double>  &,
 const DoFHandler< 1 > &, const ConstraintMatrix &,
  Vector<long double>  &);
 template
 void interpolation_difference< 1 >
 (const DoFHandler< 1 > &, const  Vector<long double>  &,
 const FiniteElement< 1 > &,  Vector<long double>  &);
 template
 void interpolation_difference< 1 >
 (const DoFHandler< 1 > &, const ConstraintMatrix &,
 const  Vector<long double>  &,
 const DoFHandler< 1 > &, const ConstraintMatrix &,
  Vector<long double>  &);
 template
 void project_dg< 1 >
 (const DoFHandler< 1 > &, const  Vector<long double>  &,
 const DoFHandler< 1 > &,  Vector<long double>  &);
 template
 void extrapolate< 1 >
 (const DoFHandler< 1 > &, const  Vector<long double>  &,
 const DoFHandler< 1 > &,  Vector<long double>  &);
 template
 void extrapolate< 1 >
 (const DoFHandler< 1 > &, const  Vector<long double>  &,
 const DoFHandler< 1 > &, const ConstraintMatrix &,
  Vector<long double>  &);
#endif
 }
 
namespace FETools
 {
#if  1  ==  2 
 template
 void back_interpolate< 1 >
 (const DoFHandler< 1 > &, const  BlockVector<double>  &,
 const FiniteElement< 1 > &,  BlockVector<double>  &);
 template
 void back_interpolate< 1 >
 (const DoFHandler< 1 > &, const ConstraintMatrix &,
 const  BlockVector<double>  &,
 const DoFHandler< 1 > &, const ConstraintMatrix &,
  BlockVector<double>  &);
 template
 void interpolation_difference< 1 >
 (const DoFHandler< 1 > &, const  BlockVector<double>  &,
 const FiniteElement< 1 > &,  BlockVector<double>  &);
 template
 void interpolation_difference< 1 >
 (const DoFHandler< 1 > &, const ConstraintMatrix &,
 const  BlockVector<double>  &,
 const DoFHandler< 1 > &, const ConstraintMatrix &,
  BlockVector<double>  &);
 template
 void project_dg< 1 >
 (const DoFHandler< 1 > &, const  BlockVector<double>  &,
 const DoFHandler< 1 > &,  BlockVector<double>  &);
 template
 void extrapolate< 1 >
 (const DoFHandler< 1 > &, const  BlockVector<double>  &,
 const DoFHandler< 1 > &,  BlockVector<double>  &);
 template
 void extrapolate< 1 >
 (const DoFHandler< 1 > &, const  BlockVector<double>  &,
 const DoFHandler< 1 > &, const ConstraintMatrix &,
  BlockVector<double>  &);
#endif
 }
 
namespace FETools
 {
#if  1  ==  2 
 template
 void back_interpolate< 1 >
 (const DoFHandler< 1 > &, const  BlockVector<float>  &,
 const FiniteElement< 1 > &,  BlockVector<float>  &);
 template
 void back_interpolate< 1 >
 (const DoFHandler< 1 > &, const ConstraintMatrix &,
 const  BlockVector<float>  &,
 const DoFHandler< 1 > &, const ConstraintMatrix &,
  BlockVector<float>  &);
 template
 void interpolation_difference< 1 >
 (const DoFHandler< 1 > &, const  BlockVector<float>  &,
 const FiniteElement< 1 > &,  BlockVector<float>  &);
 template
 void interpolation_difference< 1 >
 (const DoFHandler< 1 > &, const ConstraintMatrix &,
 const  BlockVector<float>  &,
 const DoFHandler< 1 > &, const ConstraintMatrix &,
  BlockVector<float>  &);
 template
 void project_dg< 1 >
 (const DoFHandler< 1 > &, const  BlockVector<float>  &,
 const DoFHandler< 1 > &,  BlockVector<float>  &);
 template
 void extrapolate< 1 >
 (const DoFHandler< 1 > &, const  BlockVector<float>  &,
 const DoFHandler< 1 > &,  BlockVector<float>  &);
 template
 void extrapolate< 1 >
 (const DoFHandler< 1 > &, const  BlockVector<float>  &,
 const DoFHandler< 1 > &, const ConstraintMatrix &,
  BlockVector<float>  &);
#endif
 }
 
namespace FETools
 {
#if  1  ==  2 
 template
 void back_interpolate< 1 >
 (const DoFHandler< 1 > &, const  BlockVector<long double>  &,
 const FiniteElement< 1 > &,  BlockVector<long double>  &);
 template
 void back_interpolate< 1 >
 (const DoFHandler< 1 > &, const ConstraintMatrix &,
 const  BlockVector<long double>  &,
 const DoFHandler< 1 > &, const ConstraintMatrix &,
  BlockVector<long double>  &);
 template
 void interpolation_difference< 1 >
 (const DoFHandler< 1 > &, const  BlockVector<long double>  &,
 const FiniteElement< 1 > &,  BlockVector<long double>  &);
 template
 void interpolation_difference< 1 >
 (const DoFHandler< 1 > &, const ConstraintMatrix &,
 const  BlockVector<long double>  &,
 const DoFHandler< 1 > &, const ConstraintMatrix &,
  BlockVector<long double>  &);
 template
 void project_dg< 1 >
 (const DoFHandler< 1 > &, const  BlockVector<long double>  &,
 const DoFHandler< 1 > &,  BlockVector<long double>  &);
 template
 void extrapolate< 1 >
 (const DoFHandler< 1 > &, const  BlockVector<long double>  &,
 const DoFHandler< 1 > &,  BlockVector<long double>  &);
 template
 void extrapolate< 1 >
 (const DoFHandler< 1 > &, const  BlockVector<long double>  &,
 const DoFHandler< 1 > &, const ConstraintMatrix &,
  BlockVector<long double>  &);
#endif
 }
 
namespace FETools
 {
#if  1  ==  2 
 template
 void back_interpolate< 1 >
 (const DoFHandler< 1 > &, const  parallel::distributed::Vector<double>  &,
 const FiniteElement< 1 > &,  parallel::distributed::Vector<double>  &);
 template
 void back_interpolate< 1 >
 (const DoFHandler< 1 > &, const ConstraintMatrix &,
 const  parallel::distributed::Vector<double>  &,
 const DoFHandler< 1 > &, const ConstraintMatrix &,
  parallel::distributed::Vector<double>  &);
 template
 void interpolation_difference< 1 >
 (const DoFHandler< 1 > &, const  parallel::distributed::Vector<double>  &,
 const FiniteElement< 1 > &,  parallel::distributed::Vector<double>  &);
 template
 void interpolation_difference< 1 >
 (const DoFHandler< 1 > &, const ConstraintMatrix &,
 const  parallel::distributed::Vector<double>  &,
 const DoFHandler< 1 > &, const ConstraintMatrix &,
  parallel::distributed::Vector<double>  &);
 template
 void project_dg< 1 >
 (const DoFHandler< 1 > &, const  parallel::distributed::Vector<double>  &,
 const DoFHandler< 1 > &,  parallel::distributed::Vector<double>  &);
 template
 void extrapolate< 1 >
 (const DoFHandler< 1 > &, const  parallel::distributed::Vector<double>  &,
 const DoFHandler< 1 > &,  parallel::distributed::Vector<double>  &);
 template
 void extrapolate< 1 >
 (const DoFHandler< 1 > &, const  parallel::distributed::Vector<double>  &,
 const DoFHandler< 1 > &, const ConstraintMatrix &,
  parallel::distributed::Vector<double>  &);
#endif
 }
 
namespace FETools
 {
#if  1  ==  2 
 template
 void back_interpolate< 1 >
 (const DoFHandler< 1 > &, const  parallel::distributed::Vector<float>  &,
 const FiniteElement< 1 > &,  parallel::distributed::Vector<float>  &);
 template
 void back_interpolate< 1 >
 (const DoFHandler< 1 > &, const ConstraintMatrix &,
 const  parallel::distributed::Vector<float>  &,
 const DoFHandler< 1 > &, const ConstraintMatrix &,
  parallel::distributed::Vector<float>  &);
 template
 void interpolation_difference< 1 >
 (const DoFHandler< 1 > &, const  parallel::distributed::Vector<float>  &,
 const FiniteElement< 1 > &,  parallel::distributed::Vector<float>  &);
 template
 void interpolation_difference< 1 >
 (const DoFHandler< 1 > &, const ConstraintMatrix &,
 const  parallel::distributed::Vector<float>  &,
 const DoFHandler< 1 > &, const ConstraintMatrix &,
  parallel::distributed::Vector<float>  &);
 template
 void project_dg< 1 >
 (const DoFHandler< 1 > &, const  parallel::distributed::Vector<float>  &,
 const DoFHandler< 1 > &,  parallel::distributed::Vector<float>  &);
 template
 void extrapolate< 1 >
 (const DoFHandler< 1 > &, const  parallel::distributed::Vector<float>  &,
 const DoFHandler< 1 > &,  parallel::distributed::Vector<float>  &);
 template
 void extrapolate< 1 >
 (const DoFHandler< 1 > &, const  parallel::distributed::Vector<float>  &,
 const DoFHandler< 1 > &, const ConstraintMatrix &,
  parallel::distributed::Vector<float>  &);
#endif
 }
 
namespace FETools
 {
#if  1  ==  2 
 template
 void back_interpolate< 1 >
 (const DoFHandler< 1 > &, const  parallel::distributed::Vector<long double>  &,
 const FiniteElement< 1 > &,  parallel::distributed::Vector<long double>  &);
 template
 void back_interpolate< 1 >
 (const DoFHandler< 1 > &, const ConstraintMatrix &,
 const  parallel::distributed::Vector<long double>  &,
 const DoFHandler< 1 > &, const ConstraintMatrix &,
  parallel::distributed::Vector<long double>  &);
 template
 void interpolation_difference< 1 >
 (const DoFHandler< 1 > &, const  parallel::distributed::Vector<long double>  &,
 const FiniteElement< 1 > &,  parallel::distributed::Vector<long double>  &);
 template
 void interpolation_difference< 1 >
 (const DoFHandler< 1 > &, const ConstraintMatrix &,
 const  parallel::distributed::Vector<long double>  &,
 const DoFHandler< 1 > &, const ConstraintMatrix &,
  parallel::distributed::Vector<long double>  &);
 template
 void project_dg< 1 >
 (const DoFHandler< 1 > &, const  parallel::distributed::Vector<long double>  &,
 const DoFHandler< 1 > &,  parallel::distributed::Vector<long double>  &);
 template
 void extrapolate< 1 >
 (const DoFHandler< 1 > &, const  parallel::distributed::Vector<long double>  &,
 const DoFHandler< 1 > &,  parallel::distributed::Vector<long double>  &);
 template
 void extrapolate< 1 >
 (const DoFHandler< 1 > &, const  parallel::distributed::Vector<long double>  &,
 const DoFHandler< 1 > &, const ConstraintMatrix &,
  parallel::distributed::Vector<long double>  &);
#endif
 }
 
namespace FETools
 {
#if  1  ==  2 
 template
 void back_interpolate< 1 >
 (const DoFHandler< 1 > &, const  parallel::distributed::BlockVector<double>  &,
 const FiniteElement< 1 > &,  parallel::distributed::BlockVector<double>  &);
 template
 void back_interpolate< 1 >
 (const DoFHandler< 1 > &, const ConstraintMatrix &,
 const  parallel::distributed::BlockVector<double>  &,
 const DoFHandler< 1 > &, const ConstraintMatrix &,
  parallel::distributed::BlockVector<double>  &);
 template
 void interpolation_difference< 1 >
 (const DoFHandler< 1 > &, const  parallel::distributed::BlockVector<double>  &,
 const FiniteElement< 1 > &,  parallel::distributed::BlockVector<double>  &);
 template
 void interpolation_difference< 1 >
 (const DoFHandler< 1 > &, const ConstraintMatrix &,
 const  parallel::distributed::BlockVector<double>  &,
 const DoFHandler< 1 > &, const ConstraintMatrix &,
  parallel::distributed::BlockVector<double>  &);
 template
 void project_dg< 1 >
 (const DoFHandler< 1 > &, const  parallel::distributed::BlockVector<double>  &,
 const DoFHandler< 1 > &,  parallel::distributed::BlockVector<double>  &);
 template
 void extrapolate< 1 >
 (const DoFHandler< 1 > &, const  parallel::distributed::BlockVector<double>  &,
 const DoFHandler< 1 > &,  parallel::distributed::BlockVector<double>  &);
 template
 void extrapolate< 1 >
 (const DoFHandler< 1 > &, const  parallel::distributed::BlockVector<double>  &,
 const DoFHandler< 1 > &, const ConstraintMatrix &,
  parallel::distributed::BlockVector<double>  &);
#endif
 }
 
namespace FETools
 {
#if  1  ==  2 
 template
 void back_interpolate< 1 >
 (const DoFHandler< 1 > &, const  parallel::distributed::BlockVector<float>  &,
 const FiniteElement< 1 > &,  parallel::distributed::BlockVector<float>  &);
 template
 void back_interpolate< 1 >
 (const DoFHandler< 1 > &, const ConstraintMatrix &,
 const  parallel::distributed::BlockVector<float>  &,
 const DoFHandler< 1 > &, const ConstraintMatrix &,
  parallel::distributed::BlockVector<float>  &);
 template
 void interpolation_difference< 1 >
 (const DoFHandler< 1 > &, const  parallel::distributed::BlockVector<float>  &,
 const FiniteElement< 1 > &,  parallel::distributed::BlockVector<float>  &);
 template
 void interpolation_difference< 1 >
 (const DoFHandler< 1 > &, const ConstraintMatrix &,
 const  parallel::distributed::BlockVector<float>  &,
 const DoFHandler< 1 > &, const ConstraintMatrix &,
  parallel::distributed::BlockVector<float>  &);
 template
 void project_dg< 1 >
 (const DoFHandler< 1 > &, const  parallel::distributed::BlockVector<float>  &,
 const DoFHandler< 1 > &,  parallel::distributed::BlockVector<float>  &);
 template
 void extrapolate< 1 >
 (const DoFHandler< 1 > &, const  parallel::distributed::BlockVector<float>  &,
 const DoFHandler< 1 > &,  parallel::distributed::BlockVector<float>  &);
 template
 void extrapolate< 1 >
 (const DoFHandler< 1 > &, const  parallel::distributed::BlockVector<float>  &,
 const DoFHandler< 1 > &, const ConstraintMatrix &,
  parallel::distributed::BlockVector<float>  &);
#endif
 }
 
namespace FETools
 {
#if  1  ==  2 
 template
 void back_interpolate< 1 >
 (const DoFHandler< 1 > &, const  parallel::distributed::BlockVector<long double>  &,
 const FiniteElement< 1 > &,  parallel::distributed::BlockVector<long double>  &);
 template
 void back_interpolate< 1 >
 (const DoFHandler< 1 > &, const ConstraintMatrix &,
 const  parallel::distributed::BlockVector<long double>  &,
 const DoFHandler< 1 > &, const ConstraintMatrix &,
  parallel::distributed::BlockVector<long double>  &);
 template
 void interpolation_difference< 1 >
 (const DoFHandler< 1 > &, const  parallel::distributed::BlockVector<long double>  &,
 const FiniteElement< 1 > &,  parallel::distributed::BlockVector<long double>  &);
 template
 void interpolation_difference< 1 >
 (const DoFHandler< 1 > &, const ConstraintMatrix &,
 const  parallel::distributed::BlockVector<long double>  &,
 const DoFHandler< 1 > &, const ConstraintMatrix &,
  parallel::distributed::BlockVector<long double>  &);
 template
 void project_dg< 1 >
 (const DoFHandler< 1 > &, const  parallel::distributed::BlockVector<long double>  &,
 const DoFHandler< 1 > &,  parallel::distributed::BlockVector<long double>  &);
 template
 void extrapolate< 1 >
 (const DoFHandler< 1 > &, const  parallel::distributed::BlockVector<long double>  &,
 const DoFHandler< 1 > &,  parallel::distributed::BlockVector<long double>  &);
 template
 void extrapolate< 1 >
 (const DoFHandler< 1 > &, const  parallel::distributed::BlockVector<long double>  &,
 const DoFHandler< 1 > &, const ConstraintMatrix &,
  parallel::distributed::BlockVector<long double>  &);
#endif
 }
 
namespace FETools
 {
#if  1  ==  3 
 template
 void back_interpolate< 1 >
 (const DoFHandler< 1 > &, const  Vector<double>  &,
 const FiniteElement< 1 > &,  Vector<double>  &);
 template
 void back_interpolate< 1 >
 (const DoFHandler< 1 > &, const ConstraintMatrix &,
 const  Vector<double>  &,
 const DoFHandler< 1 > &, const ConstraintMatrix &,
  Vector<double>  &);
 template
 void interpolation_difference< 1 >
 (const DoFHandler< 1 > &, const  Vector<double>  &,
 const FiniteElement< 1 > &,  Vector<double>  &);
 template
 void interpolation_difference< 1 >
 (const DoFHandler< 1 > &, const ConstraintMatrix &,
 const  Vector<double>  &,
 const DoFHandler< 1 > &, const ConstraintMatrix &,
  Vector<double>  &);
 template
 void project_dg< 1 >
 (const DoFHandler< 1 > &, const  Vector<double>  &,
 const DoFHandler< 1 > &,  Vector<double>  &);
 template
 void extrapolate< 1 >
 (const DoFHandler< 1 > &, const  Vector<double>  &,
 const DoFHandler< 1 > &,  Vector<double>  &);
 template
 void extrapolate< 1 >
 (const DoFHandler< 1 > &, const  Vector<double>  &,
 const DoFHandler< 1 > &, const ConstraintMatrix &,
  Vector<double>  &);
#endif
 }
 
namespace FETools
 {
#if  1  ==  3 
 template
 void back_interpolate< 1 >
 (const DoFHandler< 1 > &, const  Vector<float>  &,
 const FiniteElement< 1 > &,  Vector<float>  &);
 template
 void back_interpolate< 1 >
 (const DoFHandler< 1 > &, const ConstraintMatrix &,
 const  Vector<float>  &,
 const DoFHandler< 1 > &, const ConstraintMatrix &,
  Vector<float>  &);
 template
 void interpolation_difference< 1 >
 (const DoFHandler< 1 > &, const  Vector<float>  &,
 const FiniteElement< 1 > &,  Vector<float>  &);
 template
 void interpolation_difference< 1 >
 (const DoFHandler< 1 > &, const ConstraintMatrix &,
 const  Vector<float>  &,
 const DoFHandler< 1 > &, const ConstraintMatrix &,
  Vector<float>  &);
 template
 void project_dg< 1 >
 (const DoFHandler< 1 > &, const  Vector<float>  &,
 const DoFHandler< 1 > &,  Vector<float>  &);
 template
 void extrapolate< 1 >
 (const DoFHandler< 1 > &, const  Vector<float>  &,
 const DoFHandler< 1 > &,  Vector<float>  &);
 template
 void extrapolate< 1 >
 (const DoFHandler< 1 > &, const  Vector<float>  &,
 const DoFHandler< 1 > &, const ConstraintMatrix &,
  Vector<float>  &);
#endif
 }
 
namespace FETools
 {
#if  1  ==  3 
 template
 void back_interpolate< 1 >
 (const DoFHandler< 1 > &, const  Vector<long double>  &,
 const FiniteElement< 1 > &,  Vector<long double>  &);
 template
 void back_interpolate< 1 >
 (const DoFHandler< 1 > &, const ConstraintMatrix &,
 const  Vector<long double>  &,
 const DoFHandler< 1 > &, const ConstraintMatrix &,
  Vector<long double>  &);
 template
 void interpolation_difference< 1 >
 (const DoFHandler< 1 > &, const  Vector<long double>  &,
 const FiniteElement< 1 > &,  Vector<long double>  &);
 template
 void interpolation_difference< 1 >
 (const DoFHandler< 1 > &, const ConstraintMatrix &,
 const  Vector<long double>  &,
 const DoFHandler< 1 > &, const ConstraintMatrix &,
  Vector<long double>  &);
 template
 void project_dg< 1 >
 (const DoFHandler< 1 > &, const  Vector<long double>  &,
 const DoFHandler< 1 > &,  Vector<long double>  &);
 template
 void extrapolate< 1 >
 (const DoFHandler< 1 > &, const  Vector<long double>  &,
 const DoFHandler< 1 > &,  Vector<long double>  &);
 template
 void extrapolate< 1 >
 (const DoFHandler< 1 > &, const  Vector<long double>  &,
 const DoFHandler< 1 > &, const ConstraintMatrix &,
  Vector<long double>  &);
#endif
 }
 
namespace FETools
 {
#if  1  ==  3 
 template
 void back_interpolate< 1 >
 (const DoFHandler< 1 > &, const  BlockVector<double>  &,
 const FiniteElement< 1 > &,  BlockVector<double>  &);
 template
 void back_interpolate< 1 >
 (const DoFHandler< 1 > &, const ConstraintMatrix &,
 const  BlockVector<double>  &,
 const DoFHandler< 1 > &, const ConstraintMatrix &,
  BlockVector<double>  &);
 template
 void interpolation_difference< 1 >
 (const DoFHandler< 1 > &, const  BlockVector<double>  &,
 const FiniteElement< 1 > &,  BlockVector<double>  &);
 template
 void interpolation_difference< 1 >
 (const DoFHandler< 1 > &, const ConstraintMatrix &,
 const  BlockVector<double>  &,
 const DoFHandler< 1 > &, const ConstraintMatrix &,
  BlockVector<double>  &);
 template
 void project_dg< 1 >
 (const DoFHandler< 1 > &, const  BlockVector<double>  &,
 const DoFHandler< 1 > &,  BlockVector<double>  &);
 template
 void extrapolate< 1 >
 (const DoFHandler< 1 > &, const  BlockVector<double>  &,
 const DoFHandler< 1 > &,  BlockVector<double>  &);
 template
 void extrapolate< 1 >
 (const DoFHandler< 1 > &, const  BlockVector<double>  &,
 const DoFHandler< 1 > &, const ConstraintMatrix &,
  BlockVector<double>  &);
#endif
 }
 
namespace FETools
 {
#if  1  ==  3 
 template
 void back_interpolate< 1 >
 (const DoFHandler< 1 > &, const  BlockVector<float>  &,
 const FiniteElement< 1 > &,  BlockVector<float>  &);
 template
 void back_interpolate< 1 >
 (const DoFHandler< 1 > &, const ConstraintMatrix &,
 const  BlockVector<float>  &,
 const DoFHandler< 1 > &, const ConstraintMatrix &,
  BlockVector<float>  &);
 template
 void interpolation_difference< 1 >
 (const DoFHandler< 1 > &, const  BlockVector<float>  &,
 const FiniteElement< 1 > &,  BlockVector<float>  &);
 template
 void interpolation_difference< 1 >
 (const DoFHandler< 1 > &, const ConstraintMatrix &,
 const  BlockVector<float>  &,
 const DoFHandler< 1 > &, const ConstraintMatrix &,
  BlockVector<float>  &);
 template
 void project_dg< 1 >
 (const DoFHandler< 1 > &, const  BlockVector<float>  &,
 const DoFHandler< 1 > &,  BlockVector<float>  &);
 template
 void extrapolate< 1 >
 (const DoFHandler< 1 > &, const  BlockVector<float>  &,
 const DoFHandler< 1 > &,  BlockVector<float>  &);
 template
 void extrapolate< 1 >
 (const DoFHandler< 1 > &, const  BlockVector<float>  &,
 const DoFHandler< 1 > &, const ConstraintMatrix &,
  BlockVector<float>  &);
#endif
 }
 
namespace FETools
 {
#if  1  ==  3 
 template
 void back_interpolate< 1 >
 (const DoFHandler< 1 > &, const  BlockVector<long double>  &,
 const FiniteElement< 1 > &,  BlockVector<long double>  &);
 template
 void back_interpolate< 1 >
 (const DoFHandler< 1 > &, const ConstraintMatrix &,
 const  BlockVector<long double>  &,
 const DoFHandler< 1 > &, const ConstraintMatrix &,
  BlockVector<long double>  &);
 template
 void interpolation_difference< 1 >
 (const DoFHandler< 1 > &, const  BlockVector<long double>  &,
 const FiniteElement< 1 > &,  BlockVector<long double>  &);
 template
 void interpolation_difference< 1 >
 (const DoFHandler< 1 > &, const ConstraintMatrix &,
 const  BlockVector<long double>  &,
 const DoFHandler< 1 > &, const ConstraintMatrix &,
  BlockVector<long double>  &);
 template
 void project_dg< 1 >
 (const DoFHandler< 1 > &, const  BlockVector<long double>  &,
 const DoFHandler< 1 > &,  BlockVector<long double>  &);
 template
 void extrapolate< 1 >
 (const DoFHandler< 1 > &, const  BlockVector<long double>  &,
 const DoFHandler< 1 > &,  BlockVector<long double>  &);
 template
 void extrapolate< 1 >
 (const DoFHandler< 1 > &, const  BlockVector<long double>  &,
 const DoFHandler< 1 > &, const ConstraintMatrix &,
  BlockVector<long double>  &);
#endif
 }
 
namespace FETools
 {
#if  1  ==  3 
 template
 void back_interpolate< 1 >
 (const DoFHandler< 1 > &, const  parallel::distributed::Vector<double>  &,
 const FiniteElement< 1 > &,  parallel::distributed::Vector<double>  &);
 template
 void back_interpolate< 1 >
 (const DoFHandler< 1 > &, const ConstraintMatrix &,
 const  parallel::distributed::Vector<double>  &,
 const DoFHandler< 1 > &, const ConstraintMatrix &,
  parallel::distributed::Vector<double>  &);
 template
 void interpolation_difference< 1 >
 (const DoFHandler< 1 > &, const  parallel::distributed::Vector<double>  &,
 const FiniteElement< 1 > &,  parallel::distributed::Vector<double>  &);
 template
 void interpolation_difference< 1 >
 (const DoFHandler< 1 > &, const ConstraintMatrix &,
 const  parallel::distributed::Vector<double>  &,
 const DoFHandler< 1 > &, const ConstraintMatrix &,
  parallel::distributed::Vector<double>  &);
 template
 void project_dg< 1 >
 (const DoFHandler< 1 > &, const  parallel::distributed::Vector<double>  &,
 const DoFHandler< 1 > &,  parallel::distributed::Vector<double>  &);
 template
 void extrapolate< 1 >
 (const DoFHandler< 1 > &, const  parallel::distributed::Vector<double>  &,
 const DoFHandler< 1 > &,  parallel::distributed::Vector<double>  &);
 template
 void extrapolate< 1 >
 (const DoFHandler< 1 > &, const  parallel::distributed::Vector<double>  &,
 const DoFHandler< 1 > &, const ConstraintMatrix &,
  parallel::distributed::Vector<double>  &);
#endif
 }
 
namespace FETools
 {
#if  1  ==  3 
 template
 void back_interpolate< 1 >
 (const DoFHandler< 1 > &, const  parallel::distributed::Vector<float>  &,
 const FiniteElement< 1 > &,  parallel::distributed::Vector<float>  &);
 template
 void back_interpolate< 1 >
 (const DoFHandler< 1 > &, const ConstraintMatrix &,
 const  parallel::distributed::Vector<float>  &,
 const DoFHandler< 1 > &, const ConstraintMatrix &,
  parallel::distributed::Vector<float>  &);
 template
 void interpolation_difference< 1 >
 (const DoFHandler< 1 > &, const  parallel::distributed::Vector<float>  &,
 const FiniteElement< 1 > &,  parallel::distributed::Vector<float>  &);
 template
 void interpolation_difference< 1 >
 (const DoFHandler< 1 > &, const ConstraintMatrix &,
 const  parallel::distributed::Vector<float>  &,
 const DoFHandler< 1 > &, const ConstraintMatrix &,
  parallel::distributed::Vector<float>  &);
 template
 void project_dg< 1 >
 (const DoFHandler< 1 > &, const  parallel::distributed::Vector<float>  &,
 const DoFHandler< 1 > &,  parallel::distributed::Vector<float>  &);
 template
 void extrapolate< 1 >
 (const DoFHandler< 1 > &, const  parallel::distributed::Vector<float>  &,
 const DoFHandler< 1 > &,  parallel::distributed::Vector<float>  &);
 template
 void extrapolate< 1 >
 (const DoFHandler< 1 > &, const  parallel::distributed::Vector<float>  &,
 const DoFHandler< 1 > &, const ConstraintMatrix &,
  parallel::distributed::Vector<float>  &);
#endif
 }
 
namespace FETools
 {
#if  1  ==  3 
 template
 void back_interpolate< 1 >
 (const DoFHandler< 1 > &, const  parallel::distributed::Vector<long double>  &,
 const FiniteElement< 1 > &,  parallel::distributed::Vector<long double>  &);
 template
 void back_interpolate< 1 >
 (const DoFHandler< 1 > &, const ConstraintMatrix &,
 const  parallel::distributed::Vector<long double>  &,
 const DoFHandler< 1 > &, const ConstraintMatrix &,
  parallel::distributed::Vector<long double>  &);
 template
 void interpolation_difference< 1 >
 (const DoFHandler< 1 > &, const  parallel::distributed::Vector<long double>  &,
 const FiniteElement< 1 > &,  parallel::distributed::Vector<long double>  &);
 template
 void interpolation_difference< 1 >
 (const DoFHandler< 1 > &, const ConstraintMatrix &,
 const  parallel::distributed::Vector<long double>  &,
 const DoFHandler< 1 > &, const ConstraintMatrix &,
  parallel::distributed::Vector<long double>  &);
 template
 void project_dg< 1 >
 (const DoFHandler< 1 > &, const  parallel::distributed::Vector<long double>  &,
 const DoFHandler< 1 > &,  parallel::distributed::Vector<long double>  &);
 template
 void extrapolate< 1 >
 (const DoFHandler< 1 > &, const  parallel::distributed::Vector<long double>  &,
 const DoFHandler< 1 > &,  parallel::distributed::Vector<long double>  &);
 template
 void extrapolate< 1 >
 (const DoFHandler< 1 > &, const  parallel::distributed::Vector<long double>  &,
 const DoFHandler< 1 > &, const ConstraintMatrix &,
  parallel::distributed::Vector<long double>  &);
#endif
 }
 
namespace FETools
 {
#if  1  ==  3 
 template
 void back_interpolate< 1 >
 (const DoFHandler< 1 > &, const  parallel::distributed::BlockVector<double>  &,
 const FiniteElement< 1 > &,  parallel::distributed::BlockVector<double>  &);
 template
 void back_interpolate< 1 >
 (const DoFHandler< 1 > &, const ConstraintMatrix &,
 const  parallel::distributed::BlockVector<double>  &,
 const DoFHandler< 1 > &, const ConstraintMatrix &,
  parallel::distributed::BlockVector<double>  &);
 template
 void interpolation_difference< 1 >
 (const DoFHandler< 1 > &, const  parallel::distributed::BlockVector<double>  &,
 const FiniteElement< 1 > &,  parallel::distributed::BlockVector<double>  &);
 template
 void interpolation_difference< 1 >
 (const DoFHandler< 1 > &, const ConstraintMatrix &,
 const  parallel::distributed::BlockVector<double>  &,
 const DoFHandler< 1 > &, const ConstraintMatrix &,
  parallel::distributed::BlockVector<double>  &);
 template
 void project_dg< 1 >
 (const DoFHandler< 1 > &, const  parallel::distributed::BlockVector<double>  &,
 const DoFHandler< 1 > &,  parallel::distributed::BlockVector<double>  &);
 template
 void extrapolate< 1 >
 (const DoFHandler< 1 > &, const  parallel::distributed::BlockVector<double>  &,
 const DoFHandler< 1 > &,  parallel::distributed::BlockVector<double>  &);
 template
 void extrapolate< 1 >
 (const DoFHandler< 1 > &, const  parallel::distributed::BlockVector<double>  &,
 const DoFHandler< 1 > &, const ConstraintMatrix &,
  parallel::distributed::BlockVector<double>  &);
#endif
 }
 
namespace FETools
 {
#if  1  ==  3 
 template
 void back_interpolate< 1 >
 (const DoFHandler< 1 > &, const  parallel::distributed::BlockVector<float>  &,
 const FiniteElement< 1 > &,  parallel::distributed::BlockVector<float>  &);
 template
 void back_interpolate< 1 >
 (const DoFHandler< 1 > &, const ConstraintMatrix &,
 const  parallel::distributed::BlockVector<float>  &,
 const DoFHandler< 1 > &, const ConstraintMatrix &,
  parallel::distributed::BlockVector<float>  &);
 template
 void interpolation_difference< 1 >
 (const DoFHandler< 1 > &, const  parallel::distributed::BlockVector<float>  &,
 const FiniteElement< 1 > &,  parallel::distributed::BlockVector<float>  &);
 template
 void interpolation_difference< 1 >
 (const DoFHandler< 1 > &, const ConstraintMatrix &,
 const  parallel::distributed::BlockVector<float>  &,
 const DoFHandler< 1 > &, const ConstraintMatrix &,
  parallel::distributed::BlockVector<float>  &);
 template
 void project_dg< 1 >
 (const DoFHandler< 1 > &, const  parallel::distributed::BlockVector<float>  &,
 const DoFHandler< 1 > &,  parallel::distributed::BlockVector<float>  &);
 template
 void extrapolate< 1 >
 (const DoFHandler< 1 > &, const  parallel::distributed::BlockVector<float>  &,
 const DoFHandler< 1 > &,  parallel::distributed::BlockVector<float>  &);
 template
 void extrapolate< 1 >
 (const DoFHandler< 1 > &, const  parallel::distributed::BlockVector<float>  &,
 const DoFHandler< 1 > &, const ConstraintMatrix &,
  parallel::distributed::BlockVector<float>  &);
#endif
 }
 
namespace FETools
 {
#if  1  ==  3 
 template
 void back_interpolate< 1 >
 (const DoFHandler< 1 > &, const  parallel::distributed::BlockVector<long double>  &,
 const FiniteElement< 1 > &,  parallel::distributed::BlockVector<long double>  &);
 template
 void back_interpolate< 1 >
 (const DoFHandler< 1 > &, const ConstraintMatrix &,
 const  parallel::distributed::BlockVector<long double>  &,
 const DoFHandler< 1 > &, const ConstraintMatrix &,
  parallel::distributed::BlockVector<long double>  &);
 template
 void interpolation_difference< 1 >
 (const DoFHandler< 1 > &, const  parallel::distributed::BlockVector<long double>  &,
 const FiniteElement< 1 > &,  parallel::distributed::BlockVector<long double>  &);
 template
 void interpolation_difference< 1 >
 (const DoFHandler< 1 > &, const ConstraintMatrix &,
 const  parallel::distributed::BlockVector<long double>  &,
 const DoFHandler< 1 > &, const ConstraintMatrix &,
  parallel::distributed::BlockVector<long double>  &);
 template
 void project_dg< 1 >
 (const DoFHandler< 1 > &, const  parallel::distributed::BlockVector<long double>  &,
 const DoFHandler< 1 > &,  parallel::distributed::BlockVector<long double>  &);
 template
 void extrapolate< 1 >
 (const DoFHandler< 1 > &, const  parallel::distributed::BlockVector<long double>  &,
 const DoFHandler< 1 > &,  parallel::distributed::BlockVector<long double>  &);
 template
 void extrapolate< 1 >
 (const DoFHandler< 1 > &, const  parallel::distributed::BlockVector<long double>  &,
 const DoFHandler< 1 > &, const ConstraintMatrix &,
  parallel::distributed::BlockVector<long double>  &);
#endif
 }
 
namespace FETools
 {
#if  2  ==  1 
 template
 void back_interpolate< 2 >
 (const DoFHandler< 2 > &, const  Vector<double>  &,
 const FiniteElement< 2 > &,  Vector<double>  &);
 template
 void back_interpolate< 2 >
 (const DoFHandler< 2 > &, const ConstraintMatrix &,
 const  Vector<double>  &,
 const DoFHandler< 2 > &, const ConstraintMatrix &,
  Vector<double>  &);
 template
 void interpolation_difference< 2 >
 (const DoFHandler< 2 > &, const  Vector<double>  &,
 const FiniteElement< 2 > &,  Vector<double>  &);
 template
 void interpolation_difference< 2 >
 (const DoFHandler< 2 > &, const ConstraintMatrix &,
 const  Vector<double>  &,
 const DoFHandler< 2 > &, const ConstraintMatrix &,
  Vector<double>  &);
 template
 void project_dg< 2 >
 (const DoFHandler< 2 > &, const  Vector<double>  &,
 const DoFHandler< 2 > &,  Vector<double>  &);
 template
 void extrapolate< 2 >
 (const DoFHandler< 2 > &, const  Vector<double>  &,
 const DoFHandler< 2 > &,  Vector<double>  &);
 template
 void extrapolate< 2 >
 (const DoFHandler< 2 > &, const  Vector<double>  &,
 const DoFHandler< 2 > &, const ConstraintMatrix &,
  Vector<double>  &);
#endif
 }
 
namespace FETools
 {
#if  2  ==  1 
 template
 void back_interpolate< 2 >
 (const DoFHandler< 2 > &, const  Vector<float>  &,
 const FiniteElement< 2 > &,  Vector<float>  &);
 template
 void back_interpolate< 2 >
 (const DoFHandler< 2 > &, const ConstraintMatrix &,
 const  Vector<float>  &,
 const DoFHandler< 2 > &, const ConstraintMatrix &,
  Vector<float>  &);
 template
 void interpolation_difference< 2 >
 (const DoFHandler< 2 > &, const  Vector<float>  &,
 const FiniteElement< 2 > &,  Vector<float>  &);
 template
 void interpolation_difference< 2 >
 (const DoFHandler< 2 > &, const ConstraintMatrix &,
 const  Vector<float>  &,
 const DoFHandler< 2 > &, const ConstraintMatrix &,
  Vector<float>  &);
 template
 void project_dg< 2 >
 (const DoFHandler< 2 > &, const  Vector<float>  &,
 const DoFHandler< 2 > &,  Vector<float>  &);
 template
 void extrapolate< 2 >
 (const DoFHandler< 2 > &, const  Vector<float>  &,
 const DoFHandler< 2 > &,  Vector<float>  &);
 template
 void extrapolate< 2 >
 (const DoFHandler< 2 > &, const  Vector<float>  &,
 const DoFHandler< 2 > &, const ConstraintMatrix &,
  Vector<float>  &);
#endif
 }
 
namespace FETools
 {
#if  2  ==  1 
 template
 void back_interpolate< 2 >
 (const DoFHandler< 2 > &, const  Vector<long double>  &,
 const FiniteElement< 2 > &,  Vector<long double>  &);
 template
 void back_interpolate< 2 >
 (const DoFHandler< 2 > &, const ConstraintMatrix &,
 const  Vector<long double>  &,
 const DoFHandler< 2 > &, const ConstraintMatrix &,
  Vector<long double>  &);
 template
 void interpolation_difference< 2 >
 (const DoFHandler< 2 > &, const  Vector<long double>  &,
 const FiniteElement< 2 > &,  Vector<long double>  &);
 template
 void interpolation_difference< 2 >
 (const DoFHandler< 2 > &, const ConstraintMatrix &,
 const  Vector<long double>  &,
 const DoFHandler< 2 > &, const ConstraintMatrix &,
  Vector<long double>  &);
 template
 void project_dg< 2 >
 (const DoFHandler< 2 > &, const  Vector<long double>  &,
 const DoFHandler< 2 > &,  Vector<long double>  &);
 template
 void extrapolate< 2 >
 (const DoFHandler< 2 > &, const  Vector<long double>  &,
 const DoFHandler< 2 > &,  Vector<long double>  &);
 template
 void extrapolate< 2 >
 (const DoFHandler< 2 > &, const  Vector<long double>  &,
 const DoFHandler< 2 > &, const ConstraintMatrix &,
  Vector<long double>  &);
#endif
 }
 
namespace FETools
 {
#if  2  ==  1 
 template
 void back_interpolate< 2 >
 (const DoFHandler< 2 > &, const  BlockVector<double>  &,
 const FiniteElement< 2 > &,  BlockVector<double>  &);
 template
 void back_interpolate< 2 >
 (const DoFHandler< 2 > &, const ConstraintMatrix &,
 const  BlockVector<double>  &,
 const DoFHandler< 2 > &, const ConstraintMatrix &,
  BlockVector<double>  &);
 template
 void interpolation_difference< 2 >
 (const DoFHandler< 2 > &, const  BlockVector<double>  &,
 const FiniteElement< 2 > &,  BlockVector<double>  &);
 template
 void interpolation_difference< 2 >
 (const DoFHandler< 2 > &, const ConstraintMatrix &,
 const  BlockVector<double>  &,
 const DoFHandler< 2 > &, const ConstraintMatrix &,
  BlockVector<double>  &);
 template
 void project_dg< 2 >
 (const DoFHandler< 2 > &, const  BlockVector<double>  &,
 const DoFHandler< 2 > &,  BlockVector<double>  &);
 template
 void extrapolate< 2 >
 (const DoFHandler< 2 > &, const  BlockVector<double>  &,
 const DoFHandler< 2 > &,  BlockVector<double>  &);
 template
 void extrapolate< 2 >
 (const DoFHandler< 2 > &, const  BlockVector<double>  &,
 const DoFHandler< 2 > &, const ConstraintMatrix &,
  BlockVector<double>  &);
#endif
 }
 
namespace FETools
 {
#if  2  ==  1 
 template
 void back_interpolate< 2 >
 (const DoFHandler< 2 > &, const  BlockVector<float>  &,
 const FiniteElement< 2 > &,  BlockVector<float>  &);
 template
 void back_interpolate< 2 >
 (const DoFHandler< 2 > &, const ConstraintMatrix &,
 const  BlockVector<float>  &,
 const DoFHandler< 2 > &, const ConstraintMatrix &,
  BlockVector<float>  &);
 template
 void interpolation_difference< 2 >
 (const DoFHandler< 2 > &, const  BlockVector<float>  &,
 const FiniteElement< 2 > &,  BlockVector<float>  &);
 template
 void interpolation_difference< 2 >
 (const DoFHandler< 2 > &, const ConstraintMatrix &,
 const  BlockVector<float>  &,
 const DoFHandler< 2 > &, const ConstraintMatrix &,
  BlockVector<float>  &);
 template
 void project_dg< 2 >
 (const DoFHandler< 2 > &, const  BlockVector<float>  &,
 const DoFHandler< 2 > &,  BlockVector<float>  &);
 template
 void extrapolate< 2 >
 (const DoFHandler< 2 > &, const  BlockVector<float>  &,
 const DoFHandler< 2 > &,  BlockVector<float>  &);
 template
 void extrapolate< 2 >
 (const DoFHandler< 2 > &, const  BlockVector<float>  &,
 const DoFHandler< 2 > &, const ConstraintMatrix &,
  BlockVector<float>  &);
#endif
 }
 
namespace FETools
 {
#if  2  ==  1 
 template
 void back_interpolate< 2 >
 (const DoFHandler< 2 > &, const  BlockVector<long double>  &,
 const FiniteElement< 2 > &,  BlockVector<long double>  &);
 template
 void back_interpolate< 2 >
 (const DoFHandler< 2 > &, const ConstraintMatrix &,
 const  BlockVector<long double>  &,
 const DoFHandler< 2 > &, const ConstraintMatrix &,
  BlockVector<long double>  &);
 template
 void interpolation_difference< 2 >
 (const DoFHandler< 2 > &, const  BlockVector<long double>  &,
 const FiniteElement< 2 > &,  BlockVector<long double>  &);
 template
 void interpolation_difference< 2 >
 (const DoFHandler< 2 > &, const ConstraintMatrix &,
 const  BlockVector<long double>  &,
 const DoFHandler< 2 > &, const ConstraintMatrix &,
  BlockVector<long double>  &);
 template
 void project_dg< 2 >
 (const DoFHandler< 2 > &, const  BlockVector<long double>  &,
 const DoFHandler< 2 > &,  BlockVector<long double>  &);
 template
 void extrapolate< 2 >
 (const DoFHandler< 2 > &, const  BlockVector<long double>  &,
 const DoFHandler< 2 > &,  BlockVector<long double>  &);
 template
 void extrapolate< 2 >
 (const DoFHandler< 2 > &, const  BlockVector<long double>  &,
 const DoFHandler< 2 > &, const ConstraintMatrix &,
  BlockVector<long double>  &);
#endif
 }
 
namespace FETools
 {
#if  2  ==  1 
 template
 void back_interpolate< 2 >
 (const DoFHandler< 2 > &, const  parallel::distributed::Vector<double>  &,
 const FiniteElement< 2 > &,  parallel::distributed::Vector<double>  &);
 template
 void back_interpolate< 2 >
 (const DoFHandler< 2 > &, const ConstraintMatrix &,
 const  parallel::distributed::Vector<double>  &,
 const DoFHandler< 2 > &, const ConstraintMatrix &,
  parallel::distributed::Vector<double>  &);
 template
 void interpolation_difference< 2 >
 (const DoFHandler< 2 > &, const  parallel::distributed::Vector<double>  &,
 const FiniteElement< 2 > &,  parallel::distributed::Vector<double>  &);
 template
 void interpolation_difference< 2 >
 (const DoFHandler< 2 > &, const ConstraintMatrix &,
 const  parallel::distributed::Vector<double>  &,
 const DoFHandler< 2 > &, const ConstraintMatrix &,
  parallel::distributed::Vector<double>  &);
 template
 void project_dg< 2 >
 (const DoFHandler< 2 > &, const  parallel::distributed::Vector<double>  &,
 const DoFHandler< 2 > &,  parallel::distributed::Vector<double>  &);
 template
 void extrapolate< 2 >
 (const DoFHandler< 2 > &, const  parallel::distributed::Vector<double>  &,
 const DoFHandler< 2 > &,  parallel::distributed::Vector<double>  &);
 template
 void extrapolate< 2 >
 (const DoFHandler< 2 > &, const  parallel::distributed::Vector<double>  &,
 const DoFHandler< 2 > &, const ConstraintMatrix &,
  parallel::distributed::Vector<double>  &);
#endif
 }
 
namespace FETools
 {
#if  2  ==  1 
 template
 void back_interpolate< 2 >
 (const DoFHandler< 2 > &, const  parallel::distributed::Vector<float>  &,
 const FiniteElement< 2 > &,  parallel::distributed::Vector<float>  &);
 template
 void back_interpolate< 2 >
 (const DoFHandler< 2 > &, const ConstraintMatrix &,
 const  parallel::distributed::Vector<float>  &,
 const DoFHandler< 2 > &, const ConstraintMatrix &,
  parallel::distributed::Vector<float>  &);
 template
 void interpolation_difference< 2 >
 (const DoFHandler< 2 > &, const  parallel::distributed::Vector<float>  &,
 const FiniteElement< 2 > &,  parallel::distributed::Vector<float>  &);
 template
 void interpolation_difference< 2 >
 (const DoFHandler< 2 > &, const ConstraintMatrix &,
 const  parallel::distributed::Vector<float>  &,
 const DoFHandler< 2 > &, const ConstraintMatrix &,
  parallel::distributed::Vector<float>  &);
 template
 void project_dg< 2 >
 (const DoFHandler< 2 > &, const  parallel::distributed::Vector<float>  &,
 const DoFHandler< 2 > &,  parallel::distributed::Vector<float>  &);
 template
 void extrapolate< 2 >
 (const DoFHandler< 2 > &, const  parallel::distributed::Vector<float>  &,
 const DoFHandler< 2 > &,  parallel::distributed::Vector<float>  &);
 template
 void extrapolate< 2 >
 (const DoFHandler< 2 > &, const  parallel::distributed::Vector<float>  &,
 const DoFHandler< 2 > &, const ConstraintMatrix &,
  parallel::distributed::Vector<float>  &);
#endif
 }
 
namespace FETools
 {
#if  2  ==  1 
 template
 void back_interpolate< 2 >
 (const DoFHandler< 2 > &, const  parallel::distributed::Vector<long double>  &,
 const FiniteElement< 2 > &,  parallel::distributed::Vector<long double>  &);
 template
 void back_interpolate< 2 >
 (const DoFHandler< 2 > &, const ConstraintMatrix &,
 const  parallel::distributed::Vector<long double>  &,
 const DoFHandler< 2 > &, const ConstraintMatrix &,
  parallel::distributed::Vector<long double>  &);
 template
 void interpolation_difference< 2 >
 (const DoFHandler< 2 > &, const  parallel::distributed::Vector<long double>  &,
 const FiniteElement< 2 > &,  parallel::distributed::Vector<long double>  &);
 template
 void interpolation_difference< 2 >
 (const DoFHandler< 2 > &, const ConstraintMatrix &,
 const  parallel::distributed::Vector<long double>  &,
 const DoFHandler< 2 > &, const ConstraintMatrix &,
  parallel::distributed::Vector<long double>  &);
 template
 void project_dg< 2 >
 (const DoFHandler< 2 > &, const  parallel::distributed::Vector<long double>  &,
 const DoFHandler< 2 > &,  parallel::distributed::Vector<long double>  &);
 template
 void extrapolate< 2 >
 (const DoFHandler< 2 > &, const  parallel::distributed::Vector<long double>  &,
 const DoFHandler< 2 > &,  parallel::distributed::Vector<long double>  &);
 template
 void extrapolate< 2 >
 (const DoFHandler< 2 > &, const  parallel::distributed::Vector<long double>  &,
 const DoFHandler< 2 > &, const ConstraintMatrix &,
  parallel::distributed::Vector<long double>  &);
#endif
 }
 
namespace FETools
 {
#if  2  ==  1 
 template
 void back_interpolate< 2 >
 (const DoFHandler< 2 > &, const  parallel::distributed::BlockVector<double>  &,
 const FiniteElement< 2 > &,  parallel::distributed::BlockVector<double>  &);
 template
 void back_interpolate< 2 >
 (const DoFHandler< 2 > &, const ConstraintMatrix &,
 const  parallel::distributed::BlockVector<double>  &,
 const DoFHandler< 2 > &, const ConstraintMatrix &,
  parallel::distributed::BlockVector<double>  &);
 template
 void interpolation_difference< 2 >
 (const DoFHandler< 2 > &, const  parallel::distributed::BlockVector<double>  &,
 const FiniteElement< 2 > &,  parallel::distributed::BlockVector<double>  &);
 template
 void interpolation_difference< 2 >
 (const DoFHandler< 2 > &, const ConstraintMatrix &,
 const  parallel::distributed::BlockVector<double>  &,
 const DoFHandler< 2 > &, const ConstraintMatrix &,
  parallel::distributed::BlockVector<double>  &);
 template
 void project_dg< 2 >
 (const DoFHandler< 2 > &, const  parallel::distributed::BlockVector<double>  &,
 const DoFHandler< 2 > &,  parallel::distributed::BlockVector<double>  &);
 template
 void extrapolate< 2 >
 (const DoFHandler< 2 > &, const  parallel::distributed::BlockVector<double>  &,
 const DoFHandler< 2 > &,  parallel::distributed::BlockVector<double>  &);
 template
 void extrapolate< 2 >
 (const DoFHandler< 2 > &, const  parallel::distributed::BlockVector<double>  &,
 const DoFHandler< 2 > &, const ConstraintMatrix &,
  parallel::distributed::BlockVector<double>  &);
#endif
 }
 
namespace FETools
 {
#if  2  ==  1 
 template
 void back_interpolate< 2 >
 (const DoFHandler< 2 > &, const  parallel::distributed::BlockVector<float>  &,
 const FiniteElement< 2 > &,  parallel::distributed::BlockVector<float>  &);
 template
 void back_interpolate< 2 >
 (const DoFHandler< 2 > &, const ConstraintMatrix &,
 const  parallel::distributed::BlockVector<float>  &,
 const DoFHandler< 2 > &, const ConstraintMatrix &,
  parallel::distributed::BlockVector<float>  &);
 template
 void interpolation_difference< 2 >
 (const DoFHandler< 2 > &, const  parallel::distributed::BlockVector<float>  &,
 const FiniteElement< 2 > &,  parallel::distributed::BlockVector<float>  &);
 template
 void interpolation_difference< 2 >
 (const DoFHandler< 2 > &, const ConstraintMatrix &,
 const  parallel::distributed::BlockVector<float>  &,
 const DoFHandler< 2 > &, const ConstraintMatrix &,
  parallel::distributed::BlockVector<float>  &);
 template
 void project_dg< 2 >
 (const DoFHandler< 2 > &, const  parallel::distributed::BlockVector<float>  &,
 const DoFHandler< 2 > &,  parallel::distributed::BlockVector<float>  &);
 template
 void extrapolate< 2 >
 (const DoFHandler< 2 > &, const  parallel::distributed::BlockVector<float>  &,
 const DoFHandler< 2 > &,  parallel::distributed::BlockVector<float>  &);
 template
 void extrapolate< 2 >
 (const DoFHandler< 2 > &, const  parallel::distributed::BlockVector<float>  &,
 const DoFHandler< 2 > &, const ConstraintMatrix &,
  parallel::distributed::BlockVector<float>  &);
#endif
 }
 
namespace FETools
 {
#if  2  ==  1 
 template
 void back_interpolate< 2 >
 (const DoFHandler< 2 > &, const  parallel::distributed::BlockVector<long double>  &,
 const FiniteElement< 2 > &,  parallel::distributed::BlockVector<long double>  &);
 template
 void back_interpolate< 2 >
 (const DoFHandler< 2 > &, const ConstraintMatrix &,
 const  parallel::distributed::BlockVector<long double>  &,
 const DoFHandler< 2 > &, const ConstraintMatrix &,
  parallel::distributed::BlockVector<long double>  &);
 template
 void interpolation_difference< 2 >
 (const DoFHandler< 2 > &, const  parallel::distributed::BlockVector<long double>  &,
 const FiniteElement< 2 > &,  parallel::distributed::BlockVector<long double>  &);
 template
 void interpolation_difference< 2 >
 (const DoFHandler< 2 > &, const ConstraintMatrix &,
 const  parallel::distributed::BlockVector<long double>  &,
 const DoFHandler< 2 > &, const ConstraintMatrix &,
  parallel::distributed::BlockVector<long double>  &);
 template
 void project_dg< 2 >
 (const DoFHandler< 2 > &, const  parallel::distributed::BlockVector<long double>  &,
 const DoFHandler< 2 > &,  parallel::distributed::BlockVector<long double>  &);
 template
 void extrapolate< 2 >
 (const DoFHandler< 2 > &, const  parallel::distributed::BlockVector<long double>  &,
 const DoFHandler< 2 > &,  parallel::distributed::BlockVector<long double>  &);
 template
 void extrapolate< 2 >
 (const DoFHandler< 2 > &, const  parallel::distributed::BlockVector<long double>  &,
 const DoFHandler< 2 > &, const ConstraintMatrix &,
  parallel::distributed::BlockVector<long double>  &);
#endif
 }
 
namespace FETools
 {
#if  2  ==  2 
 template
 void back_interpolate< 2 >
 (const DoFHandler< 2 > &, const  Vector<double>  &,
 const FiniteElement< 2 > &,  Vector<double>  &);
 template
 void back_interpolate< 2 >
 (const DoFHandler< 2 > &, const ConstraintMatrix &,
 const  Vector<double>  &,
 const DoFHandler< 2 > &, const ConstraintMatrix &,
  Vector<double>  &);
 template
 void interpolation_difference< 2 >
 (const DoFHandler< 2 > &, const  Vector<double>  &,
 const FiniteElement< 2 > &,  Vector<double>  &);
 template
 void interpolation_difference< 2 >
 (const DoFHandler< 2 > &, const ConstraintMatrix &,
 const  Vector<double>  &,
 const DoFHandler< 2 > &, const ConstraintMatrix &,
  Vector<double>  &);
 template
 void project_dg< 2 >
 (const DoFHandler< 2 > &, const  Vector<double>  &,
 const DoFHandler< 2 > &,  Vector<double>  &);
 template
 void extrapolate< 2 >
 (const DoFHandler< 2 > &, const  Vector<double>  &,
 const DoFHandler< 2 > &,  Vector<double>  &);
 template
 void extrapolate< 2 >
 (const DoFHandler< 2 > &, const  Vector<double>  &,
 const DoFHandler< 2 > &, const ConstraintMatrix &,
  Vector<double>  &);
#endif
 }
 
namespace FETools
 {
#if  2  ==  2 
 template
 void back_interpolate< 2 >
 (const DoFHandler< 2 > &, const  Vector<float>  &,
 const FiniteElement< 2 > &,  Vector<float>  &);
 template
 void back_interpolate< 2 >
 (const DoFHandler< 2 > &, const ConstraintMatrix &,
 const  Vector<float>  &,
 const DoFHandler< 2 > &, const ConstraintMatrix &,
  Vector<float>  &);
 template
 void interpolation_difference< 2 >
 (const DoFHandler< 2 > &, const  Vector<float>  &,
 const FiniteElement< 2 > &,  Vector<float>  &);
 template
 void interpolation_difference< 2 >
 (const DoFHandler< 2 > &, const ConstraintMatrix &,
 const  Vector<float>  &,
 const DoFHandler< 2 > &, const ConstraintMatrix &,
  Vector<float>  &);
 template
 void project_dg< 2 >
 (const DoFHandler< 2 > &, const  Vector<float>  &,
 const DoFHandler< 2 > &,  Vector<float>  &);
 template
 void extrapolate< 2 >
 (const DoFHandler< 2 > &, const  Vector<float>  &,
 const DoFHandler< 2 > &,  Vector<float>  &);
 template
 void extrapolate< 2 >
 (const DoFHandler< 2 > &, const  Vector<float>  &,
 const DoFHandler< 2 > &, const ConstraintMatrix &,
  Vector<float>  &);
#endif
 }
 
namespace FETools
 {
#if  2  ==  2 
 template
 void back_interpolate< 2 >
 (const DoFHandler< 2 > &, const  Vector<long double>  &,
 const FiniteElement< 2 > &,  Vector<long double>  &);
 template
 void back_interpolate< 2 >
 (const DoFHandler< 2 > &, const ConstraintMatrix &,
 const  Vector<long double>  &,
 const DoFHandler< 2 > &, const ConstraintMatrix &,
  Vector<long double>  &);
 template
 void interpolation_difference< 2 >
 (const DoFHandler< 2 > &, const  Vector<long double>  &,
 const FiniteElement< 2 > &,  Vector<long double>  &);
 template
 void interpolation_difference< 2 >
 (const DoFHandler< 2 > &, const ConstraintMatrix &,
 const  Vector<long double>  &,
 const DoFHandler< 2 > &, const ConstraintMatrix &,
  Vector<long double>  &);
 template
 void project_dg< 2 >
 (const DoFHandler< 2 > &, const  Vector<long double>  &,
 const DoFHandler< 2 > &,  Vector<long double>  &);
 template
 void extrapolate< 2 >
 (const DoFHandler< 2 > &, const  Vector<long double>  &,
 const DoFHandler< 2 > &,  Vector<long double>  &);
 template
 void extrapolate< 2 >
 (const DoFHandler< 2 > &, const  Vector<long double>  &,
 const DoFHandler< 2 > &, const ConstraintMatrix &,
  Vector<long double>  &);
#endif
 }
 
namespace FETools
 {
#if  2  ==  2 
 template
 void back_interpolate< 2 >
 (const DoFHandler< 2 > &, const  BlockVector<double>  &,
 const FiniteElement< 2 > &,  BlockVector<double>  &);
 template
 void back_interpolate< 2 >
 (const DoFHandler< 2 > &, const ConstraintMatrix &,
 const  BlockVector<double>  &,
 const DoFHandler< 2 > &, const ConstraintMatrix &,
  BlockVector<double>  &);
 template
 void interpolation_difference< 2 >
 (const DoFHandler< 2 > &, const  BlockVector<double>  &,
 const FiniteElement< 2 > &,  BlockVector<double>  &);
 template
 void interpolation_difference< 2 >
 (const DoFHandler< 2 > &, const ConstraintMatrix &,
 const  BlockVector<double>  &,
 const DoFHandler< 2 > &, const ConstraintMatrix &,
  BlockVector<double>  &);
 template
 void project_dg< 2 >
 (const DoFHandler< 2 > &, const  BlockVector<double>  &,
 const DoFHandler< 2 > &,  BlockVector<double>  &);
 template
 void extrapolate< 2 >
 (const DoFHandler< 2 > &, const  BlockVector<double>  &,
 const DoFHandler< 2 > &,  BlockVector<double>  &);
 template
 void extrapolate< 2 >
 (const DoFHandler< 2 > &, const  BlockVector<double>  &,
 const DoFHandler< 2 > &, const ConstraintMatrix &,
  BlockVector<double>  &);
#endif
 }
 
namespace FETools
 {
#if  2  ==  2 
 template
 void back_interpolate< 2 >
 (const DoFHandler< 2 > &, const  BlockVector<float>  &,
 const FiniteElement< 2 > &,  BlockVector<float>  &);
 template
 void back_interpolate< 2 >
 (const DoFHandler< 2 > &, const ConstraintMatrix &,
 const  BlockVector<float>  &,
 const DoFHandler< 2 > &, const ConstraintMatrix &,
  BlockVector<float>  &);
 template
 void interpolation_difference< 2 >
 (const DoFHandler< 2 > &, const  BlockVector<float>  &,
 const FiniteElement< 2 > &,  BlockVector<float>  &);
 template
 void interpolation_difference< 2 >
 (const DoFHandler< 2 > &, const ConstraintMatrix &,
 const  BlockVector<float>  &,
 const DoFHandler< 2 > &, const ConstraintMatrix &,
  BlockVector<float>  &);
 template
 void project_dg< 2 >
 (const DoFHandler< 2 > &, const  BlockVector<float>  &,
 const DoFHandler< 2 > &,  BlockVector<float>  &);
 template
 void extrapolate< 2 >
 (const DoFHandler< 2 > &, const  BlockVector<float>  &,
 const DoFHandler< 2 > &,  BlockVector<float>  &);
 template
 void extrapolate< 2 >
 (const DoFHandler< 2 > &, const  BlockVector<float>  &,
 const DoFHandler< 2 > &, const ConstraintMatrix &,
  BlockVector<float>  &);
#endif
 }
 
namespace FETools
 {
#if  2  ==  2 
 template
 void back_interpolate< 2 >
 (const DoFHandler< 2 > &, const  BlockVector<long double>  &,
 const FiniteElement< 2 > &,  BlockVector<long double>  &);
 template
 void back_interpolate< 2 >
 (const DoFHandler< 2 > &, const ConstraintMatrix &,
 const  BlockVector<long double>  &,
 const DoFHandler< 2 > &, const ConstraintMatrix &,
  BlockVector<long double>  &);
 template
 void interpolation_difference< 2 >
 (const DoFHandler< 2 > &, const  BlockVector<long double>  &,
 const FiniteElement< 2 > &,  BlockVector<long double>  &);
 template
 void interpolation_difference< 2 >
 (const DoFHandler< 2 > &, const ConstraintMatrix &,
 const  BlockVector<long double>  &,
 const DoFHandler< 2 > &, const ConstraintMatrix &,
  BlockVector<long double>  &);
 template
 void project_dg< 2 >
 (const DoFHandler< 2 > &, const  BlockVector<long double>  &,
 const DoFHandler< 2 > &,  BlockVector<long double>  &);
 template
 void extrapolate< 2 >
 (const DoFHandler< 2 > &, const  BlockVector<long double>  &,
 const DoFHandler< 2 > &,  BlockVector<long double>  &);
 template
 void extrapolate< 2 >
 (const DoFHandler< 2 > &, const  BlockVector<long double>  &,
 const DoFHandler< 2 > &, const ConstraintMatrix &,
  BlockVector<long double>  &);
#endif
 }
 
namespace FETools
 {
#if  2  ==  2 
 template
 void back_interpolate< 2 >
 (const DoFHandler< 2 > &, const  parallel::distributed::Vector<double>  &,
 const FiniteElement< 2 > &,  parallel::distributed::Vector<double>  &);
 template
 void back_interpolate< 2 >
 (const DoFHandler< 2 > &, const ConstraintMatrix &,
 const  parallel::distributed::Vector<double>  &,
 const DoFHandler< 2 > &, const ConstraintMatrix &,
  parallel::distributed::Vector<double>  &);
 template
 void interpolation_difference< 2 >
 (const DoFHandler< 2 > &, const  parallel::distributed::Vector<double>  &,
 const FiniteElement< 2 > &,  parallel::distributed::Vector<double>  &);
 template
 void interpolation_difference< 2 >
 (const DoFHandler< 2 > &, const ConstraintMatrix &,
 const  parallel::distributed::Vector<double>  &,
 const DoFHandler< 2 > &, const ConstraintMatrix &,
  parallel::distributed::Vector<double>  &);
 template
 void project_dg< 2 >
 (const DoFHandler< 2 > &, const  parallel::distributed::Vector<double>  &,
 const DoFHandler< 2 > &,  parallel::distributed::Vector<double>  &);
 template
 void extrapolate< 2 >
 (const DoFHandler< 2 > &, const  parallel::distributed::Vector<double>  &,
 const DoFHandler< 2 > &,  parallel::distributed::Vector<double>  &);
 template
 void extrapolate< 2 >
 (const DoFHandler< 2 > &, const  parallel::distributed::Vector<double>  &,
 const DoFHandler< 2 > &, const ConstraintMatrix &,
  parallel::distributed::Vector<double>  &);
#endif
 }
 
namespace FETools
 {
#if  2  ==  2 
 template
 void back_interpolate< 2 >
 (const DoFHandler< 2 > &, const  parallel::distributed::Vector<float>  &,
 const FiniteElement< 2 > &,  parallel::distributed::Vector<float>  &);
 template
 void back_interpolate< 2 >
 (const DoFHandler< 2 > &, const ConstraintMatrix &,
 const  parallel::distributed::Vector<float>  &,
 const DoFHandler< 2 > &, const ConstraintMatrix &,
  parallel::distributed::Vector<float>  &);
 template
 void interpolation_difference< 2 >
 (const DoFHandler< 2 > &, const  parallel::distributed::Vector<float>  &,
 const FiniteElement< 2 > &,  parallel::distributed::Vector<float>  &);
 template
 void interpolation_difference< 2 >
 (const DoFHandler< 2 > &, const ConstraintMatrix &,
 const  parallel::distributed::Vector<float>  &,
 const DoFHandler< 2 > &, const ConstraintMatrix &,
  parallel::distributed::Vector<float>  &);
 template
 void project_dg< 2 >
 (const DoFHandler< 2 > &, const  parallel::distributed::Vector<float>  &,
 const DoFHandler< 2 > &,  parallel::distributed::Vector<float>  &);
 template
 void extrapolate< 2 >
 (const DoFHandler< 2 > &, const  parallel::distributed::Vector<float>  &,
 const DoFHandler< 2 > &,  parallel::distributed::Vector<float>  &);
 template
 void extrapolate< 2 >
 (const DoFHandler< 2 > &, const  parallel::distributed::Vector<float>  &,
 const DoFHandler< 2 > &, const ConstraintMatrix &,
  parallel::distributed::Vector<float>  &);
#endif
 }
 
namespace FETools
 {
#if  2  ==  2 
 template
 void back_interpolate< 2 >
 (const DoFHandler< 2 > &, const  parallel::distributed::Vector<long double>  &,
 const FiniteElement< 2 > &,  parallel::distributed::Vector<long double>  &);
 template
 void back_interpolate< 2 >
 (const DoFHandler< 2 > &, const ConstraintMatrix &,
 const  parallel::distributed::Vector<long double>  &,
 const DoFHandler< 2 > &, const ConstraintMatrix &,
  parallel::distributed::Vector<long double>  &);
 template
 void interpolation_difference< 2 >
 (const DoFHandler< 2 > &, const  parallel::distributed::Vector<long double>  &,
 const FiniteElement< 2 > &,  parallel::distributed::Vector<long double>  &);
 template
 void interpolation_difference< 2 >
 (const DoFHandler< 2 > &, const ConstraintMatrix &,
 const  parallel::distributed::Vector<long double>  &,
 const DoFHandler< 2 > &, const ConstraintMatrix &,
  parallel::distributed::Vector<long double>  &);
 template
 void project_dg< 2 >
 (const DoFHandler< 2 > &, const  parallel::distributed::Vector<long double>  &,
 const DoFHandler< 2 > &,  parallel::distributed::Vector<long double>  &);
 template
 void extrapolate< 2 >
 (const DoFHandler< 2 > &, const  parallel::distributed::Vector<long double>  &,
 const DoFHandler< 2 > &,  parallel::distributed::Vector<long double>  &);
 template
 void extrapolate< 2 >
 (const DoFHandler< 2 > &, const  parallel::distributed::Vector<long double>  &,
 const DoFHandler< 2 > &, const ConstraintMatrix &,
  parallel::distributed::Vector<long double>  &);
#endif
 }
 
namespace FETools
 {
#if  2  ==  2 
 template
 void back_interpolate< 2 >
 (const DoFHandler< 2 > &, const  parallel::distributed::BlockVector<double>  &,
 const FiniteElement< 2 > &,  parallel::distributed::BlockVector<double>  &);
 template
 void back_interpolate< 2 >
 (const DoFHandler< 2 > &, const ConstraintMatrix &,
 const  parallel::distributed::BlockVector<double>  &,
 const DoFHandler< 2 > &, const ConstraintMatrix &,
  parallel::distributed::BlockVector<double>  &);
 template
 void interpolation_difference< 2 >
 (const DoFHandler< 2 > &, const  parallel::distributed::BlockVector<double>  &,
 const FiniteElement< 2 > &,  parallel::distributed::BlockVector<double>  &);
 template
 void interpolation_difference< 2 >
 (const DoFHandler< 2 > &, const ConstraintMatrix &,
 const  parallel::distributed::BlockVector<double>  &,
 const DoFHandler< 2 > &, const ConstraintMatrix &,
  parallel::distributed::BlockVector<double>  &);
 template
 void project_dg< 2 >
 (const DoFHandler< 2 > &, const  parallel::distributed::BlockVector<double>  &,
 const DoFHandler< 2 > &,  parallel::distributed::BlockVector<double>  &);
 template
 void extrapolate< 2 >
 (const DoFHandler< 2 > &, const  parallel::distributed::BlockVector<double>  &,
 const DoFHandler< 2 > &,  parallel::distributed::BlockVector<double>  &);
 template
 void extrapolate< 2 >
 (const DoFHandler< 2 > &, const  parallel::distributed::BlockVector<double>  &,
 const DoFHandler< 2 > &, const ConstraintMatrix &,
  parallel::distributed::BlockVector<double>  &);
#endif
 }
 
namespace FETools
 {
#if  2  ==  2 
 template
 void back_interpolate< 2 >
 (const DoFHandler< 2 > &, const  parallel::distributed::BlockVector<float>  &,
 const FiniteElement< 2 > &,  parallel::distributed::BlockVector<float>  &);
 template
 void back_interpolate< 2 >
 (const DoFHandler< 2 > &, const ConstraintMatrix &,
 const  parallel::distributed::BlockVector<float>  &,
 const DoFHandler< 2 > &, const ConstraintMatrix &,
  parallel::distributed::BlockVector<float>  &);
 template
 void interpolation_difference< 2 >
 (const DoFHandler< 2 > &, const  parallel::distributed::BlockVector<float>  &,
 const FiniteElement< 2 > &,  parallel::distributed::BlockVector<float>  &);
 template
 void interpolation_difference< 2 >
 (const DoFHandler< 2 > &, const ConstraintMatrix &,
 const  parallel::distributed::BlockVector<float>  &,
 const DoFHandler< 2 > &, const ConstraintMatrix &,
  parallel::distributed::BlockVector<float>  &);
 template
 void project_dg< 2 >
 (const DoFHandler< 2 > &, const  parallel::distributed::BlockVector<float>  &,
 const DoFHandler< 2 > &,  parallel::distributed::BlockVector<float>  &);
 template
 void extrapolate< 2 >
 (const DoFHandler< 2 > &, const  parallel::distributed::BlockVector<float>  &,
 const DoFHandler< 2 > &,  parallel::distributed::BlockVector<float>  &);
 template
 void extrapolate< 2 >
 (const DoFHandler< 2 > &, const  parallel::distributed::BlockVector<float>  &,
 const DoFHandler< 2 > &, const ConstraintMatrix &,
  parallel::distributed::BlockVector<float>  &);
#endif
 }
 
namespace FETools
 {
#if  2  ==  2 
 template
 void back_interpolate< 2 >
 (const DoFHandler< 2 > &, const  parallel::distributed::BlockVector<long double>  &,
 const FiniteElement< 2 > &,  parallel::distributed::BlockVector<long double>  &);
 template
 void back_interpolate< 2 >
 (const DoFHandler< 2 > &, const ConstraintMatrix &,
 const  parallel::distributed::BlockVector<long double>  &,
 const DoFHandler< 2 > &, const ConstraintMatrix &,
  parallel::distributed::BlockVector<long double>  &);
 template
 void interpolation_difference< 2 >
 (const DoFHandler< 2 > &, const  parallel::distributed::BlockVector<long double>  &,
 const FiniteElement< 2 > &,  parallel::distributed::BlockVector<long double>  &);
 template
 void interpolation_difference< 2 >
 (const DoFHandler< 2 > &, const ConstraintMatrix &,
 const  parallel::distributed::BlockVector<long double>  &,
 const DoFHandler< 2 > &, const ConstraintMatrix &,
  parallel::distributed::BlockVector<long double>  &);
 template
 void project_dg< 2 >
 (const DoFHandler< 2 > &, const  parallel::distributed::BlockVector<long double>  &,
 const DoFHandler< 2 > &,  parallel::distributed::BlockVector<long double>  &);
 template
 void extrapolate< 2 >
 (const DoFHandler< 2 > &, const  parallel::distributed::BlockVector<long double>  &,
 const DoFHandler< 2 > &,  parallel::distributed::BlockVector<long double>  &);
 template
 void extrapolate< 2 >
 (const DoFHandler< 2 > &, const  parallel::distributed::BlockVector<long double>  &,
 const DoFHandler< 2 > &, const ConstraintMatrix &,
  parallel::distributed::BlockVector<long double>  &);
#endif
 }
 
namespace FETools
 {
#if  2  ==  3 
 template
 void back_interpolate< 2 >
 (const DoFHandler< 2 > &, const  Vector<double>  &,
 const FiniteElement< 2 > &,  Vector<double>  &);
 template
 void back_interpolate< 2 >
 (const DoFHandler< 2 > &, const ConstraintMatrix &,
 const  Vector<double>  &,
 const DoFHandler< 2 > &, const ConstraintMatrix &,
  Vector<double>  &);
 template
 void interpolation_difference< 2 >
 (const DoFHandler< 2 > &, const  Vector<double>  &,
 const FiniteElement< 2 > &,  Vector<double>  &);
 template
 void interpolation_difference< 2 >
 (const DoFHandler< 2 > &, const ConstraintMatrix &,
 const  Vector<double>  &,
 const DoFHandler< 2 > &, const ConstraintMatrix &,
  Vector<double>  &);
 template
 void project_dg< 2 >
 (const DoFHandler< 2 > &, const  Vector<double>  &,
 const DoFHandler< 2 > &,  Vector<double>  &);
 template
 void extrapolate< 2 >
 (const DoFHandler< 2 > &, const  Vector<double>  &,
 const DoFHandler< 2 > &,  Vector<double>  &);
 template
 void extrapolate< 2 >
 (const DoFHandler< 2 > &, const  Vector<double>  &,
 const DoFHandler< 2 > &, const ConstraintMatrix &,
  Vector<double>  &);
#endif
 }
 
namespace FETools
 {
#if  2  ==  3 
 template
 void back_interpolate< 2 >
 (const DoFHandler< 2 > &, const  Vector<float>  &,
 const FiniteElement< 2 > &,  Vector<float>  &);
 template
 void back_interpolate< 2 >
 (const DoFHandler< 2 > &, const ConstraintMatrix &,
 const  Vector<float>  &,
 const DoFHandler< 2 > &, const ConstraintMatrix &,
  Vector<float>  &);
 template
 void interpolation_difference< 2 >
 (const DoFHandler< 2 > &, const  Vector<float>  &,
 const FiniteElement< 2 > &,  Vector<float>  &);
 template
 void interpolation_difference< 2 >
 (const DoFHandler< 2 > &, const ConstraintMatrix &,
 const  Vector<float>  &,
 const DoFHandler< 2 > &, const ConstraintMatrix &,
  Vector<float>  &);
 template
 void project_dg< 2 >
 (const DoFHandler< 2 > &, const  Vector<float>  &,
 const DoFHandler< 2 > &,  Vector<float>  &);
 template
 void extrapolate< 2 >
 (const DoFHandler< 2 > &, const  Vector<float>  &,
 const DoFHandler< 2 > &,  Vector<float>  &);
 template
 void extrapolate< 2 >
 (const DoFHandler< 2 > &, const  Vector<float>  &,
 const DoFHandler< 2 > &, const ConstraintMatrix &,
  Vector<float>  &);
#endif
 }
 
namespace FETools
 {
#if  2  ==  3 
 template
 void back_interpolate< 2 >
 (const DoFHandler< 2 > &, const  Vector<long double>  &,
 const FiniteElement< 2 > &,  Vector<long double>  &);
 template
 void back_interpolate< 2 >
 (const DoFHandler< 2 > &, const ConstraintMatrix &,
 const  Vector<long double>  &,
 const DoFHandler< 2 > &, const ConstraintMatrix &,
  Vector<long double>  &);
 template
 void interpolation_difference< 2 >
 (const DoFHandler< 2 > &, const  Vector<long double>  &,
 const FiniteElement< 2 > &,  Vector<long double>  &);
 template
 void interpolation_difference< 2 >
 (const DoFHandler< 2 > &, const ConstraintMatrix &,
 const  Vector<long double>  &,
 const DoFHandler< 2 > &, const ConstraintMatrix &,
  Vector<long double>  &);
 template
 void project_dg< 2 >
 (const DoFHandler< 2 > &, const  Vector<long double>  &,
 const DoFHandler< 2 > &,  Vector<long double>  &);
 template
 void extrapolate< 2 >
 (const DoFHandler< 2 > &, const  Vector<long double>  &,
 const DoFHandler< 2 > &,  Vector<long double>  &);
 template
 void extrapolate< 2 >
 (const DoFHandler< 2 > &, const  Vector<long double>  &,
 const DoFHandler< 2 > &, const ConstraintMatrix &,
  Vector<long double>  &);
#endif
 }
 
namespace FETools
 {
#if  2  ==  3 
 template
 void back_interpolate< 2 >
 (const DoFHandler< 2 > &, const  BlockVector<double>  &,
 const FiniteElement< 2 > &,  BlockVector<double>  &);
 template
 void back_interpolate< 2 >
 (const DoFHandler< 2 > &, const ConstraintMatrix &,
 const  BlockVector<double>  &,
 const DoFHandler< 2 > &, const ConstraintMatrix &,
  BlockVector<double>  &);
 template
 void interpolation_difference< 2 >
 (const DoFHandler< 2 > &, const  BlockVector<double>  &,
 const FiniteElement< 2 > &,  BlockVector<double>  &);
 template
 void interpolation_difference< 2 >
 (const DoFHandler< 2 > &, const ConstraintMatrix &,
 const  BlockVector<double>  &,
 const DoFHandler< 2 > &, const ConstraintMatrix &,
  BlockVector<double>  &);
 template
 void project_dg< 2 >
 (const DoFHandler< 2 > &, const  BlockVector<double>  &,
 const DoFHandler< 2 > &,  BlockVector<double>  &);
 template
 void extrapolate< 2 >
 (const DoFHandler< 2 > &, const  BlockVector<double>  &,
 const DoFHandler< 2 > &,  BlockVector<double>  &);
 template
 void extrapolate< 2 >
 (const DoFHandler< 2 > &, const  BlockVector<double>  &,
 const DoFHandler< 2 > &, const ConstraintMatrix &,
  BlockVector<double>  &);
#endif
 }
 
namespace FETools
 {
#if  2  ==  3 
 template
 void back_interpolate< 2 >
 (const DoFHandler< 2 > &, const  BlockVector<float>  &,
 const FiniteElement< 2 > &,  BlockVector<float>  &);
 template
 void back_interpolate< 2 >
 (const DoFHandler< 2 > &, const ConstraintMatrix &,
 const  BlockVector<float>  &,
 const DoFHandler< 2 > &, const ConstraintMatrix &,
  BlockVector<float>  &);
 template
 void interpolation_difference< 2 >
 (const DoFHandler< 2 > &, const  BlockVector<float>  &,
 const FiniteElement< 2 > &,  BlockVector<float>  &);
 template
 void interpolation_difference< 2 >
 (const DoFHandler< 2 > &, const ConstraintMatrix &,
 const  BlockVector<float>  &,
 const DoFHandler< 2 > &, const ConstraintMatrix &,
  BlockVector<float>  &);
 template
 void project_dg< 2 >
 (const DoFHandler< 2 > &, const  BlockVector<float>  &,
 const DoFHandler< 2 > &,  BlockVector<float>  &);
 template
 void extrapolate< 2 >
 (const DoFHandler< 2 > &, const  BlockVector<float>  &,
 const DoFHandler< 2 > &,  BlockVector<float>  &);
 template
 void extrapolate< 2 >
 (const DoFHandler< 2 > &, const  BlockVector<float>  &,
 const DoFHandler< 2 > &, const ConstraintMatrix &,
  BlockVector<float>  &);
#endif
 }
 
namespace FETools
 {
#if  2  ==  3 
 template
 void back_interpolate< 2 >
 (const DoFHandler< 2 > &, const  BlockVector<long double>  &,
 const FiniteElement< 2 > &,  BlockVector<long double>  &);
 template
 void back_interpolate< 2 >
 (const DoFHandler< 2 > &, const ConstraintMatrix &,
 const  BlockVector<long double>  &,
 const DoFHandler< 2 > &, const ConstraintMatrix &,
  BlockVector<long double>  &);
 template
 void interpolation_difference< 2 >
 (const DoFHandler< 2 > &, const  BlockVector<long double>  &,
 const FiniteElement< 2 > &,  BlockVector<long double>  &);
 template
 void interpolation_difference< 2 >
 (const DoFHandler< 2 > &, const ConstraintMatrix &,
 const  BlockVector<long double>  &,
 const DoFHandler< 2 > &, const ConstraintMatrix &,
  BlockVector<long double>  &);
 template
 void project_dg< 2 >
 (const DoFHandler< 2 > &, const  BlockVector<long double>  &,
 const DoFHandler< 2 > &,  BlockVector<long double>  &);
 template
 void extrapolate< 2 >
 (const DoFHandler< 2 > &, const  BlockVector<long double>  &,
 const DoFHandler< 2 > &,  BlockVector<long double>  &);
 template
 void extrapolate< 2 >
 (const DoFHandler< 2 > &, const  BlockVector<long double>  &,
 const DoFHandler< 2 > &, const ConstraintMatrix &,
  BlockVector<long double>  &);
#endif
 }
 
namespace FETools
 {
#if  2  ==  3 
 template
 void back_interpolate< 2 >
 (const DoFHandler< 2 > &, const  parallel::distributed::Vector<double>  &,
 const FiniteElement< 2 > &,  parallel::distributed::Vector<double>  &);
 template
 void back_interpolate< 2 >
 (const DoFHandler< 2 > &, const ConstraintMatrix &,
 const  parallel::distributed::Vector<double>  &,
 const DoFHandler< 2 > &, const ConstraintMatrix &,
  parallel::distributed::Vector<double>  &);
 template
 void interpolation_difference< 2 >
 (const DoFHandler< 2 > &, const  parallel::distributed::Vector<double>  &,
 const FiniteElement< 2 > &,  parallel::distributed::Vector<double>  &);
 template
 void interpolation_difference< 2 >
 (const DoFHandler< 2 > &, const ConstraintMatrix &,
 const  parallel::distributed::Vector<double>  &,
 const DoFHandler< 2 > &, const ConstraintMatrix &,
  parallel::distributed::Vector<double>  &);
 template
 void project_dg< 2 >
 (const DoFHandler< 2 > &, const  parallel::distributed::Vector<double>  &,
 const DoFHandler< 2 > &,  parallel::distributed::Vector<double>  &);
 template
 void extrapolate< 2 >
 (const DoFHandler< 2 > &, const  parallel::distributed::Vector<double>  &,
 const DoFHandler< 2 > &,  parallel::distributed::Vector<double>  &);
 template
 void extrapolate< 2 >
 (const DoFHandler< 2 > &, const  parallel::distributed::Vector<double>  &,
 const DoFHandler< 2 > &, const ConstraintMatrix &,
  parallel::distributed::Vector<double>  &);
#endif
 }
 
namespace FETools
 {
#if  2  ==  3 
 template
 void back_interpolate< 2 >
 (const DoFHandler< 2 > &, const  parallel::distributed::Vector<float>  &,
 const FiniteElement< 2 > &,  parallel::distributed::Vector<float>  &);
 template
 void back_interpolate< 2 >
 (const DoFHandler< 2 > &, const ConstraintMatrix &,
 const  parallel::distributed::Vector<float>  &,
 const DoFHandler< 2 > &, const ConstraintMatrix &,
  parallel::distributed::Vector<float>  &);
 template
 void interpolation_difference< 2 >
 (const DoFHandler< 2 > &, const  parallel::distributed::Vector<float>  &,
 const FiniteElement< 2 > &,  parallel::distributed::Vector<float>  &);
 template
 void interpolation_difference< 2 >
 (const DoFHandler< 2 > &, const ConstraintMatrix &,
 const  parallel::distributed::Vector<float>  &,
 const DoFHandler< 2 > &, const ConstraintMatrix &,
  parallel::distributed::Vector<float>  &);
 template
 void project_dg< 2 >
 (const DoFHandler< 2 > &, const  parallel::distributed::Vector<float>  &,
 const DoFHandler< 2 > &,  parallel::distributed::Vector<float>  &);
 template
 void extrapolate< 2 >
 (const DoFHandler< 2 > &, const  parallel::distributed::Vector<float>  &,
 const DoFHandler< 2 > &,  parallel::distributed::Vector<float>  &);
 template
 void extrapolate< 2 >
 (const DoFHandler< 2 > &, const  parallel::distributed::Vector<float>  &,
 const DoFHandler< 2 > &, const ConstraintMatrix &,
  parallel::distributed::Vector<float>  &);
#endif
 }
 
namespace FETools
 {
#if  2  ==  3 
 template
 void back_interpolate< 2 >
 (const DoFHandler< 2 > &, const  parallel::distributed::Vector<long double>  &,
 const FiniteElement< 2 > &,  parallel::distributed::Vector<long double>  &);
 template
 void back_interpolate< 2 >
 (const DoFHandler< 2 > &, const ConstraintMatrix &,
 const  parallel::distributed::Vector<long double>  &,
 const DoFHandler< 2 > &, const ConstraintMatrix &,
  parallel::distributed::Vector<long double>  &);
 template
 void interpolation_difference< 2 >
 (const DoFHandler< 2 > &, const  parallel::distributed::Vector<long double>  &,
 const FiniteElement< 2 > &,  parallel::distributed::Vector<long double>  &);
 template
 void interpolation_difference< 2 >
 (const DoFHandler< 2 > &, const ConstraintMatrix &,
 const  parallel::distributed::Vector<long double>  &,
 const DoFHandler< 2 > &, const ConstraintMatrix &,
  parallel::distributed::Vector<long double>  &);
 template
 void project_dg< 2 >
 (const DoFHandler< 2 > &, const  parallel::distributed::Vector<long double>  &,
 const DoFHandler< 2 > &,  parallel::distributed::Vector<long double>  &);
 template
 void extrapolate< 2 >
 (const DoFHandler< 2 > &, const  parallel::distributed::Vector<long double>  &,
 const DoFHandler< 2 > &,  parallel::distributed::Vector<long double>  &);
 template
 void extrapolate< 2 >
 (const DoFHandler< 2 > &, const  parallel::distributed::Vector<long double>  &,
 const DoFHandler< 2 > &, const ConstraintMatrix &,
  parallel::distributed::Vector<long double>  &);
#endif
 }
 
namespace FETools
 {
#if  2  ==  3 
 template
 void back_interpolate< 2 >
 (const DoFHandler< 2 > &, const  parallel::distributed::BlockVector<double>  &,
 const FiniteElement< 2 > &,  parallel::distributed::BlockVector<double>  &);
 template
 void back_interpolate< 2 >
 (const DoFHandler< 2 > &, const ConstraintMatrix &,
 const  parallel::distributed::BlockVector<double>  &,
 const DoFHandler< 2 > &, const ConstraintMatrix &,
  parallel::distributed::BlockVector<double>  &);
 template
 void interpolation_difference< 2 >
 (const DoFHandler< 2 > &, const  parallel::distributed::BlockVector<double>  &,
 const FiniteElement< 2 > &,  parallel::distributed::BlockVector<double>  &);
 template
 void interpolation_difference< 2 >
 (const DoFHandler< 2 > &, const ConstraintMatrix &,
 const  parallel::distributed::BlockVector<double>  &,
 const DoFHandler< 2 > &, const ConstraintMatrix &,
  parallel::distributed::BlockVector<double>  &);
 template
 void project_dg< 2 >
 (const DoFHandler< 2 > &, const  parallel::distributed::BlockVector<double>  &,
 const DoFHandler< 2 > &,  parallel::distributed::BlockVector<double>  &);
 template
 void extrapolate< 2 >
 (const DoFHandler< 2 > &, const  parallel::distributed::BlockVector<double>  &,
 const DoFHandler< 2 > &,  parallel::distributed::BlockVector<double>  &);
 template
 void extrapolate< 2 >
 (const DoFHandler< 2 > &, const  parallel::distributed::BlockVector<double>  &,
 const DoFHandler< 2 > &, const ConstraintMatrix &,
  parallel::distributed::BlockVector<double>  &);
#endif
 }
 
namespace FETools
 {
#if  2  ==  3 
 template
 void back_interpolate< 2 >
 (const DoFHandler< 2 > &, const  parallel::distributed::BlockVector<float>  &,
 const FiniteElement< 2 > &,  parallel::distributed::BlockVector<float>  &);
 template
 void back_interpolate< 2 >
 (const DoFHandler< 2 > &, const ConstraintMatrix &,
 const  parallel::distributed::BlockVector<float>  &,
 const DoFHandler< 2 > &, const ConstraintMatrix &,
  parallel::distributed::BlockVector<float>  &);
 template
 void interpolation_difference< 2 >
 (const DoFHandler< 2 > &, const  parallel::distributed::BlockVector<float>  &,
 const FiniteElement< 2 > &,  parallel::distributed::BlockVector<float>  &);
 template
 void interpolation_difference< 2 >
 (const DoFHandler< 2 > &, const ConstraintMatrix &,
 const  parallel::distributed::BlockVector<float>  &,
 const DoFHandler< 2 > &, const ConstraintMatrix &,
  parallel::distributed::BlockVector<float>  &);
 template
 void project_dg< 2 >
 (const DoFHandler< 2 > &, const  parallel::distributed::BlockVector<float>  &,
 const DoFHandler< 2 > &,  parallel::distributed::BlockVector<float>  &);
 template
 void extrapolate< 2 >
 (const DoFHandler< 2 > &, const  parallel::distributed::BlockVector<float>  &,
 const DoFHandler< 2 > &,  parallel::distributed::BlockVector<float>  &);
 template
 void extrapolate< 2 >
 (const DoFHandler< 2 > &, const  parallel::distributed::BlockVector<float>  &,
 const DoFHandler< 2 > &, const ConstraintMatrix &,
  parallel::distributed::BlockVector<float>  &);
#endif
 }
 
namespace FETools
 {
#if  2  ==  3 
 template
 void back_interpolate< 2 >
 (const DoFHandler< 2 > &, const  parallel::distributed::BlockVector<long double>  &,
 const FiniteElement< 2 > &,  parallel::distributed::BlockVector<long double>  &);
 template
 void back_interpolate< 2 >
 (const DoFHandler< 2 > &, const ConstraintMatrix &,
 const  parallel::distributed::BlockVector<long double>  &,
 const DoFHandler< 2 > &, const ConstraintMatrix &,
  parallel::distributed::BlockVector<long double>  &);
 template
 void interpolation_difference< 2 >
 (const DoFHandler< 2 > &, const  parallel::distributed::BlockVector<long double>  &,
 const FiniteElement< 2 > &,  parallel::distributed::BlockVector<long double>  &);
 template
 void interpolation_difference< 2 >
 (const DoFHandler< 2 > &, const ConstraintMatrix &,
 const  parallel::distributed::BlockVector<long double>  &,
 const DoFHandler< 2 > &, const ConstraintMatrix &,
  parallel::distributed::BlockVector<long double>  &);
 template
 void project_dg< 2 >
 (const DoFHandler< 2 > &, const  parallel::distributed::BlockVector<long double>  &,
 const DoFHandler< 2 > &,  parallel::distributed::BlockVector<long double>  &);
 template
 void extrapolate< 2 >
 (const DoFHandler< 2 > &, const  parallel::distributed::BlockVector<long double>  &,
 const DoFHandler< 2 > &,  parallel::distributed::BlockVector<long double>  &);
 template
 void extrapolate< 2 >
 (const DoFHandler< 2 > &, const  parallel::distributed::BlockVector<long double>  &,
 const DoFHandler< 2 > &, const ConstraintMatrix &,
  parallel::distributed::BlockVector<long double>  &);
#endif
 }
 
namespace FETools
 {
#if  3  ==  1 
 template
 void back_interpolate< 3 >
 (const DoFHandler< 3 > &, const  Vector<double>  &,
 const FiniteElement< 3 > &,  Vector<double>  &);
 template
 void back_interpolate< 3 >
 (const DoFHandler< 3 > &, const ConstraintMatrix &,
 const  Vector<double>  &,
 const DoFHandler< 3 > &, const ConstraintMatrix &,
  Vector<double>  &);
 template
 void interpolation_difference< 3 >
 (const DoFHandler< 3 > &, const  Vector<double>  &,
 const FiniteElement< 3 > &,  Vector<double>  &);
 template
 void interpolation_difference< 3 >
 (const DoFHandler< 3 > &, const ConstraintMatrix &,
 const  Vector<double>  &,
 const DoFHandler< 3 > &, const ConstraintMatrix &,
  Vector<double>  &);
 template
 void project_dg< 3 >
 (const DoFHandler< 3 > &, const  Vector<double>  &,
 const DoFHandler< 3 > &,  Vector<double>  &);
 template
 void extrapolate< 3 >
 (const DoFHandler< 3 > &, const  Vector<double>  &,
 const DoFHandler< 3 > &,  Vector<double>  &);
 template
 void extrapolate< 3 >
 (const DoFHandler< 3 > &, const  Vector<double>  &,
 const DoFHandler< 3 > &, const ConstraintMatrix &,
  Vector<double>  &);
#endif
 }
 
namespace FETools
 {
#if  3  ==  1 
 template
 void back_interpolate< 3 >
 (const DoFHandler< 3 > &, const  Vector<float>  &,
 const FiniteElement< 3 > &,  Vector<float>  &);
 template
 void back_interpolate< 3 >
 (const DoFHandler< 3 > &, const ConstraintMatrix &,
 const  Vector<float>  &,
 const DoFHandler< 3 > &, const ConstraintMatrix &,
  Vector<float>  &);
 template
 void interpolation_difference< 3 >
 (const DoFHandler< 3 > &, const  Vector<float>  &,
 const FiniteElement< 3 > &,  Vector<float>  &);
 template
 void interpolation_difference< 3 >
 (const DoFHandler< 3 > &, const ConstraintMatrix &,
 const  Vector<float>  &,
 const DoFHandler< 3 > &, const ConstraintMatrix &,
  Vector<float>  &);
 template
 void project_dg< 3 >
 (const DoFHandler< 3 > &, const  Vector<float>  &,
 const DoFHandler< 3 > &,  Vector<float>  &);
 template
 void extrapolate< 3 >
 (const DoFHandler< 3 > &, const  Vector<float>  &,
 const DoFHandler< 3 > &,  Vector<float>  &);
 template
 void extrapolate< 3 >
 (const DoFHandler< 3 > &, const  Vector<float>  &,
 const DoFHandler< 3 > &, const ConstraintMatrix &,
  Vector<float>  &);
#endif
 }
 
namespace FETools
 {
#if  3  ==  1 
 template
 void back_interpolate< 3 >
 (const DoFHandler< 3 > &, const  Vector<long double>  &,
 const FiniteElement< 3 > &,  Vector<long double>  &);
 template
 void back_interpolate< 3 >
 (const DoFHandler< 3 > &, const ConstraintMatrix &,
 const  Vector<long double>  &,
 const DoFHandler< 3 > &, const ConstraintMatrix &,
  Vector<long double>  &);
 template
 void interpolation_difference< 3 >
 (const DoFHandler< 3 > &, const  Vector<long double>  &,
 const FiniteElement< 3 > &,  Vector<long double>  &);
 template
 void interpolation_difference< 3 >
 (const DoFHandler< 3 > &, const ConstraintMatrix &,
 const  Vector<long double>  &,
 const DoFHandler< 3 > &, const ConstraintMatrix &,
  Vector<long double>  &);
 template
 void project_dg< 3 >
 (const DoFHandler< 3 > &, const  Vector<long double>  &,
 const DoFHandler< 3 > &,  Vector<long double>  &);
 template
 void extrapolate< 3 >
 (const DoFHandler< 3 > &, const  Vector<long double>  &,
 const DoFHandler< 3 > &,  Vector<long double>  &);
 template
 void extrapolate< 3 >
 (const DoFHandler< 3 > &, const  Vector<long double>  &,
 const DoFHandler< 3 > &, const ConstraintMatrix &,
  Vector<long double>  &);
#endif
 }
 
namespace FETools
 {
#if  3  ==  1 
 template
 void back_interpolate< 3 >
 (const DoFHandler< 3 > &, const  BlockVector<double>  &,
 const FiniteElement< 3 > &,  BlockVector<double>  &);
 template
 void back_interpolate< 3 >
 (const DoFHandler< 3 > &, const ConstraintMatrix &,
 const  BlockVector<double>  &,
 const DoFHandler< 3 > &, const ConstraintMatrix &,
  BlockVector<double>  &);
 template
 void interpolation_difference< 3 >
 (const DoFHandler< 3 > &, const  BlockVector<double>  &,
 const FiniteElement< 3 > &,  BlockVector<double>  &);
 template
 void interpolation_difference< 3 >
 (const DoFHandler< 3 > &, const ConstraintMatrix &,
 const  BlockVector<double>  &,
 const DoFHandler< 3 > &, const ConstraintMatrix &,
  BlockVector<double>  &);
 template
 void project_dg< 3 >
 (const DoFHandler< 3 > &, const  BlockVector<double>  &,
 const DoFHandler< 3 > &,  BlockVector<double>  &);
 template
 void extrapolate< 3 >
 (const DoFHandler< 3 > &, const  BlockVector<double>  &,
 const DoFHandler< 3 > &,  BlockVector<double>  &);
 template
 void extrapolate< 3 >
 (const DoFHandler< 3 > &, const  BlockVector<double>  &,
 const DoFHandler< 3 > &, const ConstraintMatrix &,
  BlockVector<double>  &);
#endif
 }
 
namespace FETools
 {
#if  3  ==  1 
 template
 void back_interpolate< 3 >
 (const DoFHandler< 3 > &, const  BlockVector<float>  &,
 const FiniteElement< 3 > &,  BlockVector<float>  &);
 template
 void back_interpolate< 3 >
 (const DoFHandler< 3 > &, const ConstraintMatrix &,
 const  BlockVector<float>  &,
 const DoFHandler< 3 > &, const ConstraintMatrix &,
  BlockVector<float>  &);
 template
 void interpolation_difference< 3 >
 (const DoFHandler< 3 > &, const  BlockVector<float>  &,
 const FiniteElement< 3 > &,  BlockVector<float>  &);
 template
 void interpolation_difference< 3 >
 (const DoFHandler< 3 > &, const ConstraintMatrix &,
 const  BlockVector<float>  &,
 const DoFHandler< 3 > &, const ConstraintMatrix &,
  BlockVector<float>  &);
 template
 void project_dg< 3 >
 (const DoFHandler< 3 > &, const  BlockVector<float>  &,
 const DoFHandler< 3 > &,  BlockVector<float>  &);
 template
 void extrapolate< 3 >
 (const DoFHandler< 3 > &, const  BlockVector<float>  &,
 const DoFHandler< 3 > &,  BlockVector<float>  &);
 template
 void extrapolate< 3 >
 (const DoFHandler< 3 > &, const  BlockVector<float>  &,
 const DoFHandler< 3 > &, const ConstraintMatrix &,
  BlockVector<float>  &);
#endif
 }
 
namespace FETools
 {
#if  3  ==  1 
 template
 void back_interpolate< 3 >
 (const DoFHandler< 3 > &, const  BlockVector<long double>  &,
 const FiniteElement< 3 > &,  BlockVector<long double>  &);
 template
 void back_interpolate< 3 >
 (const DoFHandler< 3 > &, const ConstraintMatrix &,
 const  BlockVector<long double>  &,
 const DoFHandler< 3 > &, const ConstraintMatrix &,
  BlockVector<long double>  &);
 template
 void interpolation_difference< 3 >
 (const DoFHandler< 3 > &, const  BlockVector<long double>  &,
 const FiniteElement< 3 > &,  BlockVector<long double>  &);
 template
 void interpolation_difference< 3 >
 (const DoFHandler< 3 > &, const ConstraintMatrix &,
 const  BlockVector<long double>  &,
 const DoFHandler< 3 > &, const ConstraintMatrix &,
  BlockVector<long double>  &);
 template
 void project_dg< 3 >
 (const DoFHandler< 3 > &, const  BlockVector<long double>  &,
 const DoFHandler< 3 > &,  BlockVector<long double>  &);
 template
 void extrapolate< 3 >
 (const DoFHandler< 3 > &, const  BlockVector<long double>  &,
 const DoFHandler< 3 > &,  BlockVector<long double>  &);
 template
 void extrapolate< 3 >
 (const DoFHandler< 3 > &, const  BlockVector<long double>  &,
 const DoFHandler< 3 > &, const ConstraintMatrix &,
  BlockVector<long double>  &);
#endif
 }
 
namespace FETools
 {
#if  3  ==  1 
 template
 void back_interpolate< 3 >
 (const DoFHandler< 3 > &, const  parallel::distributed::Vector<double>  &,
 const FiniteElement< 3 > &,  parallel::distributed::Vector<double>  &);
 template
 void back_interpolate< 3 >
 (const DoFHandler< 3 > &, const ConstraintMatrix &,
 const  parallel::distributed::Vector<double>  &,
 const DoFHandler< 3 > &, const ConstraintMatrix &,
  parallel::distributed::Vector<double>  &);
 template
 void interpolation_difference< 3 >
 (const DoFHandler< 3 > &, const  parallel::distributed::Vector<double>  &,
 const FiniteElement< 3 > &,  parallel::distributed::Vector<double>  &);
 template
 void interpolation_difference< 3 >
 (const DoFHandler< 3 > &, const ConstraintMatrix &,
 const  parallel::distributed::Vector<double>  &,
 const DoFHandler< 3 > &, const ConstraintMatrix &,
  parallel::distributed::Vector<double>  &);
 template
 void project_dg< 3 >
 (const DoFHandler< 3 > &, const  parallel::distributed::Vector<double>  &,
 const DoFHandler< 3 > &,  parallel::distributed::Vector<double>  &);
 template
 void extrapolate< 3 >
 (const DoFHandler< 3 > &, const  parallel::distributed::Vector<double>  &,
 const DoFHandler< 3 > &,  parallel::distributed::Vector<double>  &);
 template
 void extrapolate< 3 >
 (const DoFHandler< 3 > &, const  parallel::distributed::Vector<double>  &,
 const DoFHandler< 3 > &, const ConstraintMatrix &,
  parallel::distributed::Vector<double>  &);
#endif
 }
 
namespace FETools
 {
#if  3  ==  1 
 template
 void back_interpolate< 3 >
 (const DoFHandler< 3 > &, const  parallel::distributed::Vector<float>  &,
 const FiniteElement< 3 > &,  parallel::distributed::Vector<float>  &);
 template
 void back_interpolate< 3 >
 (const DoFHandler< 3 > &, const ConstraintMatrix &,
 const  parallel::distributed::Vector<float>  &,
 const DoFHandler< 3 > &, const ConstraintMatrix &,
  parallel::distributed::Vector<float>  &);
 template
 void interpolation_difference< 3 >
 (const DoFHandler< 3 > &, const  parallel::distributed::Vector<float>  &,
 const FiniteElement< 3 > &,  parallel::distributed::Vector<float>  &);
 template
 void interpolation_difference< 3 >
 (const DoFHandler< 3 > &, const ConstraintMatrix &,
 const  parallel::distributed::Vector<float>  &,
 const DoFHandler< 3 > &, const ConstraintMatrix &,
  parallel::distributed::Vector<float>  &);
 template
 void project_dg< 3 >
 (const DoFHandler< 3 > &, const  parallel::distributed::Vector<float>  &,
 const DoFHandler< 3 > &,  parallel::distributed::Vector<float>  &);
 template
 void extrapolate< 3 >
 (const DoFHandler< 3 > &, const  parallel::distributed::Vector<float>  &,
 const DoFHandler< 3 > &,  parallel::distributed::Vector<float>  &);
 template
 void extrapolate< 3 >
 (const DoFHandler< 3 > &, const  parallel::distributed::Vector<float>  &,
 const DoFHandler< 3 > &, const ConstraintMatrix &,
  parallel::distributed::Vector<float>  &);
#endif
 }
 
namespace FETools
 {
#if  3  ==  1 
 template
 void back_interpolate< 3 >
 (const DoFHandler< 3 > &, const  parallel::distributed::Vector<long double>  &,
 const FiniteElement< 3 > &,  parallel::distributed::Vector<long double>  &);
 template
 void back_interpolate< 3 >
 (const DoFHandler< 3 > &, const ConstraintMatrix &,
 const  parallel::distributed::Vector<long double>  &,
 const DoFHandler< 3 > &, const ConstraintMatrix &,
  parallel::distributed::Vector<long double>  &);
 template
 void interpolation_difference< 3 >
 (const DoFHandler< 3 > &, const  parallel::distributed::Vector<long double>  &,
 const FiniteElement< 3 > &,  parallel::distributed::Vector<long double>  &);
 template
 void interpolation_difference< 3 >
 (const DoFHandler< 3 > &, const ConstraintMatrix &,
 const  parallel::distributed::Vector<long double>  &,
 const DoFHandler< 3 > &, const ConstraintMatrix &,
  parallel::distributed::Vector<long double>  &);
 template
 void project_dg< 3 >
 (const DoFHandler< 3 > &, const  parallel::distributed::Vector<long double>  &,
 const DoFHandler< 3 > &,  parallel::distributed::Vector<long double>  &);
 template
 void extrapolate< 3 >
 (const DoFHandler< 3 > &, const  parallel::distributed::Vector<long double>  &,
 const DoFHandler< 3 > &,  parallel::distributed::Vector<long double>  &);
 template
 void extrapolate< 3 >
 (const DoFHandler< 3 > &, const  parallel::distributed::Vector<long double>  &,
 const DoFHandler< 3 > &, const ConstraintMatrix &,
  parallel::distributed::Vector<long double>  &);
#endif
 }
 
namespace FETools
 {
#if  3  ==  1 
 template
 void back_interpolate< 3 >
 (const DoFHandler< 3 > &, const  parallel::distributed::BlockVector<double>  &,
 const FiniteElement< 3 > &,  parallel::distributed::BlockVector<double>  &);
 template
 void back_interpolate< 3 >
 (const DoFHandler< 3 > &, const ConstraintMatrix &,
 const  parallel::distributed::BlockVector<double>  &,
 const DoFHandler< 3 > &, const ConstraintMatrix &,
  parallel::distributed::BlockVector<double>  &);
 template
 void interpolation_difference< 3 >
 (const DoFHandler< 3 > &, const  parallel::distributed::BlockVector<double>  &,
 const FiniteElement< 3 > &,  parallel::distributed::BlockVector<double>  &);
 template
 void interpolation_difference< 3 >
 (const DoFHandler< 3 > &, const ConstraintMatrix &,
 const  parallel::distributed::BlockVector<double>  &,
 const DoFHandler< 3 > &, const ConstraintMatrix &,
  parallel::distributed::BlockVector<double>  &);
 template
 void project_dg< 3 >
 (const DoFHandler< 3 > &, const  parallel::distributed::BlockVector<double>  &,
 const DoFHandler< 3 > &,  parallel::distributed::BlockVector<double>  &);
 template
 void extrapolate< 3 >
 (const DoFHandler< 3 > &, const  parallel::distributed::BlockVector<double>  &,
 const DoFHandler< 3 > &,  parallel::distributed::BlockVector<double>  &);
 template
 void extrapolate< 3 >
 (const DoFHandler< 3 > &, const  parallel::distributed::BlockVector<double>  &,
 const DoFHandler< 3 > &, const ConstraintMatrix &,
  parallel::distributed::BlockVector<double>  &);
#endif
 }
 
namespace FETools
 {
#if  3  ==  1 
 template
 void back_interpolate< 3 >
 (const DoFHandler< 3 > &, const  parallel::distributed::BlockVector<float>  &,
 const FiniteElement< 3 > &,  parallel::distributed::BlockVector<float>  &);
 template
 void back_interpolate< 3 >
 (const DoFHandler< 3 > &, const ConstraintMatrix &,
 const  parallel::distributed::BlockVector<float>  &,
 const DoFHandler< 3 > &, const ConstraintMatrix &,
  parallel::distributed::BlockVector<float>  &);
 template
 void interpolation_difference< 3 >
 (const DoFHandler< 3 > &, const  parallel::distributed::BlockVector<float>  &,
 const FiniteElement< 3 > &,  parallel::distributed::BlockVector<float>  &);
 template
 void interpolation_difference< 3 >
 (const DoFHandler< 3 > &, const ConstraintMatrix &,
 const  parallel::distributed::BlockVector<float>  &,
 const DoFHandler< 3 > &, const ConstraintMatrix &,
  parallel::distributed::BlockVector<float>  &);
 template
 void project_dg< 3 >
 (const DoFHandler< 3 > &, const  parallel::distributed::BlockVector<float>  &,
 const DoFHandler< 3 > &,  parallel::distributed::BlockVector<float>  &);
 template
 void extrapolate< 3 >
 (const DoFHandler< 3 > &, const  parallel::distributed::BlockVector<float>  &,
 const DoFHandler< 3 > &,  parallel::distributed::BlockVector<float>  &);
 template
 void extrapolate< 3 >
 (const DoFHandler< 3 > &, const  parallel::distributed::BlockVector<float>  &,
 const DoFHandler< 3 > &, const ConstraintMatrix &,
  parallel::distributed::BlockVector<float>  &);
#endif
 }
 
namespace FETools
 {
#if  3  ==  1 
 template
 void back_interpolate< 3 >
 (const DoFHandler< 3 > &, const  parallel::distributed::BlockVector<long double>  &,
 const FiniteElement< 3 > &,  parallel::distributed::BlockVector<long double>  &);
 template
 void back_interpolate< 3 >
 (const DoFHandler< 3 > &, const ConstraintMatrix &,
 const  parallel::distributed::BlockVector<long double>  &,
 const DoFHandler< 3 > &, const ConstraintMatrix &,
  parallel::distributed::BlockVector<long double>  &);
 template
 void interpolation_difference< 3 >
 (const DoFHandler< 3 > &, const  parallel::distributed::BlockVector<long double>  &,
 const FiniteElement< 3 > &,  parallel::distributed::BlockVector<long double>  &);
 template
 void interpolation_difference< 3 >
 (const DoFHandler< 3 > &, const ConstraintMatrix &,
 const  parallel::distributed::BlockVector<long double>  &,
 const DoFHandler< 3 > &, const ConstraintMatrix &,
  parallel::distributed::BlockVector<long double>  &);
 template
 void project_dg< 3 >
 (const DoFHandler< 3 > &, const  parallel::distributed::BlockVector<long double>  &,
 const DoFHandler< 3 > &,  parallel::distributed::BlockVector<long double>  &);
 template
 void extrapolate< 3 >
 (const DoFHandler< 3 > &, const  parallel::distributed::BlockVector<long double>  &,
 const DoFHandler< 3 > &,  parallel::distributed::BlockVector<long double>  &);
 template
 void extrapolate< 3 >
 (const DoFHandler< 3 > &, const  parallel::distributed::BlockVector<long double>  &,
 const DoFHandler< 3 > &, const ConstraintMatrix &,
  parallel::distributed::BlockVector<long double>  &);
#endif
 }
 
namespace FETools
 {
#if  3  ==  2 
 template
 void back_interpolate< 3 >
 (const DoFHandler< 3 > &, const  Vector<double>  &,
 const FiniteElement< 3 > &,  Vector<double>  &);
 template
 void back_interpolate< 3 >
 (const DoFHandler< 3 > &, const ConstraintMatrix &,
 const  Vector<double>  &,
 const DoFHandler< 3 > &, const ConstraintMatrix &,
  Vector<double>  &);
 template
 void interpolation_difference< 3 >
 (const DoFHandler< 3 > &, const  Vector<double>  &,
 const FiniteElement< 3 > &,  Vector<double>  &);
 template
 void interpolation_difference< 3 >
 (const DoFHandler< 3 > &, const ConstraintMatrix &,
 const  Vector<double>  &,
 const DoFHandler< 3 > &, const ConstraintMatrix &,
  Vector<double>  &);
 template
 void project_dg< 3 >
 (const DoFHandler< 3 > &, const  Vector<double>  &,
 const DoFHandler< 3 > &,  Vector<double>  &);
 template
 void extrapolate< 3 >
 (const DoFHandler< 3 > &, const  Vector<double>  &,
 const DoFHandler< 3 > &,  Vector<double>  &);
 template
 void extrapolate< 3 >
 (const DoFHandler< 3 > &, const  Vector<double>  &,
 const DoFHandler< 3 > &, const ConstraintMatrix &,
  Vector<double>  &);
#endif
 }
 
namespace FETools
 {
#if  3  ==  2 
 template
 void back_interpolate< 3 >
 (const DoFHandler< 3 > &, const  Vector<float>  &,
 const FiniteElement< 3 > &,  Vector<float>  &);
 template
 void back_interpolate< 3 >
 (const DoFHandler< 3 > &, const ConstraintMatrix &,
 const  Vector<float>  &,
 const DoFHandler< 3 > &, const ConstraintMatrix &,
  Vector<float>  &);
 template
 void interpolation_difference< 3 >
 (const DoFHandler< 3 > &, const  Vector<float>  &,
 const FiniteElement< 3 > &,  Vector<float>  &);
 template
 void interpolation_difference< 3 >
 (const DoFHandler< 3 > &, const ConstraintMatrix &,
 const  Vector<float>  &,
 const DoFHandler< 3 > &, const ConstraintMatrix &,
  Vector<float>  &);
 template
 void project_dg< 3 >
 (const DoFHandler< 3 > &, const  Vector<float>  &,
 const DoFHandler< 3 > &,  Vector<float>  &);
 template
 void extrapolate< 3 >
 (const DoFHandler< 3 > &, const  Vector<float>  &,
 const DoFHandler< 3 > &,  Vector<float>  &);
 template
 void extrapolate< 3 >
 (const DoFHandler< 3 > &, const  Vector<float>  &,
 const DoFHandler< 3 > &, const ConstraintMatrix &,
  Vector<float>  &);
#endif
 }
 
namespace FETools
 {
#if  3  ==  2 
 template
 void back_interpolate< 3 >
 (const DoFHandler< 3 > &, const  Vector<long double>  &,
 const FiniteElement< 3 > &,  Vector<long double>  &);
 template
 void back_interpolate< 3 >
 (const DoFHandler< 3 > &, const ConstraintMatrix &,
 const  Vector<long double>  &,
 const DoFHandler< 3 > &, const ConstraintMatrix &,
  Vector<long double>  &);
 template
 void interpolation_difference< 3 >
 (const DoFHandler< 3 > &, const  Vector<long double>  &,
 const FiniteElement< 3 > &,  Vector<long double>  &);
 template
 void interpolation_difference< 3 >
 (const DoFHandler< 3 > &, const ConstraintMatrix &,
 const  Vector<long double>  &,
 const DoFHandler< 3 > &, const ConstraintMatrix &,
  Vector<long double>  &);
 template
 void project_dg< 3 >
 (const DoFHandler< 3 > &, const  Vector<long double>  &,
 const DoFHandler< 3 > &,  Vector<long double>  &);
 template
 void extrapolate< 3 >
 (const DoFHandler< 3 > &, const  Vector<long double>  &,
 const DoFHandler< 3 > &,  Vector<long double>  &);
 template
 void extrapolate< 3 >
 (const DoFHandler< 3 > &, const  Vector<long double>  &,
 const DoFHandler< 3 > &, const ConstraintMatrix &,
  Vector<long double>  &);
#endif
 }
 
namespace FETools
 {
#if  3  ==  2 
 template
 void back_interpolate< 3 >
 (const DoFHandler< 3 > &, const  BlockVector<double>  &,
 const FiniteElement< 3 > &,  BlockVector<double>  &);
 template
 void back_interpolate< 3 >
 (const DoFHandler< 3 > &, const ConstraintMatrix &,
 const  BlockVector<double>  &,
 const DoFHandler< 3 > &, const ConstraintMatrix &,
  BlockVector<double>  &);
 template
 void interpolation_difference< 3 >
 (const DoFHandler< 3 > &, const  BlockVector<double>  &,
 const FiniteElement< 3 > &,  BlockVector<double>  &);
 template
 void interpolation_difference< 3 >
 (const DoFHandler< 3 > &, const ConstraintMatrix &,
 const  BlockVector<double>  &,
 const DoFHandler< 3 > &, const ConstraintMatrix &,
  BlockVector<double>  &);
 template
 void project_dg< 3 >
 (const DoFHandler< 3 > &, const  BlockVector<double>  &,
 const DoFHandler< 3 > &,  BlockVector<double>  &);
 template
 void extrapolate< 3 >
 (const DoFHandler< 3 > &, const  BlockVector<double>  &,
 const DoFHandler< 3 > &,  BlockVector<double>  &);
 template
 void extrapolate< 3 >
 (const DoFHandler< 3 > &, const  BlockVector<double>  &,
 const DoFHandler< 3 > &, const ConstraintMatrix &,
  BlockVector<double>  &);
#endif
 }
 
namespace FETools
 {
#if  3  ==  2 
 template
 void back_interpolate< 3 >
 (const DoFHandler< 3 > &, const  BlockVector<float>  &,
 const FiniteElement< 3 > &,  BlockVector<float>  &);
 template
 void back_interpolate< 3 >
 (const DoFHandler< 3 > &, const ConstraintMatrix &,
 const  BlockVector<float>  &,
 const DoFHandler< 3 > &, const ConstraintMatrix &,
  BlockVector<float>  &);
 template
 void interpolation_difference< 3 >
 (const DoFHandler< 3 > &, const  BlockVector<float>  &,
 const FiniteElement< 3 > &,  BlockVector<float>  &);
 template
 void interpolation_difference< 3 >
 (const DoFHandler< 3 > &, const ConstraintMatrix &,
 const  BlockVector<float>  &,
 const DoFHandler< 3 > &, const ConstraintMatrix &,
  BlockVector<float>  &);
 template
 void project_dg< 3 >
 (const DoFHandler< 3 > &, const  BlockVector<float>  &,
 const DoFHandler< 3 > &,  BlockVector<float>  &);
 template
 void extrapolate< 3 >
 (const DoFHandler< 3 > &, const  BlockVector<float>  &,
 const DoFHandler< 3 > &,  BlockVector<float>  &);
 template
 void extrapolate< 3 >
 (const DoFHandler< 3 > &, const  BlockVector<float>  &,
 const DoFHandler< 3 > &, const ConstraintMatrix &,
  BlockVector<float>  &);
#endif
 }
 
namespace FETools
 {
#if  3  ==  2 
 template
 void back_interpolate< 3 >
 (const DoFHandler< 3 > &, const  BlockVector<long double>  &,
 const FiniteElement< 3 > &,  BlockVector<long double>  &);
 template
 void back_interpolate< 3 >
 (const DoFHandler< 3 > &, const ConstraintMatrix &,
 const  BlockVector<long double>  &,
 const DoFHandler< 3 > &, const ConstraintMatrix &,
  BlockVector<long double>  &);
 template
 void interpolation_difference< 3 >
 (const DoFHandler< 3 > &, const  BlockVector<long double>  &,
 const FiniteElement< 3 > &,  BlockVector<long double>  &);
 template
 void interpolation_difference< 3 >
 (const DoFHandler< 3 > &, const ConstraintMatrix &,
 const  BlockVector<long double>  &,
 const DoFHandler< 3 > &, const ConstraintMatrix &,
  BlockVector<long double>  &);
 template
 void project_dg< 3 >
 (const DoFHandler< 3 > &, const  BlockVector<long double>  &,
 const DoFHandler< 3 > &,  BlockVector<long double>  &);
 template
 void extrapolate< 3 >
 (const DoFHandler< 3 > &, const  BlockVector<long double>  &,
 const DoFHandler< 3 > &,  BlockVector<long double>  &);
 template
 void extrapolate< 3 >
 (const DoFHandler< 3 > &, const  BlockVector<long double>  &,
 const DoFHandler< 3 > &, const ConstraintMatrix &,
  BlockVector<long double>  &);
#endif
 }
 
namespace FETools
 {
#if  3  ==  2 
 template
 void back_interpolate< 3 >
 (const DoFHandler< 3 > &, const  parallel::distributed::Vector<double>  &,
 const FiniteElement< 3 > &,  parallel::distributed::Vector<double>  &);
 template
 void back_interpolate< 3 >
 (const DoFHandler< 3 > &, const ConstraintMatrix &,
 const  parallel::distributed::Vector<double>  &,
 const DoFHandler< 3 > &, const ConstraintMatrix &,
  parallel::distributed::Vector<double>  &);
 template
 void interpolation_difference< 3 >
 (const DoFHandler< 3 > &, const  parallel::distributed::Vector<double>  &,
 const FiniteElement< 3 > &,  parallel::distributed::Vector<double>  &);
 template
 void interpolation_difference< 3 >
 (const DoFHandler< 3 > &, const ConstraintMatrix &,
 const  parallel::distributed::Vector<double>  &,
 const DoFHandler< 3 > &, const ConstraintMatrix &,
  parallel::distributed::Vector<double>  &);
 template
 void project_dg< 3 >
 (const DoFHandler< 3 > &, const  parallel::distributed::Vector<double>  &,
 const DoFHandler< 3 > &,  parallel::distributed::Vector<double>  &);
 template
 void extrapolate< 3 >
 (const DoFHandler< 3 > &, const  parallel::distributed::Vector<double>  &,
 const DoFHandler< 3 > &,  parallel::distributed::Vector<double>  &);
 template
 void extrapolate< 3 >
 (const DoFHandler< 3 > &, const  parallel::distributed::Vector<double>  &,
 const DoFHandler< 3 > &, const ConstraintMatrix &,
  parallel::distributed::Vector<double>  &);
#endif
 }
 
namespace FETools
 {
#if  3  ==  2 
 template
 void back_interpolate< 3 >
 (const DoFHandler< 3 > &, const  parallel::distributed::Vector<float>  &,
 const FiniteElement< 3 > &,  parallel::distributed::Vector<float>  &);
 template
 void back_interpolate< 3 >
 (const DoFHandler< 3 > &, const ConstraintMatrix &,
 const  parallel::distributed::Vector<float>  &,
 const DoFHandler< 3 > &, const ConstraintMatrix &,
  parallel::distributed::Vector<float>  &);
 template
 void interpolation_difference< 3 >
 (const DoFHandler< 3 > &, const  parallel::distributed::Vector<float>  &,
 const FiniteElement< 3 > &,  parallel::distributed::Vector<float>  &);
 template
 void interpolation_difference< 3 >
 (const DoFHandler< 3 > &, const ConstraintMatrix &,
 const  parallel::distributed::Vector<float>  &,
 const DoFHandler< 3 > &, const ConstraintMatrix &,
  parallel::distributed::Vector<float>  &);
 template
 void project_dg< 3 >
 (const DoFHandler< 3 > &, const  parallel::distributed::Vector<float>  &,
 const DoFHandler< 3 > &,  parallel::distributed::Vector<float>  &);
 template
 void extrapolate< 3 >
 (const DoFHandler< 3 > &, const  parallel::distributed::Vector<float>  &,
 const DoFHandler< 3 > &,  parallel::distributed::Vector<float>  &);
 template
 void extrapolate< 3 >
 (const DoFHandler< 3 > &, const  parallel::distributed::Vector<float>  &,
 const DoFHandler< 3 > &, const ConstraintMatrix &,
  parallel::distributed::Vector<float>  &);
#endif
 }
 
namespace FETools
 {
#if  3  ==  2 
 template
 void back_interpolate< 3 >
 (const DoFHandler< 3 > &, const  parallel::distributed::Vector<long double>  &,
 const FiniteElement< 3 > &,  parallel::distributed::Vector<long double>  &);
 template
 void back_interpolate< 3 >
 (const DoFHandler< 3 > &, const ConstraintMatrix &,
 const  parallel::distributed::Vector<long double>  &,
 const DoFHandler< 3 > &, const ConstraintMatrix &,
  parallel::distributed::Vector<long double>  &);
 template
 void interpolation_difference< 3 >
 (const DoFHandler< 3 > &, const  parallel::distributed::Vector<long double>  &,
 const FiniteElement< 3 > &,  parallel::distributed::Vector<long double>  &);
 template
 void interpolation_difference< 3 >
 (const DoFHandler< 3 > &, const ConstraintMatrix &,
 const  parallel::distributed::Vector<long double>  &,
 const DoFHandler< 3 > &, const ConstraintMatrix &,
  parallel::distributed::Vector<long double>  &);
 template
 void project_dg< 3 >
 (const DoFHandler< 3 > &, const  parallel::distributed::Vector<long double>  &,
 const DoFHandler< 3 > &,  parallel::distributed::Vector<long double>  &);
 template
 void extrapolate< 3 >
 (const DoFHandler< 3 > &, const  parallel::distributed::Vector<long double>  &,
 const DoFHandler< 3 > &,  parallel::distributed::Vector<long double>  &);
 template
 void extrapolate< 3 >
 (const DoFHandler< 3 > &, const  parallel::distributed::Vector<long double>  &,
 const DoFHandler< 3 > &, const ConstraintMatrix &,
  parallel::distributed::Vector<long double>  &);
#endif
 }
 
namespace FETools
 {
#if  3  ==  2 
 template
 void back_interpolate< 3 >
 (const DoFHandler< 3 > &, const  parallel::distributed::BlockVector<double>  &,
 const FiniteElement< 3 > &,  parallel::distributed::BlockVector<double>  &);
 template
 void back_interpolate< 3 >
 (const DoFHandler< 3 > &, const ConstraintMatrix &,
 const  parallel::distributed::BlockVector<double>  &,
 const DoFHandler< 3 > &, const ConstraintMatrix &,
  parallel::distributed::BlockVector<double>  &);
 template
 void interpolation_difference< 3 >
 (const DoFHandler< 3 > &, const  parallel::distributed::BlockVector<double>  &,
 const FiniteElement< 3 > &,  parallel::distributed::BlockVector<double>  &);
 template
 void interpolation_difference< 3 >
 (const DoFHandler< 3 > &, const ConstraintMatrix &,
 const  parallel::distributed::BlockVector<double>  &,
 const DoFHandler< 3 > &, const ConstraintMatrix &,
  parallel::distributed::BlockVector<double>  &);
 template
 void project_dg< 3 >
 (const DoFHandler< 3 > &, const  parallel::distributed::BlockVector<double>  &,
 const DoFHandler< 3 > &,  parallel::distributed::BlockVector<double>  &);
 template
 void extrapolate< 3 >
 (const DoFHandler< 3 > &, const  parallel::distributed::BlockVector<double>  &,
 const DoFHandler< 3 > &,  parallel::distributed::BlockVector<double>  &);
 template
 void extrapolate< 3 >
 (const DoFHandler< 3 > &, const  parallel::distributed::BlockVector<double>  &,
 const DoFHandler< 3 > &, const ConstraintMatrix &,
  parallel::distributed::BlockVector<double>  &);
#endif
 }
 
namespace FETools
 {
#if  3  ==  2 
 template
 void back_interpolate< 3 >
 (const DoFHandler< 3 > &, const  parallel::distributed::BlockVector<float>  &,
 const FiniteElement< 3 > &,  parallel::distributed::BlockVector<float>  &);
 template
 void back_interpolate< 3 >
 (const DoFHandler< 3 > &, const ConstraintMatrix &,
 const  parallel::distributed::BlockVector<float>  &,
 const DoFHandler< 3 > &, const ConstraintMatrix &,
  parallel::distributed::BlockVector<float>  &);
 template
 void interpolation_difference< 3 >
 (const DoFHandler< 3 > &, const  parallel::distributed::BlockVector<float>  &,
 const FiniteElement< 3 > &,  parallel::distributed::BlockVector<float>  &);
 template
 void interpolation_difference< 3 >
 (const DoFHandler< 3 > &, const ConstraintMatrix &,
 const  parallel::distributed::BlockVector<float>  &,
 const DoFHandler< 3 > &, const ConstraintMatrix &,
  parallel::distributed::BlockVector<float>  &);
 template
 void project_dg< 3 >
 (const DoFHandler< 3 > &, const  parallel::distributed::BlockVector<float>  &,
 const DoFHandler< 3 > &,  parallel::distributed::BlockVector<float>  &);
 template
 void extrapolate< 3 >
 (const DoFHandler< 3 > &, const  parallel::distributed::BlockVector<float>  &,
 const DoFHandler< 3 > &,  parallel::distributed::BlockVector<float>  &);
 template
 void extrapolate< 3 >
 (const DoFHandler< 3 > &, const  parallel::distributed::BlockVector<float>  &,
 const DoFHandler< 3 > &, const ConstraintMatrix &,
  parallel::distributed::BlockVector<float>  &);
#endif
 }
 
namespace FETools
 {
#if  3  ==  2 
 template
 void back_interpolate< 3 >
 (const DoFHandler< 3 > &, const  parallel::distributed::BlockVector<long double>  &,
 const FiniteElement< 3 > &,  parallel::distributed::BlockVector<long double>  &);
 template
 void back_interpolate< 3 >
 (const DoFHandler< 3 > &, const ConstraintMatrix &,
 const  parallel::distributed::BlockVector<long double>  &,
 const DoFHandler< 3 > &, const ConstraintMatrix &,
  parallel::distributed::BlockVector<long double>  &);
 template
 void interpolation_difference< 3 >
 (const DoFHandler< 3 > &, const  parallel::distributed::BlockVector<long double>  &,
 const FiniteElement< 3 > &,  parallel::distributed::BlockVector<long double>  &);
 template
 void interpolation_difference< 3 >
 (const DoFHandler< 3 > &, const ConstraintMatrix &,
 const  parallel::distributed::BlockVector<long double>  &,
 const DoFHandler< 3 > &, const ConstraintMatrix &,
  parallel::distributed::BlockVector<long double>  &);
 template
 void project_dg< 3 >
 (const DoFHandler< 3 > &, const  parallel::distributed::BlockVector<long double>  &,
 const DoFHandler< 3 > &,  parallel::distributed::BlockVector<long double>  &);
 template
 void extrapolate< 3 >
 (const DoFHandler< 3 > &, const  parallel::distributed::BlockVector<long double>  &,
 const DoFHandler< 3 > &,  parallel::distributed::BlockVector<long double>  &);
 template
 void extrapolate< 3 >
 (const DoFHandler< 3 > &, const  parallel::distributed::BlockVector<long double>  &,
 const DoFHandler< 3 > &, const ConstraintMatrix &,
  parallel::distributed::BlockVector<long double>  &);
#endif
 }
 
namespace FETools
 {
#if  3  ==  3 
 template
 void back_interpolate< 3 >
 (const DoFHandler< 3 > &, const  Vector<double>  &,
 const FiniteElement< 3 > &,  Vector<double>  &);
 template
 void back_interpolate< 3 >
 (const DoFHandler< 3 > &, const ConstraintMatrix &,
 const  Vector<double>  &,
 const DoFHandler< 3 > &, const ConstraintMatrix &,
  Vector<double>  &);
 template
 void interpolation_difference< 3 >
 (const DoFHandler< 3 > &, const  Vector<double>  &,
 const FiniteElement< 3 > &,  Vector<double>  &);
 template
 void interpolation_difference< 3 >
 (const DoFHandler< 3 > &, const ConstraintMatrix &,
 const  Vector<double>  &,
 const DoFHandler< 3 > &, const ConstraintMatrix &,
  Vector<double>  &);
 template
 void project_dg< 3 >
 (const DoFHandler< 3 > &, const  Vector<double>  &,
 const DoFHandler< 3 > &,  Vector<double>  &);
 template
 void extrapolate< 3 >
 (const DoFHandler< 3 > &, const  Vector<double>  &,
 const DoFHandler< 3 > &,  Vector<double>  &);
 template
 void extrapolate< 3 >
 (const DoFHandler< 3 > &, const  Vector<double>  &,
 const DoFHandler< 3 > &, const ConstraintMatrix &,
  Vector<double>  &);
#endif
 }
 
namespace FETools
 {
#if  3  ==  3 
 template
 void back_interpolate< 3 >
 (const DoFHandler< 3 > &, const  Vector<float>  &,
 const FiniteElement< 3 > &,  Vector<float>  &);
 template
 void back_interpolate< 3 >
 (const DoFHandler< 3 > &, const ConstraintMatrix &,
 const  Vector<float>  &,
 const DoFHandler< 3 > &, const ConstraintMatrix &,
  Vector<float>  &);
 template
 void interpolation_difference< 3 >
 (const DoFHandler< 3 > &, const  Vector<float>  &,
 const FiniteElement< 3 > &,  Vector<float>  &);
 template
 void interpolation_difference< 3 >
 (const DoFHandler< 3 > &, const ConstraintMatrix &,
 const  Vector<float>  &,
 const DoFHandler< 3 > &, const ConstraintMatrix &,
  Vector<float>  &);
 template
 void project_dg< 3 >
 (const DoFHandler< 3 > &, const  Vector<float>  &,
 const DoFHandler< 3 > &,  Vector<float>  &);
 template
 void extrapolate< 3 >
 (const DoFHandler< 3 > &, const  Vector<float>  &,
 const DoFHandler< 3 > &,  Vector<float>  &);
 template
 void extrapolate< 3 >
 (const DoFHandler< 3 > &, const  Vector<float>  &,
 const DoFHandler< 3 > &, const ConstraintMatrix &,
  Vector<float>  &);
#endif
 }
 
namespace FETools
 {
#if  3  ==  3 
 template
 void back_interpolate< 3 >
 (const DoFHandler< 3 > &, const  Vector<long double>  &,
 const FiniteElement< 3 > &,  Vector<long double>  &);
 template
 void back_interpolate< 3 >
 (const DoFHandler< 3 > &, const ConstraintMatrix &,
 const  Vector<long double>  &,
 const DoFHandler< 3 > &, const ConstraintMatrix &,
  Vector<long double>  &);
 template
 void interpolation_difference< 3 >
 (const DoFHandler< 3 > &, const  Vector<long double>  &,
 const FiniteElement< 3 > &,  Vector<long double>  &);
 template
 void interpolation_difference< 3 >
 (const DoFHandler< 3 > &, const ConstraintMatrix &,
 const  Vector<long double>  &,
 const DoFHandler< 3 > &, const ConstraintMatrix &,
  Vector<long double>  &);
 template
 void project_dg< 3 >
 (const DoFHandler< 3 > &, const  Vector<long double>  &,
 const DoFHandler< 3 > &,  Vector<long double>  &);
 template
 void extrapolate< 3 >
 (const DoFHandler< 3 > &, const  Vector<long double>  &,
 const DoFHandler< 3 > &,  Vector<long double>  &);
 template
 void extrapolate< 3 >
 (const DoFHandler< 3 > &, const  Vector<long double>  &,
 const DoFHandler< 3 > &, const ConstraintMatrix &,
  Vector<long double>  &);
#endif
 }
 
namespace FETools
 {
#if  3  ==  3 
 template
 void back_interpolate< 3 >
 (const DoFHandler< 3 > &, const  BlockVector<double>  &,
 const FiniteElement< 3 > &,  BlockVector<double>  &);
 template
 void back_interpolate< 3 >
 (const DoFHandler< 3 > &, const ConstraintMatrix &,
 const  BlockVector<double>  &,
 const DoFHandler< 3 > &, const ConstraintMatrix &,
  BlockVector<double>  &);
 template
 void interpolation_difference< 3 >
 (const DoFHandler< 3 > &, const  BlockVector<double>  &,
 const FiniteElement< 3 > &,  BlockVector<double>  &);
 template
 void interpolation_difference< 3 >
 (const DoFHandler< 3 > &, const ConstraintMatrix &,
 const  BlockVector<double>  &,
 const DoFHandler< 3 > &, const ConstraintMatrix &,
  BlockVector<double>  &);
 template
 void project_dg< 3 >
 (const DoFHandler< 3 > &, const  BlockVector<double>  &,
 const DoFHandler< 3 > &,  BlockVector<double>  &);
 template
 void extrapolate< 3 >
 (const DoFHandler< 3 > &, const  BlockVector<double>  &,
 const DoFHandler< 3 > &,  BlockVector<double>  &);
 template
 void extrapolate< 3 >
 (const DoFHandler< 3 > &, const  BlockVector<double>  &,
 const DoFHandler< 3 > &, const ConstraintMatrix &,
  BlockVector<double>  &);
#endif
 }
 
namespace FETools
 {
#if  3  ==  3 
 template
 void back_interpolate< 3 >
 (const DoFHandler< 3 > &, const  BlockVector<float>  &,
 const FiniteElement< 3 > &,  BlockVector<float>  &);
 template
 void back_interpolate< 3 >
 (const DoFHandler< 3 > &, const ConstraintMatrix &,
 const  BlockVector<float>  &,
 const DoFHandler< 3 > &, const ConstraintMatrix &,
  BlockVector<float>  &);
 template
 void interpolation_difference< 3 >
 (const DoFHandler< 3 > &, const  BlockVector<float>  &,
 const FiniteElement< 3 > &,  BlockVector<float>  &);
 template
 void interpolation_difference< 3 >
 (const DoFHandler< 3 > &, const ConstraintMatrix &,
 const  BlockVector<float>  &,
 const DoFHandler< 3 > &, const ConstraintMatrix &,
  BlockVector<float>  &);
 template
 void project_dg< 3 >
 (const DoFHandler< 3 > &, const  BlockVector<float>  &,
 const DoFHandler< 3 > &,  BlockVector<float>  &);
 template
 void extrapolate< 3 >
 (const DoFHandler< 3 > &, const  BlockVector<float>  &,
 const DoFHandler< 3 > &,  BlockVector<float>  &);
 template
 void extrapolate< 3 >
 (const DoFHandler< 3 > &, const  BlockVector<float>  &,
 const DoFHandler< 3 > &, const ConstraintMatrix &,
  BlockVector<float>  &);
#endif
 }
 
namespace FETools
 {
#if  3  ==  3 
 template
 void back_interpolate< 3 >
 (const DoFHandler< 3 > &, const  BlockVector<long double>  &,
 const FiniteElement< 3 > &,  BlockVector<long double>  &);
 template
 void back_interpolate< 3 >
 (const DoFHandler< 3 > &, const ConstraintMatrix &,
 const  BlockVector<long double>  &,
 const DoFHandler< 3 > &, const ConstraintMatrix &,
  BlockVector<long double>  &);
 template
 void interpolation_difference< 3 >
 (const DoFHandler< 3 > &, const  BlockVector<long double>  &,
 const FiniteElement< 3 > &,  BlockVector<long double>  &);
 template
 void interpolation_difference< 3 >
 (const DoFHandler< 3 > &, const ConstraintMatrix &,
 const  BlockVector<long double>  &,
 const DoFHandler< 3 > &, const ConstraintMatrix &,
  BlockVector<long double>  &);
 template
 void project_dg< 3 >
 (const DoFHandler< 3 > &, const  BlockVector<long double>  &,
 const DoFHandler< 3 > &,  BlockVector<long double>  &);
 template
 void extrapolate< 3 >
 (const DoFHandler< 3 > &, const  BlockVector<long double>  &,
 const DoFHandler< 3 > &,  BlockVector<long double>  &);
 template
 void extrapolate< 3 >
 (const DoFHandler< 3 > &, const  BlockVector<long double>  &,
 const DoFHandler< 3 > &, const ConstraintMatrix &,
  BlockVector<long double>  &);
#endif
 }
 
namespace FETools
 {
#if  3  ==  3 
 template
 void back_interpolate< 3 >
 (const DoFHandler< 3 > &, const  parallel::distributed::Vector<double>  &,
 const FiniteElement< 3 > &,  parallel::distributed::Vector<double>  &);
 template
 void back_interpolate< 3 >
 (const DoFHandler< 3 > &, const ConstraintMatrix &,
 const  parallel::distributed::Vector<double>  &,
 const DoFHandler< 3 > &, const ConstraintMatrix &,
  parallel::distributed::Vector<double>  &);
 template
 void interpolation_difference< 3 >
 (const DoFHandler< 3 > &, const  parallel::distributed::Vector<double>  &,
 const FiniteElement< 3 > &,  parallel::distributed::Vector<double>  &);
 template
 void interpolation_difference< 3 >
 (const DoFHandler< 3 > &, const ConstraintMatrix &,
 const  parallel::distributed::Vector<double>  &,
 const DoFHandler< 3 > &, const ConstraintMatrix &,
  parallel::distributed::Vector<double>  &);
 template
 void project_dg< 3 >
 (const DoFHandler< 3 > &, const  parallel::distributed::Vector<double>  &,
 const DoFHandler< 3 > &,  parallel::distributed::Vector<double>  &);
 template
 void extrapolate< 3 >
 (const DoFHandler< 3 > &, const  parallel::distributed::Vector<double>  &,
 const DoFHandler< 3 > &,  parallel::distributed::Vector<double>  &);
 template
 void extrapolate< 3 >
 (const DoFHandler< 3 > &, const  parallel::distributed::Vector<double>  &,
 const DoFHandler< 3 > &, const ConstraintMatrix &,
  parallel::distributed::Vector<double>  &);
#endif
 }
 
namespace FETools
 {
#if  3  ==  3 
 template
 void back_interpolate< 3 >
 (const DoFHandler< 3 > &, const  parallel::distributed::Vector<float>  &,
 const FiniteElement< 3 > &,  parallel::distributed::Vector<float>  &);
 template
 void back_interpolate< 3 >
 (const DoFHandler< 3 > &, const ConstraintMatrix &,
 const  parallel::distributed::Vector<float>  &,
 const DoFHandler< 3 > &, const ConstraintMatrix &,
  parallel::distributed::Vector<float>  &);
 template
 void interpolation_difference< 3 >
 (const DoFHandler< 3 > &, const  parallel::distributed::Vector<float>  &,
 const FiniteElement< 3 > &,  parallel::distributed::Vector<float>  &);
 template
 void interpolation_difference< 3 >
 (const DoFHandler< 3 > &, const ConstraintMatrix &,
 const  parallel::distributed::Vector<float>  &,
 const DoFHandler< 3 > &, const ConstraintMatrix &,
  parallel::distributed::Vector<float>  &);
 template
 void project_dg< 3 >
 (const DoFHandler< 3 > &, const  parallel::distributed::Vector<float>  &,
 const DoFHandler< 3 > &,  parallel::distributed::Vector<float>  &);
 template
 void extrapolate< 3 >
 (const DoFHandler< 3 > &, const  parallel::distributed::Vector<float>  &,
 const DoFHandler< 3 > &,  parallel::distributed::Vector<float>  &);
 template
 void extrapolate< 3 >
 (const DoFHandler< 3 > &, const  parallel::distributed::Vector<float>  &,
 const DoFHandler< 3 > &, const ConstraintMatrix &,
  parallel::distributed::Vector<float>  &);
#endif
 }
 
namespace FETools
 {
#if  3  ==  3 
 template
 void back_interpolate< 3 >
 (const DoFHandler< 3 > &, const  parallel::distributed::Vector<long double>  &,
 const FiniteElement< 3 > &,  parallel::distributed::Vector<long double>  &);
 template
 void back_interpolate< 3 >
 (const DoFHandler< 3 > &, const ConstraintMatrix &,
 const  parallel::distributed::Vector<long double>  &,
 const DoFHandler< 3 > &, const ConstraintMatrix &,
  parallel::distributed::Vector<long double>  &);
 template
 void interpolation_difference< 3 >
 (const DoFHandler< 3 > &, const  parallel::distributed::Vector<long double>  &,
 const FiniteElement< 3 > &,  parallel::distributed::Vector<long double>  &);
 template
 void interpolation_difference< 3 >
 (const DoFHandler< 3 > &, const ConstraintMatrix &,
 const  parallel::distributed::Vector<long double>  &,
 const DoFHandler< 3 > &, const ConstraintMatrix &,
  parallel::distributed::Vector<long double>  &);
 template
 void project_dg< 3 >
 (const DoFHandler< 3 > &, const  parallel::distributed::Vector<long double>  &,
 const DoFHandler< 3 > &,  parallel::distributed::Vector<long double>  &);
 template
 void extrapolate< 3 >
 (const DoFHandler< 3 > &, const  parallel::distributed::Vector<long double>  &,
 const DoFHandler< 3 > &,  parallel::distributed::Vector<long double>  &);
 template
 void extrapolate< 3 >
 (const DoFHandler< 3 > &, const  parallel::distributed::Vector<long double>  &,
 const DoFHandler< 3 > &, const ConstraintMatrix &,
  parallel::distributed::Vector<long double>  &);
#endif
 }
 
namespace FETools
 {
#if  3  ==  3 
 template
 void back_interpolate< 3 >
 (const DoFHandler< 3 > &, const  parallel::distributed::BlockVector<double>  &,
 const FiniteElement< 3 > &,  parallel::distributed::BlockVector<double>  &);
 template
 void back_interpolate< 3 >
 (const DoFHandler< 3 > &, const ConstraintMatrix &,
 const  parallel::distributed::BlockVector<double>  &,
 const DoFHandler< 3 > &, const ConstraintMatrix &,
  parallel::distributed::BlockVector<double>  &);
 template
 void interpolation_difference< 3 >
 (const DoFHandler< 3 > &, const  parallel::distributed::BlockVector<double>  &,
 const FiniteElement< 3 > &,  parallel::distributed::BlockVector<double>  &);
 template
 void interpolation_difference< 3 >
 (const DoFHandler< 3 > &, const ConstraintMatrix &,
 const  parallel::distributed::BlockVector<double>  &,
 const DoFHandler< 3 > &, const ConstraintMatrix &,
  parallel::distributed::BlockVector<double>  &);
 template
 void project_dg< 3 >
 (const DoFHandler< 3 > &, const  parallel::distributed::BlockVector<double>  &,
 const DoFHandler< 3 > &,  parallel::distributed::BlockVector<double>  &);
 template
 void extrapolate< 3 >
 (const DoFHandler< 3 > &, const  parallel::distributed::BlockVector<double>  &,
 const DoFHandler< 3 > &,  parallel::distributed::BlockVector<double>  &);
 template
 void extrapolate< 3 >
 (const DoFHandler< 3 > &, const  parallel::distributed::BlockVector<double>  &,
 const DoFHandler< 3 > &, const ConstraintMatrix &,
  parallel::distributed::BlockVector<double>  &);
#endif
 }
 
namespace FETools
 {
#if  3  ==  3 
 template
 void back_interpolate< 3 >
 (const DoFHandler< 3 > &, const  parallel::distributed::BlockVector<float>  &,
 const FiniteElement< 3 > &,  parallel::distributed::BlockVector<float>  &);
 template
 void back_interpolate< 3 >
 (const DoFHandler< 3 > &, const ConstraintMatrix &,
 const  parallel::distributed::BlockVector<float>  &,
 const DoFHandler< 3 > &, const ConstraintMatrix &,
  parallel::distributed::BlockVector<float>  &);
 template
 void interpolation_difference< 3 >
 (const DoFHandler< 3 > &, const  parallel::distributed::BlockVector<float>  &,
 const FiniteElement< 3 > &,  parallel::distributed::BlockVector<float>  &);
 template
 void interpolation_difference< 3 >
 (const DoFHandler< 3 > &, const ConstraintMatrix &,
 const  parallel::distributed::BlockVector<float>  &,
 const DoFHandler< 3 > &, const ConstraintMatrix &,
  parallel::distributed::BlockVector<float>  &);
 template
 void project_dg< 3 >
 (const DoFHandler< 3 > &, const  parallel::distributed::BlockVector<float>  &,
 const DoFHandler< 3 > &,  parallel::distributed::BlockVector<float>  &);
 template
 void extrapolate< 3 >
 (const DoFHandler< 3 > &, const  parallel::distributed::BlockVector<float>  &,
 const DoFHandler< 3 > &,  parallel::distributed::BlockVector<float>  &);
 template
 void extrapolate< 3 >
 (const DoFHandler< 3 > &, const  parallel::distributed::BlockVector<float>  &,
 const DoFHandler< 3 > &, const ConstraintMatrix &,
  parallel::distributed::BlockVector<float>  &);
#endif
 }
 
namespace FETools
 {
#if  3  ==  3 
 template
 void back_interpolate< 3 >
 (const DoFHandler< 3 > &, const  parallel::distributed::BlockVector<long double>  &,
 const FiniteElement< 3 > &,  parallel::distributed::BlockVector<long double>  &);
 template
 void back_interpolate< 3 >
 (const DoFHandler< 3 > &, const ConstraintMatrix &,
 const  parallel::distributed::BlockVector<long double>  &,
 const DoFHandler< 3 > &, const ConstraintMatrix &,
  parallel::distributed::BlockVector<long double>  &);
 template
 void interpolation_difference< 3 >
 (const DoFHandler< 3 > &, const  parallel::distributed::BlockVector<long double>  &,
 const FiniteElement< 3 > &,  parallel::distributed::BlockVector<long double>  &);
 template
 void interpolation_difference< 3 >
 (const DoFHandler< 3 > &, const ConstraintMatrix &,
 const  parallel::distributed::BlockVector<long double>  &,
 const DoFHandler< 3 > &, const ConstraintMatrix &,
  parallel::distributed::BlockVector<long double>  &);
 template
 void project_dg< 3 >
 (const DoFHandler< 3 > &, const  parallel::distributed::BlockVector<long double>  &,
 const DoFHandler< 3 > &,  parallel::distributed::BlockVector<long double>  &);
 template
 void extrapolate< 3 >
 (const DoFHandler< 3 > &, const  parallel::distributed::BlockVector<long double>  &,
 const DoFHandler< 3 > &,  parallel::distributed::BlockVector<long double>  &);
 template
 void extrapolate< 3 >
 (const DoFHandler< 3 > &, const  parallel::distributed::BlockVector<long double>  &,
 const DoFHandler< 3 > &, const ConstraintMatrix &,
  parallel::distributed::BlockVector<long double>  &);
#endif
 }
 
