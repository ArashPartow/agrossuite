namespace FETools
 {
#if  1  <=  1 
 template
 void compute_block_renumbering (
 const FiniteElement< 1 , 1 >& ,
 std::vector<types::global_dof_index>&, std::vector<types::global_dof_index>&, bool);

 template
 void compute_projection_matrices< 1 , double,  1 >
 (const FiniteElement< 1 , 1 > &,
 std::vector<std::vector<FullMatrix<double> > >&, bool);

 template
 void compute_embedding_matrices< 1 , double,  1 >
 (const FiniteElement< 1 , 1 > &,
 std::vector<std::vector<FullMatrix<double> > >&,bool); 
#endif
 }
 
namespace FETools
 {
#if  1  <=  2 
 template
 void compute_block_renumbering (
 const FiniteElement< 1 , 2 >& ,
 std::vector<types::global_dof_index>&, std::vector<types::global_dof_index>&, bool);

 template
 void compute_projection_matrices< 1 , double,  2 >
 (const FiniteElement< 1 , 2 > &,
 std::vector<std::vector<FullMatrix<double> > >&, bool);

 template
 void compute_embedding_matrices< 1 , double,  2 >
 (const FiniteElement< 1 , 2 > &,
 std::vector<std::vector<FullMatrix<double> > >&,bool); 
#endif
 }
 
namespace FETools
 {
#if  1  <=  3 
 template
 void compute_block_renumbering (
 const FiniteElement< 1 , 3 >& ,
 std::vector<types::global_dof_index>&, std::vector<types::global_dof_index>&, bool);

 template
 void compute_projection_matrices< 1 , double,  3 >
 (const FiniteElement< 1 , 3 > &,
 std::vector<std::vector<FullMatrix<double> > >&, bool);

 template
 void compute_embedding_matrices< 1 , double,  3 >
 (const FiniteElement< 1 , 3 > &,
 std::vector<std::vector<FullMatrix<double> > >&,bool); 
#endif
 }
 
namespace FETools
 {
#if  2  <=  1 
 template
 void compute_block_renumbering (
 const FiniteElement< 2 , 1 >& ,
 std::vector<types::global_dof_index>&, std::vector<types::global_dof_index>&, bool);

 template
 void compute_projection_matrices< 2 , double,  1 >
 (const FiniteElement< 2 , 1 > &,
 std::vector<std::vector<FullMatrix<double> > >&, bool);

 template
 void compute_embedding_matrices< 2 , double,  1 >
 (const FiniteElement< 2 , 1 > &,
 std::vector<std::vector<FullMatrix<double> > >&,bool); 
#endif
 }
 
namespace FETools
 {
#if  2  <=  2 
 template
 void compute_block_renumbering (
 const FiniteElement< 2 , 2 >& ,
 std::vector<types::global_dof_index>&, std::vector<types::global_dof_index>&, bool);

 template
 void compute_projection_matrices< 2 , double,  2 >
 (const FiniteElement< 2 , 2 > &,
 std::vector<std::vector<FullMatrix<double> > >&, bool);

 template
 void compute_embedding_matrices< 2 , double,  2 >
 (const FiniteElement< 2 , 2 > &,
 std::vector<std::vector<FullMatrix<double> > >&,bool); 
#endif
 }
 
namespace FETools
 {
#if  2  <=  3 
 template
 void compute_block_renumbering (
 const FiniteElement< 2 , 3 >& ,
 std::vector<types::global_dof_index>&, std::vector<types::global_dof_index>&, bool);

 template
 void compute_projection_matrices< 2 , double,  3 >
 (const FiniteElement< 2 , 3 > &,
 std::vector<std::vector<FullMatrix<double> > >&, bool);

 template
 void compute_embedding_matrices< 2 , double,  3 >
 (const FiniteElement< 2 , 3 > &,
 std::vector<std::vector<FullMatrix<double> > >&,bool); 
#endif
 }
 
namespace FETools
 {
#if  3  <=  1 
 template
 void compute_block_renumbering (
 const FiniteElement< 3 , 1 >& ,
 std::vector<types::global_dof_index>&, std::vector<types::global_dof_index>&, bool);

 template
 void compute_projection_matrices< 3 , double,  1 >
 (const FiniteElement< 3 , 1 > &,
 std::vector<std::vector<FullMatrix<double> > >&, bool);

 template
 void compute_embedding_matrices< 3 , double,  1 >
 (const FiniteElement< 3 , 1 > &,
 std::vector<std::vector<FullMatrix<double> > >&,bool); 
#endif
 }
 
namespace FETools
 {
#if  3  <=  2 
 template
 void compute_block_renumbering (
 const FiniteElement< 3 , 2 >& ,
 std::vector<types::global_dof_index>&, std::vector<types::global_dof_index>&, bool);

 template
 void compute_projection_matrices< 3 , double,  2 >
 (const FiniteElement< 3 , 2 > &,
 std::vector<std::vector<FullMatrix<double> > >&, bool);

 template
 void compute_embedding_matrices< 3 , double,  2 >
 (const FiniteElement< 3 , 2 > &,
 std::vector<std::vector<FullMatrix<double> > >&,bool); 
#endif
 }
 
namespace FETools
 {
#if  3  <=  3 
 template
 void compute_block_renumbering (
 const FiniteElement< 3 , 3 >& ,
 std::vector<types::global_dof_index>&, std::vector<types::global_dof_index>&, bool);

 template
 void compute_projection_matrices< 3 , double,  3 >
 (const FiniteElement< 3 , 3 > &,
 std::vector<std::vector<FullMatrix<double> > >&, bool);

 template
 void compute_embedding_matrices< 3 , double,  3 >
 (const FiniteElement< 3 , 3 > &,
 std::vector<std::vector<FullMatrix<double> > >&,bool); 
#endif
 }
 
namespace FETools
 {
 
#if  1  <=  1 
 template
 void get_interpolation_matrix< 1 ,double, 1 >
 (const FiniteElement< 1 , 1 > &,
 const FiniteElement< 1 , 1 > &,
 FullMatrix<double> &);
#endif

#if  1  ==  1 

 template class FEFactoryBase< 1 >;

 template
 void compute_node_matrix(
 FullMatrix<double>&,
 const FiniteElement< 1 >&);

 template
 void compute_component_wise(
 const FiniteElement< 1 >& ,
 std::vector<unsigned int>&, std::vector<std::vector<unsigned int> >&);

 template
 void get_back_interpolation_matrix< 1 >
 (const FiniteElement< 1 > &,
 const FiniteElement< 1 > &,
 FullMatrix<double> &);
 template
 void get_interpolation_difference_matrix< 1 >
 (const FiniteElement< 1 > &,
 const FiniteElement< 1 > &,
 FullMatrix<double> &);
 template
 void get_interpolation_matrix< 1 >
 (const FiniteElement< 1 > &,
 const FiniteElement< 1 > &,
 FullMatrix<float> &);
 template
 void get_back_interpolation_matrix< 1 >
 (const FiniteElement< 1 > &,
 const FiniteElement< 1 > &,
 FullMatrix<float> &);
 template
 void get_interpolation_difference_matrix< 1 >
 (const FiniteElement< 1 > &,
 const FiniteElement< 1 > &,
 FullMatrix<float> &);

 template
 void get_projection_matrix< 1 >
 (const FiniteElement< 1 > &,
 const FiniteElement< 1 > &,
 FullMatrix<double> &);

 

 template
 void compute_face_embedding_matrices< 1 ,double>
 (const FiniteElement< 1 > &, FullMatrix<double> (&)[GeometryInfo< 1 >::max_children_per_face],
 unsigned int, unsigned int);


 template FiniteElement< 1 , 1 > *
 get_fe_from_name< 1 > (const std::string &);


 template
 void
 compute_projection_from_quadrature_points_matrix (const FiniteElement< 1 > &,
 const Quadrature< 1 > &,
 const Quadrature< 1 > &,
 FullMatrix<double> &);

 template
 void
 compute_projection_from_quadrature_points(
 const FullMatrix<double> &,
 const std::vector< Tensor<1,  1  > > &,
 std::vector< Tensor<1,  1  > > &);

 template
 void
 compute_projection_from_quadrature_points(
 const FullMatrix<double> &,
 const std::vector<SymmetricTensor<2,  1 > > &,
 std::vector<SymmetricTensor<2,  1 > > &);


 template
 void
 compute_interpolation_to_quadrature_points_matrix (const FiniteElement< 1 > &,
 const Quadrature< 1 > &,
 FullMatrix<double> &);

#if  1  != 1
 template
 void
 compute_projection_from_face_quadrature_points_matrix (const FiniteElement< 1 > &,
 const Quadrature< 1 -1> &,
 const Quadrature< 1 -1> &,
 const DoFHandler< 1 >::active_cell_iterator & ,
 unsigned int,
 FullMatrix<double> &);
#endif

 template
 void
 hierarchic_to_lexicographic_numbering< 1 >
 (const FiniteElementData< 1 > &,
 std::vector<unsigned int> &);

 template
 void
 lexicographic_to_hierarchic_numbering< 1 >
 (const FiniteElementData< 1 > &,
 std::vector<unsigned int> &);

 template
 std::vector<unsigned int>
 hierarchic_to_lexicographic_numbering< 1 >
 (const FiniteElementData< 1 > &);

 template
 std::vector<unsigned int>
 lexicographic_to_hierarchic_numbering< 1 >
 (const FiniteElementData< 1 > &);
 
#endif
 }
 
namespace FETools
 {
 
#if  1  <=  2 
 template
 void get_interpolation_matrix< 1 ,double, 2 >
 (const FiniteElement< 1 , 2 > &,
 const FiniteElement< 1 , 2 > &,
 FullMatrix<double> &);
#endif

#if  1  ==  2 

 template class FEFactoryBase< 1 >;

 template
 void compute_node_matrix(
 FullMatrix<double>&,
 const FiniteElement< 1 >&);

 template
 void compute_component_wise(
 const FiniteElement< 1 >& ,
 std::vector<unsigned int>&, std::vector<std::vector<unsigned int> >&);

 template
 void get_back_interpolation_matrix< 1 >
 (const FiniteElement< 1 > &,
 const FiniteElement< 1 > &,
 FullMatrix<double> &);
 template
 void get_interpolation_difference_matrix< 1 >
 (const FiniteElement< 1 > &,
 const FiniteElement< 1 > &,
 FullMatrix<double> &);
 template
 void get_interpolation_matrix< 1 >
 (const FiniteElement< 1 > &,
 const FiniteElement< 1 > &,
 FullMatrix<float> &);
 template
 void get_back_interpolation_matrix< 1 >
 (const FiniteElement< 1 > &,
 const FiniteElement< 1 > &,
 FullMatrix<float> &);
 template
 void get_interpolation_difference_matrix< 1 >
 (const FiniteElement< 1 > &,
 const FiniteElement< 1 > &,
 FullMatrix<float> &);

 template
 void get_projection_matrix< 1 >
 (const FiniteElement< 1 > &,
 const FiniteElement< 1 > &,
 FullMatrix<double> &);

 

 template
 void compute_face_embedding_matrices< 1 ,double>
 (const FiniteElement< 1 > &, FullMatrix<double> (&)[GeometryInfo< 1 >::max_children_per_face],
 unsigned int, unsigned int);


 template FiniteElement< 1 , 1 > *
 get_fe_from_name< 1 > (const std::string &);


 template
 void
 compute_projection_from_quadrature_points_matrix (const FiniteElement< 1 > &,
 const Quadrature< 1 > &,
 const Quadrature< 1 > &,
 FullMatrix<double> &);

 template
 void
 compute_projection_from_quadrature_points(
 const FullMatrix<double> &,
 const std::vector< Tensor<1,  1  > > &,
 std::vector< Tensor<1,  1  > > &);

 template
 void
 compute_projection_from_quadrature_points(
 const FullMatrix<double> &,
 const std::vector<SymmetricTensor<2,  1 > > &,
 std::vector<SymmetricTensor<2,  1 > > &);


 template
 void
 compute_interpolation_to_quadrature_points_matrix (const FiniteElement< 1 > &,
 const Quadrature< 1 > &,
 FullMatrix<double> &);

#if  1  != 1
 template
 void
 compute_projection_from_face_quadrature_points_matrix (const FiniteElement< 1 > &,
 const Quadrature< 1 -1> &,
 const Quadrature< 1 -1> &,
 const DoFHandler< 1 >::active_cell_iterator & ,
 unsigned int,
 FullMatrix<double> &);
#endif

 template
 void
 hierarchic_to_lexicographic_numbering< 1 >
 (const FiniteElementData< 1 > &,
 std::vector<unsigned int> &);

 template
 void
 lexicographic_to_hierarchic_numbering< 1 >
 (const FiniteElementData< 1 > &,
 std::vector<unsigned int> &);

 template
 std::vector<unsigned int>
 hierarchic_to_lexicographic_numbering< 1 >
 (const FiniteElementData< 1 > &);

 template
 std::vector<unsigned int>
 lexicographic_to_hierarchic_numbering< 1 >
 (const FiniteElementData< 1 > &);
 
#endif
 }
 
namespace FETools
 {
 
#if  1  <=  3 
 template
 void get_interpolation_matrix< 1 ,double, 3 >
 (const FiniteElement< 1 , 3 > &,
 const FiniteElement< 1 , 3 > &,
 FullMatrix<double> &);
#endif

#if  1  ==  3 

 template class FEFactoryBase< 1 >;

 template
 void compute_node_matrix(
 FullMatrix<double>&,
 const FiniteElement< 1 >&);

 template
 void compute_component_wise(
 const FiniteElement< 1 >& ,
 std::vector<unsigned int>&, std::vector<std::vector<unsigned int> >&);

 template
 void get_back_interpolation_matrix< 1 >
 (const FiniteElement< 1 > &,
 const FiniteElement< 1 > &,
 FullMatrix<double> &);
 template
 void get_interpolation_difference_matrix< 1 >
 (const FiniteElement< 1 > &,
 const FiniteElement< 1 > &,
 FullMatrix<double> &);
 template
 void get_interpolation_matrix< 1 >
 (const FiniteElement< 1 > &,
 const FiniteElement< 1 > &,
 FullMatrix<float> &);
 template
 void get_back_interpolation_matrix< 1 >
 (const FiniteElement< 1 > &,
 const FiniteElement< 1 > &,
 FullMatrix<float> &);
 template
 void get_interpolation_difference_matrix< 1 >
 (const FiniteElement< 1 > &,
 const FiniteElement< 1 > &,
 FullMatrix<float> &);

 template
 void get_projection_matrix< 1 >
 (const FiniteElement< 1 > &,
 const FiniteElement< 1 > &,
 FullMatrix<double> &);

 

 template
 void compute_face_embedding_matrices< 1 ,double>
 (const FiniteElement< 1 > &, FullMatrix<double> (&)[GeometryInfo< 1 >::max_children_per_face],
 unsigned int, unsigned int);


 template FiniteElement< 1 , 1 > *
 get_fe_from_name< 1 > (const std::string &);


 template
 void
 compute_projection_from_quadrature_points_matrix (const FiniteElement< 1 > &,
 const Quadrature< 1 > &,
 const Quadrature< 1 > &,
 FullMatrix<double> &);

 template
 void
 compute_projection_from_quadrature_points(
 const FullMatrix<double> &,
 const std::vector< Tensor<1,  1  > > &,
 std::vector< Tensor<1,  1  > > &);

 template
 void
 compute_projection_from_quadrature_points(
 const FullMatrix<double> &,
 const std::vector<SymmetricTensor<2,  1 > > &,
 std::vector<SymmetricTensor<2,  1 > > &);


 template
 void
 compute_interpolation_to_quadrature_points_matrix (const FiniteElement< 1 > &,
 const Quadrature< 1 > &,
 FullMatrix<double> &);

#if  1  != 1
 template
 void
 compute_projection_from_face_quadrature_points_matrix (const FiniteElement< 1 > &,
 const Quadrature< 1 -1> &,
 const Quadrature< 1 -1> &,
 const DoFHandler< 1 >::active_cell_iterator & ,
 unsigned int,
 FullMatrix<double> &);
#endif

 template
 void
 hierarchic_to_lexicographic_numbering< 1 >
 (const FiniteElementData< 1 > &,
 std::vector<unsigned int> &);

 template
 void
 lexicographic_to_hierarchic_numbering< 1 >
 (const FiniteElementData< 1 > &,
 std::vector<unsigned int> &);

 template
 std::vector<unsigned int>
 hierarchic_to_lexicographic_numbering< 1 >
 (const FiniteElementData< 1 > &);

 template
 std::vector<unsigned int>
 lexicographic_to_hierarchic_numbering< 1 >
 (const FiniteElementData< 1 > &);
 
#endif
 }
 
namespace FETools
 {
 
#if  2  <=  1 
 template
 void get_interpolation_matrix< 2 ,double, 1 >
 (const FiniteElement< 2 , 1 > &,
 const FiniteElement< 2 , 1 > &,
 FullMatrix<double> &);
#endif

#if  2  ==  1 

 template class FEFactoryBase< 2 >;

 template
 void compute_node_matrix(
 FullMatrix<double>&,
 const FiniteElement< 2 >&);

 template
 void compute_component_wise(
 const FiniteElement< 2 >& ,
 std::vector<unsigned int>&, std::vector<std::vector<unsigned int> >&);

 template
 void get_back_interpolation_matrix< 2 >
 (const FiniteElement< 2 > &,
 const FiniteElement< 2 > &,
 FullMatrix<double> &);
 template
 void get_interpolation_difference_matrix< 2 >
 (const FiniteElement< 2 > &,
 const FiniteElement< 2 > &,
 FullMatrix<double> &);
 template
 void get_interpolation_matrix< 2 >
 (const FiniteElement< 2 > &,
 const FiniteElement< 2 > &,
 FullMatrix<float> &);
 template
 void get_back_interpolation_matrix< 2 >
 (const FiniteElement< 2 > &,
 const FiniteElement< 2 > &,
 FullMatrix<float> &);
 template
 void get_interpolation_difference_matrix< 2 >
 (const FiniteElement< 2 > &,
 const FiniteElement< 2 > &,
 FullMatrix<float> &);

 template
 void get_projection_matrix< 2 >
 (const FiniteElement< 2 > &,
 const FiniteElement< 2 > &,
 FullMatrix<double> &);

 

 template
 void compute_face_embedding_matrices< 2 ,double>
 (const FiniteElement< 2 > &, FullMatrix<double> (&)[GeometryInfo< 2 >::max_children_per_face],
 unsigned int, unsigned int);


 template FiniteElement< 2 , 2 > *
 get_fe_from_name< 2 > (const std::string &);


 template
 void
 compute_projection_from_quadrature_points_matrix (const FiniteElement< 2 > &,
 const Quadrature< 2 > &,
 const Quadrature< 2 > &,
 FullMatrix<double> &);

 template
 void
 compute_projection_from_quadrature_points(
 const FullMatrix<double> &,
 const std::vector< Tensor<1,  2  > > &,
 std::vector< Tensor<1,  2  > > &);

 template
 void
 compute_projection_from_quadrature_points(
 const FullMatrix<double> &,
 const std::vector<SymmetricTensor<2,  2 > > &,
 std::vector<SymmetricTensor<2,  2 > > &);


 template
 void
 compute_interpolation_to_quadrature_points_matrix (const FiniteElement< 2 > &,
 const Quadrature< 2 > &,
 FullMatrix<double> &);

#if  2  != 1
 template
 void
 compute_projection_from_face_quadrature_points_matrix (const FiniteElement< 2 > &,
 const Quadrature< 2 -1> &,
 const Quadrature< 2 -1> &,
 const DoFHandler< 2 >::active_cell_iterator & ,
 unsigned int,
 FullMatrix<double> &);
#endif

 template
 void
 hierarchic_to_lexicographic_numbering< 2 >
 (const FiniteElementData< 2 > &,
 std::vector<unsigned int> &);

 template
 void
 lexicographic_to_hierarchic_numbering< 2 >
 (const FiniteElementData< 2 > &,
 std::vector<unsigned int> &);

 template
 std::vector<unsigned int>
 hierarchic_to_lexicographic_numbering< 2 >
 (const FiniteElementData< 2 > &);

 template
 std::vector<unsigned int>
 lexicographic_to_hierarchic_numbering< 2 >
 (const FiniteElementData< 2 > &);
 
#endif
 }
 
namespace FETools
 {
 
#if  2  <=  2 
 template
 void get_interpolation_matrix< 2 ,double, 2 >
 (const FiniteElement< 2 , 2 > &,
 const FiniteElement< 2 , 2 > &,
 FullMatrix<double> &);
#endif

#if  2  ==  2 

 template class FEFactoryBase< 2 >;

 template
 void compute_node_matrix(
 FullMatrix<double>&,
 const FiniteElement< 2 >&);

 template
 void compute_component_wise(
 const FiniteElement< 2 >& ,
 std::vector<unsigned int>&, std::vector<std::vector<unsigned int> >&);

 template
 void get_back_interpolation_matrix< 2 >
 (const FiniteElement< 2 > &,
 const FiniteElement< 2 > &,
 FullMatrix<double> &);
 template
 void get_interpolation_difference_matrix< 2 >
 (const FiniteElement< 2 > &,
 const FiniteElement< 2 > &,
 FullMatrix<double> &);
 template
 void get_interpolation_matrix< 2 >
 (const FiniteElement< 2 > &,
 const FiniteElement< 2 > &,
 FullMatrix<float> &);
 template
 void get_back_interpolation_matrix< 2 >
 (const FiniteElement< 2 > &,
 const FiniteElement< 2 > &,
 FullMatrix<float> &);
 template
 void get_interpolation_difference_matrix< 2 >
 (const FiniteElement< 2 > &,
 const FiniteElement< 2 > &,
 FullMatrix<float> &);

 template
 void get_projection_matrix< 2 >
 (const FiniteElement< 2 > &,
 const FiniteElement< 2 > &,
 FullMatrix<double> &);

 

 template
 void compute_face_embedding_matrices< 2 ,double>
 (const FiniteElement< 2 > &, FullMatrix<double> (&)[GeometryInfo< 2 >::max_children_per_face],
 unsigned int, unsigned int);


 template FiniteElement< 2 , 2 > *
 get_fe_from_name< 2 > (const std::string &);


 template
 void
 compute_projection_from_quadrature_points_matrix (const FiniteElement< 2 > &,
 const Quadrature< 2 > &,
 const Quadrature< 2 > &,
 FullMatrix<double> &);

 template
 void
 compute_projection_from_quadrature_points(
 const FullMatrix<double> &,
 const std::vector< Tensor<1,  2  > > &,
 std::vector< Tensor<1,  2  > > &);

 template
 void
 compute_projection_from_quadrature_points(
 const FullMatrix<double> &,
 const std::vector<SymmetricTensor<2,  2 > > &,
 std::vector<SymmetricTensor<2,  2 > > &);


 template
 void
 compute_interpolation_to_quadrature_points_matrix (const FiniteElement< 2 > &,
 const Quadrature< 2 > &,
 FullMatrix<double> &);

#if  2  != 1
 template
 void
 compute_projection_from_face_quadrature_points_matrix (const FiniteElement< 2 > &,
 const Quadrature< 2 -1> &,
 const Quadrature< 2 -1> &,
 const DoFHandler< 2 >::active_cell_iterator & ,
 unsigned int,
 FullMatrix<double> &);
#endif

 template
 void
 hierarchic_to_lexicographic_numbering< 2 >
 (const FiniteElementData< 2 > &,
 std::vector<unsigned int> &);

 template
 void
 lexicographic_to_hierarchic_numbering< 2 >
 (const FiniteElementData< 2 > &,
 std::vector<unsigned int> &);

 template
 std::vector<unsigned int>
 hierarchic_to_lexicographic_numbering< 2 >
 (const FiniteElementData< 2 > &);

 template
 std::vector<unsigned int>
 lexicographic_to_hierarchic_numbering< 2 >
 (const FiniteElementData< 2 > &);
 
#endif
 }
 
namespace FETools
 {
 
#if  2  <=  3 
 template
 void get_interpolation_matrix< 2 ,double, 3 >
 (const FiniteElement< 2 , 3 > &,
 const FiniteElement< 2 , 3 > &,
 FullMatrix<double> &);
#endif

#if  2  ==  3 

 template class FEFactoryBase< 2 >;

 template
 void compute_node_matrix(
 FullMatrix<double>&,
 const FiniteElement< 2 >&);

 template
 void compute_component_wise(
 const FiniteElement< 2 >& ,
 std::vector<unsigned int>&, std::vector<std::vector<unsigned int> >&);

 template
 void get_back_interpolation_matrix< 2 >
 (const FiniteElement< 2 > &,
 const FiniteElement< 2 > &,
 FullMatrix<double> &);
 template
 void get_interpolation_difference_matrix< 2 >
 (const FiniteElement< 2 > &,
 const FiniteElement< 2 > &,
 FullMatrix<double> &);
 template
 void get_interpolation_matrix< 2 >
 (const FiniteElement< 2 > &,
 const FiniteElement< 2 > &,
 FullMatrix<float> &);
 template
 void get_back_interpolation_matrix< 2 >
 (const FiniteElement< 2 > &,
 const FiniteElement< 2 > &,
 FullMatrix<float> &);
 template
 void get_interpolation_difference_matrix< 2 >
 (const FiniteElement< 2 > &,
 const FiniteElement< 2 > &,
 FullMatrix<float> &);

 template
 void get_projection_matrix< 2 >
 (const FiniteElement< 2 > &,
 const FiniteElement< 2 > &,
 FullMatrix<double> &);

 

 template
 void compute_face_embedding_matrices< 2 ,double>
 (const FiniteElement< 2 > &, FullMatrix<double> (&)[GeometryInfo< 2 >::max_children_per_face],
 unsigned int, unsigned int);


 template FiniteElement< 2 , 2 > *
 get_fe_from_name< 2 > (const std::string &);


 template
 void
 compute_projection_from_quadrature_points_matrix (const FiniteElement< 2 > &,
 const Quadrature< 2 > &,
 const Quadrature< 2 > &,
 FullMatrix<double> &);

 template
 void
 compute_projection_from_quadrature_points(
 const FullMatrix<double> &,
 const std::vector< Tensor<1,  2  > > &,
 std::vector< Tensor<1,  2  > > &);

 template
 void
 compute_projection_from_quadrature_points(
 const FullMatrix<double> &,
 const std::vector<SymmetricTensor<2,  2 > > &,
 std::vector<SymmetricTensor<2,  2 > > &);


 template
 void
 compute_interpolation_to_quadrature_points_matrix (const FiniteElement< 2 > &,
 const Quadrature< 2 > &,
 FullMatrix<double> &);

#if  2  != 1
 template
 void
 compute_projection_from_face_quadrature_points_matrix (const FiniteElement< 2 > &,
 const Quadrature< 2 -1> &,
 const Quadrature< 2 -1> &,
 const DoFHandler< 2 >::active_cell_iterator & ,
 unsigned int,
 FullMatrix<double> &);
#endif

 template
 void
 hierarchic_to_lexicographic_numbering< 2 >
 (const FiniteElementData< 2 > &,
 std::vector<unsigned int> &);

 template
 void
 lexicographic_to_hierarchic_numbering< 2 >
 (const FiniteElementData< 2 > &,
 std::vector<unsigned int> &);

 template
 std::vector<unsigned int>
 hierarchic_to_lexicographic_numbering< 2 >
 (const FiniteElementData< 2 > &);

 template
 std::vector<unsigned int>
 lexicographic_to_hierarchic_numbering< 2 >
 (const FiniteElementData< 2 > &);
 
#endif
 }
 
namespace FETools
 {
 
#if  3  <=  1 
 template
 void get_interpolation_matrix< 3 ,double, 1 >
 (const FiniteElement< 3 , 1 > &,
 const FiniteElement< 3 , 1 > &,
 FullMatrix<double> &);
#endif

#if  3  ==  1 

 template class FEFactoryBase< 3 >;

 template
 void compute_node_matrix(
 FullMatrix<double>&,
 const FiniteElement< 3 >&);

 template
 void compute_component_wise(
 const FiniteElement< 3 >& ,
 std::vector<unsigned int>&, std::vector<std::vector<unsigned int> >&);

 template
 void get_back_interpolation_matrix< 3 >
 (const FiniteElement< 3 > &,
 const FiniteElement< 3 > &,
 FullMatrix<double> &);
 template
 void get_interpolation_difference_matrix< 3 >
 (const FiniteElement< 3 > &,
 const FiniteElement< 3 > &,
 FullMatrix<double> &);
 template
 void get_interpolation_matrix< 3 >
 (const FiniteElement< 3 > &,
 const FiniteElement< 3 > &,
 FullMatrix<float> &);
 template
 void get_back_interpolation_matrix< 3 >
 (const FiniteElement< 3 > &,
 const FiniteElement< 3 > &,
 FullMatrix<float> &);
 template
 void get_interpolation_difference_matrix< 3 >
 (const FiniteElement< 3 > &,
 const FiniteElement< 3 > &,
 FullMatrix<float> &);

 template
 void get_projection_matrix< 3 >
 (const FiniteElement< 3 > &,
 const FiniteElement< 3 > &,
 FullMatrix<double> &);

 

 template
 void compute_face_embedding_matrices< 3 ,double>
 (const FiniteElement< 3 > &, FullMatrix<double> (&)[GeometryInfo< 3 >::max_children_per_face],
 unsigned int, unsigned int);


 template FiniteElement< 3 , 3 > *
 get_fe_from_name< 3 > (const std::string &);


 template
 void
 compute_projection_from_quadrature_points_matrix (const FiniteElement< 3 > &,
 const Quadrature< 3 > &,
 const Quadrature< 3 > &,
 FullMatrix<double> &);

 template
 void
 compute_projection_from_quadrature_points(
 const FullMatrix<double> &,
 const std::vector< Tensor<1,  3  > > &,
 std::vector< Tensor<1,  3  > > &);

 template
 void
 compute_projection_from_quadrature_points(
 const FullMatrix<double> &,
 const std::vector<SymmetricTensor<2,  3 > > &,
 std::vector<SymmetricTensor<2,  3 > > &);


 template
 void
 compute_interpolation_to_quadrature_points_matrix (const FiniteElement< 3 > &,
 const Quadrature< 3 > &,
 FullMatrix<double> &);

#if  3  != 1
 template
 void
 compute_projection_from_face_quadrature_points_matrix (const FiniteElement< 3 > &,
 const Quadrature< 3 -1> &,
 const Quadrature< 3 -1> &,
 const DoFHandler< 3 >::active_cell_iterator & ,
 unsigned int,
 FullMatrix<double> &);
#endif

 template
 void
 hierarchic_to_lexicographic_numbering< 3 >
 (const FiniteElementData< 3 > &,
 std::vector<unsigned int> &);

 template
 void
 lexicographic_to_hierarchic_numbering< 3 >
 (const FiniteElementData< 3 > &,
 std::vector<unsigned int> &);

 template
 std::vector<unsigned int>
 hierarchic_to_lexicographic_numbering< 3 >
 (const FiniteElementData< 3 > &);

 template
 std::vector<unsigned int>
 lexicographic_to_hierarchic_numbering< 3 >
 (const FiniteElementData< 3 > &);
 
#endif
 }
 
namespace FETools
 {
 
#if  3  <=  2 
 template
 void get_interpolation_matrix< 3 ,double, 2 >
 (const FiniteElement< 3 , 2 > &,
 const FiniteElement< 3 , 2 > &,
 FullMatrix<double> &);
#endif

#if  3  ==  2 

 template class FEFactoryBase< 3 >;

 template
 void compute_node_matrix(
 FullMatrix<double>&,
 const FiniteElement< 3 >&);

 template
 void compute_component_wise(
 const FiniteElement< 3 >& ,
 std::vector<unsigned int>&, std::vector<std::vector<unsigned int> >&);

 template
 void get_back_interpolation_matrix< 3 >
 (const FiniteElement< 3 > &,
 const FiniteElement< 3 > &,
 FullMatrix<double> &);
 template
 void get_interpolation_difference_matrix< 3 >
 (const FiniteElement< 3 > &,
 const FiniteElement< 3 > &,
 FullMatrix<double> &);
 template
 void get_interpolation_matrix< 3 >
 (const FiniteElement< 3 > &,
 const FiniteElement< 3 > &,
 FullMatrix<float> &);
 template
 void get_back_interpolation_matrix< 3 >
 (const FiniteElement< 3 > &,
 const FiniteElement< 3 > &,
 FullMatrix<float> &);
 template
 void get_interpolation_difference_matrix< 3 >
 (const FiniteElement< 3 > &,
 const FiniteElement< 3 > &,
 FullMatrix<float> &);

 template
 void get_projection_matrix< 3 >
 (const FiniteElement< 3 > &,
 const FiniteElement< 3 > &,
 FullMatrix<double> &);

 

 template
 void compute_face_embedding_matrices< 3 ,double>
 (const FiniteElement< 3 > &, FullMatrix<double> (&)[GeometryInfo< 3 >::max_children_per_face],
 unsigned int, unsigned int);


 template FiniteElement< 3 , 3 > *
 get_fe_from_name< 3 > (const std::string &);


 template
 void
 compute_projection_from_quadrature_points_matrix (const FiniteElement< 3 > &,
 const Quadrature< 3 > &,
 const Quadrature< 3 > &,
 FullMatrix<double> &);

 template
 void
 compute_projection_from_quadrature_points(
 const FullMatrix<double> &,
 const std::vector< Tensor<1,  3  > > &,
 std::vector< Tensor<1,  3  > > &);

 template
 void
 compute_projection_from_quadrature_points(
 const FullMatrix<double> &,
 const std::vector<SymmetricTensor<2,  3 > > &,
 std::vector<SymmetricTensor<2,  3 > > &);


 template
 void
 compute_interpolation_to_quadrature_points_matrix (const FiniteElement< 3 > &,
 const Quadrature< 3 > &,
 FullMatrix<double> &);

#if  3  != 1
 template
 void
 compute_projection_from_face_quadrature_points_matrix (const FiniteElement< 3 > &,
 const Quadrature< 3 -1> &,
 const Quadrature< 3 -1> &,
 const DoFHandler< 3 >::active_cell_iterator & ,
 unsigned int,
 FullMatrix<double> &);
#endif

 template
 void
 hierarchic_to_lexicographic_numbering< 3 >
 (const FiniteElementData< 3 > &,
 std::vector<unsigned int> &);

 template
 void
 lexicographic_to_hierarchic_numbering< 3 >
 (const FiniteElementData< 3 > &,
 std::vector<unsigned int> &);

 template
 std::vector<unsigned int>
 hierarchic_to_lexicographic_numbering< 3 >
 (const FiniteElementData< 3 > &);

 template
 std::vector<unsigned int>
 lexicographic_to_hierarchic_numbering< 3 >
 (const FiniteElementData< 3 > &);
 
#endif
 }
 
namespace FETools
 {
 
#if  3  <=  3 
 template
 void get_interpolation_matrix< 3 ,double, 3 >
 (const FiniteElement< 3 , 3 > &,
 const FiniteElement< 3 , 3 > &,
 FullMatrix<double> &);
#endif

#if  3  ==  3 

 template class FEFactoryBase< 3 >;

 template
 void compute_node_matrix(
 FullMatrix<double>&,
 const FiniteElement< 3 >&);

 template
 void compute_component_wise(
 const FiniteElement< 3 >& ,
 std::vector<unsigned int>&, std::vector<std::vector<unsigned int> >&);

 template
 void get_back_interpolation_matrix< 3 >
 (const FiniteElement< 3 > &,
 const FiniteElement< 3 > &,
 FullMatrix<double> &);
 template
 void get_interpolation_difference_matrix< 3 >
 (const FiniteElement< 3 > &,
 const FiniteElement< 3 > &,
 FullMatrix<double> &);
 template
 void get_interpolation_matrix< 3 >
 (const FiniteElement< 3 > &,
 const FiniteElement< 3 > &,
 FullMatrix<float> &);
 template
 void get_back_interpolation_matrix< 3 >
 (const FiniteElement< 3 > &,
 const FiniteElement< 3 > &,
 FullMatrix<float> &);
 template
 void get_interpolation_difference_matrix< 3 >
 (const FiniteElement< 3 > &,
 const FiniteElement< 3 > &,
 FullMatrix<float> &);

 template
 void get_projection_matrix< 3 >
 (const FiniteElement< 3 > &,
 const FiniteElement< 3 > &,
 FullMatrix<double> &);

 

 template
 void compute_face_embedding_matrices< 3 ,double>
 (const FiniteElement< 3 > &, FullMatrix<double> (&)[GeometryInfo< 3 >::max_children_per_face],
 unsigned int, unsigned int);


 template FiniteElement< 3 , 3 > *
 get_fe_from_name< 3 > (const std::string &);


 template
 void
 compute_projection_from_quadrature_points_matrix (const FiniteElement< 3 > &,
 const Quadrature< 3 > &,
 const Quadrature< 3 > &,
 FullMatrix<double> &);

 template
 void
 compute_projection_from_quadrature_points(
 const FullMatrix<double> &,
 const std::vector< Tensor<1,  3  > > &,
 std::vector< Tensor<1,  3  > > &);

 template
 void
 compute_projection_from_quadrature_points(
 const FullMatrix<double> &,
 const std::vector<SymmetricTensor<2,  3 > > &,
 std::vector<SymmetricTensor<2,  3 > > &);


 template
 void
 compute_interpolation_to_quadrature_points_matrix (const FiniteElement< 3 > &,
 const Quadrature< 3 > &,
 FullMatrix<double> &);

#if  3  != 1
 template
 void
 compute_projection_from_face_quadrature_points_matrix (const FiniteElement< 3 > &,
 const Quadrature< 3 -1> &,
 const Quadrature< 3 -1> &,
 const DoFHandler< 3 >::active_cell_iterator & ,
 unsigned int,
 FullMatrix<double> &);
#endif

 template
 void
 hierarchic_to_lexicographic_numbering< 3 >
 (const FiniteElementData< 3 > &,
 std::vector<unsigned int> &);

 template
 void
 lexicographic_to_hierarchic_numbering< 3 >
 (const FiniteElementData< 3 > &,
 std::vector<unsigned int> &);

 template
 std::vector<unsigned int>
 hierarchic_to_lexicographic_numbering< 3 >
 (const FiniteElementData< 3 > &);

 template
 std::vector<unsigned int>
 lexicographic_to_hierarchic_numbering< 3 >
 (const FiniteElementData< 3 > &);
 
#endif
 }
 
