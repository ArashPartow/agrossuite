#if  1  != 1
namespace parallel
{
 namespace distributed
 {
 namespace GridRefinement
 {
 template
 void
 refine_and_coarsen_fixed_number< 1 ,dealii::Vector< double >, 1 >
 (parallel::distributed::Triangulation< 1 > &,
 const dealii::Vector< double > &,
 const double,
 const double);

 template
 void
 refine_and_coarsen_fixed_fraction< 1 ,dealii::Vector< double >, 1 >
 (parallel::distributed::Triangulation< 1 > &,
 const dealii::Vector< double > &,
 const double,
 const double);
 }
 }
}
#endif

#if  2  != 1
namespace parallel
{
 namespace distributed
 {
 namespace GridRefinement
 {
 template
 void
 refine_and_coarsen_fixed_number< 2 ,dealii::Vector< double >, 2 >
 (parallel::distributed::Triangulation< 2 > &,
 const dealii::Vector< double > &,
 const double,
 const double);

 template
 void
 refine_and_coarsen_fixed_fraction< 2 ,dealii::Vector< double >, 2 >
 (parallel::distributed::Triangulation< 2 > &,
 const dealii::Vector< double > &,
 const double,
 const double);
 }
 }
}
#endif

#if  3  != 1
namespace parallel
{
 namespace distributed
 {
 namespace GridRefinement
 {
 template
 void
 refine_and_coarsen_fixed_number< 3 ,dealii::Vector< double >, 3 >
 (parallel::distributed::Triangulation< 3 > &,
 const dealii::Vector< double > &,
 const double,
 const double);

 template
 void
 refine_and_coarsen_fixed_fraction< 3 ,dealii::Vector< double >, 3 >
 (parallel::distributed::Triangulation< 3 > &,
 const dealii::Vector< double > &,
 const double,
 const double);
 }
 }
}
#endif

#if  1  != 1
namespace parallel
{
 namespace distributed
 {
 namespace GridRefinement
 {
 template
 void
 refine_and_coarsen_fixed_number< 1 ,dealii::Vector< float >, 1 >
 (parallel::distributed::Triangulation< 1 > &,
 const dealii::Vector< float > &,
 const double,
 const double);

 template
 void
 refine_and_coarsen_fixed_fraction< 1 ,dealii::Vector< float >, 1 >
 (parallel::distributed::Triangulation< 1 > &,
 const dealii::Vector< float > &,
 const double,
 const double);
 }
 }
}
#endif

#if  2  != 1
namespace parallel
{
 namespace distributed
 {
 namespace GridRefinement
 {
 template
 void
 refine_and_coarsen_fixed_number< 2 ,dealii::Vector< float >, 2 >
 (parallel::distributed::Triangulation< 2 > &,
 const dealii::Vector< float > &,
 const double,
 const double);

 template
 void
 refine_and_coarsen_fixed_fraction< 2 ,dealii::Vector< float >, 2 >
 (parallel::distributed::Triangulation< 2 > &,
 const dealii::Vector< float > &,
 const double,
 const double);
 }
 }
}
#endif

#if  3  != 1
namespace parallel
{
 namespace distributed
 {
 namespace GridRefinement
 {
 template
 void
 refine_and_coarsen_fixed_number< 3 ,dealii::Vector< float >, 3 >
 (parallel::distributed::Triangulation< 3 > &,
 const dealii::Vector< float > &,
 const double,
 const double);

 template
 void
 refine_and_coarsen_fixed_fraction< 3 ,dealii::Vector< float >, 3 >
 (parallel::distributed::Triangulation< 3 > &,
 const dealii::Vector< float > &,
 const double,
 const double);
 }
 }
}
#endif

#if  1  != 1
namespace parallel
{
 namespace distributed
 {
 namespace GridRefinement
 {
 template
 void
 refine_and_coarsen_fixed_number< 1 ,dealii::Vector< long double >, 1 >
 (parallel::distributed::Triangulation< 1 > &,
 const dealii::Vector< long double > &,
 const double,
 const double);

 template
 void
 refine_and_coarsen_fixed_fraction< 1 ,dealii::Vector< long double >, 1 >
 (parallel::distributed::Triangulation< 1 > &,
 const dealii::Vector< long double > &,
 const double,
 const double);
 }
 }
}
#endif

#if  2  != 1
namespace parallel
{
 namespace distributed
 {
 namespace GridRefinement
 {
 template
 void
 refine_and_coarsen_fixed_number< 2 ,dealii::Vector< long double >, 2 >
 (parallel::distributed::Triangulation< 2 > &,
 const dealii::Vector< long double > &,
 const double,
 const double);

 template
 void
 refine_and_coarsen_fixed_fraction< 2 ,dealii::Vector< long double >, 2 >
 (parallel::distributed::Triangulation< 2 > &,
 const dealii::Vector< long double > &,
 const double,
 const double);
 }
 }
}
#endif

#if  3  != 1
namespace parallel
{
 namespace distributed
 {
 namespace GridRefinement
 {
 template
 void
 refine_and_coarsen_fixed_number< 3 ,dealii::Vector< long double >, 3 >
 (parallel::distributed::Triangulation< 3 > &,
 const dealii::Vector< long double > &,
 const double,
 const double);

 template
 void
 refine_and_coarsen_fixed_fraction< 3 ,dealii::Vector< long double >, 3 >
 (parallel::distributed::Triangulation< 3 > &,
 const dealii::Vector< long double > &,
 const double,
 const double);
 }
 }
}
#endif

