# ifdef DEAL_II_WITH_P4EST

 namespace internal
 {
 namespace p4est
 {
#if  1  > 1
 template
 void
 init_quadrant_children< 1 >
 (const types< 1 >::quadrant & p4est_cell,
 types< 1 >::quadrant (&p4est_children)[GeometryInfo< 1 >::max_children_per_cell]);

 template
 void
 init_coarse_quadrant< 1 >
 (types< 1 >::quadrant & quad);

 template
 bool
 quadrant_is_equal< 1 >
 (const types< 1 >::quadrant & q1,
 const types< 1 >::quadrant & q2);

 template
 bool
 quadrant_is_ancestor< 1 >
 (const types< 1 >::quadrant & q1,
 const types< 1 >::quadrant & q2);
# endif
 }
 }
# endif 

 namespace parallel
 {
 namespace distributed
 {
 template class Triangulation< 1 >;
# if  1  < 3
 template class Triangulation< 1 ,  1 +1>;
# endif
# if  1  < 2
 template class Triangulation< 1 ,  1 +2>;
# endif
 }
 }

 
# ifdef DEAL_II_WITH_P4EST

 namespace internal
 {
 namespace p4est
 {
#if  2  > 1
 template
 void
 init_quadrant_children< 2 >
 (const types< 2 >::quadrant & p4est_cell,
 types< 2 >::quadrant (&p4est_children)[GeometryInfo< 2 >::max_children_per_cell]);

 template
 void
 init_coarse_quadrant< 2 >
 (types< 2 >::quadrant & quad);

 template
 bool
 quadrant_is_equal< 2 >
 (const types< 2 >::quadrant & q1,
 const types< 2 >::quadrant & q2);

 template
 bool
 quadrant_is_ancestor< 2 >
 (const types< 2 >::quadrant & q1,
 const types< 2 >::quadrant & q2);
# endif
 }
 }
# endif 

 namespace parallel
 {
 namespace distributed
 {
 template class Triangulation< 2 >;
# if  2  < 3
 template class Triangulation< 2 ,  2 +1>;
# endif
# if  2  < 2
 template class Triangulation< 2 ,  2 +2>;
# endif
 }
 }

 
# ifdef DEAL_II_WITH_P4EST

 namespace internal
 {
 namespace p4est
 {
#if  3  > 1
 template
 void
 init_quadrant_children< 3 >
 (const types< 3 >::quadrant & p4est_cell,
 types< 3 >::quadrant (&p4est_children)[GeometryInfo< 3 >::max_children_per_cell]);

 template
 void
 init_coarse_quadrant< 3 >
 (types< 3 >::quadrant & quad);

 template
 bool
 quadrant_is_equal< 3 >
 (const types< 3 >::quadrant & q1,
 const types< 3 >::quadrant & q2);

 template
 bool
 quadrant_is_ancestor< 3 >
 (const types< 3 >::quadrant & q1,
 const types< 3 >::quadrant & q2);
# endif
 }
 }
# endif 

 namespace parallel
 {
 namespace distributed
 {
 template class Triangulation< 3 >;
# if  3  < 3
 template class Triangulation< 3 ,  3 +1>;
# endif
# if  3  < 2
 template class Triangulation< 3 ,  3 +2>;
# endif
 }
 }

 
