template class TriaAccessorBase<1, 1 >;
#if  1  >= 2
 template class TriaAccessorBase<2, 1 >;
#endif
#if  1  >= 3
 template class TriaAccessorBase<3, 1 >;
#endif

 template class TriaAccessor<1, 1 , 1 >;
#if  1  >= 2
 template class TriaAccessor<2, 1 , 1 >;
#endif
#if  1  >= 3
 template class TriaAccessor<3, 1 , 1 >;
#endif


 template class CellAccessor< 1 >;
 template class TriaRawIterator<TriaAccessor<1,  1 ,  1 > >;
 template class TriaRawIterator<CellAccessor< 1 > >;
 template class TriaIterator<TriaAccessor<1,  1 ,  1 > >;
 template class TriaIterator<CellAccessor< 1 > >;
 template class TriaActiveIterator<TriaAccessor<1,  1 ,  1 > >;
 template class TriaActiveIterator<CellAccessor< 1 > >;


#if  1  >= 2
 template class TriaRawIterator<TriaAccessor<2,  1 ,  1 > >;
 template class TriaIterator<TriaAccessor<2,  1 ,  1 > >;
 template class TriaActiveIterator<TriaAccessor<2,  1 ,  1 > >;
#endif

#if  1  >= 3
 template class TriaRawIterator<TriaAccessor<3,  1 ,  1 > >;
 template class TriaIterator<TriaAccessor<3,  1 ,  1 > >;
 template class TriaActiveIterator<TriaAccessor<3,  1 ,  1 > >;
 template class CellAccessor<1, 3>;
#endif

#if  1  == 1
 template class TriaAccessorBase<1, 1 ,2>;
 template class TriaAccessorBase<1, 1 ,3>;

 template class TriaAccessor<1, 1 ,2>;
 template class TriaAccessor<1, 1 ,3>;
 

#endif
#if  1  == 2
 template class TriaAccessorBase<1, 1 ,3>;
 template class TriaAccessorBase<2, 1 ,3>;

 template class TriaAccessor<1, 1 ,3>;
 template class TriaAccessor<2, 1 ,3>;
#endif

#if  1  != 3
 template class CellAccessor< 1 ,  1 +1>;
 template class TriaRawIterator<TriaAccessor<1,  1 ,  1 +1> >;
 template class TriaRawIterator<CellAccessor< 1 ,  1 +1> >;
 template class TriaIterator<TriaAccessor<1,  1 ,  1 +1> >;
 template class TriaIterator<CellAccessor< 1 ,  1 +1> >;
 template class TriaActiveIterator<TriaAccessor<1,  1 ,  1 +1> >;
 template class TriaActiveIterator<CellAccessor< 1 ,  1 +1> >;


#if  1  == 2
 template class TriaRawIterator<TriaAccessor<2,  1 ,  1 +1> >;
 template class TriaIterator<TriaAccessor<2,  1 ,  1 +1> >;
 template class TriaActiveIterator<TriaAccessor<2,  1 ,  1 +1> >;
#endif

#endif
 
template class TriaAccessorBase<1, 2 >;
#if  2  >= 2
 template class TriaAccessorBase<2, 2 >;
#endif
#if  2  >= 3
 template class TriaAccessorBase<3, 2 >;
#endif

 template class TriaAccessor<1, 2 , 2 >;
#if  2  >= 2
 template class TriaAccessor<2, 2 , 2 >;
#endif
#if  2  >= 3
 template class TriaAccessor<3, 2 , 2 >;
#endif


 template class CellAccessor< 2 >;
 template class TriaRawIterator<TriaAccessor<1,  2 ,  2 > >;
 template class TriaRawIterator<CellAccessor< 2 > >;
 template class TriaIterator<TriaAccessor<1,  2 ,  2 > >;
 template class TriaIterator<CellAccessor< 2 > >;
 template class TriaActiveIterator<TriaAccessor<1,  2 ,  2 > >;
 template class TriaActiveIterator<CellAccessor< 2 > >;


#if  2  >= 2
 template class TriaRawIterator<TriaAccessor<2,  2 ,  2 > >;
 template class TriaIterator<TriaAccessor<2,  2 ,  2 > >;
 template class TriaActiveIterator<TriaAccessor<2,  2 ,  2 > >;
#endif

#if  2  >= 3
 template class TriaRawIterator<TriaAccessor<3,  2 ,  2 > >;
 template class TriaIterator<TriaAccessor<3,  2 ,  2 > >;
 template class TriaActiveIterator<TriaAccessor<3,  2 ,  2 > >;
 template class CellAccessor<1, 3>;
#endif

#if  2  == 1
 template class TriaAccessorBase<1, 2 ,2>;
 template class TriaAccessorBase<1, 2 ,3>;

 template class TriaAccessor<1, 2 ,2>;
 template class TriaAccessor<1, 2 ,3>;
 

#endif
#if  2  == 2
 template class TriaAccessorBase<1, 2 ,3>;
 template class TriaAccessorBase<2, 2 ,3>;

 template class TriaAccessor<1, 2 ,3>;
 template class TriaAccessor<2, 2 ,3>;
#endif

#if  2  != 3
 template class CellAccessor< 2 ,  2 +1>;
 template class TriaRawIterator<TriaAccessor<1,  2 ,  2 +1> >;
 template class TriaRawIterator<CellAccessor< 2 ,  2 +1> >;
 template class TriaIterator<TriaAccessor<1,  2 ,  2 +1> >;
 template class TriaIterator<CellAccessor< 2 ,  2 +1> >;
 template class TriaActiveIterator<TriaAccessor<1,  2 ,  2 +1> >;
 template class TriaActiveIterator<CellAccessor< 2 ,  2 +1> >;


#if  2  == 2
 template class TriaRawIterator<TriaAccessor<2,  2 ,  2 +1> >;
 template class TriaIterator<TriaAccessor<2,  2 ,  2 +1> >;
 template class TriaActiveIterator<TriaAccessor<2,  2 ,  2 +1> >;
#endif

#endif
 
template class TriaAccessorBase<1, 3 >;
#if  3  >= 2
 template class TriaAccessorBase<2, 3 >;
#endif
#if  3  >= 3
 template class TriaAccessorBase<3, 3 >;
#endif

 template class TriaAccessor<1, 3 , 3 >;
#if  3  >= 2
 template class TriaAccessor<2, 3 , 3 >;
#endif
#if  3  >= 3
 template class TriaAccessor<3, 3 , 3 >;
#endif


 template class CellAccessor< 3 >;
 template class TriaRawIterator<TriaAccessor<1,  3 ,  3 > >;
 template class TriaRawIterator<CellAccessor< 3 > >;
 template class TriaIterator<TriaAccessor<1,  3 ,  3 > >;
 template class TriaIterator<CellAccessor< 3 > >;
 template class TriaActiveIterator<TriaAccessor<1,  3 ,  3 > >;
 template class TriaActiveIterator<CellAccessor< 3 > >;


#if  3  >= 2
 template class TriaRawIterator<TriaAccessor<2,  3 ,  3 > >;
 template class TriaIterator<TriaAccessor<2,  3 ,  3 > >;
 template class TriaActiveIterator<TriaAccessor<2,  3 ,  3 > >;
#endif

#if  3  >= 3
 template class TriaRawIterator<TriaAccessor<3,  3 ,  3 > >;
 template class TriaIterator<TriaAccessor<3,  3 ,  3 > >;
 template class TriaActiveIterator<TriaAccessor<3,  3 ,  3 > >;
 template class CellAccessor<1, 3>;
#endif

#if  3  == 1
 template class TriaAccessorBase<1, 3 ,2>;
 template class TriaAccessorBase<1, 3 ,3>;

 template class TriaAccessor<1, 3 ,2>;
 template class TriaAccessor<1, 3 ,3>;
 

#endif
#if  3  == 2
 template class TriaAccessorBase<1, 3 ,3>;
 template class TriaAccessorBase<2, 3 ,3>;

 template class TriaAccessor<1, 3 ,3>;
 template class TriaAccessor<2, 3 ,3>;
#endif

#if  3  != 3
 template class CellAccessor< 3 ,  3 +1>;
 template class TriaRawIterator<TriaAccessor<1,  3 ,  3 +1> >;
 template class TriaRawIterator<CellAccessor< 3 ,  3 +1> >;
 template class TriaIterator<TriaAccessor<1,  3 ,  3 +1> >;
 template class TriaIterator<CellAccessor< 3 ,  3 +1> >;
 template class TriaActiveIterator<TriaAccessor<1,  3 ,  3 +1> >;
 template class TriaActiveIterator<CellAccessor< 3 ,  3 +1> >;


#if  3  == 2
 template class TriaRawIterator<TriaAccessor<2,  3 ,  3 +1> >;
 template class TriaIterator<TriaAccessor<2,  3 ,  3 +1> >;
 template class TriaActiveIterator<TriaAccessor<2,  3 ,  3 +1> >;
#endif

#endif
 
